(*

//
// API - Aplication Programing Interface
//
//
// ECF em SC
//
// 26.000 Empresas
// 43.000 Impressoras fiscais
// 12.000 Empresas irregulares
//
// Fonte Rogério Mello / Sede da Associação dos Contadores Florianópolis.
// Setembro de 2008
//

// Fonte Gean Suportvile
// Agosto de 2 0 1 3
//
//SC 78793
//PR 59582
//MS 16111
//RJ 146000
//GO 63000
//PE 53000
//ES 40000
//RN 22000
//MR 16500
//RR 4000
//

http://www.planetadelphi.com.br/dica/7487/-shell_notifyicon-e-notifyicondata--

Código modelo ECF suportadas
13	Bematech MP 20 Fi II
13	Bematech MP 40 Fi II
13	Bematech MP 25 Fi
13	Bematech MP 20 Fi
02	Bematech MP 2000 TH Fi
02	Bematech MP 2100 TH Fi
02	Bematech MP 3000 TH Fi
02	Bematech MP 4000 TH Fi
03	Daruma FS700, FS600 e 345
17  Daruma Framework
12	Dataregis
12	Elgin Fit Logger
12	Elgin X5
12	ZPM Fit Logger
12	Urano Fit Logger
07	Urano 1ECF / 1EF
07	ZPM 1ECF
04	Elgin FCP-500
15	Epson TM T81 FBII
15	Epson TM T88
14	Sweda ST100
14	Sweda ST120   

ALTER TABLE ALTERACA
    ADD SEQUENCIALCONTACLIENTEOS VARCHAR(10)

CREATE SEQUENCE G_SEQUENCIALCONTACLIENTEOS
*)

//
// Aplicativo Frente de Caixa
// Desenvolvido por Ronei Ivo Weber
// A partir de 2015 mantido por Sandro Luis da Silva
//
//

(*
https://www.softwareexpress.com.br/pt/solucoes/SiTef/pix/
https://www.softwareexpress.com.br/pt/blog/lista-de-integracao-de-psps-da-software-express/
*)


unit fiscal;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  ExtCtrls, StdCtrls, Printers, OleCtrls, ShellAPI, Mask, Variants, Winsock
  , Db, DBCtrls, DBTables, DBClient, DBGrids, Registry, Types, SysConst
  , Buttons, IniFiles, Clipbrd, Menus, Grids, FileCtrl, jpeg, ComCtrls
  , MidasLib, StrUtils, DateUtils, ShlObj, ActiveX, ComObj, SHDocVw, Math
  {$IFDEF VER150}
  , IBDatabase, IBCustomDataSet, IBDatabaseInfo, IBQuery, IBExtract
  {$ELSE}
  , IBX.IBDatabase, IBX.IBCustomDataSet, IBX.IBDatabaseInfo, IBX.IBQuery, IBX.IBExtract
  {$ENDIF}
  , MD5, LbRSA, LbAsym, LbDSA, LbClass, LbCipher, LbUtils
  , htmlhelp
  , TLHelp32
  , UrlMon
  , spdNFCeDataSets, spdNFCeType, spdNFCe, TypInfo // Informações de componentes Sandro Silva 2016-08-01

  , IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, IdSSLOpenSSL, IdMultipartFormData, IdHTTP

  , frame_teclado_1
  , ufuncoesfrente // Sandro Silva 2018-07-03
  , uclassetransacaocartao // Sandro Silva 2017-06-14
  , umfe
  , usmall_elginpay_pos
  , usincronizamobile
  ;

  const MARGEM_ESQUERDA_OBJ = 14; // Sandro Silva 2021-07-29 // 15

  const WM_TRAYICON = WM_USER + 1; //Sandro Silva 2015-05-25
  const CHAVE_PESQUISA_CONTENDO         = 'Pesquisa contendo';
  const TIPO_PESQUISA_ESTOQUE_INICIANDO = 'Pesquisar estoque iniciando com o texto digitado';
  const TIPO_PESQUISA_ESTOQUE_CONTENDO  = 'Pesquisar estoque contendo o texto digitado';

  {Sandro Silva 2022-08-15 inicio
  const FORMA_PAGAMENTO_A_VISTA         = 'A VISTA';
  const FORMA_PAGAMENTO_BOLETO          = 'BOLETO';
  const FORMA_PAGAMENTO_CARTAO          = 'CARTAO';
  const FORMA_PAGAMENTO_CHEQUE          = 'CHEQUE'; // Sandro Silva 2016-04-19
  }
{Sandro Silva 2022-11-22 inicio
  const VERSAO_ER_PAF_ECF               = '02.06'; // ER 02.06 Sandro Silva 2019-06-19  '02.05'; // Sandro Silva 2017-07-24 ER 02.05 '02.03';
  const NUMERO_LAUDO_PAF_ECF            = 'UNO3302019';
}
  const INFORME_CPF_OU_CNPJ             = 'Informe o CPF ou o CNPJ válido:'; // 2015-09-16

  const CRIPTA_SECAO_ECFS_AUTORIZADAS   = 'R24_4';
  const FILECONEXAO                     = '2.php';//'1.php';
  const SIGLA_CLISTSERV                 = 'CLISTSERV';
  const TIPOMOBILE                      = '<mobile>';
  const TIPOCONTINGENCIA                = '<contingencia>';
  const MSG_INTERVENCAO_OPERADOR        = 'Solicite intervenção do operador do PDV para finalizar a venda';
  const TRACO_CUPOM_TELA                = '---------------------------------------------';
  const DIRETORIO_BKP_TEF               = 'c:\TEFBKP';
  const PARCELAS_EM_CARTAO              = 'PARCELAS';
  const IMPRESSORA_PADRAO_WINDOWS       = 'Padrão Windows';
  const TAMANHO_REFERENCIA_ARQUIVO_LOGOTIPO = 307200;
  const TITULO_PARCELAS_CARNE_RESUMIDO  = 'Documento   Vencimento    Valor R$ '; // Interfere no título relat. gerencial para venda a prazo Sandro Silva 2018-04-29
  const PESO_REQUISITA_PESO    = 0; // Sandro Silva 2019-01-30
  const PESO_RECEBIDO_PROCESSA = 1; // Sandro Silva 2019-01-30
  const PESO_PROCESSAMENTO_FIM = 2; // Sandro Silva 2019-01-30

  const TITULO_FORM_SANGRIA = 'Retirada de caixa';

  procedure ExibeScrollCupom(bVisible: Boolean); // Sandro Silva 2016-08-03
  function Audita(sAto, sModulo, sUsuario, sHistorico: String; ValorDe, ValorPara: Double): Boolean;
  function ValidaOffLine(Mais1Ini: TIniFile; bCargaNova: Boolean;
    url, IP, Alias: String; Hora, Min, Seg, cent: Word; tInicio: tTime): Boolean;
  function AbreArquivos(pP1: Boolean): Boolean;
  function ValorTotalDoDia(pP1: Boolean): Boolean;
  function SmallCripto(pP1: String): String;
  function Commitatudo(P1:Boolean): Boolean;
  function Commitatudo2(P1:Boolean): Boolean;
  function sTatusRede(pP1: Boolean; pP2: Integer): Boolean;
  function sTatusECF(pP1: Boolean; pP2: Integer): Boolean;
  function sTatusFiscal(pP1: Boolean; pP2: Integer): Boolean;
  function CupomComCaixaFormatado: String;
  function FormataReceberDocumento(iSequencia: Integer): String;
  function CriaIBTransaction(IBDATABASE: TIBDatabase): TIBTransaction;
  function IncGenerator(IBDataBase: TIBDatabase; sGenerator: String;
    iQtd: Integer = 1): String;
  function SalvarConfiguracao(sArquivoIni: String; SecaoIni: String;
    ChaveIni: String; Valor: String): Boolean;
  function NumeroCupom: String;
  function MensagemPromocionalDefault: String;
// Sandro Silva 2022-09-08  function Build: String;
  function Copyright: String;
  function Consumo: Boolean;
  function AssinaRegistro(pNome: String; DataSet: TDataSet; bAssina: Boolean): Boolean; // 2015-10-16
  function AssinaRegistroE2(sTexto: String): String; // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco
  function HasHs(sP1: String; bP2: Boolean): boolean; // Sandro Silva 2016-02-26
  procedure AjustaLarguraDBGrid(DBGrid: TDBGrid);
  function ContaCasasDecimais(dValor: Double): Integer;
  function IniciaHashOffLine(sp1: String): Boolean;
  //
  // Restauranteria
  //
  function Mesas(pP1: Integer) : Boolean;
  function GravaUltimaReducao(pP1: boolean): boolean;
  function MD5_Da_Lista(P1: Boolean): boolean;
  function genkkey( cChavePublica: String; cChavePrivada: String ): integer; stdcall; external 'sign_bema.dll';
  function setLibType( iTipo: integer ): integer; stdcall; external 'sign_bema.dll';
  function generateEAD( cNomeArquivo: String; cChavePublica: String; cChavePrivada: String; cEAD:String; iSign: Integer): integer; stdcall; external 'sign_bema.dll';
  function validateFile( cNomeArquivo: String; cChavePublica: String; cChavePrivada: String ): integer; stdcall; external 'sign_bema.dll';

type
  TMyDBGrid = class(TDBGrid)
end;

type
  TForm1 = class(TForm)
    ibDataSet4: TibDataSet;
    DataSource4: TDataSource;
    Button18: TButton;
    Button4: TButton;
    Button2: TButton;
    Button6: TButton;
    ibDataSet27: TibDataSet;
    DataSource27: TDataSource;
    ibDataSet27CODIGO: TStringField;
    ibDataSet27DESCRICAO: TStringField;
    ibDataSet27QUANTIDADE: TFloatField;
    ibDataSet27UNITARIO: TFloatField;
    ibDataSet27DATA: TDateField;
    ibDataSet27TIPO: TStringField;
    ibDataSet27PEDIDO: TStringField;
    ibDataSet27CLIFOR: TStringField;
    ibDataSet27VENDEDOR: TStringField;
    ibDataSet27TOTAL: TFloatField;
    ibDataSet1: TibDataSet;
    ibDataSet1DATA: TDateField;
    ibDataSet1NOME: TStringField;
    ibDataSet1HISTORICO: TStringField;
    ibDataSet1ENTRADA: TFloatField;
    ibDataSet1SAIDA: TFloatField;
    ibDataSet1SALDO: TFloatField;
    ibDataSet1CONTA: TStringField;
    DataSource1: TDataSource;
    Button7: TButton;
    ibDataSet2: TibDataSet;
    DataSource2: TDataSource;
    ibDataSet7: TibDataSet;
    ibDataSet7HISTORICO: TStringField;
    ibDataSet7DOCUMENTO: TStringField;
    ibDataSet7NOME: TStringField;
    ibDataSet7EMISSAO: TDateField;
    ibDataSet7VENCIMENTO: TDateField;
    ibDataSet7VALOR_DUPL: TFloatField;
    ibDataSet7RECEBIMENT: TDateField;
    ibDataSet7VALOR_RECE: TFloatField;
    ibDataSet7VALOR_JURO: TFloatField;
    ibDataSet7PORTADOR: TStringField;
    DataSource7: TDataSource;
    ibDataSet25: TibDataSet;
    ibDataSet25ACUMULADO1: TFloatField;
    ibDataSet25ACUMULADO2: TFloatField;
    ibDataSet25ACUMULADO3: TFloatField;
    DataSource25: TDataSource;
    Button9: TButton;
    PopupMenu1: TPopupMenu;
    Cadastraraliquota1: TMenuItem;
    Ligardesligarhorriodevero1: TMenuItem;
    Sangria1: TMenuItem;
    N1: TMenuItem;
    RetornodeVariveisdaImpressora1: TMenuItem;
    Mensagempromocional1: TMenuItem;
    N4: TMenuItem;
    Sairdosistema1: TMenuItem;
    N5: TMenuItem;
    Sobreoprograma1: TMenuItem;
    Fechamentodocaixa1: TMenuItem;
    NmerodeSrie1: TMenuItem;
    VersodoFirmware1: TMenuItem;
    CGCIE1: TMenuItem;
    Cancelamentos1: TMenuItem;
    Descontos1: TMenuItem;
    ContadorSeqencial1: TMenuItem;
    Nmdeoperaesnofiscais1: TMenuItem;
    NmdeCuponscancelados1: TMenuItem;
    NmdeRedues1: TMenuItem;
    Nmdeintervenestcnicas1: TMenuItem;
    Nmdesubstituiesdeproprietrio1: TMenuItem;
    Clichdoproprietrio1: TMenuItem;
    NmdoCaixa1: TMenuItem;
    Nmdaloja1: TMenuItem;
    Moeda1: TMenuItem;
    Dataehoradaimpressora1: TMenuItem;
    Datadaultimareduo1: TMenuItem;
    Datadomovimento1: TMenuItem;
    Tipodaimpressora1: TMenuItem;
    ibDataSet14: TibDataSet;
    DataSource14: TDataSource;
    ibDataSet13: TibDataSet;
    ibDataSet13NOME: TStringField;
    ibDataSet13CONTATO: TStringField;
    ibDataSet13ENDERECO: TStringField;
    ibDataSet13COMPLE: TStringField;
    ibDataSet13MUNICIPIO: TStringField;
    ibDataSet13CEP: TStringField;
    ibDataSet13ESTADO: TStringField;
    ibDataSet13CGC: TStringField;
    ibDataSet13IE: TStringField;
    DataSource13: TDataSource;
    ibDataSet25RECEBER: TFloatField;
    ibDataSet9: TibDataSet;
    ibDataSet9NOME: TStringField;
    ibDataSet9COMISSA1: TFloatField;
    ibDataSet9COMISSA2: TFloatField;
    DataSource9: TDataSource;
    ibDataSet27CAIXA: TStringField;
    ibDataSet25PAGAR: TFloatField;
    N2: TMenuItem;
    FunesadministrativasTEF1: TMenuItem;
    N6: TMenuItem;
    ColorDialog1: TColorDialog;
    ibDataset88: TibDataSet;
    ibDataset30: TibDataSet;
    DataSource3: TDataSource;
    ibDataSet25DATA: TDateField;
    ibDataSet25DIFERENCA_: TFloatField;
    ibDataSet10: TibDataSet;
    ibDataSet10CODIGO: TStringField;
    ibDataSet10COR: TStringField;
    ibDataSet10TAMANHO: TStringField;
    ibDataSet10QTD: TStringField;
    ibDataSet10ENTRADAS: TStringField;
    DataSource10: TDataSource;
    Relatriodetributao1: TMenuItem;
    ibDataSet27VALORICM: TFloatField;
    Configuraesgerais1: TMenuItem;
    Gaveta1: TMenuItem;
    Vias1: TMenuItem;
    ibDataSet25VALOR01: TFloatField;
    ibDataSet25VALOR02: TFloatField;
    ibDataSet25VALOR03: TFloatField;
    ibDataSet25VALOR04: TFloatField;
    ibDataSet25VALOR05: TFloatField;
    ibDataSet25VALOR06: TFloatField;
    ibDataSet25VALOR07: TFloatField;
    ibDataSet25VALOR08: TFloatField;
    ibDataSet25VALOR09: TFloatField;
    ibDataSet25VALOR10: TFloatField;
    Formasdepagamento1: TMenuItem;
    ibDataSet25VALOR_1: TFloatField;
    ibDataSet25VALOR_2: TFloatField;
    ibDataSet25VALOR_3: TFloatField;
    ibDataSet25VALOR_4: TFloatField;
    Bloqueioporsenha1: TMenuItem;
    ibDataSet27ALIQUICM: TStringField;
    ibDataSet29: TibDataSet;
    ibDataSet29NOME: TStringField;
    ibDataSet29DESCONTO: TFloatField;
    DataSource29: TDataSource;
    DataSource30: TDataSource;
    Balana1: TMenuItem;
    ibDataSet27MEDIDA: TStringField;
    GrandetotalGT1: TMenuItem;
    Vendabrutadodia1: TMenuItem;
    EF1: TMenuItem;
    Controledecheque1: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    TecladoGERTEC1: TMenuItem;
    IBDatabase1: TIBDatabase;
    IBTransaction1: TIBTransaction;
    ibDataSet7ATIVO: TSmallintField;
    ibDataSet7CONTA: TIBStringField;
    ibDataSet7NOSSONUM: TIBStringField;
    ibDataSet7CODEBAR: TIBStringField;
    ibDataSet7NUMERONF: TIBStringField;
    ibDataSet7REGISTRO: TIBStringField;
    ibDataSet1REGISTRO: TIBStringField;
    ibDataSet4CODIGO: TIBStringField;
    ibDataSet4REFERENCIA: TIBStringField;
    ibDataSet4DESCRICAO: TIBStringField;
    ibDataSet4NOME: TIBStringField;
    ibDataSet4FORNECEDOR: TIBStringField;
    ibDataSet4MEDIDA: TIBStringField;
    ibDataSet4PRECO: TFloatField;
    ibDataSet4INDEXADOR: TFloatField;
    ibDataSet4CUSTOCOMPR: TFloatField;
    ibDataSet4CUSTOMEDIO: TFloatField;
    ibDataSet4QTD_COMPRA: TFloatField;
    ibDataSet4QTD_ATUAL: TFloatField;
    ibDataSet4QTD_MINIM: TFloatField;
    ibDataSet4QTD_INICIO: TFloatField;
    ibDataSet4DAT_INICIO: TDateField;
    ibDataSet4ULT_COMPRA: TDateField;
    ibDataSet4ULT_VENDA: TDateField;
    ibDataSet4LIVRE1: TIBStringField;
    ibDataSet4LIVRE2: TIBStringField;
    ibDataSet4LIVRE3: TIBStringField;
    ibDataSet4LIVRE4: TIBStringField;
    ibDataSet4PESO: TFloatField;
    ibDataSet4LOCAL: TIBStringField;
    ibDataSet4CF: TIBStringField;
    ibDataSet4IPI: TFloatField;
    ibDataSet4CST: TIBStringField;
    ibDataSet4ST: TIBStringField;
    ibDataSet4COMISSAO: TFloatField;
    ibDataSet4OBS: TIBStringField;
    ibDataSet4QTD_VEND: TFloatField;
    ibDataSet4CUS_VEND: TFloatField;
    ibDataSet4VAL_VEND: TFloatField;
    ibDataSet4LUC_VEND: TFloatField;
    ibDataSet4ATIVO: TSmallintField;
    ibDataSet4MARGEMLB: TFloatField;
    ibDataSet4ALTERADO: TSmallintField;
    ibDataSet4SERIE: TSmallintField;
    ibDataSet4FOTO: TMemoField;
    ibDataSet4REGISTRO: TIBStringField;
    ibDataSet27REGISTRO: TIBStringField;
    ibDataSet29RAZAO: TIBStringField;
    ibDataSet29FONE: TIBStringField;
    ibDataSet29EMAIL: TIBStringField;
    ibDataSet29REGISTRO: TIBStringField;
    ibDataset88DATA: TDateField;
    ibDataset88PDV: TIBStringField;
    ibDataset88SERIE: TIBStringField;
    ibDataset88CUPOMI: TIBStringField;
    ibDataset88CUPOMF: TIBStringField;
    ibDataset88CONTADORZ: TIBStringField;
    ibDataset88TOTALI: TFloatField;
    ibDataset88TOTALF: TFloatField;
    ibDataset88ALIQUOTA01: TFloatField;
    ibDataset88ALIQUOTA02: TFloatField;
    ibDataset88ALIQUOTA03: TFloatField;
    ibDataset88ALIQUOTA04: TFloatField;
    ibDataset88ALIQUOTA05: TFloatField;
    ibDataset88ALIQUOTA06: TFloatField;
    ibDataset88ALIQUOTA07: TFloatField;
    ibDataset88ALIQUOTA08: TFloatField;
    ibDataset88ALIQUOTA09: TFloatField;
    ibDataset88ALIQUOTA10: TFloatField;
    ibDataset88ALIQUOTA11: TFloatField;
    ibDataset88ALIQUOTA12: TFloatField;
    ibDataset88ALIQUOTA13: TFloatField;
    ibDataset88ALIQUOTA14: TFloatField;
    ibDataset88ALIQUOTA15: TFloatField;
    ibDataset88ALIQUOTA16: TFloatField;
    ibDataset88ALIQUOTA17: TFloatField;
    ibDataset88ALIQUOTA18: TFloatField;
    ibDataset88ALIQUOTA19: TFloatField;
    ibDataset88ALIQU01: TIBStringField;
    ibDataset88ALIQU02: TIBStringField;
    ibDataset88ALIQU03: TIBStringField;
    ibDataset88ALIQU04: TIBStringField;
    ibDataset88ALIQU05: TIBStringField;
    ibDataset88ALIQU06: TIBStringField;
    ibDataset88ALIQU07: TIBStringField;
    ibDataset88ALIQU08: TIBStringField;
    ibDataset88ALIQU09: TIBStringField;
    ibDataset88ALIQU10: TIBStringField;
    ibDataset88ALIQU11: TIBStringField;
    ibDataset88ALIQU12: TIBStringField;
    ibDataset88ALIQU13: TIBStringField;
    ibDataset88ALIQU14: TIBStringField;
    ibDataset88ALIQU15: TIBStringField;
    ibDataset88ALIQU16: TIBStringField;
    ibDataset88CANCELAMEN: TFloatField;
    ibDataset88DESCONTOS: TFloatField;
    ibDataset88ISSQN: TFloatField;
    ibDataset88REGISTRO: TIBStringField;
    IBDataSet99: TIBDataSet;
    ibDataSet25REGISTRO: TIBStringField;
    OpenDialog1: TOpenDialog;
    Edit1: TEdit;
    ibDataSet27ITEM: TIBStringField;
    IBDatabaseInfo1: TIBDatabaseInfo;
    ibDataSet37: TIBDataSet;
    ibDataSet37CODIGO: TStringField;
    ibDataSet37DESCRICAO: TStringField;
    ibDataSet37QUANTIDADE: TFloatField;
    ibDataSet37UNITARIO: TFloatField;
    ibDataSet37TOTAL: TFloatField;
    ibDataSet37DATA: TDateField;
    ibDataSet37TIPO: TStringField;
    ibDataSet37PEDIDO: TStringField;
    ibDataSet37CLIFOR: TStringField;
    ibDataSet37VENDEDOR: TStringField;
    ibDataSet37CAIXA: TStringField;
    ibDataSet37MEDIDA: TIBStringField;
    ibDataSet37ITEM: TIBStringField;
    ibDataSet37VALORICM: TFloatField;
    ibDataSet37ALIQUICM: TIBStringField;
    ibDataSet37REGISTRO: TIBStringField;
    Button1: TButton;
    ibDataSet16: TIBDataSet;
    ibDataSet16NUMERONF: TStringField;
    ibDataSet16CODIGO: TStringField;
    ibDataSet16DESCRICAO: TStringField;
    ibDataSet16IPI: TFloatField;
    ibDataSet16ICM: TFloatField;
    ibDataSet16MEDIDA: TStringField;
    ibDataSet16QUANTIDADE: TFloatField;
    ibDataSet16UNITARIO: TFloatField;
    ibDataSet16LISTA: TFloatField;
    ibDataSet16CUSTO: TFloatField;
    ibDataSet16TOTAL: TFloatField;
    ibDataSet16PESO: TFloatField;
    ibDataSet16ISS: TFloatField;
    ibDataSet16BASE: TFloatField;
    ibDataSet16BASEISS: TFloatField;
    ibDataSet16ALIQUOTA: TFloatField;
    ibDataSet16ST: TStringField;
    ibDataSet16CFOP: TStringField;
    ibDataSet16NUMEROOS: TStringField;
    ibDataSet16SINCRONIA: TFloatField;
    ibDataSet16REGISTRO: TIBStringField;
    ibDataSet35: TIBDataSet;
    ibDataSet35NUMERONF: TStringField;
    ibDataSet35CODIGO: TStringField;
    ibDataSet35DESCRICAO: TStringField;
    ibDataSet35TECNICO: TStringField;
    ibDataSet35MEDIDA: TStringField;
    ibDataSet35QUANTIDADE: TFloatField;
    ibDataSet35UNITARIO: TFloatField;
    ibDataSet35TOTAL: TFloatField;
    ibDataSet35CFOP: TStringField;
    ibDataSet35ISS: TFloatField;
    ibDataSet35BASEISS: TFloatField;
    ibDataSet35NUMEROOS: TStringField;
    ibDataSet35REGISTRO: TIBStringField;
    SuprimentoReforodecaixa1: TMenuItem;
    IBTransaction2: TIBTransaction;
    SaveDialog1: TSaveDialog;
    N11: TMenuItem;
    Identificaconsumidor1: TMenuItem;
    IBDataSet100: TIBDataSet;
    Planodecontas1: TMenuItem;
    IBDatabase2: TIBDatabase;
    IBTransaction3: TIBTransaction;
    IBDataSet200: TIBDataSet;
    CRLF2: TMenuItem;
    N12: TMenuItem;
    MenuFiscal1: TMenuItem;
    LXLeituraX1: TMenuItem;
    EspelhoMFD1: TMenuItem;
    LeituraporfaixadeCOO1: TMenuItem;
    Leiturapordata3: TMenuItem;
    ArqMFD1: TMenuItem;
    MeiosdePagto1: TMenuItem;
    DAVemitidos1: TMenuItem;
    ArquivoEletrnico1: TMenuItem;
    Relatriogerancial1: TMenuItem;
    IdentificaodoPAFECF1: TMenuItem;
    LbRSASSA1: TLbRSASSA;
    ibDataSet37NUMERONF: TIBStringField;
    ibDataSet27HORA: TIBStringField;
    ibDataSet27DAV: TIBStringField;
    ibDataSet27TIPODAV: TIBStringField;
    ibDataSet13IM: TIBStringField;
    LbBlowfish1: TLbBlowfish;
    DadosdaltimaReduoZ1: TMenuItem;
    ibDataset88HORA: TIBStringField;
    Abrecupomcomleitor1: TMenuItem;
    ibDataSet10REGISTRO: TIBStringField;
    N13: TMenuItem;
    DocumentoAuxiliardeVendaDAVOramento1: TMenuItem;
    N14: TMenuItem;
    Marcadaimpressora1: TMenuItem;
    ModelodoECF1: TMenuItem;
    VersodoSB1: TMenuItem;
    DatadeinstalaodoSB1: TMenuItem;
    HoradeinstalaodoSB1: TMenuItem;
    ibDataSet27CNPJ: TIBStringField;
    ibDataset88TIPOECF: TIBStringField;
    ibDataset88MARCAECF: TIBStringField;
    ibDataset88MODELOECF: TIBStringField;
    ibDataset88VERSAOSB: TIBStringField;
    ibDataset88DATASB: TIBStringField;
    ibDataset88HORASB: TIBStringField;
    ibDataset88SMALL: TIBStringField;
    ibDataSet27REFERENCIA: TIBStringField;
    ibDataSet4IAT: TIBStringField;
    ibDataSet4IPPT: TIBStringField;
    Papagaio: TButton;
    AvisosonorodeProdutonoCadastrdado1: TMenuItem;
    IBDataSet999: TIBDataSet;
    Image_Logo: TImage;
    ibDataSet2NOME: TIBStringField;
    ibDataSet2CONTATO: TIBStringField;
    ibDataSet2IE: TIBStringField;
    ibDataSet2CGC: TIBStringField;
    ibDataSet2ENDERE: TIBStringField;
    ibDataSet2COMPLE: TIBStringField;
    ibDataSet2CIDADE: TIBStringField;
    ibDataSet2ESTADO: TIBStringField;
    ibDataSet2CEP: TIBStringField;
    ibDataSet2FONE: TIBStringField;
    ibDataSet2FAX: TIBStringField;
    ibDataSet2EMAIL: TIBStringField;
    ibDataSet2OBS: TIBStringField;
    ibDataSet2CELULAR: TIBStringField;
    ibDataSet2CREDITO: TFloatField;
    ibDataSet2CONVENIO: TIBStringField;
    ibDataSet2IDENTIFICADOR1: TIBStringField;
    ibDataSet2IDENTIFICADOR2: TIBStringField;
    ibDataSet2IDENTIFICADOR3: TIBStringField;
    ibDataSet2IDENTIFICADOR4: TIBStringField;
    ibDataSet2IDENTIFICADOR5: TIBStringField;
    ibDataSet2DATANAS: TDateField;
    ibDataSet2CADASTRO: TDateField;
    ibDataSet2ULTIMACO: TDateField;
    ibDataSet2PROXDATA: TDateField;
    ibDataSet2CUSTO: TFloatField;
    ibDataSet2COMPRA: TFloatField;
    ibDataSet2ATIVO: TSmallintField;
    ibDataSet2MOSTRAR: TIBStringField;
    ibDataSet2CLIFOR: TIBStringField;
    ibDataSet2CONTATOS: TMemoField;
    ibDataSet2REGISTRO: TIBStringField;
    ibDataSet2FOTO: TBlobField;
    IBQuery1: TIBQuery;
    Panel4: TPanel;
    Inverterstatusdagaveta1: TMenuItem;
    Timer1: TTimer;
    IBExtract1: TIBExtract;
    Label1: TLabel;
    VendasporPerodo1: TMenuItem;
    abndiceTcnicoProduo1: TMenuItem;
    AtoCOTEPE09081: TMenuItem;
    Convnio57951: TMenuItem;
    Consultadepreos1: TMenuItem;
    Imprimiroramento1: TMenuItem;
    ibDataset88STATUS: TIBStringField;
    ibDataset88ENCRYPTHASH: TIBStringField;
    ibDataSet4ENCRYPTHASH: TIBStringField;
    ibDataSet27ENCRYPTHASH: TIBStringField;
    ibDataSet37COO: TIBStringField;
    ibDataSet37ENCRYPTHASH: TIBStringField;
    ibDataSet27COO: TIBStringField;
    ibDataSet27CCF: TIBStringField;
    IBDataSet28: TIBDataSet;
    IBQueryAssina: TIBQuery;
    RegistromanualdeNFmodelo11: TMenuItem;
    Button8: TButton;
    ImageAbreFechaMesas: TImage;
    IBQuery2: TIBQuery;
    N7: TMenuItem;
    ransfernciademesa1: TMenuItem;
    ransfernciaentremesas1: TMenuItem;
    MesasAbertas1: TMenuItem;
    Confernciademesa1: TMenuItem;
    Button11: TButton;
    CERContadorEspecficodeRelatrioGerencial1: TMenuItem;
    IBQuery3: TIBQuery;
    Quantas1: TMenuItem;
    N17: TMenuItem;
    Dadosdaltimareduo1: TMenuItem;
    IBDataSet38: TIBDataSet;
    CDC1: TMenuItem;
    CCF1: TMenuItem;
    COO1: TMenuItem;
    CdigomodelodoECF1: TMenuItem;
    ibDataset88CODIGOECF: TIBStringField;
    ParmetrosdeConfigurao1: TMenuItem;
    IBQuery4: TIBQuery;
    ibDataSet27ANVISA: TIntegerField;
    ibDataSet27DESCONTO: TIBBCDField;
    ibDataSet27CST_ICMS: TIBStringField;
    ibDataSet27CST_PIS_COFINS: TIBStringField;
    ibDataSet27ALIQ_PIS: TIBBCDField;
    ibDataSet27ALIQ_COFINS: TIBBCDField;
    ibDataSet27OBS: TIBStringField;
    ibDataSet27STATUS: TIBStringField;
    ibDataSet4CSOSN: TIBStringField;
    ibDataSet4PIVA: TFloatField;
    ibDataSet4CST_IPI: TIBStringField;
    ibDataSet4TIPO_ITEM: TIBStringField;
    ibDataSet4CST_PIS_COFINS_ENTRADA: TIBStringField;
    ibDataSet4ALIQ_PIS_ENTRADA: TIBBCDField;
    ibDataSet4ALIQ_COFINS_ENTRADA: TIBBCDField;
    ibDataSet4CST_PIS_COFINS_SAIDA: TIBStringField;
    ibDataSet4ALIQ_PIS_SAIDA: TIBBCDField;
    ibDataSet4ALIQ_COFINS_SAIDA: TIBBCDField;
    Panel1: TPanel;
    Image1: TImage;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label_11: TLabel;
    Label_12: TLabel;
    Label_13: TLabel;
    Label_10: TLabel;
    Label13: TLabel;
    touch_F3: TImage;
    touch_F2: TImage;
    touch_F1: TImage;
    DBGrid2: TDBGrid;
    Memo1: TMemo;
    Memo2: TMemo;
    Memo3: TMemo;
    Panel9: TPanel;
    Image2: TImage;
    touch_F4: TImage;
    touch_F5: TImage;
    touch_F10: TImage;
    touch_F6: TImage;
    touch_F7: TImage;
    touch_F8: TImage;
    touch_ESC: TImage;
    touch_F11: TImage;
    touch_F12: TImage;
    LabelF1: TLabel;
    LabelF2: TLabel;
    LabelF5: TLabel;
    LabelF6: TLabel;
    LabelF10: TLabel;
    LabelESC: TLabel;
    LabelF11: TLabel;
    LabelF12: TLabel;
    LabelF4: TLabel;
    LabelF3: TLabel;
    LabelF7: TLabel;
    LabelF8: TLabel;
    Label_7: TLabel;
    Label_ok: TLabel;
    Label_CopyRight: TLabel;
    touch_cima: TImage;
    touch_baixo: TImage;
    Frame_teclado1: TFrame_teclado;
    Panel2: TPanel;
    Image4: TImage;
    cartao_sono: TImage;
    cartao: TImage;
    cartao_vinho: TImage;
    Panel3: TPanel;
    Notafiscaldevendaaconsumidormodelo021: TMenuItem;
    Notapromissria1: TMenuItem;
    Concomitante: TMenuItem;
    Mesas1: TMenuItem;
    Contadecliente1: TMenuItem;
    ContadeclienteOS1: TMenuItem;
    N3: TMenuItem;
    CreditosDF: TMenuItem;
    x1024x768: TMenuItem;
    IBQuery101: TIBQuery;
    ibDataset88ESTOQUE: TIBStringField;
    Alterarlogotipo1: TMenuItem;
    ibDataSet13EMAIL: TIBStringField;
    ibDataSet13HP: TIBStringField;
    ibDataSet13COPE: TFloatField;
    ibDataSet13RESE: TFloatField;
    ibDataSet13CVEN: TFloatField;
    ibDataSet13IMPO: TFloatField;
    ibDataSet13LUCR: TFloatField;
    ibDataSet13ICME: TFloatField;
    ibDataSet13ICMS: TFloatField;
    ibDataSet13REGISTRO: TIBStringField;
    ibDataSet13CRT: TIBStringField;
    ibDataSet13CNAE: TIBStringField;
    ibDataSet4ONPROMO: TIBBCDField;
    ibDataSet4OFFPROMO: TIBBCDField;
    ibDataSet4PROMOINI: TDateField;
    ibDataSet4PROMOFIM: TDateField;
    ibDataSet4IIA: TFloatField;
    IBDataSet150: TIBDataSet;
    DataSource150: TDataSource;
    DBGrid1: TDBGrid;
    IBDataSet150REGISTRO: TIBStringField;
    IBDataSet150NUMERONF: TIBStringField;
    IBDataSet150STATUS: TIBStringField;
    IBDataSet150NFEID: TIBStringField;
    IBDataSet150NFEXML: TMemoField;
    IBQuery65: TIBQuery;
    Panel5: TPanel;
    Image3: TImage;
    NFCe1: TMenuItem;
    NFCeemContingncia1: TMenuItem;
    VisualizarDANFCE1: TMenuItem;
    DANFCEdetalhado1: TMenuItem;
    ImprimirDANFCE1: TMenuItem;
    N18: TMenuItem;
    ConfigurarlogotipodoDANFE1: TMenuItem;
    Selecionarcertificadodigital1: TMenuItem;
    N19: TMenuItem;
    GerenciadordeNFCe1: TMenuItem;
    Image8: TImage;
    Image9: TImage;
    Image5: TImage;
    RelatrioGerencial1: TMenuItem;
    PopupMenu2: TPopupMenu;
    ImprimeoDANFCE1: TMenuItem;
    VisualizaroDANFCE1: TMenuItem;
    EnviaroDANFCEporeMail1: TMenuItem;
    VisualizaroXMLdaNFCe1: TMenuItem;
    EnviaraNFCe1: TMenuItem;
    CancelaraNFCe1: TMenuItem;
    ConfigurarDANFCE1: TMenuItem;
    IDTokenNFCE1: TMenuItem;
    NmerodoTokenNFCE1: TMenuItem;
    IBDataSet150DATA: TDateField;
    N16: TMenuItem;
    Atualizarprogramapelainternet1: TMenuItem;
    N20: TMenuItem;
    ransfernciasentremesas1: TMenuItem;
    Mesasabertas2: TMenuItem;
    InutilizaodeNFCes1: TMenuItem;
    ibDataSet13TELEFO: TIBStringField;
    mesa: TImage;
    PopupMenu3: TPopupMenu;
    N110: TMenuItem;
    N21: TMenuItem;
    N22: TMenuItem;
    N41: TMenuItem;
    vinho: TImage;
    sono: TImage;
    N51: TMenuItem;
    N61: TMenuItem;
    N71: TMenuItem;
    N81: TMenuItem;
    N91: TMenuItem;
    N101: TMenuItem;
    Solicitarsenhadeusurio1: TMenuItem;
    empo1: TMenuItem;
    CortaPapel1: TMenuItem;
    DateTimePicker1: TDateTimePicker;
    runcamento1: TMenuItem;
    N23: TMenuItem;
    Homologao1: TMenuItem;
    Panel6: TPanel;
    LabelESC2: TLabel;
    touch_ESC2: TImage;
    Timer2: TTimer;
    ImportarvendasdoSmallMobile1: TMenuItem;
    RegistrosdoPAFECF1: TMenuItem;
    LMF1: TMenuItem;
    LMFC1: TMenuItem;
    Leituraporintervaloderedues1: TMenuItem;
    Leiturapordata1: TMenuItem;
    LMFS1: TMenuItem;
    Leituraporintervaloderedues2: TMenuItem;
    Leiturapordata2: TMenuItem;
    ArqMF1: TMenuItem;
    Estoquetotal1: TMenuItem;
    Estoqueparcial1: TMenuItem;
    IBQuery5: TIBQuery;
    IBQuery6: TIBQuery;
    Button10: TButton;
    CartesdecreditoedebitoPOS1: TMenuItem;
    Button3: TButton;
    Button5: TButton;
    Versodolayout1: TMenuItem;
    Verificaresquemaschema1: TMenuItem;
    ExportarXMLparacontabilidade1: TMenuItem;
    ibDataSet4CFOP: TIBStringField;
    ibDataSet4VALOR_PARCELA_IMPORTADA_EXTERIO: TIBBCDField;
    ibDataSet4CODIGO_FCI: TIBStringField;
    ibDataSet4MEDIDAE: TIBStringField;
    ibDataSet4FATORC: TIBBCDField;
    ibDataSet4IIA_UF: TFloatField;
    ibDataSet4IIA_MUNI: TFloatField;
    Fusohorario1: TMenuItem;
    Label2: TLabel;
    ibDataSet27CFOP: TStringField;
    ConsultarStatusdoServio1: TMenuItem;
    ConsultaStatusOperacionaldoSAT1: TMenuItem;
    IBDataSet150CAIXA: TStringField;
    IBDataSet150MODELO: TStringField;
    PopupMenu4: TPopupMenu;
    Restaurar1: TMenuItem;
    N10: TMenuItem;
    Minimizarnabandeja1: TMenuItem;
    Pesquisariniciandocom12: TMenuItem;
    Image6: TImage;
    Iniciarminimizado1: TMenuItem;
    IniciarcomWindows1: TMenuItem;
    VendasIdentificadaspeloCPFCNPJ1: TMenuItem;
    ArqAC17041: TMenuItem;
    ArqAC1704Data1: TMenuItem;
    ArqAC1704COO1: TMenuItem;
    NFCeNotaFiscaldeConsumidorEletrnica1: TMenuItem;
    ipodepesquisa1: TMenuItem;
    Pesquisaremqualquerpartedotexto1: TMenuItem;
    Pesquisarpeloinciodotexto1: TMenuItem;
    Button12: TButton;
    IBDSAssinaRegistro: TIBDataSet;
    ArquivocomInformaesdaReduoZdoPAFECF1: TMenuItem;
    EnvioaoFISCOESTOQUE: TMenuItem;
    IBQDadosRequisitoXXIV____: TIBQuery;
    ibDataSet27SERIE: TStringField;
    ibDataSet27SUBSERIE: TStringField;
    EnviarDANFCEeXMLcompactado1: TMenuItem;
    VersodoManualdaNFCe1: TMenuItem;
    ibDataSet4CSOSN_NFCE: TStringField;
    ibDataSet4CST_NFCE: TStringField;
    ibDataSet4ALIQUOTA_NFCE: TIBBCDField;
    RealatriosGerenciais1: TMenuItem;
    N24: TMenuItem;
    Vendaspor1: TMenuItem;
    xml1: TMenuItem;
    Selecionarcertificadodigital2: TMenuItem;
    N15: TMenuItem;
    EnvioaoFISCOREDUOZ: TMenuItem;
    RecibosdosArquivoscomInformaesdaReduoZdoPAFECF1: TMenuItem;
    RecibosdosArquivoscomInformaesdoEstoqueMensaldoEstabelecimento1: TMenuItem;
    touch_F9: TImage;
    LabelF9: TLabel;
    PopupMenu5: TPopupMenu;
    Button13: TButton;
    N25: TMenuItem;
    VersodoSchemadaNFCe2: TMenuItem;
    AvanodePapelnoFinaldeImpressoSAT1: TMenuItem;
    MovimentoDia1: TMenuItem;
    ibDataSet27CSOSN: TStringField;
    ransmitirContingncia1: TMenuItem;
    N26: TMenuItem;
    ransmitircontingncia2: TMenuItem;
    ClientDataSet1: TClientDataSet;
    ClientDataSet1DATA: TDateField;
    ClientDataSet1NUMERONF: TStringField;
    ClientDataSet1CAIXA: TStringField;
    ClientDataSet1LOG: TMemoField;
    ClientDataSet1AUTORIZADA: TStringField;
    VersodoleiautedoCFeSAT1: TMenuItem;
    VersoLeiauteSat0071: TMenuItem;
    otalDirio1: TMenuItem;
    lbReferenciaItemCupom: TLabel;
    touch_baixo_cupom: TImage;
    touch_cima_cupom: TImage;
    Image7: TImage;
    Image10: TImage;
    NmerodoCredencimentodoPAFECF1: TMenuItem;
    ImprimirCESTNCMnocupomfiscal1: TMenuItem;
    ExtrairLogdoSAT1: TMenuItem;
    IdentificarCredenciadoraPoS1: TMenuItem;
    SATInicializaoAlternativa1: TMenuItem;
    Nfcetimeout1: TMenuItem;
    SATConectarServidorSAT1: TMenuItem;
    SATCaminhodecomunicaocomServidorSAT1: TMenuItem;
    ConfigurarNmerodoCaixa1: TMenuItem;
    NmerodoCredencimentodaImpressoraECF1: TMenuItem;
    lblMensagemAlerta: TLabel;
    LimiteparaIdentificarConsumidor1: TMenuItem;
    IntegradorFiscal1: TMenuItem;
    ConfiguraCaminhodeComunicaoIntegrador1: TMenuItem;
    CdigodeIdentificaodoEstabelecimentoJuntoaSEFAZ1: TMenuItem;
    AdquirentesPOS1: TMenuItem;
    N27: TMenuItem;
    Modopagamentocommltiploscartes1: TMenuItem;
    N28: TMenuItem;
    Nmeromximodecartesaceito1: TMenuItem;
    ConfigurarFabricanteeModeloSAT1: TMenuItem;
    ECFConvnio09091: TMenuItem;
    ClientDataSet1REGISTRO: TStringField;
    N29: TMenuItem;
    ransmitirRespostaFiscalPendente1: TMenuItem;
    N30: TMenuItem;
    N31: TMenuItem;
    Impressorapadro1: TMenuItem;
    NFCeVersaoManualvm601: TMenuItem;
    N4001: TMenuItem;
    ibDataSet13ibDataset88ENCRYPTHASH: TStringField;
    CDSR01: TClientDataSet;
    CDSR01SERIE: TStringField;
    CDSR01MODELOECF: TStringField;
    CDSR01CRZ: TStringField;
    CDSR01SEQUENCIAL: TStringField;
    PopupMenu6: TPopupMenu;
    Nmerodanota1: TMenuItem;
    NomeCliente1: TMenuItem;
    CNPJCPFdoCliente1: TMenuItem;
    N32: TMenuItem;
    N33: TMenuItem;
    Panel7: TPanel;
    touch_PesquisaNFCe: TImage;
    LabelPesquisaNFCe: TLabel;
    Panel8: TPanel;
    touch_OpcoesNFCe: TImage;
    LabelOpcoesNFCe: TLabel;
    ibDataSet27SEQUENCIALCONTACLIENTEOS: TStringField;
    Image11: TImage;
    Image12: TImage;
    Image88: TImage;
    Image99: TImage;
    NFCenoperodo1: TMenuItem;
    TimerHora: TTimer;
    CarnResumido1: TMenuItem;
    OrdemdaaliquotadeISS1: TMenuItem;
    ConfigurarImpressora1: TMenuItem;
    LarguradoPapel58mm1: TMenuItem;
    LarguradoPapel76mm1: TMenuItem;
    LarguradoPapel80mm1: TMenuItem;
    LarguradoPapelA41: TMenuItem;
    N34: TMenuItem;
    VincularAssinaturaAC1: TMenuItem;
    FormatarIEdoemitentecom12dgitos1: TMenuItem;
    ibDataSet4TAGS_: TMemoField;
    EnviarchaveconsultapeloWhatsApp1: TMenuItem;
    ibDataSet2WHATSAPP: TStringField;
    CNAEdispensadoatransmissodosarquivosdoEstoque1: TMenuItem;
    NFCeVersaoSchemapl0091: TMenuItem;
    PopupMenu7: TPopupMenu;
    Atualizar1: TMenuItem;
    IBDataSet150TOTAL: TIBBCDField;
    Timer3: TTimer;
    Panel1000: TPanel;
    lbOrientacaoPesagem: TLabel;
    Image13: TImage;
    BalanaAutonoma1: TMenuItem;
    N35: TMenuItem;
    Produtolanadonapesagemautonoma1: TMenuItem;
    Mesainicialparapesagensautonoma1: TMenuItem;
    HorriodeVero1: TMenuItem;
    InformaesdoresponsveltcnicoNFCe1: TMenuItem;
    VersoLeiauteSat0081: TMenuItem;
    IBDataSet150NFEIDSUBSTITUTO: TStringField;
    ibDataSet7NN: TStringField;
    ConsultaChaveNFCe1: TMenuItem;
    EnviaremailcomXMLePDFacadavenda1: TMenuItem;
    ibDataSet13LICENCA: TStringField;
    Diaspararecebimentodaoperadoradecarto1: TMenuItem;
    Crdito1: TMenuItem;
    Dbito1: TMenuItem;
    ppMenuFiscalPAFNFCe: TPopupMenu;
    MenuItem1: TMenuItem;
    IdentificaodoPAFNFCe1: TMenuItem;
    RegistrosdoPAFNFCe1: TMenuItem;
    ESTOQUETOTALPAFNFCe: TMenuItem;
    ESTOQUEPARCIALPAFNFCe: TMenuItem;
    VendasIdentificadaspeloCPFCNPJPAFNFCe: TMenuItem;
    MesasAbertasPAFNFCe: TMenuItem;
    lbMenuFiscalPAFNFCeInacessivel1: TLabel;
    pnlMenuFiscalPAFNFCeInacessivel: TPanel;
    IBDataSet150ENCRYPTHASH: TStringField;
    InformarindIntermedNFCe1: TMenuItem;
    ValorLimiteTotalNFCeEstabelecidoSefaz1: TMenuItem;
    GerarxPagparaMeioPagamento99Outros1: TMenuItem;
    DriverMFE010515ousuperior1: TMenuItem;
    RecuperarXMLdaNFCe1: TMenuItem;
    N36: TMenuItem;
    PesquisaNFCeemcontingncia: TMenuItem;
    SmartPOSElginPay1: TMenuItem;
    FunesAdministrativasPosElginPay1: TMenuItem;
    ibDataSet27MARKETPLACE: TStringField;
    IBQMARKETPLACE: TIBQuery;
    DSMARKETPLACE: TDataSource;
    Etiquetadabalanainforma1: TMenuItem;
    EtiquetaBalancaPesoKG1: TMenuItem;
    EtiquetaBalancaPrecoR1: TMenuItem;
    GeraraoFISCOREDUOZ1: TMenuItem;
    GeraraoFISCOESTOQUE1: TMenuItem;
    ESTOQUEANOANTERIOR1: TMenuItem;
    ESTOQUEMUDANADETRIBUTAO1: TMenuItem;
    ESTOQUESUSPENSOOUBAIXADEIE1: TMenuItem;
    ESTOQUEMUDANADEREGIME1: TMenuItem;
    ESTOQUEATUAL1: TMenuItem;
    SadasIdentificadaspeloCPFCNPJ1: TMenuItem;
    procedure MesaMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure MesaMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure MesaDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure MesaDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure MesaEndDrag(Sender, Target: TObject; X, Y: Integer);
    procedure FormCreate(Sender: TObject);
    procedure Button18Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure ibDataSet20VENCIMENTOSetText(Sender: TField; const Text: String);
    procedure Button7Click(Sender: TObject);
    procedure ibDataSet1NewRecord(DataSet: TDataSet);
    procedure Fechamentodocaixa1Click(Sender: TObject);
    procedure Sangria1Click(Sender: TObject);
    procedure Sobreoprograma1Click(Sender: TObject);
    procedure Cadastraraliquota1Click(Sender: TObject);
    procedure Mensagempromocional1Click(Sender: TObject);
    procedure Ligardesligarhorriodevero1Click(Sender: TObject);
    procedure VersodoFirmware1Click(Sender: TObject);
    procedure NmerodeSrie1Click(Sender: TObject);
    procedure CGCIE1Click(Sender: TObject);
    procedure Cancelamentos1Click(Sender: TObject);
    procedure Descontos1Click(Sender: TObject);
    procedure ContadorSeqencial1Click(Sender: TObject);
    procedure Nmdeoperaesnofiscais1Click(Sender: TObject);
    procedure NmdeCuponscancelados1Click(Sender: TObject);
    procedure NmdeRedues1Click(Sender: TObject);
    procedure Nmdeintervenestcnicas1Click(Sender: TObject);
    procedure Nmdesubstituiesdeproprietrio1Click(Sender: TObject);
    procedure Clichdoproprietrio1Click(Sender: TObject);
    procedure NmdoCaixa1Click(Sender: TObject);
    procedure Nmdaloja1Click(Sender: TObject);
    procedure Moeda1Click(Sender: TObject);
    procedure Dataehoradaimpressora1Click(Sender: TObject);
    procedure Datadaultimareduo1Click(Sender: TObject);
    procedure Datadomovimento1Click(Sender: TObject);
    procedure Tipodaimpressora1Click(Sender: TObject);
    procedure Leiturapordata1Click(Sender: TObject);
    procedure Leituraporintervaloderedues1Click(Sender: TObject);
    procedure ibDataSet27BeforeDelete(DataSet: TDataSet);
    procedure ibDataSet27QUANTIDADESetText(Sender: TField; const Text: String);
    procedure DBGrid2KeyPress(Sender: TObject; var Key: Char);
    procedure DBGrid2KeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure PopupMenu1Popup(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure ibDataSet25PAGARChange(Sender: TField);
    procedure ibDataSet25RECEBERChange(Sender: TField);
    procedure DBGrid2Enter(Sender: TObject);
    procedure DBGrid2Exit(Sender: TObject);
    procedure Grandetotal1Click(Sender: TObject);
    procedure Relatriodetributao1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Gaveta1Click(Sender: TObject);
    procedure Vias1Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Formasdepagamento1Click(Sender: TObject);
    procedure Bloqueioporsenha1Click(Sender: TObject);
    procedure RegistroFiscal1Click(Sender: TObject);
    procedure Balana1Click(Sender: TObject);
    procedure ibDataset88FilterRecord(DataSet: TDataSet; var Accept: Boolean);
    procedure GrandetotalGT1Click(Sender: TObject);
    procedure EF1Click(Sender: TObject);
    procedure Controledecheque1Click(Sender: TObject);
    procedure TecladoGERTEC1Click(Sender: TObject);
    procedure ibDataSet4NewRecord(DataSet: TDataSet);
    procedure ibDataSet27BeforeInsert(DataSet: TDataSet);
    procedure ibDataSet1BeforeInsert(DataSet: TDataSet);
    procedure ibDataset30BeforeInsert(DataSet: TDataSet);
    procedure ibDataSet25BeforeInsert(DataSet: TDataSet);
    procedure ibDataSet7BeforeInsert(DataSet: TDataSet);
    procedure ibDataSet10BeforeInsert(DataSet: TDataSet);
    procedure ibDataset88BeforeInsert(DataSet: TDataSet);
    procedure Edit1Change(Sender: TObject);
    procedure Edit1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure ibDataSet27NewRecord(DataSet: TDataSet);
    procedure ibDataSet7NewRecord(DataSet: TDataSet);
    procedure Button1Click(Sender: TObject);
    procedure SuprimentoReforodecaixa1Click(Sender: TObject);
    procedure Identificaconsumidor1Click(Sender: TObject);
    procedure ibDataSet7BeforePost(DataSet: TDataSet);
    procedure Planodecontas1Click(Sender: TObject);
    procedure Leiturapordata2Click(Sender: TObject);
    procedure Leituraporintervalodereduo1Click(Sender: TObject);
    procedure Leiturapordata3Click(Sender: TObject);
    procedure Leituraporintervaloderedues2Click(Sender: TObject);
    procedure LeituraporfaixadeCOO1Click(Sender: TObject);
    procedure LXLeituraX1Click(Sender: TObject);
    procedure MeiosdePagto1Click(Sender: TObject);
    procedure IdentificaodoPAFECF1Click(Sender: TObject);
    procedure Relatriogerancial1Click(Sender: TObject);
    procedure ArquivoEletrnico1Click(Sender: TObject);
    procedure ibDataSet4AfterPost(DataSet: TDataSet);
    procedure ibDataSet1AfterPost(DataSet: TDataSet);
    procedure DadosdaltimaReduoZ1Click(Sender: TObject);
    procedure Abrecupomcomleitor1Click(Sender: TObject);
    procedure ibDataSet10BeforePost(DataSet: TDataSet);
    procedure DocumentoAuxiliardeVendaDAVOramento1Click(Sender: TObject);
    procedure N14Click(Sender: TObject);
    procedure LMFCLeituradeMemriaFiscalCompleta1Click(Sender: TObject);
    procedure LMFSLeituradeMemriaFiscalSimplificada1Click(Sender: TObject);
    procedure EspelhoMFD1Click(Sender: TObject);
    procedure DAVemitidos1Click(Sender: TObject);
    procedure PopupMenu1Change(Sender: TObject; Source: TMenuItem;
      Rebuild: Boolean);
    procedure Marcadaimpressora1Click(Sender: TObject);
    procedure ModelodoECF1Click(Sender: TObject);
    procedure VersodoSB1Click(Sender: TObject);
    procedure DatadeinstalaodoSB1Click(Sender: TObject);
    procedure HoradeinstalaodoSB1Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure PapagaioClick(Sender: TObject);
    procedure AvisosonorodeProdutonoCadastrdado1Click(Sender: TObject);
    procedure Inverterstatusdagaveta1Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure AtoCOTEPE09081Click(Sender: TObject);
    procedure Convnio57951Click(Sender: TObject);
    procedure abndiceTcnicoProduo1Click(Sender: TObject);
    procedure Consultadepreos1Click(Sender: TObject);
    procedure Imprimiroramento1Click(Sender: TObject);
    procedure ibDataset88BeforePost(DataSet: TDataSet);
    procedure ibDataSet4BeforePost(DataSet: TDataSet);
    procedure ibDataSet27BeforePost(DataSet: TDataSet);
    procedure ibDataSet37BeforePost(DataSet: TDataSet);
    procedure IBDataSet28BeforeInsert(DataSet: TDataSet);
    procedure IBDataSet28BeforePost(DataSet: TDataSet);
    procedure IBDataSet28NewRecord(DataSet: TDataSet);
    procedure RegistromanualdeNFmodelo11Click(Sender: TObject);
    procedure MenuFiscal1Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure EscolheAmesa(Sender: TObject);
    procedure MesasAbertas1Click(Sender: TObject);
    procedure ransfernciaentremesas1Click(Sender: TObject);
    procedure Confernciademesa1Click(Sender: TObject);
    procedure ransfernciademesa1Click(Sender: TObject);
    procedure Button11Click(Sender: TObject);
    procedure CERContadorEspecficodeRelatrioGerencial1Click(
      Sender: TObject);
    procedure Estoquetotal1Click(Sender: TObject);
    procedure Estoqueparcial1Click(Sender: TObject);
    procedure Quantas1Click(Sender: TObject);
    procedure Dadosdaltimareduo1Click(Sender: TObject);
    procedure IBDataSet38BeforeInsert(DataSet: TDataSet);
    procedure IBDataSet38BeforePost(DataSet: TDataSet);
    procedure IBDataSet38NewRecord(DataSet: TDataSet);
    procedure FunesadministrativasTEF1Click(Sender: TObject);
    procedure CdigomodelodoECF1Click(Sender: TObject);
    procedure ParmetrosdeConfigurao1Click(Sender: TObject);
    procedure Edit1Enter(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure ibDataset88BeforeDelete(DataSet: TDataSet);
    procedure IBDataSet28BeforeDelete(DataSet: TDataSet);
    procedure IBDataSet38BeforeDelete(DataSet: TDataSet);
    procedure touch_F1Click(Sender: TObject);
    procedure touch_F3Click(Sender: TObject);
    procedure Memo1Enter(Sender: TObject);
    procedure touch_F4Click(Sender: TObject);
    procedure touch_F5Click(Sender: TObject);
    procedure touch_F10Click(Sender: TObject);
    procedure touch_F6Click(Sender: TObject);
    procedure touch_F7Click(Sender: TObject);
    procedure touch_F8Click(Sender: TObject);
    procedure touch_F11Click(Sender: TObject);
    procedure touch_F12Click(Sender: TObject);
    procedure touch_ESCClick(Sender: TObject);
    procedure touch_cimaClick(Sender: TObject);
    procedure touch_baixoClick(Sender: TObject);
    procedure touch_F2Click(Sender: TObject);
    procedure DBGrid2DrawDataCell(Sender: TObject; const Rect: TRect;
      Field: TField; State: TGridDrawState);
    procedure DBGrid2DblClick(Sender: TObject);
    procedure Label10Click(Sender: TObject);
    procedure Notafiscaldevendaaconsumidormodelo021Click(Sender: TObject);
    procedure Notapromissria1Click(Sender: TObject);
    procedure Frame_teclado1touch_backspaceClick(Sender: TObject);
    procedure CreditosDFClick(Sender: TObject);
    procedure Alterarlogotipo1Click(Sender: TObject);
    procedure Selecionarcertificadodigital1Click(Sender: TObject);
    procedure ImprimirDANFCE1Click(Sender: TObject);
    procedure VisualizarDANFCE1Click(Sender: TObject);
    procedure IBDataSet150BeforeInsert(DataSet: TDataSet);
    procedure IBDataSet150NewRecord(DataSet: TDataSet);
    procedure GerenciadordeNFCe1Click(Sender: TObject);
    procedure DBGrid1KeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure NFCeemContingncia1Click(Sender: TObject);
    procedure DANFCEdetalhado1Click(Sender: TObject);
    procedure ConfigurarlogotipodoDANFE1Click(Sender: TObject);
    procedure DBGrid1DrawDataCell(Sender: TObject; const Rect: TRect;
      Field: TField; State: TGridDrawState);
    procedure EnviaroDANFCEporeMail1Click(Sender: TObject);
    procedure VisualizaroDANFCE1Click(Sender: TObject);
    procedure ImprimeoDANFCE1Click(Sender: TObject);
    procedure VisualizaroXMLdaNFCe1Click(Sender: TObject);
    procedure EnviaraNFCe1Click(Sender: TObject);
    procedure PopupMenu2Change(Sender: TObject; Source: TMenuItem;
      Rebuild: Boolean);
    procedure DBGrid1DblClick(Sender: TObject);
    procedure CancelaraNFCe1Click(Sender: TObject);
    procedure ConfigurarDANFCE1Click(Sender: TObject);
    procedure IDTokenNFCE1Click(Sender: TObject);
    procedure NmerodoTokenNFCE1Click(Sender: TObject);
    procedure Atualizarprogramapelainternet1Click(Sender: TObject);
    procedure InutilizaodeNFCes1Click(Sender: TObject);
    procedure N110Click(Sender: TObject);
    procedure Solicitarsenhadeusurio1Click(Sender: TObject);
    procedure empo1Click(Sender: TObject);
    procedure CortaPapel1Click(Sender: TObject);
    procedure CRLF2Click(Sender: TObject);
    procedure DateTimePicker1Change(Sender: TObject);
    procedure runcamento1Click(Sender: TObject);
    procedure Homologao1Click(Sender: TObject);
    procedure DateTimePicker1Click(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
    procedure ImportarvendasdoSmallMobile1Click(Sender: TObject);
    procedure Button10Click(Sender: TObject);
    procedure ArqMFD1Click(Sender: TObject);
    procedure ArqMF1Click(Sender: TObject);
    procedure CartesdecreditoedebitoPOS1Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure ConcomitanteClick(Sender: TObject);
    procedure Mesas1Click(Sender: TObject);
    procedure Contadecliente1Click(Sender: TObject);
    procedure ContadeclienteOS1Click(Sender: TObject);
    procedure Verificaresquemaschema1Click(Sender: TObject);
    procedure ExportarXMLparacontabilidade1Click(Sender: TObject);
    procedure Fusohorario1Click(Sender: TObject);
    procedure ConsultarStatusdoServio1Click(Sender: TObject);
    procedure ConsultaStatusOperacionaldoSAT1Click(Sender: TObject);
    procedure IBDatabase2AfterConnect(Sender: TObject);
    procedure IBDatabase1AfterConnect(Sender: TObject);
    procedure Restaurar1Click(Sender: TObject);
    procedure Minimizarnabandeja1Click(Sender: TObject);
    procedure Iniciarminimizado1Click(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure IBDataSet150AfterOpen(DataSet: TDataSet);
    procedure IniciarcomWindows1Click(Sender: TObject);
    procedure IBDataSet150AfterScroll(DataSet: TDataSet);
    procedure DBGrid1Exit(Sender: TObject);
    procedure VendasIdentificadaspeloCPFCNPJ1Click(Sender: TObject);
    procedure ArqAC1704COO1Click(Sender: TObject);
    procedure ArqAC1704Data1Click(Sender: TObject);
    procedure NFCeNotaFiscaldeConsumidorEletrnica1Click(Sender: TObject);
    procedure Pesquisarpeloinciodotexto1Click(Sender: TObject);
    procedure Pesquisaremqualquerpartedotexto1Click(Sender: TObject);
    procedure Button12Click(Sender: TObject);
    procedure EnviarDANFCEeXMLcompactado1Click(Sender: TObject);
    procedure Vendaspor1Click(Sender: TObject);
    procedure xml1Click(Sender: TObject);
    procedure Selecionarcertificadodigital2Click(Sender: TObject);
    procedure EnvioaoFISCOESTOQUEClick(
      Sender: TObject);
    procedure EnvioaoFISCOREDUOZClick(Sender: TObject);
    procedure touch_F9Click(Sender: TObject);
    procedure LabelF9Click(Sender: TObject);
    procedure Button13Click(Sender: TObject);
    procedure AvanodePapelnoFinaldeImpressoSAT1Click(Sender: TObject);
    procedure MovimentoDia1Click(Sender: TObject);
    procedure ransmitirContingncia1Click(Sender: TObject);
    procedure ransmitircontingncia2Click(Sender: TObject);
    procedure PopupMenu2Popup(Sender: TObject);
    procedure VersoLeiauteSat0071Click(Sender: TObject);
    procedure otalDirio1Click(Sender: TObject);
    procedure touch_cima_cupomClick(Sender: TObject);
    procedure touch_baixo_cupomClick(Sender: TObject);
    procedure touch_cima_cupomDblClick(Sender: TObject);
    procedure touch_baixo_cupomDblClick(Sender: TObject);
    procedure Image7Click(Sender: TObject);
    procedure NmerodoCredencimentodoPAFECF1Click(Sender: TObject);
    procedure ImprimirCESTNCMnocupomfiscal1Click(Sender: TObject);
    procedure ExtrairLogdoSAT1Click(Sender: TObject);
    procedure IdentificarCredenciadoraPoS1Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure SATInicializaoAlternativa1Click(Sender: TObject);
    procedure Nfcetimeout1Click(Sender: TObject);
    procedure FormPaint(Sender: TObject);
    procedure SATConectarServidorSAT1Click(Sender: TObject);
    procedure SATCaminhodecomunicaocomServidorSAT1Click(Sender: TObject);
    procedure ConfigurarNmerodoCaixa1Click(Sender: TObject);
    procedure NmerodoCredencimentodaImpressoraECF1Click(Sender: TObject);
    procedure LimiteparaIdentificarConsumidor1Click(Sender: TObject);
    procedure ConfiguraCaminhodeComunicaoIntegrador1Click(Sender: TObject);
    procedure CdigodeIdentificaodoEstabelecimentoJuntoaSEFAZ1Click(
      Sender: TObject);
    procedure AdquirentesPOS1Click(Sender: TObject);
    procedure Nmeromximodecartesaceito1Click(Sender: TObject);
    procedure Modopagamentocommltiploscartes1Click(Sender: TObject);
    procedure ConfigurarFabricanteeModeloSAT1Click(Sender: TObject);
    procedure ECFConvnio09091Click(Sender: TObject);
    procedure ransmitirRespostaFiscalPendente1Click(Sender: TObject);
    procedure Impressorapadro1Click(Sender: TObject);
    procedure N4001Click(Sender: TObject);
    procedure NFCeVersaoManualvm601Click(Sender: TObject);
    procedure Nmerodanota1Click(Sender: TObject);
    procedure CNPJCPFdoCliente1Click(Sender: TObject);
    procedure NomeCliente1Click(Sender: TObject);
    procedure touch_PesquisaNFCeClick(Sender: TObject);
    procedure touch_OpcoesNFCeClick(Sender: TObject);
    procedure NFCenoperodo1Click(Sender: TObject);
    procedure TimerHoraTimer(Sender: TObject);
    procedure CarnResumido1Click(Sender: TObject);
    procedure ibDataSet13BeforePost(DataSet: TDataSet);
    procedure OrdemdaaliquotadeISS1Click(Sender: TObject);
    procedure LarguradoPapel58mm1Click(Sender: TObject);
    procedure LarguradoPapel76mm1Click(Sender: TObject);
    procedure LarguradoPapel80mm1Click(Sender: TObject);
    procedure LarguradoPapelA41Click(Sender: TObject);
    procedure ConfigurarImpressora1Click(Sender: TObject);
    procedure VincularAssinaturaAC1Click(Sender: TObject);
    procedure FormatarIEdoemitentecom12dgitos1Click(
      Sender: TObject);
    procedure EnviarchaveconsultapeloWhatsApp1Click(Sender: TObject);
    procedure CNAEdispensadoatransmissodosarquivosdoEstoque1Click(
      Sender: TObject);
    procedure Frame_teclado1Timer1Timer(Sender: TObject);
    procedure Atualizar1Click(Sender: TObject);
    procedure Timer3Timer(Sender: TObject);
    procedure BalanaAutonoma1Click(Sender: TObject);
    procedure Mesainicialparapesagensautonoma1Click(Sender: TObject);
    procedure Produtolanadonapesagemautonoma1Click(Sender: TObject);
    procedure HorriodeVero1Click(Sender: TObject);
    procedure InformaesdoresponsveltcnicoNFCe1Click(Sender: TObject);
    procedure VersoLeiauteSat0081Click(Sender: TObject);
    procedure ConsultaChaveNFCe1Click(Sender: TObject);
    procedure EnviaremailcomXMLePDFacadavenda1Click(Sender: TObject);
    procedure Crdito1Click(Sender: TObject);
    procedure Dbito1Click(Sender: TObject);
    procedure IdentificaodoPAFNFCe1Click(Sender: TObject);
    procedure MesasAbertasPAFNFCeClick(Sender: TObject);
    procedure VendasIdentificadaspeloCPFCNPJPAFNFCeClick(Sender: TObject);
    procedure ESTOQUETOTALPAFNFCeClick(Sender: TObject);
    procedure IBDataSet150BeforePost(DataSet: TDataSet);
    procedure IBDataSet150BeforeDelete(DataSet: TDataSet);
    procedure ESTOQUEPARCIALPAFNFCeClick(Sender: TObject);
    procedure ppMenuFiscalPAFNFCePopup(Sender: TObject);
    procedure InformarindIntermedNFCe1Click(Sender: TObject);
    procedure ValorLimiteTotalNFCeEstabelecidoSefaz1Click(
      Sender: TObject);
    procedure GerarxPagparaMeioPagamento99Outros1Click(Sender: TObject);
    procedure DriverMFE010515ousuperior1Click(Sender: TObject);
    procedure RecuperarXMLdaNFCe1Click(Sender: TObject);
    procedure PesquisaNFCeemcontingnciaClick(Sender: TObject);
    procedure PopupMenu6Popup(Sender: TObject);
    procedure SmartPOSElginPay1Click(Sender: TObject);
    procedure FunesAdministrativasPosElginPay1Click(Sender: TObject);
    procedure EtiquetaBalancaPesoKG1Click(Sender: TObject);
    procedure EtiquetaBalancaPrecoR1Click(Sender: TObject);
    procedure GeraraoFISCOREDUOZ1Click(Sender: TObject);
    procedure SadasIdentificadaspeloCPFCNPJ1Click(Sender: TObject);
    procedure ESTOQUEANOANTERIOR1Click(Sender: TObject);
    procedure ESTOQUEMUDANADETRIBUTAO1Click(Sender: TObject);
    procedure ESTOQUESUSPENSOOUBAIXADEIE1Click(Sender: TObject);
    procedure ESTOQUEMUDANADEREGIME1Click(Sender: TObject);
    procedure ESTOQUEATUAL1Click(Sender: TObject);
  private
    { Private declarations }
    bUsuarioLogado: Boolean; // Sandro Silva 2015-05-06 Controlar quando o usuário logo e não pedir novamente o login onde executa FormShow()
    bSystray: Boolean;
    NotifyIconData: TNotifyIconData;
    bFechandoCupom: Boolean; // Sandro Silva 2016-02-10 Controlar que pressione F7 durante o fechamento do cupom e cancela a venda na impressora
    bGerarXmlReducaoRecuperada: Boolean; // Sandro Silva 2019-09-09 ER 02.06 UnoChapeco
    procedure AtualizaBase(IBDATABASE: TIBDatabase);
    procedure HabilitaBotaoF11(bHabilitar: Boolean);
    procedure HabilitaBotaoF12(bHabilitar: Boolean);
    //Tratamento dos Ícones da Aplicação
    procedure WMSysCommand(var Msg: TWMSysCommand); Message WM_SysCommand;
    procedure WMTrayIcon(var Msg: TMessage); Message WM_TRAYICON;
    procedure DestroyIcone;
    procedure CriaIcone;

    procedure HabilitarOpcoesMonitor(bHabilitar: Boolean);
    function SequencialItemMesa(sMesa: String): Integer;
    procedure EstoqueSuficiente(sCodigo: String; sDescricao: String;
      dQtd: Double; var sMensagem: String);
    procedure ExcluiRZDuplicada(IBTransaction: TIBTransaction);
    procedure ExcluiDemaisDuplicado(IBTransaction: TIBTransaction);
    procedure BlocoXReducaoZ1(SerieECF: String; sDataRecricar: String);
    {Sandro Silva 2023-02-28 inicio
    procedure BlocoXEstoque1(dtInicial: TDate; dtFinal: TDate;
      sDataRecricar: String);
    }
    function BlocoxTransmitirPendente1(sTipo: String; sSerieECF: String;
      bAlerta: Boolean = True): Integer;
    function BlocoxConsultarRecibo1: Boolean;
    function BlocoXServidorConfigurado1: Boolean;
    function BlocoXAlertarPendente1(sTipo: String; sSerieECF: String;
      bExibirAlerta: Boolean): String;
    procedure BlocoxRestaurarArquivos1(sTipo, sPasta: String;
      sSerieECF: String; bApenasUltimo: Boolean = False);
    procedure BlocoXSelecionaCertificadoDigital;
    function GetTotalMesa(iMesa: Integer): Double;
    function GetBonecoEscolhido(iMesa: Integer): String;
    procedure GeraEstoqueDia(sDataEstoque: String = '');// Sandro Silva 2016-03-03;
    function HTTPPost(sUrl: String;
      Params: TIdMultipartFormDataStream): String;
    function Produto(sTexto: String; var sQuantidade: String;
      var sValor: String): String;
    function ConfiguraCaminhoComunicaoServidorSat: Boolean;
    procedure TEFDeletarCopiasArquivos(FsDiretorio: String);
    function TransacaoComPoS(TipoConexaoPOS: TTipoConexaoPOS): Boolean;
    function TEFValorTransacao(sArquivoTEF: String): Currency;
    procedure AjustaAlteracaDesconto;
    procedure GerarArquivoMF(sTipoArquivo: String);
    procedure GerarArquivoMFD(sTipoArquivo: String);
    procedure PesagemAutonoma;
    procedure ImprimePesagemAutonoma(sCupom: String);
    procedure ValidaSeMesaJaTemItens(sAlteracaregistro: String;
      sMesaPesagem: String);
    function AchaMesaLivre: Integer;
    function SelecionaMesaInicialPesoAutonomo: Integer;
    procedure SalvaConfiguracaoMesaInicialPesagemAutonoma;
    procedure SalvaConfiguracaoProdutoPesagemAutonoma;
    procedure OcultaGerenciadorVendas;
    procedure FormaExtraLancaReceber(sIndiceFormaExtra: String;
      sCaixa: String; sCupom: String; dValor: Double; dtEmissao: TDate;
      dtVencimento: TDate);
    procedure FechaVendaRapidaFormaPagamentoCartao;
    procedure TransmiteContingenciaAutomatico(data: TDate; Caixa: String);
    procedure LeConfiguracaoTipoEtiquetaBalanca;
    procedure VincularAssinaturaAC(bForcarObterNovaAssinaturaAC: Boolean = False);
    procedure EstoqueParcial;
  protected
    procedure WndProc(var Msg: TMessage); override;
  public
    { Public declarations }
    PosElginPay: TSmallElginPayPos; // Sandro Silva 2022-02-11
    IntegradorCE: TIntegradorFiscal; // Sandro Silva 2018-07-03
    TransacoesCartao: TTransacaoFinanceira;
    iiMesa: Integer;
    ContingenciaPendente: TContingencia; // Sandro Silva 2019-08-14

    spdNFCeDataSets1: TspdNFCeDataSets;
    spdNFCe1: TspdNFCe;

    sUltimaAdquirenteUsada: String; // Sandro Silva 2017-05-19
    sforma: String; // Sandro Silva 2017-05-17

    iOldWidth: Integer;
    iOldHeight: Integer;
    //
    ComponentMesa: TLabel;
    FCupom: TextFile;

    bBlocoxRZPendente: Boolean; // Sandro Silva 2017-03-23
    bBlocoxEstoquePendente: Boolean; // Sandro Silva 2017-03-28
    bOcultarMensagemArquivoAssinado: Boolean; // Sandro Silva 2017-07-27
    bECF0909: Boolean; // Sandro Silva 2017-08-22 Identifica que o ECF é do convênio 09/09.
    sImpressoraDestino: String; // Sandro Silva 2017-09-06
    sImpressoraPadraoWindows: String; // Sandro Silva 2017-09-06

    F: TextFile;
    sRazaoSocialSmallsoft: String;
    fDescontoNoTotal, fTotal, fPreco, fDesconto : Double;
    bCarneResumido: Boolean; // Sandro Silva 2018-04-27
    bImprimeConferencia: Boolean; // 2015-08-31 ER 02.03 Requisito XLVII, item 19, alínea "b"
    bFechandoMesasAbertas, bPedeDadosOs, bData, bISS, bOffLine, bCPF_CNPJ, bServico, bf12, bPagamento, bAberto, bChaveSemaforo, bChaveGrade, bApaga, bLibera,
    bFlag2: Boolean; // False define calcular o troco a partir dos valores das formas de pagamento
    bCupomAberto, bSairDoPrograma, bVolta, bNFazMaisNada, bChave, bNaoSaiComESC, bFechaTudo, bFecha : Boolean;
    iMesasAbertas, iMesaAberta, iStatusGaveta, iGaveta, iPeso, iTrunca, iItem, iVias, iAjuste, icupom, iCCF, iGNF, iParcelas, bButton, Retorno : Integer;
    sTamanhoPapel: String;
    bFechaRapidoCartao: Boolean; // Sandro Silva 2021-09-08
    //
    Senha, Usuario: String;
    sEnderecoClifor: String; // Sandro Silva 2016-09-30
    sCidadeClifor: String; // Sandro Silva 2016-09-30
    //
    sModeloFabricante: String; // Sandro Silva 2018-05-07
    sOrdemAliquotaISS: String; // Sandro Silva 2018-05-07
    sSenhaDeUsuario, sMotivoContingencia, sTipoDocumento, sTipoDocumento2, sMenuFiscal, sCreditosDF, sPromissoria, sConcomitante, sUF, sPERFIL, sMesaOuConta, sMesasOuContas, sSuperCodigo, sF4Conferencia, sMensagemMesaConferida,
    sHoraMovimento, sDataMovimento, sF, sMesas, sMesasOffLine, sStatusECF, sStatusECF_RES, sMD5DaLista, sTipo, sCPF_CNPJ_Validado,
    sPastaVoltaOffLine, sPasta, sAjuda, sAbreComOLeitor, sAviso, sPlanoDeContas, sOs, sOrcame, sProximo, sProximo27, sProximo150, sProximo027, sProximo28, sProximo38, sGertec, sTipoEtiqueta, sIdentificaConsumidor, sTef, sPastaDoExecutavel, sNumeroDeSerieDaImpressora : String;
    sDataDoCupom, sHoraDoCupom, sSangria, sModeloECF, sModeloECF_Reserva, sMFD_, sBalanca, sCRLF, sCortaPapel, sTipoImpressora, sCripto, sConveniado, sCaixa, sArquivo, sAtual, sAtualOnLine, OKSim, sVendedor, sGaveta,
    sRGTurbo, sUltimoItem, sPorta, sSeriais, sMensagemPromocional ,sVendedorFixo ,sAliquotas, ConfCusto,
    ConfNegat, sPrazo, ConfCasas, ConfPreco, ModoMercado, sDiretorio, sCupomTEF, sCupomTEFReduzido, sCupomTEFCancelado,
    sMensagemNFMod02, sMensagemParaibaLegal,
    sPropaganda,
    sLiberacao, sLinha, sTipoParc, sParcelas, sValorTot, sValorSaque,
    sCodigoIdentificaEcf, // CODIGO DA TABELA NACIONAL DE CÓDIGOS DE IDENTIFICAÇÃO DE ECF
    sValorLimiteIdentificaConsumidor, // Sandro Silva 2017-05-05 UF pode exigir identificação do consumidor a partir de valor limite da NFC-e
    sValorLimiteSemIdentificarConsumidor, // Sandro Silva 2021-07-12 UF pode definir valor total limite da NFC-e sem identificação de consumidor
    sAliquotasISS, // Sandro Silva 2017-11-09 Polimig
    sIdentificaPOS,
    sDebitoOuCredito,
    sNomeRede,
    sTransaca,
    sAutoriza,
    sFinaliza,
    sIdentifi,
    sBonecoEscolhido,
    sReferenteNFModelo2, sSerieReferenteNFModelo2, sSubSerieReferenteNFModelo2,
    sQuantidade, sValor, sFormas, sFuso,  sVersaoLayoutNFCe: String;
    bHorarioDeVerao: Boolean; // Sandro Silva 2019-02-27
    sREQ, sRESP, sExec: String;
    bMonitorMobile: Boolean;
    fTotalPago, fTEFPago, fQuantidadeVendida : Real;  // Produto pesado
    iMinutosSoneca, iPagina, iCaixa, iI, iII, iIz,iIw, iIj: Integer;
    xBlockInput: function (Block: BOOL): BOOL; stdcall;
    aWinDir: array[0..200] of Char;
    //
    fTributos_federais, fTributos_estaduais, fTributos_municipais: Real;
    //
    sTipoImpressao: String;
    //
    iNumeroMaximoDeCartoes: Integer; // Sandro Silva 2017-07-10 Número máximo de cartões
    bStatusRede, bStatusFiscal, bStatusECF: Boolean;
    //
    sHRGerencial: String; // Sandro Silva 2017-11-10 Polimig
    bModoMultiplosCartoes, bChaveGerencialOk, bImp1, bImp2, bImp3, bImp4, bImp5 : Boolean;
    bImportandoDAVorOS: Boolean;
    bFechandoMesasAposReducaoZ: Boolean; // 2015-10-16 Identifica se a mesa é fechada antes ou após a Redução Z
    List_paramentros : TStrings;
    iTimeOutDLLG2: Integer; // Sandro Silva 2016-04-02
    sCaminhoMobile: String; // Sandro Silva 2016-05-23 Caminho onde executará o mobile.exe
    sOrdemExtraNFCe1: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe2: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe3: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe4: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe5: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe6: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe7: String; // Sandro Silva 2016-08-12
    sOrdemExtraNFCe8: String; // Sandro Silva 2016-08-12
    sAvancoPapel: String; // Sandro Silva 2016-08-26 Apenas Modelo 12
    sImprimirCEST: String; // Sandro Silva 2016-09-13
    sinfRespTec: String; // Sandro Silva 2019-04-11

    bBalancaAutonoma: Boolean; // Sandro Silva 2018-12-18
    bPesou: Boolean; // Sandro Silva 2018-12-18
    bTrocou: Boolean; // Sandro Silva 2019-01-21
    sPesoAutonomo: String; // Sandro Silva 2019-01-18
    sCodigoProdutoPesado: String; // Sandro Silva 2019-01-22
    iMesaInicialPesagem: Integer; // Sandro Silva 2019-01-24
    iEtapaPesagem: Integer; // Sandro Silva 2019-01-30
    iDiasCartaoCredito: Integer; // Sandro Silva 2019-11-19
    iDiasCartaoDebito: Integer; // Sandro Silva 2019-11-19
    sSerialSmall: String; // Sandro Silva 2020-09-29
    sChaveMeiCifrada: String; // Sandro Silva 2020-09-29
    ClienteSmallMobile: TSmallMobileCliente;
    //
    function CortarImagem(Imagem: TGraphic; Valores: TRect): TBitmap;
    //
    function MontaMesa(pX: Integer; pY: Integer; pI: Integer): Boolean;
    function Small_InputBox(pP1, pP2, pP3: String): String;
    function Small_InputComboBoxPadrao(pP1, pP2, pP3: String;
      TipoInformacaoCombo: TTipoInfoCombo): String;
    function DisplayGertec(pP1: String): boolean;
    function Display(sP1: String; sp2: String): Boolean;
    function EstoqueDoDia(P1: Boolean): Boolean;
    function GetNumeroCaixa(sModeloDocumento, sNumeroSerie: String): String;
    function Teclas_touch(P1: boolean) : boolean;

    procedure SetIconSysTrayIcone(FileIcon: String);
    function GetIconHandleSysTrayIcone: THandle;
    procedure GravaECF(sNumeroSerie: String);
    procedure AtualizaECFSCripta;
    procedure EliminaECFCripta(sNumeroSerie: String);
    procedure ECFAutorizados(var slECF: TStringList);
    function ECFnoCripta(sNumeroSerie: String): Boolean;
    procedure AtualizaECFOffLine;
    function Demais(sP1:String): Boolean; // 2015-10-06
    procedure EmitirReducaoZ(Sender: TObject);
    function SQLSelectDadosRequisitoXXIV: String;
    function ExtrairConfiguracao(sTexto: String; sSigla: String;
      bLimparNumero: Boolean = True): String;
    //
    function AliquotaISSConfigura: String;
    function OrdemAliquotaISSECF(bConfigurar: Boolean): String;
    procedure OcultaPanelMensagem;
    procedure ExibePanelMensagem(sMensagem: String; bUsarDisplay: Boolean = False);// Sandro Silva 2016-03-03;
    procedure DeletaDataSet25;
    function GetAssinaturaHttpPost(sSerial: String; sCnpj: String;
      sFabricante: String; sSerieSAT: String): String;
    function CalculaDescontoPromocional: Double;
    procedure AjustarObjetosCupomNaTela;

    function SubTotalAlteraca(sModelo: String; iCupomAtual: Integer;
      sCaixa: String; ValorPadrao: Currency): Currency; // Sandro Silva 2019-04-30 function SubTotalAlteraca: Currency;
    procedure AlertaSonoro;

    procedure AjustarDiferencaParcelasCartao(dTotalTransacaoCartao: Currency;
      dValorFormaPagtoCartao: Currency; iTotalParcelasVenda: Integer;
      iParcelasTransacao: Integer);

    function TEFValorTotalAutorizado(): Currency;
    function TEFTextoImpressaoCupomAutorizado(sCampo: String): String;
    function TEFContaArquivos(sTipoComCaminho: String): Integer;

    function PDV_CupomAberto: Boolean;
    function PDV_ImpressaoNaoSujeitoaoICMS(sTexto: String;
      bPDF: Boolean = False): Boolean;
    function PDV_SubTotal(Pp1: Boolean): Currency;
    function PDV_DataeHoraDaImpressora(pP1: Boolean): String;
    function PDV_RetornaAliquotas(pP1: Boolean): String;
    function PDV_StatusGaveta(pP1: Boolean): String;
    function PDV_AbreGaveta(pP1: Boolean): Boolean;
    function PDV_NumeroSerie(pP1: Boolean): String;
    function PDV_GrandeTotal(pP1: Boolean): String;
    function PDV_NumeroIntervencoesTecnicas(pP1: Boolean): String;
    function PDV_NumeroDeReducoesZ(pP1: Boolean): String;
    function PDV_TipoDaImpressora(pP1: Boolean): String;
    function PDV_MarcaImpressora(pP1: Boolean): String;
    function PDV_ModeloImpressora(pP1: Boolean): String;
    function PDV_VersaoSBImpressora(pP1: Boolean): String;
    function PDV_DataInstalacaoSB(pP1: Boolean): String;
    function PDV_HoraInstalacaoSB(pP1: Boolean): String;
    function PDV_CodigoModeloECF(pP1: Boolean): String;
    function PDV_DadosDaUltimaReducaoZ(pP1: Boolean): String;
    function PDV_FechaCupom2(pP1: Boolean): Boolean;
    function PDV_Inicializa(pP1: String): Boolean;
    function PDV_NumeroDoCaixa(pP1: Boolean): String;
    function PDV_CancelaUltimoCupom(pP1: Boolean): Boolean;
    function PDV_FechaCupom(pP1: Boolean): Boolean;
    function PDV_Pagamento(pP1: Boolean): Boolean;
    function PDV_NumeroDoCupom(pP1: Boolean): String;
    function PDV_FaltaPagamento(pP1: Boolean): Boolean;
    procedure PDV_GerarArquivosRequisitoXII;
    function PDV_ECF0909: Boolean;
    function PDV_DataMovimento(pP1: Boolean): String;
    function ImpressaoNaoSujeitoaoICMS(sP1: String; bPDF: Boolean = False; LarguraPapel: Integer = 640): Boolean; // Sandro Silva 2018-11-20 function ImpressaoNaoSujeitoaoICMS(sP1: String; bPDF: Boolean = False): Boolean;
    function UsaIntegradorFiscal(UF: String = ''): Boolean;
    procedure AcertaPendenciaCancelAlteraca;
    procedure ExibeAlertaContingenciaPendente;
    function SenhaAdministradorOk: Boolean;
    procedure CancelaVendaAtualNoBanco(sPedido: String; sData: String;
      bValidacaoObrigatoria: Boolean);
    function SecaoFrente(): String;
    function ImportarDaPesquisa(sTipo: String): String;
    procedure ConfiguraCredencialTecnospeed;
  end;

var
  Form1: TForm1;
  sFormaPag: String; // 2015-06-29
  //
  // declaração das funções da DLL
  // teclado Gertec 44 DISC
  //
  men: array[0..40] of byte;

  function OpenTec44: integer; stdcall; external 'tec44win.dll';
  function CloseTec44: integer; stdcall; external 'tec44win.dll';
  function FormFeed: integer; stdcall; external 'tec44win.dll';
  function LineFeed: integer; stdcall; external 'tec44win.dll';
  function CarRet: integer; stdcall; external 'tec44win.dll';
  function GoToXY(lin, col: integer): integer; stdcall; external 'tec44win.dll';
  function DispStr(Str: LPSTR): integer; stdcall; external 'tec44win.dll';

  function AssinaturaDigital(sP1:String): String;
  function ConfiguraNFCE(sP1:Boolean) : Boolean;
  procedure AtualizaDetalhe(IBTransaction: TIBTransaction; sTipo: String; sNumero: String; sCaixaOld: String; sCaixaNew: String; sNumeroDocumento: String; sSituacao: String);
  function IncrementaGenerator(sGenerator: String; iNumero: Integer): Int64; // Sandro Silva 2017-12-15  Integer;
  function QtdVendaSemCommit(sCodigo: String): Real; // Sandro Silva 2019-03-18 function QtdVendaSemCommit(sCodigo: String): Integer;
  function QtdCanceladaSemCommit(sCodigo: String): Real; // Sandro Silva 2019-03-18 function QtdCanceladaSemCommit(sCodigo: String): Integer;
  procedure DesabilitaHabilitaImpressoes(bHabilita: Boolean);
  procedure LogFrente(sTexto: String);
  procedure SmallMsg(sMsg: String);
  function SmallMsgBox(const Text, Caption: PChar; Flags: Longint): Integer;
  function ImprimeTracos(Qtd: Integer = 46): String;

implementation

uses
   SmallFunc
  , SMALL_DBEdit
  , upafecfmensagens
  , Unit27 // Sandro Silva 2017-10-19
  , uimpressaopdf
  , ufuncoesfrentepaf // Sandro Silva 2020-08-24
  , ufuncoesblocox
  , usmallprint
  , AJBarcode // Sandro Silva 2019-01-15
  , uajustaresolucao // Sandro Silva 2021-09-21


  , Unit2, Unit3, Unit6, Unit4, Unit7, Unit10, Unit12,
  Unit13, {Unit5,} Unit22, formas,
  _small_1,
  _small_2,
  _small_3, // dll carregada dinamicamente
  _small_12,
  _small_14,
  _small_15,
  _small_17, // dll carregada dinamicamente
  _small_59,
  _small_65,
  _small_99 // Sandro Silva 2020-09-22
  , Unit8
  , UNIT9
  , Unit11
  , Unit14
  , SelecionaCertificado
  , Unit15
  , udadospos
  , uclientetef
  , ucadadquirentes
  , _Small_IntegradorFiscal
  , upesquisaparaimportar
  , uatualizaestruturadb
// Sandro Silva 2022-09-23  , urequisitospafnfce
  , upromocoesscanntech
  , uregistrosdopafecf // Sandro Silva 2022-03-29
  , upafecfmenufiscal // Sandro Silva 2022-03-29
  , urelatoriosgerenciais // Sandro Silva 2022-03-29
  , ufuncoestef // Sandro Silva 2022-06-13
  , uconstantes_chaves_privadas
  , urequisitospafnfce
  , upafnfce // Sandro Silva 2022-09-23
  , ucredencialtecnospeed
  //, uClasseValidaRecursos
  , uValidaRecursosDelphi7;

{$R *.DFM}

procedure CriarAtalhoNoIniciar(sArquivoExe: String; sTituloAtalho: String);
var
  ShellLink: IShellLink;
  PersistFile: IPersistFile;
  NomeLnk: WideString;
  DirStartup: String;
  ItemIDList: PItemIDList;
begin
  // Localiza a pasta Inicializar
  SetLength(DirStartup, MAX_PATH);
  SHGetSpecialFolderLocation(Application.Handle, CSIDL_COMMON_STARTUP, ItemIDList);
  SHGetPathFromIDList(ItemIdList,PChar(DirStartup));
  SetLength(DirStartup, StrLen(PChar(DirStartup)));

  ShellLink := CreateComObject(CLSID_ShellLink) as IShellLink;
  PersistFile := ShellLink as IPersistFile;
  with ShellLink do
  begin
    // Informe o Título do ícone
    SetDescription(PChar(sTituloAtalho));
    // Informe o Caminho e o Arquivo
    SetPath(PChar(sArquivoExe));
    // Argumentos para linha de comando, caso existam
    SetArguments(PChar(''));
    // Informe o Caminho e o Arquivo
    SetWorkingDirectory(PChar(ExtractFilePath(sArquivoExe)));
  end;
  // Informe o nome do Atalho
  NomeLnk := DirStartup + '\' + ChangeFileExt(sTituloAtalho, '.lnk');
  PersistFile.Save(PWideChar(NomeLnk), False);
end;

procedure ApagarAtalhoIniciar(sTituloAtalho: String);
var
  DirStartup: String;
  ItemIDList: PItemIDList;
  NomeLnk: WideString;
begin
  // Localiza a pasta Inicializar
  SetLength(DirStartup, MAX_PATH);
  SHGetSpecialFolderLocation(Application.Handle, CSIDL_COMMON_STARTUP, ItemIDList);
  SHGetPathFromIDList(ItemIdList,PChar(DirStartup));
  SetLength(DirStartup, StrLen(PChar(DirStartup)));
  NomeLnk := DirStartup + '\' + ChangeFileExt(sTituloAtalho, '.lnk');
  if FileExists(NomeLnk) then
  begin
    DeleteFile(NomeLnk);
  end;
end;

function TForm1.CortarImagem(Imagem: TGraphic; Valores: TRect): TBitmap;
var
  bmp, tbmp: TBitmap;
  drect: TRect;
begin
  bmp := TBitmap.Create;
  bmp.Height := Valores.Bottom - Valores.Top;
  bmp.Width  := Valores.Right - Valores.Left;
  drect := Bounds(0, 0, bmp.Width, bmp.Height);
  tbmp := TBitmap.Create;
  try
    tbmp.Height := Imagem.Height;
    tbmp.Width  := Imagem.Width;
    tbmp.Canvas.Draw(0,0,Imagem);
    bmp.Canvas.CopyRect(drect, tbmp.Canvas, Valores);
  except end;
  Result := bmp;
  tbmp.Free;
end;

function DownloadDoArquivo(pP1: String; pP2: String) : Boolean;
begin
  //
  try
    UrlDownloadToFile(nil, PChar(pP1),PChar(pP2), 1, nil);
  except
   // on E: Exception do  SmallMsg('Erro ao baixar arquivo: '+chr(10)+pP1+chr(10)+E.Message);
  end;
  //
  Result :=True;
  //
end;

function ArquivoConexaoSmallmobile: Boolean;
begin
  Result := FileExists(Form1.sAtual+'\'+FILECONEXAO);
  if Result = False then
    SmallMsg('Não foi encontrada a configuração para conexão com Smallmobile');
end;

function IncrementaGenerator(sGenerator: String; iNumero: Integer): Int64; // Sandro Silva 2017-12-15  Integer;
var
  IBQDADOS: TIBQuery;
begin
  Result := 0;
  IBQDADOS := CriaIBQuery(Form1.ibQuery65.Transaction);
  try
    IBQDADOS.Close;
    IBQDADOS.SQL.Text :=
    'select gen_id(' + sGenerator +  ',' + IntToStr(iNumero) + ') from rdb$database';
    IBQDADOS.Open;
    Result := StrToInt64Def(IBQDADOS.FieldByName('GEN_ID').AsString, 1);
  except

  end;
  FreeAndNil(IBQDADOS);
end;

function QtdVendaSemCommit(sCodigo: String): Real; // Sandro Silva 2019-03-18 function QtdVendaSemCommit(sCodigo: String): Integer;
var
  IBQDADOS: TIBQuery;
begin
  Result := 0;
  IBQDADOS := CriaIBQuery(Form1.ibDataSet27.Transaction);
  try
    IBQDADOS.Close;
    IBQDADOS.SQL.Text :=
    'select sum(coalesce(QUANTIDADE, 0)) as QTDTOTAL ' +
    'from ALTERACA ' + // revisado
    'where CODIGO = ' + QuotedStr(sCodigo) +
    ' and (TIPO = ''LOKED'' or TIPO = ''DEKOL'')';
    IBQDADOS.Open;
    Result := IBQDADOS.FieldByName('QTDTOTAL').AsFloat; // Sandro Silva 2019-03-18 Result := IBQDADOS.FieldByName('QTDTOTAL').AsInteger;
  except

  end;
  FreeAndNil(IBQDADOS);
end;

function QtdCanceladaSemCommit(sCodigo: String): Real; // Sandro Silva 2019-03-18 function QtdCanceladaSemCommit(sCodigo: String): Integer;
var
  IBQDADOS: TIBQuery;
begin
  Result := 0;
  IBQDADOS := CriaIBQuery(Form1.ibDataSet27.Transaction);
  try
    IBQDADOS.Close;
    IBQDADOS.SQL.Text :=
      'select sum(coalesce(QUANTIDADE, 0)) as QTDTOTAL ' +
      'from ALTERACA ' + // Revisado
      'where CODIGO = ' + QuotedStr(sCodigo) +
      ' and (TIPO = ''CANLOK'' or TIPO = ''KOLNAC'')';
    IBQDADOS.Open;
    Result := IBQDADOS.FieldByName('QTDTOTAL').AsFloat; // Sandro Silva 2019-03-18 Result := IBQDADOS.FieldByName('QTDTOTAL').AsInteger;
  except

  end;
  FreeAndNil(IBQDADOS);
end;

procedure DesabilitaHabilitaImpressoes(bHabilita: Boolean);
begin
  Form1.Confernciademesa1.Enabled              := bHabilita;
  Form1.RetornodeVariveisdaImpressora1.Enabled := bHabilita;
  Form1.SuprimentoReforodecaixa1.Enabled       := bHabilita;
  Form1.Sangria1.Enabled                       := bHabilita;
  Form1.Fechamentodocaixa1.Enabled             := bHabilita;
  Form1.Cadastraraliquota1.Enabled             := bHabilita;
  Form1.Formasdepagamento1.Enabled             := bHabilita;
  Form1.LXLeituraX1.Enabled                    := bHabilita;// Sandro Silva 2019-08-23 UnoChapeco  True;// Sandro Silva 2017-11-08 Polimig  bHabilita;
  Form1.LMF1.Enabled                           := bHabilita;// Sandro Silva 2019-08-23 UnoChapeco  True;// Sandro Silva 2017-11-08 Polimig   bHabilita;
  Form1.EspelhoMFD1.Enabled                    := True; //2015-09-14 bHabilita;
  Form1.ArqMF1.Enabled                         := True; //2015-09-14 bHabilita;
  Form1.ArqMFD1.Enabled                        := True; //2015-09-14 bHabilita;
  Form1.Relatriogerancial1.Enabled             := bHabilita;
  Form1.IdentificaodoPAFECF1.Enabled           := bHabilita;
  Form1.ransfernciaentremesas1.Enabled         := bHabilita;
  Form1.MesasAbertas1.Enabled                  := bHabilita;
  Form1.ArqAC17041.Enabled                     := True; // 2015-09-14
  Form1.ParmetrosdeConfigurao1.Enabled         := bHabilita;
  if (Consumo = False) and (Copy(Form1.sConcomitante, 1, 2) <> 'OS') then
    Form1.MeiosdePagto1.Enabled                  := True
  else
    Form1.MeiosdePagto1.Enabled                := bHabilita;
end;

procedure AtualizaDetalhe(IBTransaction: TIBTransaction; sTipo: String;
  sNumero: String; sCaixaOld: String; sCaixaNew: String;
  sNumeroDocumento: String; sSituacao: String);
// Atualiza o Número do documento nas tabelas detalhes
var
  IBQuery: TIBQuery;
  bAtualizaOrigemImportacao: Boolean; // Sandro Silva 2021-08-17
begin
  IBQuery := CriaIBQuery(IBTransaction);
  try
    if (sNumero <> '') and (sTipo = 'ORÇAMENTO') then
    begin
      //Sandro Silva 2015-05-18 Salva NUMERONF em ORCAMENT
      try
        Form1.ibDataSet37.Close;
        Form1.ibDataSet37.SelectSQL.Text :=
          'select * ' +
          'from ORCAMENT ' +
          'where PEDIDO = ' + QuotedStr(sNumero) +
          ' and coalesce(CAIXA, '''') = ' + QuotedStr(sCaixaOld);
        Form1.ibDataSet37.Open;
        while Form1.ibDataSet37.Eof = False do
        begin

          // Ficha 5414
          // Somente seleciona estoque se escolher bImportarServicoDeOsOrcamento = False
          bAtualizaOrigemImportacao := True;
          if bImportarServicoDeOsOrcamento = False then
          begin
            // Usando query separada para evitar problema de posicionamento de registro selecionado em relação ao item sendo lançado na venda
            IBQuery.Close;
            IBQuery.SQL.Text :=
              'select CODIGO, DESCRICAO, TIPO_ITEM ' +
              'from ESTOQUE ' +
              'where CODIGO = ' + QuotedStr(Form1.ibDataSet37.FieldByName('CODIGO').AsString);
            IBQuery.Open;

            if (IBQuery.FieldByName('TIPO_ITEM').AsString <> '09') // Não é serviço
              or (bImportarServicoDeOsOrcamento) // Ou Respodeu para importar serviço
            then
              bAtualizaOrigemImportacao := True
            else
              bAtualizaOrigemImportacao := False;
          end;

          if bAtualizaOrigemImportacao then
          begin
            Form1.ibDataSet37.Edit;
            Form1.ibDataSet37.FieldByName('NUMERONF').AsString := sNumeroDocumento;
            Form1.ibDataSet37.FieldByName('CAIXA').AsString    := sCaixaNew;
            Form1.ibDataSet37.Post;
          end;
          {Sandro Silva 2021-08-17 fim}
          
          Form1.ibDataSet37.Next;
        end;

      except

      end;

    end;

    if (sNumero <> '') and (sTipo = 'OS') then
    begin
      //Sandro Silva 2015-05-19 Salva ITENS001.NUMERONF, ITENS003.NUMERONF, OS.NF e OS.SITUACAO
      try
        //Tabela ITENS001
        IBQuery.Close;
        IBQuery.SQL.Text :=
          'update ITENS001 set ' +
          'NUMERONF = ' + QuotedStr(sNumeroDocumento + 'I') +
          ' where NUMEROOS = ' + QuotedStr(sNumero);
        IBQuery.ExecSQL;

        // Ficha 5414
        if bImportarServicoDeOsOrcamento then
        begin
          //Tabela ITENS003
          IBQuery.Close;
          IBQuery.SQL.Text :=
            'update ITENS003 set ' +
            'NUMERONF = ' + QuotedStr(sNumeroDocumento + 'I') +
            ' where NUMEROOS = ' + QuotedStr(sNumero);
          IBQuery.ExecSQL;
        end;
        {Sandro Silva 2021-08-17 fim}

        // Tabela OS
        IBQuery.Close;
        IBQuery.SQL.Text :=
          'update OS set ';
        if sSituacao <> '' then
          IBQuery.SQL.Add('SITUACAO = ' + QuotedStr('Fechada') + ', ');

        IBQuery.SQL.Add('NF = ' + QuotedStr(sNumeroDocumento + 'I') +
                        ' where NUMERO = ' + QuotedStr(sNumero));
        IBQuery.ExecSQL;
      except
      end;
    end;
  finally
    FreeAndNil(IBQuery);
  end;
end;

function GeraArquivoCriptografado(pP1: String): Boolean;
var
  Mais1Ini: TIniFile;
  sKey, sAtual: String;
begin
  // ---------------------------- //
  // Grava arquivo criptografado  //
  // com o numero serial do ECF   //
  // ---------------------------- //
  GetDir(0,sAtual);
  sKey := CHAVE_CIFRAR;
  Form1.LbBlowfish1.GenerateKey(sKey);
  Mais1ini := TIniFile.Create(NOME_ARQUIVO_AUXILIAR_CRIPTOGRAFADO_PAF_ECF); // Sandro Silva 2022-12-02 Unochapeco Mais1ini := TIniFile.Create('arquivoauxiliarcriptografadopafecfsmallsoft.ini');
  //
  Mais1Ini.WriteString('ECF','SERIE', Form1.LbBlowfish1.EncryptString(alltrim('0'))); // Cripta o Edit1
  Mais1Ini.WriteString('ECF','GT', Form1.LbBlowfish1.EncryptString(alltrim('0')));   // Cripta o Edit2
  Mais1Ini.WriteString('ECF','CGC',Form1.LbBlowfish1.EncryptString(alltrim(Form1.ibDataSet13.FieldByName('CGC').AsString)));
  //
  Mais1Ini.WriteString('R01','14',Form1.LbBlowfish1.EncryptString(LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF))); // CGC
  Mais1Ini.WriteString('R01','15',Form1.LbBlowfish1.EncryptString(LimpaNumero(IE_SOFTWARE_HOUSE_PAF)));      // IE
  Mais1Ini.WriteString('R01','16',Form1.LbBlowfish1.EncryptString(IM_SOFTWARE_HOUSE_PAF));          // IM
  Mais1Ini.WriteString('R01','17',Form1.LbBlowfish1.EncryptString(RAZAO_SOCIAL_SOFTWARE_HOUSE_PAF));
  //Mais1Ini.WriteString('R01','17',Form1.LbBlowfish1.EncryptString(RAZAO_SOCIAL_SMALLSOFT));
  Mais1Ini.WriteString('R01','18',Form1.LbBlowfish1.EncryptString('Small Commerce'));
  Mais1Ini.WriteString('R01','19',Form1.LbBlowfish1.EncryptString('0112'));
  //
  Mais1Ini.WriteString('R01','99',
  Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(
  Form1.ibDataSet13.FieldByName('CGC').AsString+
  LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF)+
  LimpaNumero(IE_SOFTWARE_HOUSE_PAF)+
  IM_SOFTWARE_HOUSE_PAF+
  RAZAO_SOCIAL_SOFTWARE_HOUSE_PAF+
  //RAZAO_SOCIAL_SMALLSOFT +
  'Small Commerce'+
  '0112'+
  ''
  ))) // Encrypta e grava o hash das informações
  );
  //
  Mais1Ini.WriteString('DAV','I',Form1.LbBlowfish1.EncryptString('X'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)));
  Mais1Ini.WriteString('CONCOMITANTE','I',Form1.LbBlowfish1.EncryptString(pP1+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)));
  Mais1Ini.WriteString('UF','I',Form1.LbBlowfish1.EncryptString(Form1.ibDataSet13.FieldByName('ESTADO').AsString+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)));
  Mais1Ini.WriteString('PERFIL','I',Form1.LbBlowfish1.EncryptString('0'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)));
  //
  Mais1Ini.Free;
  //
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin
    SmallMsg('Este programa vai ser fechado para carregar as novas configurações.')
  end
  else
  begin
    SmallMsgBox('Este programa vai ser fechado para carregar as novas configurações.', 'Atenção', MB_ICONINFORMATION + MB_OK);
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
  end;

  Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
  FecharAplicacao(ExtractFileName(Application.ExeName));
  //
  Result := True;
  //
end;

procedure ExibeScrollCupom(bVisible: Boolean);
begin
  if bVisible = False then
  begin
    Form1.touch_baixo_cupom.Visible := bVisible;
    Form1.touch_cima_cupom.Visible  := bVisible;
  end;

  if Form1.Memo3.Top <= Form1.Label_11.Top then
  begin
    if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF = '01') or (Form1.sModeloECF = '99') then
    begin
      Form1.touch_cima_cupom.Left     := Form1.Memo3.BoundsRect.Right + AjustaAltura(4); // Sandro Silva 2021-09-21 Form1.touch_cima_cupom.Left     := Form1.Memo3.BoundsRect.Right + Form1.AjustaAltura(4);
      Form1.touch_baixo_cupom.Left    := Form1.touch_cima_cupom.Left;
      Form1.touch_baixo_cupom.Visible := bVisible;
      Form1.touch_cima_cupom.Visible  := bVisible;
      Form1.touch_baixo_cupom.BringToFront;
      Form1.touch_cima_cupom.BringToFront;
      Form1.touch_baixo_cupom.Repaint;
      Form1.touch_cima_cupom.Repaint;
    end;
  end;
end;

function Audita(sAto, sModulo, sUsuario, sHistorico: String; ValorDe, ValorPara: Double): Boolean;
var
  sRegistro : String;
begin
  //
  try
    //
    try
      Form1.ibDataSet100.Close;
      Form1.ibDataSet100.SelectSql.Clear;
      Form1.ibDataset100.SelectSql.Add('select gen_id(G_AUDIT0RIA,1) from rdb$database');
      Form1.ibDataset100.Open;
    except
      SmallMsg('Erro na tabela de auditoria. Cod. 1');
    end;
    //
    sRegistro := '1'+StrZero(StrToInt(Form1.ibDataSet100.FieldByName('GEN_ID').AsString),9,0);
    Form1.ibDataset100.Close;
    //
    Form1.ibDataSet100.Close;
    Form1.ibDataSet100.SelectSql.Clear;
    Form1.ibDataSet100.SelectSql.Add('insert into AUDIT0RIA (ATO, MODULO, USUARIO, HISTORICO, VALOR_DE, VALOR_PARA, DATA, HORA, REGISTRO) values('
            +QuotedStr(sAto)+', '   //Ato
            +QuotedStr(sModulo)+', '   //Modulo
            +QuotedStr(sUsuario)+', '   //Usuario
            +QuotedStr(RightStr(sHistorico, 80))+', '   //Historico
            +QuotedStr(StrTran(StrZero(ValorDe,10,2),',','.'))+', '
            +QuotedStr(StrTran(StrZero(ValorPara,10,2),',','.'))+', '
            +QuotedStr(DateToStrInvertida(Date))+', '
            +QuotedStr(TimeToStr(Time))+', '
            +QuotedStr(sRegistro)+')');
    //
    // SmallMsg(Form1.ibDataSet100.SelectSql.Text);
    //
    Form1.ibDataSet100.Open;
    //
  except
    SmallMsg('Erro na tabela de auditoria. Cod. 2'+chr(10)+chr(10)+Form1.ibDataSet100.SelectSql.Text);
  end;
  //
  Result := True;
  //
end;

function TForm1.DisplayGertec(pP1: String): boolean;
begin
  OpenTec44;
  FormFeed;                            //limppa display
  strpcopy(@men,pP1);
  DispStr(@men);
  CloseTec44;                        //mostra no display
  Result := True;
end;

function TForm1.Display(sP1:String; sp2:String): Boolean;
begin

  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
  begin
    if PAFNFCe = False then
      sp2 := StringReplace(sp2, 'Menu Fiscal Indisponível nesta tela. ', '',[rfReplaceAll]);
  end;


  if PAFNFCe then
  begin
    sp2 := StringReplace(sp2, 'Menu Fiscal Indisponível nesta tela.', MSG_ALERTA_MENU_FISCAL_INACESSIVEL,[rfReplaceAll]);
  end;

  if Form1.Panel2.Visible then
    sp2 := StringReplace(sp2, 'Entre com EAN 13, Código ou Descrição', 'Pouco Papel', [rfReplaceAll]); // Sandro Silva 2016-03-02

  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') then
  begin
    if Form1.NFCeemContingncia1.Checked then
    begin
      // Exibir palavra contingência quando estiver exibindo texto Ambiente e não tiver o texto CONTINGÊNCIA
      if AnsiContainsText(sp2, 'Ambiente ') and (AnsiContainsText(sp2, 'CONTINGÊNCIA') = False) then
        sP2 := sp2 + ' - CONTINGÊNCIA';
    end;
  end;

  if Form1.bBalancaAutonoma then
  begin
    sP2 := 'F10 Menu Configurações';
  end;  
  //
  Form1.Label_10.Caption := sP1;
  Form1.Label_10.Repaint; // 2015-09-08
  //
  if Form1.sGertec <> 'Não' then
  begin
    Form1.DisplayGertec(sP1);
  end else
  begin
    if Form1.sModeloECF = '01' then _ecf01_MostraDisplay(sP1);
    //    if Form1.sModeloECF = '02' then _ecf02_MostraDisplay(sP1);
    if Form1.sModeloECF = '03' then _ecf03_MostraDisplay(sP1);
    if Form1.sModeloECF = '12' then _ecf12_MostraDisplay(sP1);
    if Form1.sModeloECF = '14' then _ecf14_MostraDisplay(sP1);
    //    if Form1.sModeloECF = '15' then _ecf15_MostraDisplay(sP1);
    if Form1.sModeloECF = '17' then _ecf17_MostraDisplay(sP1);// Ok 2015-08-24
    if Form1.sModeloECF = '59' then _ecf59_MostraDisplay(sP1);
    if Form1.sModeloECF = '65' then _ecf65_MostraDisplay(sP1);
    if Form1.sModeloECF = '99' then _ecf99_MostraDisplay(sP1);

  end;
  //
  Form1.Label_7.Height := Label_CopyRight.Height; // Sandro Silva 2016-08-04
  Form1.Label_7.Caption := sP2;
  Form1.Label_7.Repaint; // Sandro Silva 2018-05-18
  Form1.Label_7.Refresh; // Sandro Silva 2019-09-11 ER 02.06 UnoChapeco
  //
  if sP1 = '<NÃO CADASTRADO>' then
  begin
    CommitaTudo(False); // não cadastrado  - function tForm1.Display(sP1:String; sp2:String): Boolean;
    Form1.Edit1.Text := '';
    Form1.PapagaioClick(Form1.Papagaio);
  end;
  //
  Result := True;
  //
end;

function Resolucao( iWidth, iHeight : Integer): Boolean;
var
  sDispMode: DevMode;
begin
  EnumDisplaySettings(Nil,0,sDispMode);
  if (Screen.Width <> Form1.iOldWidth ) and (Form1.iOldwidth <> 0) then
  begin
    sDispMode.dmPelsWidth  := Form1.iOldWidth;
    sDispMode.dmPelsHeight := Form1.iOldHeight;
  end else
  begin
    Form1.iOldWidth  := Screen.Width;
    Form1.iOldHeight := Screen.Height;
    sDispMode.dmPelsWidth  := iWidth;
    sDispMode.dmPelsHeight := iHeight;
  end;
  sDispMode.dmFields := DM_PELSWIDTH+DM_PELSHEIGHT;
  try ChangeDisplaySettings(sDispMode,0) except end;
  Result := True;
end;

function TamanhoLogoFrente: Double;
var
  F: File of Byte;
begin
  Result := 0;
  try
    AssignFile(F, Form1.sAtualOnLine+'\logofrente.bmp');
    Reset(F);
    Result := FileSize(F);
    CloseFile(F);
  except

  end;
end;

function MostraALogo(pP1: Boolean; bExibirNoCupomEmTela: Boolean = True): Boolean;// Sandro Silva 2018-04-26  function MostraALogo(pP1: Boolean): Boolean;
begin
  //
  if ((StrToInt(Form1.sMesas) > 0) and (Form1.bBalancaAutonoma = False)) and (Form1.Memo1.Visible=False) then // Sandro Silva 2018-12-19 if (StrToInt(Form1.sMesas) > 0) and (Form1.Memo1.Visible=False) then
  begin
    //
    Form1.Image2.Visible := False;
    Form1.Panel9.Visible := False;
    //
  end else
  begin
    //
    if FileExists(Form1.sAtualOnLine+'\logofrente.bmp') then
    begin
      //
      Form1.Image2.Visible := True;
      Form1.Panel9.Visible := True;
      //
      Form1.Image2.Picture.LoadFromFile(Form1.sAtualOnLine+'\logofrente.bmp');
      if bExibirNoCupomEmTela then // Controlar para não exibir em cada produto sem foto mostrado no grid de pesquisa. Sandro Silva 2018-04-26
      begin
        Form1.Image3.Center := True; // Sandro Silva 2021-07-29
        //Form1.Image3.Picture.Bitmap := Form1.Image2.Picture.Bitmap; // Sandro Silva 2021-07-29
        Form1.Image3.Picture.LoadFromFile(Form1.sAtualOnLine+'\logofrente.bmp');
      end;
      //
      if (Form1.Image2.Picture.Width = 0) or (Form1.Image2.Picture.Height = 0) then // Evitar erro quando .bmp zerado  Sandro Silva 2018-08-08
      begin
        Form1.Image2.Width  := 0;
        Form1.Image2.Height := 0;
      end
      else
      begin
        if Form1.Image2.Picture.Width >= Form1.Image2.Picture.Height then
        begin
          //
          Form1.Image2.Width  := (StrToInt(StrZero((Form1.Image2.Picture.Width * (Form1.Panel9.Width / 2 / Form1.Image2.Picture.Width)),10,0))*2);
          Form1.Image2.Height := (StrToInt(StrZero((Form1.Image2.Picture.Height* (Form1.Panel9.Width / 2 / Form1.Image2.Picture.Width)),10,0))*2);
          //
          // SmallMsg(IntToStr(Form1.Image2.Width));
          // SmallMsg(IntToStr(Form1.Image2.Height));
          //
        end else
        begin
          Form1.Image2.Width  := StrToInt(StrZero((Form1.Image2.Picture.Width  * (Form1.Panel9.Height / 2 / Form1.Image2.Picture.Height)),10,0))*2;
          Form1.Image2.Height := StrToInt(StrZero((Form1.Image2.Picture.Height * (Form1.Panel9.Height / 2 / Form1.Image2.Picture.Height)),10,0))*2;
        end;
      end;
      //
      Form1.Image2.Left := 0;
      Form1.Image2.Top  := 0;
      Form1.Image2.Repaint;
      //
    end;
    //
  end;
  //
  // Mostra a logo
  //
  Result := True
  //
end;

function FunctionDetect(LibName, FuncName: String; var LibPointer: Pointer): boolean;
var
  LibHandle: tHandle;
begin
  Result := false;
  LibPointer := NIL;
  if LoadLibrary(PChar(LibName)) = 0 then exit;
  LibHandle := GetModuleHandle(PChar(LibName));
  if LibHandle <> 0 then
  begin
    LibPointer := GetProcAddress(LibHandle, PChar(FuncName));
    if LibPointer <> NIL then Result := true;
  end;
end;

function TipoDeConta(P1:Boolean): Boolean;
var
  Mais2Ini: TIniFile;
begin
  Mais2ini := TIniFile.Create(Form1.sArquivo);  
  try
    Form1.LbBlowfish1.GenerateKey(Form1.sPasta);
    Form1.sConcomitante := Mais2Ini.ReadString('CONCOMITANTE','I','');
    if Form1.sConcomitante <> '' then
      Form1.sConcomitante := Form1.LbBlowfish1.DecryptString(Mais2Ini.ReadString('CONCOMITANTE','I','CONCOMITANTE'))
    else
      Form1.sConcomitante := 'CONCOMITANTE';

    {Sandro Silva 2023-05-30 inicio}
    if ValidaRecursos.PermiteRecursoParaSerial = False then
      Form1.sConcomitante := 'CONCOMITANTE';
    {Sandro Silva 2023-05-30 fim}

    if Mais2Ini.ReadString('UF','I','') <> '' then // 2015-10-20
      Form1.sUF           := Form1.LbBlowfish1.DecryptString(Mais2Ini.ReadString('UF','I',''));
    if Mais2Ini.ReadString('PERFIL','I','') <> '' then // 2015-10-20
      Form1.sPerfil       := Form1.LbBlowfish1.DecryptString(Mais2Ini.ReadString('PERFIL','I',''));

    if Mais2Ini.ReadString('R01','17','') = '' then // 2015-10-20
      Form1.sRazaoSocialSmallsoft := RAZAO_SOCIAL_SOFTWARE_HOUSE_PAF
    else
      Form1.sRazaoSocialSmallsoft := Form1.LbBlowfish1.DecryptString(Mais2Ini.ReadString('R01','17',RAZAO_SOCIAL_SOFTWARE_HOUSE_PAF));
  except
    Form1.sConcomitante := 'CONCOMITANTE'
  end;


  if AnsiContainsText(Form1.sConcomitante, 'CONCOMITANTE') then
    Form1.bBalancaAutonoma := False;
  //
  // CONSUMO
  //
  // TESTE Form1.sConcomitante := 'CONTA - CONSUMO'+'0000000000000000000';
  //
  Form1.Quantas1.Visible := False;
  //
  // Form1.sConcomitante := 'OS'+LimpaNumero(Form1.ibDataSet13CGC.AsString);
  //
  Form1.Concomitante.Checked := True;
  //
  Form22.sTitulo := 'Small Commerce - Concomitante';
  //
  if Copy(Form1.sConcomitante,1,5) = 'CONTA' then
  begin
    //
    Form22.sTitulo := 'Small Commerce - Conta de Cliente';
    //
    Form1.Mesas1.Checked            := False;
    Form1.Contadecliente1.Checked   := True;
    Form1.ContadeclienteOS1.Checked := False;
    Form1.Concomitante.Checked      := False;
    //
    Form1.sMesaOuConta    := 'Conta de Cliente';
    Form1.sMesasOuContas  := 'Contas de Clientes'; // Se alterar aqui deverá alterar também em ImpressaoNaoSujeitoaoICMS()
    //
    Form1.Mesa          := Form1.cartao;
    Form1.sono          := Form1.cartao_sono;
    Form1.vinho         := Form1.cartao_vinho;
    //
    Form1.Quantas1.Visible := True;
    Form1.Quantas1.Caption := 'Quantas '+Form1.sMesasOuContas;
    //
  end;
  //
  if Copy(Form1.sConcomitante,1,2) = 'OS' then
  begin
    //
    Form22.sTitulo := 'Small Commerce - Conta de Cliente OS';
    //
    Form1.Mesas1.Checked            := False;
    Form1.Contadecliente1.Checked   := False;
    Form1.ContadeclienteOS1.Checked := True;
    Form1.Concomitante.Checked      := False;
    //
    Form1.sMesaOuConta    := 'Conta de Cliente';
    Form1.sMesasOuContas  := 'Contas de Clientes'; // Se alterar aqui deverá alterar também em ImpressaoNaoSujeitoaoICMS()
    //
    Form1.Mesa          := Form1.cartao;
    Form1.sono          := Form1.cartao_sono;
    Form1.vinho         := Form1.cartao_vinho;
    //
    Form1.Quantas1.Visible := True;
    Form1.Quantas1.Caption := 'Quantas '+Form1.sMesasOuContas;
    //
  end;
  //
  if Copy(Form1.sConcomitante,1,4) = 'MESA' then
  begin
    Form22.sTitulo := 'Small Commerce - Mesa'; //2015-09-25
    //
    Form1.Mesas1.Checked            := True;
    Form1.Contadecliente1.Checked   := False;
    Form1.ContadeclienteOS1.Checked := False;
    Form1.Concomitante.Checked      := False;
    //
    Form1.sMesaOuConta   := 'Mesa';
    Form1.sMesasOuContas := 'Mesas';
    //
    Form1.Quantas1.Visible := True;
    Form1.Quantas1.Caption := 'Quantas '+Form1.sMesasOuContas;
    //
  end;
  //
  if Form1.Concomitante.Checked then
  begin
    Form1.sMesas           := '0';
  end;
  //
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  begin
    {Sandro Silva 2022-04-11 inicio
    if Copy(StrTran(Form22.sSerie, 'Número de série: ', ''), 4, 1) = 'S' then
      Form22.sTitulo := StringReplace(Form22.sTitulo, 'Small Commerce', 'Small Start', [rfReplaceAll]); //2015-09-25
    if (Form1.sModeloECF = '99') then
    begin
      Form22.sTitulo := StringReplace(Form22.sTitulo, 'Small Commerce', 'Small MEI', [rfReplaceAll]); //2015-09-25
      Form22.sTitulo := StringReplace(Form22.sTitulo, 'Small Start', 'Small MEI', [rfReplaceAll]); //2015-09-25
    end;
    }
    Form22.sTitulo := StringReplace(Form22.sTitulo, 'Small Commerce', 'Small', [rfReplaceAll]); //2015-09-25
    {Sandro Silva 2022-04-11 fim}
  end;
  Result := True;
  //
  Mais2ini.Free; // Sandro Silva 2018-11-21 Memória
end;

function TForm1.Small_InputBox(pP1, pP2, pP3: String): String;
begin
  if Form12 = nil then
  begin
    Application.CreateForm(TForm12, Form12);
  end;
  //
  if Form1.ClienteSmallMobile.ImportandoMobile = False then // Sandro Silva 2022-08-08 if ImportandoMobile = False then // Pos(TIPOMOBILE, sVendaImportando) = 0 then
  begin
    Form12.Label1.Caption := pP1;
    Form12.Label2.Caption := pP2;
    Form12.Edit1.Text     := pP3;

    Form12.Label2.WordWrap := False;
    Form12.Label2.Layout   := tlBottom;
    //Form12.Label2.AutoSize := False;
    Form12.Label2.AutoSize := True;
    Form12.Label2.Width    := Form12.Edit1.Width;
    if AnsiContainsText(Form12.Label2.Caption, 'Números de Série:')
     or AnsiContainsText(Form12.Label2.Caption, 'Estoque parcial') then
    begin
      // Lançando produto com número de série ou
      // Estoque parcial
      Form12.Label2.WordWrap := True;
      //Form12.Label2.AutoSize := True;
    end;
    if (Form12.Label2.BoundsRect.Bottom + AjustaAltura(6) + Form12.Edit1.Height) < (Form12.Button1.Top - 5) then // Sandro Silva 2021-09-21 if (Form12.Label2.BoundsRect.Bottom + Form1.AjustaAltura(6) + Form12.Edit1.Height) < (Form12.Button1.Top - 5) then
      Form12.Edit1.Top := Form12.Label2.BoundsRect.Bottom + AjustaAltura(6); // Sandro Silva 2021-09-21 Form12.Edit1.Top := Form12.Label2.BoundsRect.Bottom + Form1.AjustaAltura(6);
    //
    if Pos('SENHA',Uppercase(pP1))=0 then
      Form12.Edit1.PasswordChar := #0
    else
      Form12.Edit1.PasswordChar := Char('*');
    //
    Form12.ShowModal;
  end
  else
    Form1.ClienteSmallMobile.LogRetornoMobile(pP2); // Sandro Silva 2022-08-08 LogRetornoMobile(pP2);
  //
  Result := Form12.Edit1.Text;
  //
end;

function TForm1.Small_InputComboBoxPadrao(pP1, pP2, pP3: String;
  TipoInformacaoCombo: TTipoInfoCombo): String;
var
  i: Integer; // Sandro Silva 2017-12-15
  sTexto: String; // Sandro Silva 2017-12-15
begin
  Result := '';
  if Form27 = nil then
  begin
    Application.CreateForm(TForm27, Form27);
  end;

  Form27.TipoInformacaoCombo := TipoInformacaoCombo; 
  Form27.Label1.Caption   := pP1;
  Form27.Label2.Caption   := pP2;
  Form27.FabricanteModelo := pP3;
  //
  Form27.ShowModal;
  //
  if TipoInformacaoCombo = tiInfoComboContaClienteOS then
  begin
    if Length(Trim(Form27.ComboBox1.Text)) > 3 then
    begin
      sTexto := Right(Trim(Form27.ComboBox1.Text), 10);
      for i := 0 to Form27.ComboBox1.Items.Count - 1 do
      begin
        if Right(Form27.ComboBox1.Items.Strings[i], 10) = sTexto then
        begin
          Result := Copy(Form27.ComboBox1.Items.Strings[i], 1, 3);
          Break;
        end;
      end;
    end
    else
      Result := Copy(Form27.ComboBox1.Text, 1, 3)
  end
  else
    Result := Form27.ComboBox1.Text;
  //
  FreeAndNil(Form27);
end;

function TForm1.TransacaoComPoS(TipoConexaoPOS: TTipoConexaoPOS): Boolean;
var
  bPoSok: Boolean;
  iParcelas: Integer;
  iContaCartao: Integer;
  dTotalTransacaoPOS: Currency; // Double;
  dTotalEmCartao: Currency; // Double;
  dValorPagarCartao: Currency; // Double;
  dTotalTransacionado: Currency; // Double;
  iTotalParcelas: Integer; // Sandro Silva 2017-08-28 Soma de todas as parcelas dos cartões usados
  ModalidadeTransacao: TTipoModalidadeTransacao; // Sandro Silva 2021-07-05
begin
  //
  // Usando PoS para transação com cartão
  //
  Result := False; // Sandro Silva 2017-05-20

  dTotalEmCartao      := Form1.ibDataSet25.FieldByName('PAGAR').AsFloat;
  dTotalTransacionado := 0.00;
  iContaCartao        := 0;
  Form1.TransacoesCartao.Transacoes.Clear; // Sandro Silva 2017-08-29
  iTotalParcelas := 0; // Sandro Silva 2017-08-28
  
  ModalidadeTransacao := tModalidadeCartao; // Sandro Silva 2021-08-24

  while dTotalTransacionado < dTotalEmCartao do // Enquanto não totalizar transações com valor devido
  begin

    if (Pos(TIPOCONTINGENCIA, Form1.ClienteSmallMobile.sVendaImportando) = 0) then // Sandro Silva 2016-04-29
    begin
      dValorPagarCartao := dTotalEmCartao - dTotalTransacionado;

      if (Form1.iNumeroMaximoDeCartoes > 1) and (Form1.bModoMultiplosCartoes)
        and (Form1.ClienteSmallMobile.sVendaImportando = '') // Sandro Silva 2017-08-28 Não está importando mobile
      then
      begin

        while True do
        begin

          Application.ProcessMessages; // Sandro Silva 2017-06-30
          if Form1.UsaIntegradorFiscal() then
          begin
            if Form1.IntegradorCE.EnviarFormaPagamento.Formas.Count > 0 then
            begin
              if Form1.IntegradorCE.EnviarFormaPagamento.Formas.Items[Form1.IntegradorCE.EnviarFormaPagamento.Formas.Count - 1].RespostaFiscal.NSU = '' then
                dValorPagarCartao := StrToFloatDef(Form1.IntegradorCE.EnviarFormaPagamento.Formas.Items[Form1.IntegradorCE.EnviarFormaPagamento.Formas.Count - 1].ValorTotalVenda, 0);
            end
          end;
          dValorPagarCartao := StrToFloatDef(Form1.Small_InputBox(PAGAMENTO_EM_CARTAO,'Informe o valor para pagamento com o ' + IntToStr(iContaCartao + 1) + 'º de ' + IntToStr(Form1.iNumeroMaximoDeCartoes) + ' cartões:', FormatFloat('0.00', dValorPagarCartao)), 0);

          dValorPagarCartao := StrToFloatDef(FormatFloat('0.00', dValorPagarCartao), 0); // Sandro Silva 2017-01-09 Arredonda para 2 casas o valor informado

          if dValorPagarCartao < 0 then
          begin
            Application.MessageBox(PChar('Valor inválido: ' + FormatFloat('0.00', dValorPagarCartao)), 'Atenção', MB_ICONWARNING + MB_OK);
            dValorPagarCartao := dTotalEmCartao - dTotalTransacionado;
          end
          else
          begin
            if Form1.bModoMultiplosCartoes then
            begin
              if dValorPagarCartao >= 0 then
              begin
                Break;
              end;
            end
            else
            begin

              if dValorPagarCartao <> dTotalEmCartao then
              begin
                Application.MessageBox(PChar(FormatFloat('0.00', dValorPagarCartao) + ' é diferente do valor (' + FormatFloat('0.00', dTotalEmCartao) + ') definido para forma de pagamento cartão' + #13 + #13 +
                                             'Acesse o Menu Configurações e ative o Modo Múltiplos Cartões para dividir o valor entre vários cartões'), 'Atenção', MB_ICONWARNING + MB_OK)
              end
              else
              begin
                Break;
              end;
            end;
          end; // if dValorPagarCartao < 0 then
        end; // while True do
      end; // if (Form1.iNumeroMaximoDeCartoes > 1) and (Form1.bModoMultiplosCartoes) then

    end
    else
    begin
      dValorPagarCartao := dTotalEmCartao;
    end; // if (Pos(TIPOCONTINGENCIA, Form1.ClienteSmallMobile.sVendaImportando) = 0) then // Sandro Silva 2016-04-29

    if (dTotalEmCartao - (dTotalTransacionado + dValorPagarCartao)) < 0 then
    begin
      Application.MessageBox('Valor total da transação maior que o valor definido para a forma de pagamento cartão', 'Atenção', MB_ICONWARNING + MB_OK);
    end
    else // if (dTotalEmCartao - (dTotalTransacionado + dValorPagarCartao)) >= 0 then
    begin
      if dValorPagarCartao = 0 then
      begin
        Break;
      end
      else
      begin

        bPoSok := True;
        if Form1.UsaIntegradorFiscal() then
        begin
          if (Form1.ClienteSmallMobile.sVendaImportando = '') then
          begin

            Form10.TipoForm := tfAdquirente; // Sandro Silva 2017-05-18
            if Form10.ListarAdquirentes(True) = False then // Sandro Silva 2022-06-24
            begin
              Form1.ExibePanelMensagem('Selecionando Adquirente', True);
              Form10.ShowModal;
            end;

          end;

          if Trim(Form1.IntegradorCE.ChaveRequisicao) = '' then
            bPoSok := False
          else
            bPoSok := EnviarPagamentoValidadorFiscal('CARTAO POS', Abs(dValorPagarCartao), FormataNumeroDoCupom(Form1.icupom), Form1.sCaixa, False); // Sandro Silva 2021-11-29 bPoSok := EnviarPagamentoValidadorFiscal('CARTAO POS', Abs(dValorPagarCartao), StrZero(Form1.icupom, 6, 0), Form1.sCaixa, False);

        end;

        if (dValorPagarCartao <> 0)  then // Cartão sim - cheque não
        begin
          //
          if bPoSOk then // Sandro Silva 2018-07-03
          begin
            //
            // Só deve entrar aqui se não usar integrador fiscal ou integrador fiscal retornar True
            //
            if (Form1.ClienteSmallMobile.sVendaImportando = '') then
            begin
              Form10.TipoForm := tfPOS; // Sandro Silva 2017-05-18
              {Sandro Silva 2022-02-09 inicio
              Form10.ShowModal;
              }
              if PosElginPay.PermiteUsarPOS then
                if (PosElginPay.Configuracao.NomePOS = NOME_POS_ONLINE_ELGIN) and (PosElginPay.Configuracao.Ativo = 'Sim') then
                  TipoConexaoPOS := tcxPosOnlineElginPay;

              if TipoConexaoPOS = tcxPosOnlineElginPay then
              begin
                //DadosTransacaoPOSElginPay := TDadosTransacaoPOS.Create;

                Form1.ExibePanelMensagem('Aguardando pagamento no POS' + ifthen(Form1.UsaIntegradorFiscal(), ' ' + Form1.IntegradorCE.SerialPOS, ''), True);

                bPoSok := PosElginPay.EfetuaPagamento(Form1.sCaixa, dValorPagarCartao);

                if bPoSok then
                begin

                  if AnsiContainsText(PosElginPay.Transacao.TipoCartao, 'CARTAO_DEBITO') then
                    Form10.sNomeDoTEF := PosElginPay.Transacao.Rede + ' DEBITO'
                  else
                    Form10.sNomeDoTEF := PosElginPay.Transacao.Rede + ' CREDITO';
                  Form1.sTransaca   := PosElginPay.Transacao.Transacao;
                  Form1.sAutoriza   := IfThen(Form1.UsaIntegradorFiscal(), Form1.sTransaca, '');
                  Form1.sNomeRede   := PosElginPay.Transacao.Rede;

                  Form1.sTipoParc   := '0';// Considera sempre parcelado pelo estabelecimento poderia validar com AnsiContainsText(ValorElementoElginPayFromJson(sResposta, '"tipoFinanciamento":'), 'ESTABELECIMENTO')
                  Form1.sParcelas   := PosElginPay.Transacao.Parcelas;
                  if Form1.sParcelas = '0' then
                    Form1.sParcelas := '1';


                  {Sandro Silva 2022-02-16 inicio}
                  if Form1.UsaIntegradorFiscal() then
                  begin
                    Form1.sAutoriza   := Form1.sTransaca;
                  end;
                  {Sandro Silva 2022-02-16 fim}

                end
                else
                  SmallMessageBox(PosElginPay.Transacao.MensagemOperador, 'Atenção', MB_OK + MB_ICONWARNING);

                Form1.ExibePanelMensagem(PosElginPay.Transacao.MensagemOperador, True);

              end
              else
              begin

                Form1.ExibePanelMensagem('Selecionando Bandeira do cartão', True);

                Form10.ShowModal;

                if Form1.sIdentificaPOS = 'Sim' then
                begin
                  {Sandro Silva 2022-02-10 inicio}
                  if Trim(Form1.sNomeRede) = '' then
                  begin
                    bPoSok := False;
                    SmallMessageBox(PChar('Acesse F10-Menu/Configurações/Cartões de débito e crédtio (POS)' + #13 + #13 +
                      'Cadastre os Cartões de Crédito e Débito (POS) com a bandeira' + #13 + #13 +
                      'Exemplo:' + #13 +
                      ' VISA DEBITO' + #13 +
                      ' VISA CREDITO' + #13 +
                      ' MASTERCARD DEBITO' + #13 +
                      ' MASTERCARD CREDITO')
                      , 'Atenção', MB_OK + MB_ICONWARNING);
                  end;
                  {Sandro Silva 2022-02-10 fim}
                end;
                
              end;
              {Sandro Silva 2022-02-09 fim}
            end;

            if UsaIntegradorFiscal() then
            begin
              if Trim(Form1.sNomeRede) = '' then
                bPoSok := False
              else
                bPoSok := VerificarStatusValidadorFiscal(dValorPagarCartao);
            end;
          end;// if bPoSOk then // Sandro Silva 2018-07-03

          if bPoSok then
          begin
            if (Pos(TIPOCONTINGENCIA, Form1.ClienteSmallMobile.sVendaImportando) = 0) then // Sandro Silva 2016-04-29
            begin
              if (iContaCartao + 1) = 1 then // Quando for o primeiro cartão apaga todas as parcelas do cupom
              begin
                //
                // Apaga as duplicatas anteriores
                //
                try
                  ibDataSet99.Close;
                  ibDataSet99.SelectSQL.Clear;
                  //
                  ibDataSet99.SelectSQL.Add('delete from RECEBER where NUMERONF='+QuotedStr(CupomComCaixaFormatado)+ ' and EMISSAO='+ QuotedStr(DateToStrInvertida(Date)) + ' ');
                  ibDataSet99.Open;
                  //
                except
                  on E: Exception do
                  begin
                    SmallMsg('Erro! '+E.Message);
                  end;
                end;
              end; 

              //Ficha 3403
              dTotalTransacaoPOS := 0; // Sandro Silva 2017-08-28
              for iParcelas := 1 to StrToIntDef(Form1.sParcelas, 1) do
              begin
                //
                try
                  iTotalParcelas := iTotalParcelas + 1;// Sandro Silva 2017-08-28 Acumula as parcelas entre os diferentes cartões usados para gerar as parcelas na sequência
                  Form1.ibDataSet7.Append;
                  Form1.ibDataSet7.FieldByName('NOME').AsString         := StrTran(StrTran(Form10.sNomeDoTEF,'DEBITO',''),'CREDITO','');
                  if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then
                    Form1.ibDataSet7.FieldByName('HISTORICO').AsString    := 'Cartão, caixa ' + Form1.sCaixa + ' Autor.' + Form1.sTransaca
                  else
                    Form1.ibDataSet7.FieldByName('HISTORICO').AsString    := 'VENDA NO CARTAO: ' + IntToStr(iContaCartao + 1) + 'º CARTAO';
                  Form1.ibDataSet7.FieldByName('DOCUMENTO').AsString    := FormataReceberDocumento(iTotalParcelas); // documento
                  Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat    := StrToFloat(FormatFloat('0.00', (Int((dValorPagarCartao / StrToIntDef(Form1.sParcelas, 1)) * 100) / 100)));// Truncando 2 casas decimais
                  Form1.ibDataSet7.FieldByName('EMISSAO').AsDateTime    := StrToDate(Form1.sDataDoCupom); 
                  if AnsiContainsText(Form10.sNomedoTef, 'CREDITO') then
                    Form1.ibDataSet7.FieldByName('VENCIMENTO').AsDateTime := Date + (Form1.iDiasCartaoCredito * iParcelas) // Ficha 5659 Sandro Silva 2022-02-04 Form1.ibDataSet7.FieldByName('VENCIMENTO').AsDateTime := Date + Form1.iDiasCartaoCredito
                  else
                    Form1.ibDataSet7.FieldByName('VENCIMENTO').AsDateTime := Date + (Form1.iDiasCartaoDebito * iParcelas); // Ficha 5659 Sandro Silva 2022-02-04 Form1.ibDataSet7.FieldByName('VENCIMENTO').AsDateTime := Date + Form1.iDiasCartaoDebito;
                  Form1.ibDataSet7.FieldByName('PORTADOR').AsString     := Form10.sNomeDoTEF;
                  Form1.ibDataSet7.FieldByName('VALOR_RECE').AsFloat    := 0; // Sandro Silva 2016-06-21 Deixar nulo não exibe as contas em "Exibir> A vencer"
                  Form1.ibDataSet7.FieldByName('VALOR_JURO').AsFloat    := 0; // Sandro Silva 2016-06-21 Deixar nulo não exibe as contas em "Exibir> A vencer"
                  Form1.ibDataSet7.Post;
                  dTotalTransacaoPOS := dTotalTransacaoPOS + Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat; // Sandro Silva 2017-08-28
                except
                end;
                
              end;// for iParcelas := 1 to StrToIntDef(Form1.sParcelas, 1) do

              AjustarDiferencaParcelasCartao(dTotalTransacaoPOS, dValorPagarCartao, iTotalParcelas, StrToIntDef(Form1.sParcelas, 1));

            end; // if (Pos(TIPOCONTINGENCIA, Form1.ClienteSmallMobile.sVendaImportando) = 0) then // Sandro Silva 2016-04-29
            Inc(iContaCartao); // Sandro Silva 2017-07-24

          end; //if bPoSok then

        end; // if (dValorPagarCartao <> 0)  then // Cartão sim - cheque não

        Form1.ExibePanelMensagem('', True);
        
        //
        if bPoSok then// Sandro Silva 2017-05-16
        begin
          if Form1.UsaIntegradorFiscal() then
          begin
            try

              Form1.sAutoriza := Form1.IntegradorCE.EnviarFormaPagamento.Formas.Items[Form1.IntegradorCE.EnviarFormaPagamento.Formas.Count - 1].RespostaFiscal.CodigoAutorizacao;
              if Trim(Form1.sAutoriza) = '' then
                Form1.sAutoriza := Form1.sTransaca;
            except

            end;
          end;

          if UsaIntegradorFiscal() then
            Form1.TransacoesCartao.Transacoes.Adicionar(Form1.sNomeRede, IfThen(Pos('DEBITO', ConverteAcentos(AnsiUpperCase(Form10.sNomeDoTEF))) > 0, 'DEBITO', 'CREDITO'), dValorPagarCartao, Form10.sNomeAdquirente, Form1.sTransaca, Form1.sAutoriza, Form1.IntegradorCE.EnviarFormaPagamento.Formas.Items[Form1.IntegradorCE.EnviarFormaPagamento.Formas.Count - 1].RespostaFiscal.Bandeira, ModalidadeTransacao)
          else
            Form1.TransacoesCartao.Transacoes.Adicionar(Form1.sNomeRede, IfThen(Pos('DEBITO', ConverteAcentos(AnsiUpperCase(Form10.sNomeDoTEF))) > 0, 'DEBITO', 'CREDITO'), dValorPagarCartao, Form10.sNomeAdquirente, Form1.sTransaca, Form1.sAutoriza, StrTran(StrTran(Form10.sNomeDoTEF,'DEBITO',''),'CREDITO',''), ModalidadeTransacao); 

          dTotalTransacionado := dTotalTransacionado + dValorPagarCartao; // Sandro Silva 2017-06-16
          Form1.fTEFPago      := Form1.fTEFPago + dValorPagarCartao;
          if Form1.ibDataSet25.State in [dsEdit, dsInsert] = False then
            Form1.ibDataSet25.Edit;
          Form1.ibDataSet25.FieldByName('PAGAR').AsFloat := dTotalTransacionado; // Sandro Silva 2017-06-16
        end;
        //
      end;// if dValorPagarCartao = 0 then
    end; // if (dTotalEmCartao - (dTotalTransacionado + dValorPagarCartao)) < 0 then

    if Form1.bModoMultiplosCartoes = False then
    begin
      Break;
    end;

    if (iContaCartao >= Form1.iNumeroMaximoDeCartoes) then
      Break;

    if (Form1.sModeloECF = '59') then
    begin
      // SAT permite apenas 10 grupos de meios de pagamento
      if iContaCartao >= 10 then
        Break;
    end;

  end; // while dTotalTransacionado < dTotalEmCartao do

end;

function TForm1.Demais(sP1:String): Boolean;
var
  iCOO, IGNF, iGRG, iCDC : integer;
  IBQDEMAIS: TIBQuery;
  sDataHoraECF: String;
  sData: String;
  sHora: String; 
begin
  // Se for ECF ou PAFNFC-e com conferência de mesa
  if ((Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99')) or (PAFNFCE and (sP1 = 'CM')) then // Não é NFC-e e CF-e-SAT
  begin

    IBQDEMAIS := CriaIBQuery(Form1.ibDataSet38.Transaction);
    try
      //
      // 2015-10-06 Form1.EstoqueDoDia(True);
      //
      try
        //
        iCOO := 0;
        IGNF := 0;
        iGRG := 0;
        iCDC := 0;
        //
        // Bematech
        //
        if Form1.sModeloECF = '02' then
        begin
          if Form1.sModeloECF = '02' then iCOO := StrToInt('0'+LimpaNumero(_ecf02_NumeroDoCupom(True))); // Ok
          if Form1.sModeloECF = '02' then iGNF := StrToInt('0'+LimpaNumero(_ecf02_GNF(True))); // Ok
          if sP1 = 'CC' then if Form1.sModeloECF = '02' then iCDC := StrToInt('0'+LimpaNumero(_ecf02_CDC(True)));

          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then if Form1.sModeloECF = '02' then iGRG := StrToInt('0'+LimpaNumero(_ecf02_GRG(True)));

          try
            if (sP1 = 'NC') and (Form1.sModeloECF = '02') then iCCF := StrToInt('0'+LimpaNumero(_ecf02_CCF(True)));
          except
            iCCF := 0;
          end;
        end;

        //
        // Daruma32
        //
        if Form1.sModeloECF = '03' then
        begin
          if Form1.sModeloECF = '03' then iCOO := StrToInt('0'+LimpaNumero(_ecf03_NumeroDoCupom(True)))-1; // Ok
          if Form1.sModeloECF = '03' then iGNF := StrToInt('0'+LimpaNumero(_ecf03_GNF(True))); // Ok
          if sP1 = 'CC' then if Form1.sModeloECF = '03' then iCDC := StrToInt('0'+LimpaNumero(_ecf03_CDC(True)));
          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then if Form1.sModeloECF = '03' then iGRG := StrToInt('0'+LimpaNumero(_ecf03_GRG(True)));

          try
            if (sP1 = 'NC') and (Form1.sModeloECF = '03') then iCCF := StrToInt('0'+LimpaNumero(_ecf03_CCF(True)));
          except
            iCCF := 0;
          end;
        end;

        // DLLG2: Elgin, ZPM, URANO, TRENDS...
        if Form1.sModeloECF = '12' then
        begin
          if Form1.sModeloECF = '12' then iCOO := StrToInt('0'+LimpaNumero(_ecf12_NumeroDoCupom(True))); // OK
          if Form1.sModeloECF = '12' then iGNF := StrToInt('0'+LimpaNumero(_ecf12_Nmdeoperaesnofiscais(True))); // OK
          if sP1 = 'CC' then if Form1.sModeloECF = '12' then iCDC := StrToInt('0'+LimpaNumero(_ecf12_NmContadordeCuponsCrditoDbito(True))); //
          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then if Form1.sModeloECF = '12' then iGRG := StrToInt('0'+LimpaNumero(_ecf12_NmContadorGeraldeRelatrioGerencial(True))); // OK

          try
            if (sP1 = 'NC') and (Form1.sModeloECF = '12') then iCCF := StrToInt('0'+LimpaNumero(_ecf12_NmContadordeCuponsFiscal(True)));
          except
            iCCF := 0;
          end;
        end;

        // DarumaFramework
        if Form1.sModeloECF = '17' then
        begin
          if Form1.sModeloECF = '17' then iCOO := StrToInt('0'+LimpaNumero(_ecf17_NumeroDoCupom(True))); // Ok 2015-08-24
          if Form1.sModeloECF = '17' then iGNF := StrToInt('0'+LimpaNumero(_ecf17_GNF(True))); // Ok 2015-08-24
          if sP1 = 'CC' then if Form1.sModeloECF = '17' then iCDC := StrToInt('0'+LimpaNumero(_ecf17_CDC(True))); // Ok 2015-08-24
          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then if Form1.sModeloECF = '17' then iGRG := StrToInt('0'+LimpaNumero(_ecf17_GRG(True))); // Ok 2015-08-24

          try
            if (sP1 = 'NC') and (Form1.sModeloECF = '17') then iCCF := StrToInt('0'+LimpaNumero(_ecf17_CCF(True)));
          except
            iCCF := 0;
          end;
        end;

        //
        // Epson
        //
        if Form1.sModeloECF = '15' then
        begin
          if Form1.sModeloECF = '15' then iCOO := StrToInt('0'+LimpaNumero(_ecf15_NumeroDoCupom(True))); // Ok
          if Form1.sModeloECF = '15' then iGNF := StrToInt('0'+LimpaNumero(_ecf15_GNF(True))); // Ok
          if sP1 = 'CC' then if Form1.sModeloECF = '15' then iCDC := StrToInt('0'+LimpaNumero(_ecf15_CDC(True)));
          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then if Form1.sModeloECF = '15' then iGRG := StrToInt('0'+LimpaNumero(_ecf15_GRG(True)));

          try
            if (sP1 = 'NC') and (Form1.sModeloECF = '15') then iCCF := StrToInt('0'+LimpaNumero(_ecf15_CCF(True)));
          except
            iCCF := 0;
          end;
        end;

        //
        // Sweda
        //
        if Form1.sModeloECF = '14' then
        begin
          if Form1.sModeloECF = '14' then iCOO := StrToInt('0'+LimpaNumero(_ecf14_NumeroDoCupom(True))); // Ok
          if Form1.sModeloECF = '14' then iGNF := StrToInt('0'+LimpaNumero(_ecf14_GNF(True))); // Ok
          if sP1 = 'CC' then if Form1.sModeloECF = '14' then iCDC := StrToInt('0'+LimpaNumero(_ecf14_CDC(True)));
          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then if Form1.sModeloECF = '14' then iGRG := StrToInt('0'+LimpaNumero(_ecf14_GRG(True)));

          try
            if (sP1 = 'NC') and (Form1.sModeloECF = '14') then iCCF := StrToInt('0'+LimpaNumero(_ecf14_CCF(True)));
          except
            iCCF := 0;
          end;
        end;

        //PAFNFC-e
        if PAFNFCe then
        begin
          iCOO := StrToInt(_ecf65_ContadorGRG(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.sCaixa, 1));
        end;

        //
        //
        // Evitar gravar COO repetidos no controle de impressões
        // Epson T81 gera LX a cada abertura de dia
        IBQDEMAIS.Close;
        IBQDEMAIS.SQL.Text :=
          'select COO, GNF, GRG ' +
          'from DEMAIS ' +
          'where COO = ' + QuotedStr(FormataNumeroDoCupom(iCOO)) + // Sandro Silva 2021-12-01 'where COO = ' + QuotedStr(StrZero(iCOO,6,0)) +
          ' and GNF = ' + QuotedStr(FormataNumeroDoCupom(iGNF)) + // Sandro Silva 2021-12-01 ' and GNF = ' + QuotedStr(StrZero(iGNF,6,0)) +
          ' and GRG = ' + QuotedStr(FormataNumeroDoCupom(iGRG)) + // Sandro Silva 2021-12-01 ' and GRG = ' + QuotedStr(StrZero(iGRG,6,0)) +
          ' and ECF = ' + QuotedStr(Form1.sNumeroDeSerieDaImpressora);
        IBQDEMAIS.Open;

        if IBQDEMAIS.FieldByName('COO').AsString = '' then
        begin
          //
          if PAFNFCe = False then // Sandro Silva 2020-12-09
            Form1.EstoqueDoDia(True);

          Form1.ibDataSet38.Append;
          //

          sData := FormatDateTime('dd/mm/yyy', Date); // Sandro Silva 2017-11-07 Polimig
          sHora := TimeToStr(Time); // Sandro Silva 2017-11-07 Polimig

          if Form1.sModeloECF = '02' then
          begin
            sDataHoraECF := _ecf02_Dataehoradaimpressora(True);
          end;

          if sDataHoraECF <> '' then
          begin
            sData := Copy(sDataHoraECF, 1, 2) + '/' + Copy(sDataHoraECF, 3, 2) + '/' + Copy(sDataHoraECF, 5, 2);
            try
              StrToDate(sData);
            except
              sData := FormatDateTime('dd/mm/yyy', Date);
            end;

            sHora := Copy(sDataHoraECF, 7, 2) + ':' + Copy(sDataHoraECF, 9, 2) + ':' + Copy(sDataHoraECF, 11, 2);

            try
              StrToTime(sHora);
            except
              sHora := TimeToStr(Time); // Sandro Silva 2017-11-07 Polimig
            end;

          end;

          if Form1.sModeloECF = '02' then
          begin
            if sP1 = 'RZ' then
            begin
              try
                sHora := _ecf02_HoraUltimaReducao;
              except

              end;
            end;
            if LimpaNumero(sHora) = '' then
              sHora := TimeToStr(Time);

          end;

          if sP1 = 'RG' then
          begin
            if sHRGerencial <> '' then
            begin
              sHora := sHRGerencial;
            end;
          end;

          Form1.ibDataSet38.FieldByName('DATA').AsDateTime      := StrToDate(sData);
          Form1.ibDataSet38.FieldByName('HORA').AsString        := sHora; 
          Form1.ibDataSet38.FieldByName('ECF').AsString         := Form1.sNumeroDeSerieDaImpressora;
          Form1.ibDataSet38.FieldByName('DENOMINACAO').AsString := sP1;
          Form1.ibDataSet38.FieldByName('COO').AsString         := FormataNumeroDoCupom(iCOO); // Sandro Silva 2021-12-01 Form1.ibDataSet38.FieldByName('COO').AsString         := StrZero(iCOO,6,0);
          if (PAFNFCe = False) then // Sandro Silva 2020-12-09
            Form1.ibDataSet38.FieldByName('GNF').AsString         := FormataNumeroDoCupom(iGNF); // Sandro Silva 2021-12-01 Form1.ibDataSet38.FieldByName('GNF').AsString         := StrZero(iGNF,6,0);

          if sP1 = 'NC' then
            Form1.ibDataSet38.FieldByName('CCF').AsString := FormataNumeroDoCupom(iCCF); // Sandro Silva 2021-12-01 Form1.ibDataSet38.FieldByName('CCF').AsString := StrZero(iCCF,6,0);

          if sP1 = 'CC' then
            Form1.ibDataSet38.FieldByName('CDC').AsString := FormataNumeroDoCupom(iCDC); // Sandro Silva 2021-12-01 Form1.ibDataSet38.FieldByName('CDC').AsString := StrZero(iCDC,6,0);
          if (sP1 = 'MF') or (sP1 = 'RZ') or (sP1 = 'LX') or (sP1 = 'RG') or (sP1 = 'CM') then
            if PAFNFCe = False then // Sandro Silva 2020-12-09
              Form1.ibDataSet38.FieldByName('GRG').AsString := FormataNumeroDoCupom(iGRG); // Sandro Silva 2021-12-01 Form1.ibDataSet38.FieldByName('GRG').AsString := StrZero(iGRG,6,0);

          Form1.ibDataSet38.Post;
          //
          Commitatudo(True);  // Finalizando Redução Z
          Form1.ibDataset25.Edit;

          if PAFNFCe = False then // Sandro Silva 2020-12-09
            GeraEstoqueDia();// Qualquer impressão diferente de cupom Form1.Demais() Sandro Silva 2016-03-03

          //
        end;
      except
        SmallMsg('Erro ao gravar '+sP1);
      end;
    finally
      FreeAndNil(IBQDEMAIS);
    end;

  end;
  //
  //
  Result := True;
  //
end;

function TForm1.EstoqueDoDia(P1:Boolean): Boolean;
var
 Cursor: TCursor;
begin
  Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;
  //
  //
  if FileExists(Form1.sAtualOnLine+'\small.ini') and not FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then 
  begin
    Form1.bStatusRede := True; // Liga o botão rede
  end;
  //
  Screen.Cursor := Cursor;
  //
  Result := True;
  //
end;

function TForm1.GetNumeroCaixa(sModeloDocumento: String; sNumeroSerie: String): String;
//Sandro Silva 2015-05-04 Retorna o número do caixa usado anteriormente ou configura um novo para o PDV
var
  Mais1Ini: TIniFile;
  IBTCAIXA: TIBTransaction;
  IBQCAIXA: TIBQuery;
  function IncluiReducoes(sPDV: String; sModeloDocumento: String): Boolean;
  var
    sReducoesRegistro: String;
  begin
    Result := False;
    try
      IBQCAIXA.Close;
      IBQCAIXA.SQL.Text :=
        'insert into REDUCOES (REGISTRO, PDV, SERIE, SMALL) ' +
        'values (:REGISTRO, :PDV, :SERIE, :SMALL) ';
      sReducoesRegistro := RightStr('0000000000' + IncGenerator(Form1.IBTransaction1.DefaultDatabase, 'G_REDUCOES'), 10);
      IBQCAIXA.ParamByName('REGISTRO').AsString := sReducoesRegistro;
      IBQCAIXA.ParamByName('PDV').AsString      := sPDV; // Número do caixa
      IBQCAIXA.ParamByName('SERIE').AsString    := sNumeroSerie;  // Nome do computador
      IBQCAIXA.ParamByName('SMALL').AsString    := sModeloDocumento; // Código interno do Small Commerce para identificar o equipamento emissor (ECF Bematech=02)
      IBQCAIXA.ExecSQL;
      IBQCAIXA.Transaction.Commit;

      IBQCAIXA.Close;
      IBQCAIXA.SQL.Text := 'select gen_id(G_HASH_REDUCOES,1) from rdb$database';
      IBQCAIXA.Open;

      Result := True;
    except
      on E: Exception do
      begin
        IBQCAIXA.Transaction.Rollback;
        SmallMsgBox(PChar('Não foi possível salvar a identificação do PDV'), 'Atenção', MB_ICONWARNING + MB_OK);
      end;
    end;
  end;

  function NovoNumeroCaixa: String;
  begin
    // Procura o maior número do caixa já utilizado por ECF/NFC-e
    IBQCAIXA.Close;
    IBQCAIXA.SQL.Text :=
      'select max(PDV) as PDV ' +
      'from REDUCOES ';
    IBQCAIXA.Open;
    // Incrementa 1 no maior caixa
    Result := StrZero(StrToIntDef(Trim(IBQCAIXA.FieldByName('PDV').AsString), 0) + 1, 3, 0);
  end;
begin
  if (sModeloDocumento = '65') or (sModeloDocumento = '59') or (sModeloDocumento = '99') then
  begin

    if sModeloDocumento = '65' then
    begin
      if (Length(GetComputerNameFunc) = 0)
        or (Length(GetComputerNameFunc) > 18) then
      begin
        SmallMsgBox(PChar('Defina um nome para este computador com no máximo 18 caracteres,' + #13 +
                          'após reinicie o computador e inicie a aplicação novamente'), 'Atenção', MB_ICONWARNING + MB_OK);
        Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
          Form1.ClienteSmallMobile.sLogRetornoMobile);
        //Form1.Close;
        FecharAplicacao(ExtractFileName(Application.ExeName));
        Exit;
      end;
    end;

    //
    IBTCAIXA := CriaIBTransaction(Form1.IBTransaction1.DefaultDatabase);
    IBQCAIXA := CriaIBQuery(IBTCAIXA);
    try
      Mais1ini := TIniFile.Create('FRENTE.INI');
      Result   := Mais1Ini.ReadString('Frente de Caixa','Caixa','xxx');

      if StrToIntDef(Result, 0) = 0 then// Validando se configurar valor inválido
        Result := 'xxx';

      //
      if Result = 'xxx' then
      begin
        // Não tem caixa configurado no FRENTE.INI

        // Localiza o número do caixa com a identificação do PDV
        IBQCAIXA.Close;
        IBQCAIXA.SQL.Text :=
          'select max(PDV) as PDV ' +
          'from REDUCOES ' +
          'where SERIE = ' + QuotedStr(sNumeroSerie);
        IBQCAIXA.Open;

        if Trim(IBQCAIXA.FieldByName('PDV').AsString) <> '' then
        begin
          // Encontrou o caixa com a identificação do PDV
          Result := StrZero(StrToIntDef(Trim(IBQCAIXA.FieldByName('PDV').AsString), 0), 3, 0);
        end
        else
        begin
          // Não encontrou o caixa com a identificação do PDV
          if (sModeloDocumento = '59') and (sNumeroSerie = '') then
          begin
            Result := '001';
          end
          else
          begin
            Result := NovoNumeroCaixa;

            // Salva o número do caixa com a identificação do PDV em REDUCOES
            if IncluiReducoes(Result, sModeloDocumento) = False then
              Result := '';
          end;
        end;
        Mais1Ini.WriteString('Frente de Caixa', 'Caixa', Result); // Grava em FRENTE.INI o número do caixa
      end
      else
      begin
        // Tem caixa configurado no FRENTE.INI

        if (sModeloDocumento = '65') or ((sModeloDocumento <> '65') and (sNumeroSerie <> '')) then // Sandro Silva 2017-03-03
        begin
          // Procura a identificação do caixa em REDUCOES
          IBQCAIXA.Close;
          IBQCAIXA.SQL.Text :=
            'select distinct PDV, SERIE ' +
            'from REDUCOES ' +
            'where coalesce(SERIE, '''') <> '''' ' +
            ' and PDV = ' + QuotedStr(Result);
          IBQCAIXA.Open;

          if Trim(IBQCAIXA.FieldByName('SERIE').AsString) = '' then
          begin
            // Não tem em REDUCOES um PDV com o mesmo número de caixa configurado

            // Procura em REDUCOES um número de caixa pela identificação do PDV
            IBQCAIXA.Close;
            IBQCAIXA.SQL.Text :=
              'select distinct PDV, SERIE ' +
              'from REDUCOES ' +
              'where coalesce(PDV, '''') <> '''' ' +
              ' and SERIE = ' + QuotedStr(sNumeroSerie);
            IBQCAIXA.Open;

            if Trim(IBQCAIXA.FieldByName('SERIE').AsString) = '' then
            begin
              // Não tem em REDUCOES a identificação do PDV que está emitindo com o número de caixa configurado
              // Incluir a identificação em REDUCOES
              if IncluiReducoes(Result, sModeloDocumento) = False then
                Result := '';
            end
            else
            begin
              // Encontrou em REDUCOES um caixa com a identificação do PDV
              if Result <> Trim(IBQCAIXA.FieldByName('PDV').AsString) then
              begin
                // O número definido no frente não é o mesmo anteriormente usado
                Result := Trim(IBQCAIXA.FieldByName('PDV').AsString);

                Mais1Ini.WriteString('Frente de Caixa', 'Caixa', Result); // Salva o número do caixa contido em REDUCOES para o PDV
              end;
            end;
          end
          else
          begin
            // Tem em REDUCOES a identificação do PDV que está emitindo com o número de caixa configurado

            // Compara a identificação em REDUCOES com o Computador
            if AnsiUpperCase(Trim(IBQCAIXA.FieldByName('SERIE').AsString)) <> sNumeroSerie then
            begin

              //REDUCOES.SERIE <> Número de série do SAT

              // Procura em REDUCOES um caixa, usado anteriormente, com o Número de série do equipamento

              // Procura em REDUCOES um número de caixa pela identificação do PDV
              IBQCAIXA.Close;
              IBQCAIXA.SQL.Text :=
                'select distinct PDV, SERIE ' +
                'from REDUCOES ' +
                'where coalesce(PDV, '''') <> '''' ' +
                ' and SERIE = ' + QuotedStr(sNumeroSerie);
              IBQCAIXA.Open;

              if IBQCAIXA.FieldByName('PDV').AsString = '' then
              begin

                Result := NovoNumeroCaixa;

                // Incluir a identificação em REDUCOES
                if IncluiReducoes(Result, sModeloDocumento) then
                begin
                  Mais1Ini.WriteString('Frente de Caixa', 'Caixa', Result); // Grava em FRENTE.INI o número do caixa
                end
                else
                begin
                  Result := '';
                end;
              end
              else
              begin
                Result := Trim(IBQCAIXA.FieldByName('PDV').AsString);

                Mais1Ini.WriteString('Frente de Caixa', 'Caixa', Result); // Salva o número do caixa contido em REDUCOES para o PDV

              end;
            end;
          end; // if Trim(IBQCAIXA.FieldByName('SERIE').AsString) = '' then
        end; // if (sModeloDocumento = '65') or ((sModeloDocumento <> '65') and (sNumeroSerie <> '')) then
      end; // if Result = 'xxx' then

      if sModeloDocumento = '59' then
        _ecf59_CriaSequencialCaixa(Result);
      Mais1Ini.Free; // Sandro Silva 2018-11-21 Memória
    finally
      FreeAndNil(IBQCAIXA);
      FreeAndNil(IBTCAIXA);
    end;
  end;
  //
end;

function MostraFoto(P1: Boolean = True): Boolean;
var
  BlobStream: TStream;
  jP2: TJPEGImage;
begin
  //
  Form1.Image2.Picture := nil;

  if P1 then // 2015-09-16
  begin
    try // Imagem salva no campo está corrompida Sandro Silva 2019-05-27
      //
      // Form1.Image2.Visible := False;
      // Form1.Panel9.Visible := False;
      //
      if (Form1.ibDataset4FOTO.BlobSize <> 0)
      then
      begin
        //
        try // Imagem salva no campo está corrompida Sandro Silva 2019-05-27
          BlobStream := Form1.ibDataset4.CreateBlobStream(Form1.ibDataset4.FieldByName('FOTO'), bmRead);
          jp2 := TJPEGImage.Create;
          try
            try // Imagem salva no campo está corrompida Sandro Silva 2019-05-27
              jp2.LoadFromStream(BlobStream);
              try // Imagem salva no campo está corrompida Sandro Silva 2019-05-27
                Form1.Image2.Picture.Assign(jp2);
              except

              end;
            except

            end;

          finally
            BlobStream.Free;
            jp2.Free;
          end;
          
        except

        end;
        //
        if Form1.Image2.Picture.Width > Form1.Image2.Picture.Height then
        begin
          Form1.Image2.Width  := (StrToInt(StrZero((Form1.Image2.Picture.Width * (Form1.Panel9.Width / 2 / Form1.Image2.Picture.Width)), 10, 0)) * 2);
          Form1.Image2.Height := (StrToInt(StrZero((Form1.Image2.Picture.Height * (Form1.Panel9.Width / 2 / Form1.Image2.Picture.Width)), 10, 0)) * 2);
        end else
        begin
          Form1.Image2.Width  := (StrToInt(StrZero((Form1.Image2.Picture.Width * (Form1.Panel9.Height / 2 / Form1.Image2.Picture.Height)), 10, 0)) * 2);
          Form1.Image2.Height := (StrToInt(StrZero((Form1.Image2.Picture.Height * (Form1.Panel9.Height / 2 / Form1.Image2.Picture.Height)), 10, 0)) * 2);
        end;
        //
        Form1.Image2.Left := (Form1.Panel9.Width  - Form1.Image2.Width) div 2;
        Form1.Image2.Top  := (Form1.Panel9.Height - Form1.Image2.Height) div 2;
        Form1.Image2.Repaint;
        //

        Form1.Image2.Visible := True;
        Form1.Panel9.Visible := True;
        //
      end else
      begin
        if TamanhoLogoFrente <= TAMANHO_REFERENCIA_ARQUIVO_LOGOTIPO then // Acima de 300 KB // Sandro Silva 2018-04-26
          MostraALogo(True, False);// Sandro Silva 2018-04-26  MostraALogo(True);
      end;
    except
    
    end;
  end
  else
  begin
    if TamanhoLogoFrente <= TAMANHO_REFERENCIA_ARQUIVO_LOGOTIPO then // Acima de 300 KB // Sandro Silva 2018-04-26
      MostraALogo(True, False);// Sandro Silva 2018-04-26  MostraALogo(True);
  end;
  //
  Result := True;
  //
end;

function ImportaSQL(p1: String) : boolean;
var
  F : TextFile;
  S : String;
begin
  // Tratar diferente quando for tabela nfce, é xml para poder importar os dados do campos nfexml
  // no nfce.off o campo nfexml esta codificado Basecode64
  if (Pos('nfce.off', AnsiLowerCase(p1)) = 0) then
  begin
    try
      // Zera o generator da tabela
      if (Pos('estoque.off', AnsiLowerCase(p1)) > 0) then
      begin
        Form1.IBQuery1.Close;
        Form1.IBQuery1.SQL.Text :=
          'select gen_id(G_ESTOQUE, 0) from rdb$database';
        Form1.IBQuery1.Open;

        HasHs('ESTOQUE', True);
      end;

      if (Pos('alteraca.off', AnsiLowerCase(p1)) > 0) then
      begin
        Form1.IBQuery1.Close;
        Form1.IBQuery1.SQL.Text :=
          'select gen_id(G_ALTERACA, 0) from rdb$database';
        Form1.IBQuery1.Open;

        HasHs('ALTERACA', True);
      end;

    except end;
    //
    AssignFile(F,Pchar(p1));
    Reset(F);
    //
    try
      while not Eof(F) do
      begin
        //
        ReadLn(F,S);
        //
        if Alltrim(S) <> '' then
        begin
          //
          try
            Form1.IBQuery1.Close;
            Form1.IBQuery1.SQL.Clear;
            Form1.IBQuery1.SQL.Add(S);
            Form1.IBQuery1.Open;

            try
              // Atualiza generator da tabela e hash da tabela
              if (Pos('estoque.off', AnsiLowerCase(p1)) > 0) then
              begin
                Form1.IBQuery1.Close;
                Form1.IBQuery1.SQL.Text :=
                  'select gen_id(G_HASH_ESTOQUE, 1) from rdb$database';
                Form1.IBQuery1.Open;

                HasHs('ESTOQUE', True);
              end;

              if (Pos('alteraca.off', AnsiLowerCase(p1)) > 0) then
              begin
                Form1.IBQuery1.Close;
                Form1.IBQuery1.SQL.Text :=
                  'select gen_id(G_HASH_ALTERACA, 1) from rdb$database';
                Form1.IBQuery1.Open;

                HasHs('ALTERACA', True);
              end;

            except end;

          except
            on E: Exception do
            begin
              //LogFrente('Teste 01: Erro carga off ' + E.Message + #13 + s);
            end;
          end;
        end;
        //
      end;
    except end;
    //
    CloseFile(F);
    Form1.IBQuery1.Close;
  end;
  //
  Result := True;
  //
end;

function TForm1.Teclas_touch(P1: boolean) : boolean;
begin
  //
  // Botão F1
  //
  Form1.touch_F1.Visible := True;
  Form1.touch_F1.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ);// Sandro Silva 2021-09-21 Form1.touch_F1.Left    := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ); // Sandro Silva 2016-07-28  Form1.AjustaLargura(12);
  Form1.touch_F1.Top     := AjustaAltura(684-13);// Sandro Silva 2021-09-21 Form1.AjustaAltura(684-13); // Sandro Silva 2016-08-18  Form1.AjustaAltura(684-15);
  //
  Form1.LabelF1.Visible    := True;
  Form1.LabelF1.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ); // Sandro Silva 2021-09-21 Form1.LabelF1.Left       := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ);
  Form1.LabelF1.Top        := AjustaAltura(690-20); // Sandro Silva 2021-09-21 Form1.LabelF1.Top        := Form1.AjustaAltura(690-20);
  Form1.LabelF1.Caption    := 'F1'+chr(10)+'Ajuda';
  Form1.LabelF1.Width      := AjustaLargura(90); // Sandro Silva 2021-09-21 Form1.LabelF1.Width      := Form1.AjustaLargura(90);
  Form1.LabelF1.Font.Color := clBlack;
  //
  // Botão ESC
  //
  Form1.touch_ESC.Visible := True;
  Form1.touch_ESC.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 600); // Sandro Silva 2021-09-21 Form1.touch_ESC.Left    := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 600);
  Form1.touch_ESC.Top     := AjustaAltura(684-13); // Sandro Silva 2021-09-21 Form1.touch_ESC.Top     := Form1.AjustaAltura(684-13); // Sandro Silva 2016-08-18  Form1.AjustaAltura(684-15);
  //
  Form1.LabelESC.Visible    := True;
  Form1.LabelESC.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 600); // Sandro Silva 2021-09-21 Form1.LabelESC.Left       := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 600);
  Form1.LabelESC.Top        := AjustaAltura(690-20); // Sandro Silva 2021-09-21 Form1.LabelESC.Top        := Form1.AjustaAltura(690-20);
  Form1.LabelESC.Caption    := 'ESC'+chr(10)+'Sair';
  Form1.LabelESC.Width      := AjustaLargura(90); // Sandro Silva 2021-09-21 Form1.LabelESC.Width      := Form1.AjustaLargura(90);
  Form1.LabelESC.Font.Color := clBlack;
  //
  // Botão F2
  //
  if (Form1.Memo1.Visible=False) and Form1.bStatusECF and Form1.bStatusFiscal then
  begin
    //
    Form1.touch_F2.Visible   := True;
    Form1.touch_F2.Left      := AjustaLargura(MARGEM_ESQUERDA_OBJ + 100); // Sandro Silva 2021-09-21 Form1.touch_F2.Left      := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 100);
    Form1.touch_F2.Top       := AjustaAltura(684-13);// Sandro Silva 2016-08-18  Form1.AjustaAltura(684-15);
    //
    Form1.LabelF2.Visible    := True;
    Form1.LabelF2.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 100);
    Form1.LabelF2.Top        := AjustaAltura(690-20);
    Form1.LabelF2.Caption    := 'F2'+chr(10)+'Abre'+chr(10)+Form1.sTipoDocumento2;
    Form1.LabelF2.Width      := AjustaLargura(90);
    Form1.LabelF2.Font.Color := clBlack;
    //
  end else
  begin
    //
    Form1.touch_F2.Visible := False;
    Form1.LabelF2.Visible  := False;
    //
  end;
  //
  // Botão F3
  //
  if (Form1.Memo1.Visible) and Form1.bStatusECF and Form1.bStatusFiscal then
  begin
    //
    Form1.touch_F3.Visible := True;
    Form1.touch_F3.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 100);
    Form1.touch_F3.Top     := AjustaAltura(684-13);// Sandro Silva 2016-08-18  Form1.AjustaAltura(684-15);
    //
    Form1.LabelF3.Visible    := True;
    Form1.LabelF3.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 100);
    Form1.LabelF3.Top        := AjustaAltura(690-20);
    Form1.LabelF3.Caption    := 'F3'+chr(10)+'Fecha'+chr(10)+Form1.sTipoDocumento2;
    Form1.LabelF3.Width      := AjustaLargura(90);
    Form1.LabelF3.Font.Color := clBlack;
    //
  end else
  begin
    //
    Form1.touch_F3.Visible := False;
    Form1.LabelF3.Visible  := False;
    //
  end;
  //
  // Botão F4
  //
  if ((Copy(Form1.sConcomitante,1,12) <> 'CONCOMITANTE'))
    and ((Copy(Form1.sConcomitante,1,3) <> 'DAV'))
    then
  begin
    //
    if (Form1.Memo1.Visible) then
    begin
      //
      if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') and (Form1.Confernciademesa1.Enabled) then
      begin
        //
        //Showmessage('Teste 01 4905'); // Sandro Silva 2019-04-11
        Form1.touch_F4.Visible := True;
        Form1.touch_F4.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
        Form1.touch_F4.Top     := AjustaAltura(684 -60-13); 
        //
        Form1.LabelF4.Visible    := True;
        Form1.LabelF4.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
        Form1.LabelF4.Top        := AjustaAltura(690 -60-20);
        Form1.LabelF4.Caption    := 'F4'+chr(10)+'Conferência de '+chr(10)+AllTrim(Copy(Form1.sMesaOuConta+Replicate(' ',10),1,5));
        Form1.LabelF4.Width      := AjustaLargura(90);
        Form1.LabelF4.Font.Color := clBlack;
        //
      end else
      begin
        //
        Form1.touch_F4.Visible := False;
        Form1.LabelF4.Visible  := False;
        //
      end;
      //
    end else
    begin
      //
      Form1.touch_F4.Visible := True;
      Form1.touch_F4.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 200);
      Form1.touch_F4.Top     := AjustaAltura(684 -13); 
      //
      Form1.LabelF4.Visible    := True;
      Form1.LabelF4.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 200);
      Form1.LabelF4.Top        := AjustaAltura(690 -20);
      Form1.LabelF4.Caption    := 'F4'+chr(10)+'Abre'+chr(10)+AllTrim(Copy(Form1.sMesaOuConta+Replicate(' ',10),1,5));
      Form1.LabelF4.Width      := AjustaLargura(90);
      Form1.LabelF4.Font.Color := clBlack;
      //
    end;
    //
  end else
  begin
    //
    Form1.touch_F4.Visible := False;
    Form1.LabelF4.Visible  := False;
    //
  end;
  //
  // Botão F5
  //
  Form1.touch_F5.Visible := True;
  Form1.touch_F5.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 300);
  Form1.touch_F5.Top     := AjustaAltura(684-13);
  //
  Form1.LabelF5.Visible    := True;
  Form1.LabelF5.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 300);
  Form1.LabelF5.Top        := AjustaAltura(690-20);
  Form1.LabelF5.Caption    := 'F5'+chr(10)+'Consulta'+chr(10)+'Preço';
  Form1.LabelF5.Width      := AjustaLargura(90);
  Form1.LabelF5.Font.Color := clBlack;

  {Sandro Silva 2021-09-08 inicio}
  // Estiver com venda ou mesa aberta posiciona botao F5 na posição do botão F4
  if (Form1.Memo1.Visible) then
  begin
    //
    // Botão F5
    //
    Form1.touch_F5.Visible := True;
    Form1.touch_F5.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 200);
    Form1.touch_F5.Top     := AjustaAltura(684 -13); 
    //
    Form1.LabelF5.Visible    := True;
    Form1.LabelF5.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 200);
    Form1.LabelF5.Top        := AjustaAltura(690 -20);
    Form1.LabelF5.Caption    := 'F5'+chr(10)+'Consulta'+chr(10)+'Preço';
    Form1.LabelF5.Width      := AjustaLargura(90);
    Form1.LabelF5.Font.Color := clBlack;
  end;
  {Sandro Silva 2021-09-08 fim}

  //
  // Botão F6
  //
  Form1.LabelF6.AutoSize := False; // Sandro Silva 2021-08-06
  if (Form1.Memo1.Visible=False) and Form1.bStatusECF and Form1.bStatusFiscal then
  begin
    //
    Form1.touch_F6.Visible := True;
    Form1.touch_F6.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
    Form1.touch_F6.Top     := AjustaAltura(684-13);
    //
    Form1.LabelF6.Visible    := True;
    Form1.LabelF6.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
    Form1.LabelF6.Top        := AjustaAltura(690-20);
    Form1.LabelF6.Caption    := 'F6'+chr(10)+'Cancela'+chr(10)+Form1.sTipoDocumento2;
    Form1.LabelF6.Width      := AjustaLargura(90);
    Form1.LabelF6.Font.Color := clBlack;
    //
  end else
  begin
    //
    Form1.touch_F6.Visible := False;
    Form1.LabelF6.Visible  := False;
    //
  end;
  //
  // Botão F7
  //
  if (Form1.Memo1.Visible) and Form1.bStatusECF and Form1.bStatusFiscal then
  begin
    {Sandro Silva 2021-09-08 inicio
    //
    Form1.touch_F7.Visible := True;
    Form1.touch_F7.Left    := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
    Form1.touch_F7.Top     := Form1.AjustaAltura(684-13);// Sandro Silva 2016-08-18  Form1.AjustaAltura(684-15);
    //
    Form1.LabelF7.Visible    := True;
    Form1.LabelF7.Left       := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
    Form1.LabelF7.Top        := Form1.AjustaAltura(690-20);// Sandro Silva 2016-08-18  Form1.AjustaAltura(689-20);
    Form1.LabelF7.Caption    := 'F7'+chr(10)+'Fecha em'+chr(10)+'Dinheiro';
    Form1.LabelF7.Width      := Form1.AjustaLargura(90);
    Form1.LabelF7.Font.Color := clBlack;
    //
    }
    //
    Form1.touch_F7.Visible := True;
    Form1.touch_F7.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 300);
    Form1.touch_F7.Top     := AjustaAltura(684-13);
    //
    Form1.LabelF7.Visible    := True;
    Form1.LabelF7.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 300);
    Form1.LabelF7.Top        := AjustaAltura(690-20);
    Form1.LabelF7.Caption    := 'F7'+chr(10)+'Fecha em'+chr(10)+'Dinheiro';
    Form1.LabelF7.Width      := AjustaLargura(90);
    Form1.LabelF7.Font.Color := clBlack;
    //
    {Sandro Silva 2021-09-08 fim}
  end else
  begin
    //
    Form1.touch_F7.Visible := False;
    Form1.LabelF7.Visible  := False;
    //
  end;
  //
  // Botão F8
  //
  if not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01')) and (Form1.Memo1.Visible) and Form1.bStatusECF and Form1.bStatusFiscal then
  begin
    //
    {Sandro Silva 2021-09-08 inicio
    Form1.touch_F8.Visible := True;
    Form1.touch_F8.Left    := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
    Form1.touch_F8.Top     := Form1.AjustaAltura(684-13);
    //
    Form1.LabelF8.Visible    := True;
    Form1.LabelF8.Left       := Form1.AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
    Form1.LabelF8.Top        := Form1.AjustaAltura(690-20);
    Form1.LabelF8.Caption    := 'F8'+chr(10)+'Desconto';
    Form1.LabelF8.Width      := Form1.AjustaLargura(90);
    Form1.LabelF8.Font.Color := clBlack;
    }
    Form1.touch_F8.Visible := True;
    Form1.touch_F8.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
    Form1.touch_F8.Top     := AjustaAltura(684-13);
    //
    Form1.LabelF8.Visible    := True;
    Form1.LabelF8.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
    Form1.LabelF8.Top        := AjustaAltura(690-20);
    Form1.LabelF8.Caption    := 'F8'+chr(10)+'Desconto';
    Form1.LabelF8.Width      := AjustaLargura(90);
    Form1.LabelF8.Font.Color := clBlack;
    {Sandro Silva 2021-09-08 fim}
    //
  end else
  begin
    //
    Form1.touch_F8.Visible := False;
    Form1.LabelF8.Visible  := False;
    //
  end;

  //
  // Botão F10
  //
  if (Form1.Memo1.Visible=False) then
  begin
    //
    Form1.touch_F10.Visible := True;
    Form1.touch_F10.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
    Form1.touch_F10.Top     := AjustaAltura(684-13);
    //
    Form1.LabelF10.Visible := True;
    Form1.LabelF10.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
    Form1.LabelF10.Top     := AjustaAltura(690-20);

    {Sandro Silva 2021-09-08 inicio} 
    Form1.touch_F9.Visible := False;
    Form1.LabelF9.Visible  := False;
    Form1.LabelF9.Caption  := 'F9'+chr(10)+'Menu'+chr(10)+'Fiscal'; // Sandro Silva 2016-03-02
    {Sandro Silva 2021-09-08 fim}

    if ((Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99')) //Usando ECF
      or ((Form1.sModeloECF_Reserva = '65') and PAFNFCe) // NFC-e pelo PAF-NFC-e
    then
    begin
      Form1.touch_F9.Picture := Form1.touch_F10.Picture; // Sandro Silva 2021-09-08
      Form1.touch_F9.Visible := True;
      Form1.touch_F9.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 600);
      Form1.touch_F9.Top     := AjustaAltura(684-13-60);

      //
      Form1.LabelF9.Visible := True;
      Form1.LabelF9.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 600);
      Form1.LabelF9.Top     := AjustaAltura(690-20 - 60);
    end;
    //
    if (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '99') then
    begin
      Form1.LabelF10.Caption := 'F10'+chr(10)+'Menu';

      if PAFNFCe then
        Form1.LabelF9.Caption  := 'F9'+chr(10)+'Menu'+chr(10)+'Fiscal'; // Sandro Silva 2016-03-02

    end else
    begin
      Form1.LabelF10.Caption := 'F10'+chr(10)+'Menu'+chr(10)+'Gerencial'; // Sandro Silva 2016-03-02 Form1.LabelF10.Caption := 'F10'+chr(10)+'Menu'+chr(10)+'Fiscal';
      Form1.LabelF9.Caption  := 'F9'+chr(10)+'Menu'+chr(10)+'Fiscal'; // Sandro Silva 2016-03-02
    end;
    //
    Form1.LabelF10.Font.Color := clBlack;
    Form1.LabelF9.Font.Color := clBlack;
    //
  end else
  begin
    //
    Form1.touch_F10.Visible := False;
    Form1.LabelF10.Visible  := False;

    Form1.touch_F9.Visible := False;
    Form1.LabelF9.Visible  := False;
    {Sandro Silva 2021-09-08 inicio}
    if (Form1.Memo1.Visible) and Form1.bStatusECF and Form1.bStatusFiscal then
    begin
      //
      Form1.touch_F9.Picture.Bitmap := Form1.touch_F7.Picture.Bitmap;
      Form1.touch_F9.Visible := True;
      Form1.touch_F9.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
      Form1.touch_F9.Top     := AjustaAltura(684-13);
      //
      Form1.LabelF9.Visible    := True;
      Form1.LabelF9.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
      Form1.LabelF9.Top        := AjustaAltura(690-20);
      Form1.LabelF9.Caption    := 'F9'+chr(10)+'Fecha em'+Chr(10)+'Cartão';
      Form1.LabelF9.Width      := AjustaLargura(90);
      Form1.LabelF9.Font.Color := clBlack;
      //
    end;
  end;

  //
  // Botão F11
  //
  if (not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01'))
    and ((Copy(Form1.sConcomitante,1,3) = 'DAV'))
         or (sModeloECF = '65')
         or (sModeloECF = '59')
         or (sModeloECF = '99')
         ) then
  begin
    //
    if (Form1.bStatusECF and Form1.bStatusFiscal) or (sModeloECF = '65') or (sModeloECF = '59') or (sModeloECF = '99') then
    begin
      //
      HabilitaBotaoF11(True);
    end else
    begin
      //
      HabilitaBotaoF11(False);
      //
    end;
    //
  end else
  begin
    //
    HabilitaBotaoF11(False);
    //
  end;
  //
  // Botão F12
  //
  if (not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01'))
     and ((Copy(Form1.sConcomitante,1,3) = 'DAV')
          or (sModeloECF = '65')
          or (sModeloECF = '59')
          or (sModeloECF = '99')
          )
          ) then
  begin
    //
    if (Form1.bStatusECF and Form1.bStatusFiscal) or (sModeloECF = '65') or (sModeloECF = '59') or (sModeloECF = '99') then
    begin
      //
      HabilitaBotaoF12(True);
    end else
    begin
      //
      HabilitaBotaoF12(False);
      //
    end;
    //
  end else
  begin
    //
    HabilitaBotaoF12(False);
    //
  end;

  Form1.LabelF1.Height  := Form1.touch_F1.Height;
  Form1.LabelF2.Height  := Form1.touch_F2.Height;
  Form1.LabelF3.Height  := Form1.touch_F3.Height;
  Form1.LabelF4.Height  := Form1.touch_F4.Height;
  Form1.LabelF5.Height  := Form1.touch_F5.Height;
  Form1.LabelF6.Height  := Form1.touch_F6.Height;
  Form1.LabelF7.Height  := Form1.touch_F7.Height;
  Form1.LabelF8.Height  := Form1.touch_F8.Height;
  Form1.LabelF9.Height  := Form1.touch_F9.Height;
  Form1.LabelF10.Height := Form1.touch_F10.Height;
  Form1.LabelF11.Height := Form1.touch_F11.Height;
  Form1.LabelF12.Height := Form1.touch_F12.Height;
  Form1.LabelESC.Height := Form1.touch_ESC.Height;

  //
  Form1.LabelF1.Width  := Form1.touch_F1.Width;
  Form1.LabelF2.Width  := Form1.touch_F2.Width;
  Form1.LabelF3.Width  := Form1.touch_F3.Width;
  Form1.LabelF4.Width  := Form1.touch_F4.Width;
  Form1.LabelF5.Width  := Form1.touch_F5.Width;
  Form1.LabelF6.Width  := Form1.touch_F6.Width;
  Form1.LabelF7.Width  := Form1.touch_F7.Width;
  Form1.LabelF8.Width  := Form1.touch_F8.Width;
  Form1.LabelF9.Width  := Form1.touch_F9.Width;
  Form1.LabelF10.Width := Form1.touch_F10.Width;
  Form1.LabelF11.Width := Form1.touch_F11.Width;
  Form1.LabelF12.Width := Form1.touch_F12.Width;
  Form1.LabelESC.Width := Form1.touch_ESC.Width;
  //

  Form1.LabelF1.Layout  := tlCenter;
  Form1.LabelF2.Layout  := tlCenter;
  Form1.LabelF3.Layout  := tlCenter;
  Form1.LabelF4.Layout  := tlCenter;
  Form1.LabelF5.Layout  := tlCenter;
  Form1.LabelF6.Layout  := tlCenter;
  Form1.LabelF7.Layout  := tlCenter;
  Form1.LabelF8.Layout  := tlCenter;
  Form1.LabelF9.Layout  := tlCenter;
  Form1.LabelF10.Layout := tlCenter;
  Form1.LabelF11.Layout := tlCenter;
  Form1.LabelF12.Layout := tlCenter;
  Form1.LabelESC.Layout := tlCenter;

  Form1.Memo1.Left := Form1.Label13.Left;
  Form1.Memo2.Left := Form1.Memo1.Left;
  Form1.Memo3.Left := Form1.Memo1.Left;

  ExibeScrollCupom(Form1.Memo1.Visible); // Sandro Silva 2016-08-03

  Label_CopyRight.Width := AjustaLargura(MARGEM_ESQUERDA_OBJ + 200) - Label_CopyRight.Left;

  Result := True;
  //
end;

function CortaPapelNoVideo(P1: boolean) : boolean;
begin
  //
  try
    if FileExists(Form1.sAtualOnLine+'\logofrente.bmp') then
    begin
      Form1.Image3.Picture.LoadFromFile(Form1.sAtualOnLine+'\logofrente.bmp');
    end;
  except end;
  //
  Form1.Memo1.Lines.Clear;
  //
  Form1.Panel2.Visible := False;
  Form1.Memo1.Visible  := False;
  Form1.Panel5.Visible := False;
  Form1.Memo2.Visible  := False;
  Form1.Memo2.Visible  := False;
  Form1.Memo3.Visible  := False;
  Form1.Panel5.Visible := False;
  Form1.Memo1.Height   := AjustaAltura(0);
  Form1.Memo3.Top      := AjustaAltura(534);
  Form1.Memo1.Top      := AjustaAltura(578);
  Form1.Memo1.Height   := AjustaAltura(45);
  Form1.Panel5.Top     := Form1.Memo3.Top + AjustaAltura(5);

  ExibeScrollCupom(Form1.Memo1.Visible); // Sandro Silva 2016-08-03

  //
  Mesas(StrToInt(Form1.sMesas)); // Corta Papel
  //
  Form1.Teclas_touch(True);
  //
  Result := True;
  //
  Form1.Minimizarnabandeja1.Enabled := True;

  //Sempre limpa variáveis após fechar venda
  Form1.sSerieReferenteNFModelo2    := '';
  Form1.sSubSerieReferenteNFModelo2 := '';
  Form1.sReferenteNFModelo2         := '';

  Form2.chkDelivery.Checked := False; // Sandro Silva 2020-06-01
  Form1.bFechaRapidoCartao := False; // Sandro Silva 2021-09-08
end;

function ImprimeNoVideo(P1: String) : boolean;
begin
  //
  // CONSUMO
  //
  try
    //
    //
    Form1.Memo1.Visible  := False;
    Form1.Panel5.Visible := False;
    Form1.Memo2.Visible  := False;
    Form1.Memo3.Visible  := False;

    if Form1.Panel2.Visible then
    begin
      Form1.Panel2.Left := Form1.Memo1.BoundsRect.Right; // Sandro Silva 2016-08-03
      Form1.Panel2.BringToFront; // Sandro Silva 2016-08-03
    end;

    //
    if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then
    begin
      Form1.Panel5.Visible := True;
    end else
    begin
      Form1.Panel5.Visible := False;
    end;
    //
    Form1.Memo1.Lines.Delete(Form1.Memo1.Lines.Count-1);
    //
    if P1 <> TRACO_CUPOM_TELA then
    begin
      if Length(P1) < 45 then
      begin
        Form1.Memo1.Lines.Add(Copy(P1+Replicate(' ',45),1,45));
      end else
      begin
        Form1.Memo1.Lines.Add(Copy(P1+Replicate(' ',90),1,45));
        Form1.Memo1.Lines.Add(Copy(P1+Replicate(' ',90),46,44));
      end;
    end
    else
    begin
      Form1.Memo1.Lines.Add(Copy(P1+Replicate(' ',45),1,45));
    end;

    //
    Form1.Memo1.Lines.Add(TRACO_CUPOM_TELA);
    //
    //    if Form1.Image3.Visible then iCorte := 0 else iCorte := Form1.Memo3.Height;
    //
    Form1.AjustarObjetosCupomNaTela;
  except end;
  //
  Form1.Teclas_touch(True);
  //
  Result := True;
  //
end;

function MD5_Da_Lista(P1: Boolean): boolean;
var
  F : TextFile;
  Mais1ini : TiniFile;
begin
  //

  try
    //
    AssignFile(F,pChar(Form1.sPastaDoExecutavel+'\LISTA.TXT'));
    Rewrite(F);
    //
    // Erro: Ao invés de usar os dados do Desenvolvedor usamos os dados do usuário Emitente.
    //
    //  Writeln(F, 'N1' +
    //             right('00000000000000' + LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString), 14) +
    //             right('00000000000000' + LimpaNumero(Form1.ibDataSet13.FieldByName('IE').AsString), 14) +
    //             right('00000000000000' + LimpaNumero(Form1.ibDataSet13.FieldByName('IM').AsString), 14) +
    //             Uppercase(copy(Form1.ibDataSet13.FieldByName('NOME').AsString + replicate(' ', 50), 1, 50)) +
    //             replicate(' ', 32));
    //
    Writeln(F, 'N1' +
               Right('00000000000000' + LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF), 14) +
               Copy(LimpaNumero(IE_SOFTWARE_HOUSE_PAF) + Replicate(' ', 14), 1, 14) +
               Copy(IM_SOFTWARE_HOUSE_PAF + Replicate(' ', 14), 1, 14) +
               AnsiUpperCase(Copy(ConverteAcentos(Form1.sRazaoSocialSmallsoft) + Replicate(' ', 50), 1, 50)));


    //
    Writeln(F, 'N2'+
               //'URB0342013'+ // Número do laudo
               NUMERO_LAUDO_PAF_ECF+ // Número do laudo
               Copy('SMALL COMMERCE'+Replicate(' ',50),1,50)+ // Nome do aplicativo
               Copy(StrTran(Form22.sBuild,'Versão e Build: ','')+Replicate(' ',10),1,10)); // Versão e build

    Writeln(F, 'N3'+Copy('APF_DLL2.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'APF_DLL2.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('BEMAFI32.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'BEMAFI32.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('CONSULTA.EXE'+Replicate(' ',50),1,50)+Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'CONSULTA.EXE')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('CONVECF.DLL'+Replicate(' ',50),1,50)       +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'CONVECF.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('NFE.EXE'+Replicate(' ',50),1,50)+Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'NFE.EXE')))+Replicate(' ',32),1,32))); // MD5
    // Sandro Silva 2022-12-02 Unochapeco Writeln(F, 'N3'+Copy('BLOCOX.EXE'+Replicate(' ',50),1,50)+Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'BLOCOX.EXE')))+Replicate(' ',32),1,32))); // MD5 // Sandro Silva 2019-08-29 ER 02.06 UnoChapeco
    Writeln(F, 'N3'+Copy('PESADO.EXE'+Replicate(' ',50),1,50)+Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'PESADO.EXE')))+Replicate(' ',32),1,32))); // MD5 // Sandro Silva 2019-08-29 ER 02.06 UnoChapeco
    Writeln(F, 'N3'+Copy('DARUMA32.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'DARUMA32.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('DARUMAFRAMEWORK.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'DARUMAFRAMEWORK.DLL')))+Replicate(' ',32),1,32))); // MD5 2015-11-13
    Writeln(F, 'N3'+Copy('DLL1EFC3.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'DLL1EFC3.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('DLL32PHI.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'DLL32PHI.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('DLLG2.DLL'+Replicate(' ',50),1,50)         +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'DLLG2.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('FRENTE.EXE'+Replicate(' ',50),1,50)+Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'FRENTE.EXE')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('GENERAL32.DLL'+Replicate(' ',50),1,50)     +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'GENERAL32.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('ICASH.DLL'+Replicate(' ',50),1,50)         +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'ICASH.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('INTERFACEEPSON.DLL'+Replicate(' ',50),1,50)+Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'INTERFACEEPSON.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('SWECF.DLL'+Replicate(' ',50),1,50)         +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'SWECF.DLL')))+Replicate(' ',32),1,32))); // MD5
    Writeln(F, 'N3'+Copy('TRDECF32.DLL'+Replicate(' ',50),1,50)      +Uppercase(Copy(MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\'+'TRDECF32.DLL')))+Replicate(' ',32),1,32))); // MD5
    //
    Writeln(F, 'N9' +
               Right('00000000000000' + LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF), 14) +
               Copy(LimpaNumero(IE_SOFTWARE_HOUSE_PAF) + Replicate(' ', 14), 1, 14) +
               StrZero(18,6,0));
    //
    CloseFile(F);                                    // Fecha o arquivo
    //
    AssinaturaDigital(pChar(Form1.sPastaDoExecutavel+'\LISTA.TXT'));
    CHDir(Form1.sAtual);
    //
    Form1.sMD5DaLista := MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\LISTA.TXT')));
    //
    Mais1ini := TIniFile.Create(Form1.sArquivo);
    //
    if Mais1Ini.ReadString('DAV','I','XXXXXXXXXX') <> 'XXXXXXXXXX' then
    begin
      Mais1Ini.WriteString('MD5','LISTA',SmallCripto(Form1.sMD5DaLista));
      Mais1Ini.UpdateFile;
    end;
    //
    Mais1Ini.Free;
  except
    //SmallMsg('Teste 2 md5');
  end;
  //
  // SmallMsg(Form1.sMD5DaLista);
  //
  CHDir(Form1.sAtual);
  //
  Result := True;
  //
end;

procedure AbrirMonitorMobile;
begin
  if ConsultaProcesso('mobile.exe') = False then
  begin
    Chdir(Form1.sAtual); // Sandro Silva 2018-02-23
    ShellExecute( 0, 'Open', PChar(Form1.sCaminhoMobile + '\mobile.exe'), pChar(Form1.ibDataSet13.FieldByName('CGC').AsString) , '', SW_MINIMIZE); // 2015-12-01
  end;
end;

//******************** INÍCIO TESTATUDO()*****************************
// Testa obrigatoriedades do PAF, status serviço NFC-e, status operacional do SAT/MFE
function TestaTudo(P1: Boolean): boolean;
//
// Valida comunicação com ECF, hora do ECF e computador
// Nunca usar CommittaTudo() ou CommittaTudo2() dentro desta função. Causa problemas de sincronia entre os IbDataSet, Query...
//
var
  bMEIValido: Boolean; // Controlar validação de empresa MEI Sandro Silva 2021-04-30
  sSerie, sMotivo : String;
  sTotalDia : String;
  Mais2Ini : tIniFile;
  I : Integer;
  sCRO: String;
  sCRZ: String;
  sCROCripta: String;
  sDadosUltimaRZ: String;
  sCROUltimaRZ: String;
  sCRZUltimaRZ: String;
  dVendaBrutaUltimaRZ: Double;
  //t: TTime;
  CursorOld: TCursor; // Sandro Silva 2018-10-15
  sAlertaMD5: String; // Sandro Silva 2018-12-04
  // Sandro Silva 2022-02-14 sDataChaveMei: String; // Sandro Silva 2020-09-29
  // Sandro Silva 2022-02-14 sCNPJChaveMei: String; // Sandro Silva 2020-09-29
  IBTDadosRequisitoXXIV: TIBTransaction; // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco
  IBQDadosRequisitoXXIV: TIBQuery; // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco
  procedure SelecionaDadosParaComparar;
  begin
    IBQDadosRequisitoXXIV.Close;
    IBQDadosRequisitoXXIV.SQL.Text := Form1.SQLSelectDadosRequisitoXXIV;
    IBQDadosRequisitoXXIV.Open;

    sDadosUltimaRZ := Replicate('0',1278);
    //
    sDadosUltimaRZ := Form1.PDV_DadosDaUltimaReducaoZ(True);

    dVendaBrutaUltimaRZ := StrToFloatDef(Copy(sDadosUltimaRZ, 13, 18), 0) / 100;// Venda Bruta
    sCRZUltimaRZ        := Copy(sDadosUltimaRZ, 31, 4); // CRZ Contador de Redução Z
    sCROUltimaRZ        := Copy(sDadosUltimaRZ, 323, 4);  // 323,  4 CRO Contador de reinício de operação
  end;
begin

// Atenção se criar linha em branco no arquivo pode ser retorno de tupla nula nas querys

  //SmallMsg('Teste 01 4592');

  CursorOld := Screen.Cursor; // Sandro Silva 2018-10-15
  Screen.Cursor := crHourGlass; // Sandro Silva 2018-10-15

  IBTDadosRequisitoXXIV := CriaIBTransaction(Form1.IBTransaction1.DefaultDatabase);
  IBQDadosRequisitoXXIV := CriaIBQuery(IBTDadosRequisitoXXIV);

  Form1.MeiosdePagto1.Visible := False; // 2015-09-08 ER 02.03 não permite esse relatório

  //
  if Form1.sModeloECF <> '01' then
  begin
    //
    Form1.sMenuFiscal := 'Menu fiscal';

    //
    if (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '99') then
    begin
      Form1.sMenuFiscal := 'Menu';
      Form1.sHoraDoCupom := Form1.PDV_DataeHoraDaImpressora(True);

      Form1.sDataDoCupom := Form1.PDV_DataMovimento(True); // Sandro Silva 2023-04-04
      //
      //if Form1.sModeloECF_Reserva = '65' then
      //  Form1.sHoraDoCupom := _ecf65_Dataehoradaimpressora(True);
      if Form1.sModeloECF_Reserva = '59' then
      begin
        //Form1.sHoraDoCupom := _ecf59_Dataehoradaimpressora(True);
        Form1.MeiosdePagto1.Visible := True; // 2015-09-08
      end;
      if Form1.sModeloECF_Reserva = '99' then
      begin
        //Form1.sHoraDoCupom := _ecf99_Dataehoradaimpressora(True);
        Form1.MeiosdePagto1.Visible := True; // 2015-09-08
      end;

      if (((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99'))) then
      begin
        Form1.MeiosdePagto1.Visible     := True; // 2015-09-08

        Form1.Concomitante.Visible      := True;
        Form1.Mesas1.Visible            := True;
        Form1.Contadecliente1.Visible   := True;
        Form1.ContadeclienteOS1.Visible := True;

        {Sandro Silva 2023-05-30 inicio
        Form1.Concomitante.Enabled      := True;
        Form1.Mesas1.Enabled            := True;
        Form1.Contadecliente1.Enabled   := True;
        Form1.ContadeclienteOS1.Enabled := True;
        }
        if ValidaRecursos.PermiteRecursoParaSerial then 
        begin
          Form1.Concomitante.Enabled      := True;
          Form1.Mesas1.Enabled            := True;
          Form1.Contadecliente1.Enabled   := True;
          Form1.ContadeclienteOS1.Enabled := True;
        end;
        {Sandro Silva 2023-05-30 fim}

      end;
      //
      Form1.EspelhoMFD1.Visible := False;
      //
      Form1.NFCe1.Visible                                 := True;
      Form1.NFCe1.Caption                                 := 'NFC-e';
      Form1.MenuFiscal1.Visible                           := False;
      Form1.N7.Visible                                    := False;
      Form1.Fechamentodocaixa1.Visible                    := False;
      Form1.RetornodeVariveisdaImpressora1.Visible        := False;
      Form1.Cadastraraliquota1.Visible                    := False;
      if PAFNFCe = False then
        Form1.Relatriodetributao1.Visible                 := False;
      Form1.N1.Visible                                    := False;
      Form1.Notafiscaldevendaaconsumidormodelo021.Visible := False;
      Form1.RegistromanualdeNFmodelo11.Visible            := False;
      Form1.NFCeNotaFiscaldeConsumidorEletrnica1.Visible  := False;
      //
      Form1.bStatusECF  := True; // Liga o botão ECF
      //
      Result := False;
      //
      if Form1.bBalancaAutonoma = False then // Sandro Silva 2019-01-23
      begin
        //Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços....';
        if Form1.sModeloECF_Reserva = '65' then
          Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços da NFC-e...';
        if Form1.sModeloECF_Reserva = '59' then
          Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços do ' + _ecf59_Tipodaimpressora(True) + '...';
        if Form1.sModeloECF_Reserva = '99' then
          Form22.Label6.Caption := '';

        if PAFNFCe then
          Form22.Label6.Caption := Form22.Label6.Caption + #13 + MSG_ALERTA_MENU_FISCAL_INACESSIVEL; // Sandro Silva 2021-07-28 Form22.Label6.Caption := Form22.Label6.Caption + ' ' + MSG_ALERTA_MENU_FISCAL_INACESSIVEL;

      end;
      Form22.Label6.Repaint;
      //
      try
        if Form1.sModeloECF_Reserva = '65' then
        begin
          Result := _ecf65_Inicializa('');
        end;

        if Form1.sModeloECF_Reserva = '59' then
        begin
          Form1.NFCe1.Caption := 'CF-e';
          Result := _ecf59_Inicializa('');
        end;

        if Form1.sModeloECF_Reserva = '99' then
        begin
          Form1.NFCe1.Caption := 'MEI';
          Result := _ecf99_Inicializa('');
        end;

      except
        on E: Exception do
        begin
          //SmallMsg('Teste 01' + #13 + E.Message);
        end;
      end;

      //
      if Result then
      begin
        //
        if Form1.sModeloECF_Reserva = '65' then
        begin
          sMotivo    := 'Serviço de NFC-e em operação';
          Form1.sStatusECF := 'Serviço de NFC-e em operação';
        end
        else if Form1.sModeloECF_Reserva = '59' then
        begin
          sMotivo    := 'Serviço de CF-e em operação';
          Form1.sStatusECF := 'Serviço de CF-e em operação';
        end
        else
        begin
          sMotivo    := 'Em operação';
          Form1.sStatusECF := 'Em operação';
        end;
        Result := True;
        Form1.bStatusECF := True; // Desliga botão ECF
        //
      end else
      begin
        //
        if Form1.sModeloECF_Reserva = '65' then
        begin
          sMotivo    := 'NFC-e Sem serviço';
          Form1.sStatusECF := 'NFC-e Sem serviço';
        end
        else if Form1.sModeloECF_Reserva = '59' then
        begin
          sMotivo    := 'CF-e Sem serviço';
          Form1.sStatusECF := 'CF-e Sem serviço';
        end
        else
        begin
          sMotivo    := 'Sem serviço';
          Form1.sStatusECF := 'Sem serviço';
        end;

        Result := False;
        //
        if Form1.NFCeemContingncia1.Checked then
        begin
          Form1.bStatusECF := True; // Desliga botão ECF
        end else
        begin
          Form1.bStatusECF := False; // Desliga botão ECF
        end;
        //
      end;

      if Form1.sModeloECF = '59' then
      begin
        if _ecf59_ConfiguraSAT = False then
          Result := False;

        if Result = False then
        begin
          //
          if P1 then
          begin
            SmallMsg(PAnsiChar(Form1.sStatusECF + chr(10)+
                      'O funcionamento deste PDV está impedido exceto para: '+chr(10)+Chr(10)+
                      '  Consulta de preços'+Chr(10)+
                      '  Funções gerenciais'));
          end;
          //
          Form1.bStatusFiscal := False;
          //
        end else
        begin
          Form1.bStatusFiscal := True; // Liga o botão fiscal
        end;

      end;

      //
    end else
    begin // ECF
      //
      Form1.NFCe1.Visible := False;
      //
      Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Carrega chave privada Sandro Silva 2019-09-11 ER 02.06 UnoChapeco
      Mais2ini := TIniFile.Create(Form1.sArquivo);
      if Mais2Ini.ReadString('DAV','I','XXX') <> 'XXX' then // Evitar access violation em LbBlowfish1.DecryptString() qdo não tem criptografado durante debug Sandro Silva 2018-12-04
      begin
        try
          Form1.sTipoImpressao := Copy(Form1.LbBlowfish1.DecryptString(Mais2Ini.ReadString('DAV','I','N')),1,1);
        except
          Form1.sTipoImpressao := 'N';
        end;
      end;

      //
      // Testa Hora, Data, Serie da Impressora e Valor total
      //
      Form1.sStatusECF     := 'ECF - Não conectado.';
      Form1.sF4Conferencia := '';
      //
      Result := True;
      Form22.Label6.Caption := 'Aguarde! Validando o uso do ECF.';
      Form22.Label6.Repaint;

      try
        if Form1.sModeloECF = '02' then
          Form1.sModeloFabricante := Form1.PDV_ModeloImpressora(True); // Sandro Silva 2019-09-05
        //ShowMessage('Teste 1 ' + Form1.sModeloFabricante);
      except

      end;
      //
      try
        //
        Form1.sHoraDoCupom := Form1.PDV_DataeHoraDaImpressora(True);
        //
        // Hora do sistema
        //
        Form1.sDataDoCupom := DateToStr(Date);

        //SmallMsg('Teste 01 "' + Form1.sHoraDoCupom + '"');

        //
        if ((Length(AllTrim(Limpanumero(Form1.sHoraDoCupom))) <> 12)) then
        begin
          //
          //ShowMessage('Teste 01 ' + QuotedStr(Form1.sHoraDoCupom));
          //
          sMotivo          := 'ECF - Não conectado/Desligado';
          Form1.sStatusECF := 'ECF - Não conectado/Desligado.'; // // Sandro Silva 2016-03-04 POLIMIG
          Result := False;
          //
          Form1.bStatusECF := False; // Desliga botão ECF
          //
          Form1.Confernciademesa1.Enabled              := False;
          Form1.RetornodeVariveisdaImpressora1.Enabled := False;
          Form1.SuprimentoReforodecaixa1.Enabled       := False;
          Form1.Sangria1.Enabled                       := False;
          Form1.Fechamentodocaixa1.Enabled             := False;
          Form1.Cadastraraliquota1.Enabled             := False;
          Form1.Formasdepagamento1.Enabled             := False;
          Form1.LXLeituraX1.Enabled                    := False;
          Form1.LMF1.Enabled                           := False;
          Form1.EspelhoMFD1.Enabled                    := False;
          Form1.ArqMF1.Enabled                         := False;
          Form1.ArqMFD1.Enabled                        := False;
          Form1.Relatriogerancial1.Enabled             := False;
          Form1.IdentificaodoPAFECF1.Enabled           := False;
          Form1.ransfernciaentremesas1.Enabled         := False;
          Form1.MesasAbertas1.Enabled                  := False;
          Form1.MeiosdePagto1.Enabled                  := False;
          Form1.ParmetrosdeConfigurao1.Enabled         := False; // 2015-09-14
          Form1.ArqAC17041.Enabled                     := False; // 2015-09-14
          //
        end else
        begin
          //
          Form1.Confernciademesa1.Enabled              := True;
          //Form1.RetornodeVariveisdaImpressora1.Enabled := False; // Sandro Silva 2017-11-29 Polimig
          Form1.SuprimentoReforodecaixa1.Enabled       := True;
          Form1.Sangria1.Enabled                       := True;
          Form1.Fechamentodocaixa1.Enabled             := True;
          Form1.Cadastraraliquota1.Enabled             := True;
          Form1.Formasdepagamento1.Enabled             := True;
          Form1.LXLeituraX1.Enabled                    := True;
          Form1.LMF1.Enabled                           := True;
          Form1.EspelhoMFD1.Enabled                    := True;
          Form1.ArqMF1.Enabled                         := True;
          Form1.ArqMFD1.Enabled                        := True;
          Form1.Relatriogerancial1.Enabled             := True;
          Form1.IdentificaodoPAFECF1.Enabled           := True;
          Form1.ransfernciaentremesas1.Enabled         := True;
          Form1.MesasAbertas1.Enabled                  := True;
          Form1.MeiosdePagto1.Enabled                  := True;
          Form1.ParmetrosdeConfigurao1.Enabled         := True; // 2015-09-14
          Form1.ArqAC17041.Enabled                     := True; // 2015-09-18 False; // 2015-09-14
          //
          Form1.bStatusECF  := True; // Liga o botão ECF
          //
        end;
        //
      except end;
      //

      if Result then
      begin
        try
          // ---------------------------- //
          // Grava arquivo criptografado  //
          // com o numero serial do ECF   //
          // ---------------------------- //
          Form1.sNumeroDeSerieDaImpressora := Form1.PDV_NumeroSerie(True);

          //2015-10-02 ECF com mémoria fiscal trocada tem 21 posições no número de série
          //           o frente considera apenas 20 primeiras posições;
          Form1.sNumeroDeSerieDaImpressora := Copy(Form1.sNumeroDeSerieDaImpressora, 1, 20);
          //
          sTotalDia := '00000000000000';
          //
          sTotalDia := Form1.PDV_GrandeTotal(True);
          //
          //
          sSerie := '';
          //
          for I := 1 to 5 do
          begin
            sSerie := sSerie + Copy(Form1.sNumeroDeSerieDaImpressora+Replicate(' ',20),(I*4)-3,4)+' '
          end;

          if (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99') then
          begin
            if (Mais2Ini.ReadString('ECF','CGC','') <> Form1.LbBlowfish1.EncryptString(alltrim(Form1.ibDataSet13.FieldByName('CGC').AsString))) then // Sandro Silva 2016-03-30 Faltou na homologação
            begin
              sMotivo := 'Requisito XXIV - PAF-ECF'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+'O número de fabricação do ECF conectado neste momento, não está autorizado para uso fiscal'+Chr(13) + Chr(10)+'neste estabelecimento.'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+
                '   Para solicitar o arquivo auxiliar criptografado com a autorização desta impressora para este computador'+Chr(13) + Chr(10)+
                '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 1'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+''+
                '   Serial: '+ sSerie  +Chr(13) + Chr(10)+
                '   GT: '+   FormatFloat('0.00',(StrToFloatDef(stotalDia, 0) / 100)) +Chr(13) + Chr(10)+''+ 
                '   CNPJ: '+ Form1.ibDataSet13.FieldByName('CGC').AsString+ Chr(13) + Chr(10)+ Chr(13) + Chr(10) +'';
              //
              //
              Form1.sStatusECF := 'ECF - Não autorizado.';
              //
              Result := False;
              DesabilitaHabilitaImpressoes(False);              
            end
            else
            begin
              //
              if (Mais2Ini.ReadString('ECF','SERIE','') = '') or (Mais2Ini.ReadString('ECF','GT','') = '')then // Sandro Silva 2019-09-11 ER 02.06 UnoChapeco
              begin

                //REQUISITO XXIV
                //8. Caso não haja coincidência nas comparações descritas nos itens 4 ou 5 deste requisito e havendo
                //perda, por motivo acidental, de dados gravados no arquivo auxiliar criptografado:
                //a) comparar os números do CRZ e do CRO e o valor da Venda Bruta Diária, referentes à última
                //Redução Z gravada na Memória Fiscal com os números e valor correspondentes no banco de dados
                //a que se refere o item 2 do requisito XXVI (campos 06, 08 e 12 do Registro tipo R02 constante no
                //Anexo IV) e:
                //a1) se os números e valor forem iguais, recompor os dados no arquivo auxiliar (número de série de
                //fabricação do ECF conectado e valor do Totalizador Geral atual do ECF conectado).
                //a2) se os números ou valor forem diferentes, impedir o seu próprio funcionamento, permitindo-se o
                //funcionamento para as funções descritas no item 1 do Requisito XIX.
                SelecionaDadosParaComparar;

                if (FormatFloat('0.00', IBQDadosRequisitoXXIV.FieldByName('VENDABRUTA').AsFloat) = FormatFloat('0.00', dVendaBrutaUltimaRZ)) // Venda Bruta
                  and (StrToIntDef(IBQDadosRequisitoXXIV.FieldByName('CRZ').AsString, 0) = StrToIntDef(sCRZUltimaRZ, 0)) // CRZ Contador de Redução Z
                  and (FormatFloat('0000', IBQDadosRequisitoXXIV.FieldByName('CRO').AsFloat) = FormatFloat('0000', StrToIntDef(sCROUltimaRZ, 0))) // CRO
                then
                begin
                  // Dados da base são iguais aos da última redução z da ECF. Recompõe o número de série no cripta
                  // ER 02.03 Requisito XXIV, item 8, a, a1
                  Mais2Ini.WriteString('ECF','SERIE', Form1.LbBlowfish1.EncryptString(alltrim(Form1.sNumeroDeSerieDaImpressora))); // Número série ecf
                  Mais2Ini.WriteString('ECF','CRO', SmallCripto(sCROUltimaRZ)); // CRO
                  Mais2Ini.WriteString('ECF','CRZ', SmallCripto(sCROUltimaRZ)); // CRZ
                  Mais2Ini.WriteString('ECF','GT', SmallCripto(FormatFloat('0.00', dVendaBrutaUltimaRZ)));
                end
                else
                begin
                  sMotivo := 'Requisito XXIV - PAF-ECF'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+'O número de fabricação do ECF conectado neste momento, não está autorizado para uso fiscal'+Chr(13) + Chr(10)+'neste estabelecimento.'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+
                    '   Para solicitar o arquivo auxiliar criptografado com a autorização desta impressora para este computador'+Chr(13) + Chr(10)+
                    '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 2 (8.a2)'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+''+
                    '   Serial: '+ sSerie  +Chr(13) + Chr(10)+
                    '   GT: '+   FormatFloat('0.00',(StrToFloatDef(stotalDia, 0) / 100)) + Chr(13) + Chr(10) + '' + 
                    '   CNPJ: '+ Form1.ibDataSet13.FieldByName('CGC').AsString+ Chr(13) + Chr(10)+ Chr(13) + Chr(10) +'';
                  //
                  Form1.sStatusECF := 'ECF - Não autorizado.';
                  //
                  Result := False;
                  //
                  DesabilitaHabilitaImpressoes(False);

                end;

              end
              else
              begin

                if (Mais2Ini.ReadString('ECF','SERIE','') <> '')
                  and (Mais2Ini.ReadString('ECF','SERIE','') <> SmallCripto(Form1.sNumeroDeSerieDaImpressora))
                then
                begin
                  //ShowMessage(sNumeroSerieNoCripta + #13 + SmallCripto(Form1.sNumeroDeSerieDaImpressora));

                  //REQUISITO XXIV
                  //6. Caso não haja coincidência na comparação descrita no item 4 deste requisito e não havendo perda
                  //de dados gravados no arquivo auxiliar criptografado, impedir o seu próprio funcionamento, exceto
                  //para as funções descritas no item 1 do Requisito XIX.
                  //
                  sMotivo := 'Requisito XXIV - PAF-ECF'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+'O número de fabricação do ECF conectado neste momento, não está autorizado para uso fiscal'+Chr(13) + Chr(10)+'neste estabelecimento.'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+
                    '   Para solicitar o arquivo auxiliar criptografado com a autorização desta impressora para este computador'+Chr(13) + Chr(10)+
                    '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 3 (6)'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+''+
                    '   Serial: '+ sSerie  +Chr(13) + Chr(10)+
                    '   GT: '+   FormatFloat('0.00',(StrToFloatDef(stotalDia, 0) / 100)) + Chr(13) + Chr(10) + '' + 
                    '   CNPJ: '+ Form1.ibDataSet13.FieldByName('CGC').AsString+ Chr(13) + Chr(10)+ Chr(13) + Chr(10) +'';
                  //
                  Form1.sStatusECF := 'ECF - Não autorizado.';
                  //
                  Result := False;

                  //
                  DesabilitaHabilitaImpressoes(False);
                end;

                if Result then
                begin

                  //Showmessage('Teste 01 ' + #13 + ' GT CRIPTA: ' + Form1.LbBlowfish1.DecryptString(Mais2Ini.ReadString('ECF','GT','')) + '   ' + Mais2Ini.ReadString('ECF','GT','') + #13 + 'ECF ' + FormatFloat('0.00', StrToFloatDef(stotalDia, 0) / 100) + '   ' + SmallCripto(FormatFloat('0.00', StrToFloatDef(stotalDia, 0) / 100)));

                  if (Mais2Ini.ReadString('ECF','GT','') <> '')
                    and (Mais2Ini.ReadString('ECF','GT','') <> SmallCripto(FormatFloat('0.00', StrToFloatDef(stotalDia, 0) / 100))) then
                  begin

                    //REQUISITO XXIV
                    //7. Caso não haja coincidência na comparação descrita no item 5 deste requisito e não havendo perda
                    //de dados gravados no arquivo auxiliar criptografado, impedir o seu próprio funcionamento, exceto:
                    //a) para as funções previstas no item 6 deste requisito;
                    //b) se tiver ocorrido incremento do CRO, hipótese em que deverá recompor o valor do Totalizador
                    //Geral no arquivo auxiliar criptografado a partir do valor correspondente gravado no ECF.
                    
                    SelecionaDadosParaComparar;

                    if (FormatFloat('0000', StrToIntDef(sCROUltimaRZ, 0)) > FormatFloat('0000', IBQDadosRequisitoXXIV.FieldByName('CRO').AsFloat)) then
                    begin
                      Mais2Ini.WriteString('ECF','SERIE', Form1.LbBlowfish1.EncryptString(alltrim(Form1.sNumeroDeSerieDaImpressora))); // Número série ecf
                      Mais2Ini.WriteString('ECF','CRO', SmallCripto(sCROUltimaRZ)); // CRO
                      Mais2Ini.WriteString('ECF','CRZ', SmallCripto(sCROUltimaRZ)); // CRZ
                      Mais2Ini.WriteString('ECF','GT', SmallCripto(FormatFloat('0.00', dVendaBrutaUltimaRZ)));
                    end
                    else
                    begin
                      sMotivo := 'Requisito XXIV - PAF-ECF'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+'O número de fabricação do ECF conectado neste momento, não está autorizado para uso fiscal'+Chr(13) + Chr(10)+'neste estabelecimento.'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+
                        '   Para solicitar o arquivo auxiliar criptografado com a autorização desta impressora para este computador'+Chr(13) + Chr(10)+
                        '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 4 (7)'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+''+
                        '   Serial: '+ sSerie  +Chr(13) + Chr(10)+
                        '   GT: '+   FormatFloat('0.00',(StrToFloatDef(stotalDia, 0) / 100)) + Chr(13) + Chr(10) + '' + 
                        '   CNPJ: '+ Form1.ibDataSet13.FieldByName('CGC').AsString+ Chr(13) + Chr(10)+ Chr(13) + Chr(10) +'';
                      //
                      Form1.sStatusECF := 'ECF - Não autorizado.';
                      //
                      Result := False;

                      //
                      DesabilitaHabilitaImpressoes(False);

                    end;
                  end;

                end;

              end; //if (Mais2Ini.ReadString('ECF','SERIE','') <> '' then

            end; // Se cripta existe
            //
          end; // (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59')

          Mais2Ini.Free;
          //
        except
          on E: Exception do
          begin
            //SmallMsg('Teste 1' + E.Message);
            //
            sSerie := '';
            //
            for I := 1 to 5 do
            begin
              sSerie := sSerie + Copy(Form1.sNumeroDeSerieDaImpressora + Replicate(' ', 20), (I*4)-3, 4) + ' '
            end;
            //
            sMotivo := 'Requisito XXIV - PAF-ECF' + Chr(13) + Chr(10)+ Chr(13) + Chr(10) + 'O número de fabricação do ECF conectado neste momento, não está autorizado para uso fiscal' + Chr(13) + Chr(10) + 'neste estabelecimento.' + Chr(13) + chr(10)+
            '   Para solicitar o arquivo auxiliar criptografado com a autorização desta impressora para este computador' + chr(13) + Chr(10) +
            '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 1' + chr(13) + chr(10) +
            '   Serial: ' + sSerie  + chr(13) + chr(10) +
            '   GT: ' +   FormatFloat('0.00',(StrToFloatDef(stotalDia, 0) / 100)) + chr(13) + chr(10) + '' + 
            '   CNPJ: ' + Form1.ibDataSet13.FieldByName('CGC').AsString + chr(10)+ chr(10) + '';
            //
            //
            Form1.sStatusECF := 'ECF - Não autorizado.';
            //
            Result := False;
            //
            DesabilitaHabilitaImpressoes(False);
            //
          end;
        end;

      end; // if Result then
      //
      if Result then
      begin
        try
          // ---------------------------- //
          // Le arquivo criptografado     //
          // com total das vendas do dia  //
          // ---------------------------- //
          // sTotalDia := '999999999999999999';
          sTotalDia := Right(StrZero(StrToFloatDef(sTotalDia, 0),18,0),12);
          //
          if StrToFloatDef(sTotalDia, 0) <> 0 then
          begin
            //
            Mais2ini := TIniFile.Create(Form1.sArquivo);
            Form1.sCripto := '';
            Form1.sCripto := SmallCripto(FormatFloat('0.00',(StrToFloatDef(sTotalDia, 0)/100)));

            sCRO := '000000';
            sCRO := Form1.PDV_NumeroIntervencoesTecnicas(True);
            sCRZ := Form1.PDV_NumeroDeReducoesZ(True);

            //
            if (AllTrim(Mais2Ini.ReadString('ECF','GT','0000000000')) <> AllTrim(Form1.sCripto)) and (Form1.sNumeroDeSerieDaImpressora<>'EMULADOR') then
            begin

              SelecionaDadosParaComparar;

              sCROCripta := IBQDadosRequisitoXXIV.FieldByName('CRO').AsString;

              if StrToIntDef(sCRO, 0) < StrToIntDef(FormatFloat('0000', IBQDadosRequisitoXXIV.FieldByName('CRO').AsFloat), 0) then
              begin
                //
                sMotivo := 'Requisito XXIV - PAF-ECF'+chr(10)+chr(13)+'O valor acumulado no Totalizador Geral (GT) do ECF conectado neste momento não'+Chr(10)+
                  'corresponde ao armazenado em arquivo auxiliar criptografado.'+chr(10)+'';
                //
                begin
                  //
                  if P1 then
                  begin
                    SmallMsg(pChar(sMotivo));
                  end;
                  Form1.sStatusECF := 'ECF - Não autorizado.';
                  //
                  DesabilitaHabilitaImpressoes(False);
                  Result := False;
                  //
                end;
                //
              end
              else
              begin
                // Recompondo o GT no arquivo auxiliar criptografado
                // ER 02.03 Requisito XXIV, item 7, b
                Mais2Ini.WriteString('ECF','GT', Form1.sCripto);   // sTotalDia criptado
                Mais2Ini.WriteString('ECF','CRO', SmallCripto(sCRO)); // CRO
                Mais2Ini.WriteString('ECF','CRZ', SmallCripto(sCRZ)); // CRZ
              end;
            end;
            //
            Mais2Ini.Free;
          end;
          //
        except
          //
          sMotivo    := 'Requisito XXIV - PAF-ECF'+chr(10)+chr(13)+'O valor acumulado no Totalizador Geral (GT) do ECF conectado neste momento não'+Chr(10)+'corresponde ao armazenado em arquivo auxiliar criptografado.'+chr(10)+'';
          if P1 then
          begin
            SmallMsg(pChar(sMotivo));
          end;
          Form1.sStatusECF := 'ECF - Não autorizado.';
          //
          DesabilitaHabilitaImpressoes(False);
          Result := False;
          //
        end;
      end; // if Result then // Lendo criptogradado

//Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' + TimeToStr(Time) + #13; // Sandro Silva 2018-10-19
      try

        if Form1.bBalancaAutonoma = False then // Sandro Silva 2019-01-23
        begin

          if Form1.bStatusRede then
          begin

            Form22.Label6.Caption := 'Aguarde! Consultando Recibos Bloco X'; // Sandro Silva 2018-11-22
            Form22.Label6.Repaint;

            Form1.BlocoxConsultarRecibo1;

  //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' +  TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

            Form22.Label6.Caption := 'Aguarde! Verificando pendências do Bloco X'; // Sandro Silva 2018-11-22
            Form22.Label6.Repaint;

            Form1.BlocoXAlertarPendente1('', Form1.sNumeroDeSerieDaImpressora, False);

          end;

  //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' +  TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

          if (Copy(Form1.sPerfil,1,1) <> 'T') then // Sandro Silva 2019-06-25 ER 02.06 if ((Copy(Form1.sPerfil,1,1) <> 'T') and (Copy(Form1.sPerfil,1,1) <> 'U')) then
          begin

            ///ShowMessage('Teste 01 7313'); // Sandro Silva 2017-11-10 Polimig

            if (Form1.bBlocoxRZPendente or Form1.bBlocoxEstoquePendente)
              and (Form1.BlocoXServidorConfigurado1) then
            begin
              Form1.sStatusECF := 'ECF - Não autorizado. Requisitos Bloco X - PAF-ECF';
              Result := False;
              DesabilitaHabilitaImpressoes(False); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco
              SmallMsg('REQUISITO BLOCO X - PAF-ECF ' + Chr(10) + Chr(13) + 'O funcionamento deste ECF está impedido, exceto para executar transmissões pendentes, disponibilizando as funções previstas no REQUISITO XIX.');
            end;

          end
          else
          begin // T e U bloqueia apenas por estoque
            if (Form1.bBlocoxEstoquePendente)
              and (Form1.BlocoXServidorConfigurado1) then
            begin
              Form1.sStatusECF := 'ECF - Não autorizado. Requisitos Bloco X - PAF-ECF';
              Result := False;
              DesabilitaHabilitaImpressoes(False); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco
              SmallMsg('REQUISITO BLOCO X - PAF-ECF ' + Chr(10) + Chr(13) + 'O funcionamento deste ECF está impedido, exceto para executar transmissões pendentes, disponibilizando as funções previstas no REQUISITO XIX.');
            end;
          end;

        end;
      except
      end;
      ChDir(Form1.sAtual); // Sandro Silva 2017-03-31

      //
      if not Result then
      begin
        //
        if P1 then
        begin
          SmallMsg(pChar(sMotivo+chr(10)+
                    'O funcionamento deste ECF está impedido exceto para: '+chr(10)+Chr(10)+
                    '  Consulta de preços'+Chr(10)+
                    '  Emissão de documentos fiscais PED (Entre no Small Commerce - Retaguarda)'));
        end;
        //
        Form1.bStatusFiscal := False;
        //
      end else
      begin
        Form1.bStatusFiscal := True; // Liga o botão fiscal
      end;

      try
        Form1.sModeloFabricante := Form1.PDV_ModeloImpressora(True); // Sandro Silva 2018-05-07
        //ShowMessage('Teste 1 ' + Form1.sModeloFabricante);
      except

      end;

    end;
    //
    // Tolerancia de 15 minutos para  + ou -
    //

    //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

    if Form1.bStatusRede = False then
    begin
      Form1.AtualizaECFOffLine;
    end;

    //
    //
    // Alerta MD5
    //
    //
//    (* Habilitar no final da homologação
    if (Form1.sModeloEcf <> '59') and (Form1.sModeloEcf <> '65') and (Form1.sModeloEcf <> '99') then
    begin
      if (SmallCripto(Form1.ibDataSet13.FieldByName('CGC').AsString+Form1.sMD5DaLista) <> LerParametroIni(Form1.sArquivo, 'MD5', 'HOMOLOGADO', 'XXXX'))
        and (FileExists('frente.dpr') = False) // Para poder debugar durante execução. Não usar CNPJ da Smallsoft no emitente porque não consegue testar as validações na homologação
        then
      begin

        sAlertaMD5 := 'MD-5 da Relação dos Arquivos Executáveis difere do homologado'+chr(10)+ Chr(10);

        if Trim(Form1.sNumeroDeSerieDaImpressora) = '' then
        begin
          sAlertaMD5 := sAlertaMD5 + 'ECF - Não conectado/Desligado'+ Chr(13) + Chr(10)+ Chr(13) + Chr(10) +''
        end
        else
        begin

          if LerParametroIni(Form1.sArquivo, 'MD5', 'HOMOLOGADO', 'XXXX') = 'XXXX' then
            sAlertaMD5 := sAlertaMD5 +
              ' Solicite o arquivo auxiliar criptografado compatível' + chr(13) + Chr(10) +
              '   Para solicitar o arquivo auxiliar criptografado compatível' + chr(13) + Chr(10) +
              '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 41'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+''
          else
            sAlertaMD5 := sAlertaMD5 +
                    '   Instale novamente o Small. Erro: MD-5'+ Chr(13) + Chr(13) + Form1.sMD5DaLista + Chr(13) + Chr(10)+Chr(13) + Chr(10)+''+//+
                    ' Solicite o arquivo auxiliar criptografado compatível' + chr(13) + Chr(10) +
                    '   Para solicitar o arquivo auxiliar criptografado compatível' + chr(13) + Chr(10) +
                    '   entre na nossa página na internet www.smallsoft.com.br, entre na opção "Autorização de uso de ECF". Erro: 41'+Chr(13) + Chr(10)+Chr(13) + Chr(10)+'';

          sAlertaMD5 := sAlertaMD5 +
              '   Serial: '+ sSerie  +Chr(13) + Chr(10)+
              '   GT: '+   FormatFloat('0.00',(StrToFloatDef(stotalDia, 0) / 100)) +Chr(13) + Chr(10)+''+
              '   CNPJ: '+ Form1.ibDataSet13.FieldByName('CGC').AsString+ Chr(13) + Chr(10)+ Chr(13) + Chr(10) +'';

        end;

        SmallMsg(PChar(sAlertaMD5));

        Form1.bStatusFiscal := False;

        Form1.sStatusECF := 'ECF - Não autorizado.';

        Result := False;

      end;

    end;
//    *)

    // Bloqueio de serial com validade expirada
    if DiasParaExpirar(Form1.IBDatabase1) < 0 then // Permite usar até o dia que expira Sandro Silva 2019-11-19  if DiasParaExpirar(Form1.IBDatabase1) <= 0 then
    begin
      if SmallMsgBox(PChar('Não foi possível liberar o sistema para uso neste computador'+chr(10)+
                           'com o número de série '+ StrTran(Form22.sSerie, 'Número de série: ', '') +', para: '+chr(10)+chr(10)+
                            AllTrim(Form1.ibDataSet13.FieldByName('NOME').AsString)+chr(10)+chr(10)+
                            AllTrim(Form1.ibDataSet13.FieldByName('CGC').AsString)+chr(10)+chr(10)+
                           'Código: 2020 '+chr(10)+chr(10)+
                           'Adquirir uma licença de uso atualizada?'),
                           'Atenção', MB_ICONQUESTION + MB_YESNO + MB_DEFBUTTON1) = idYes then
        ShellExecute(Application.Handle, nil, PChar('http://www.smallsoft.com.br/loja/atualiza-via-small?serial=' + StrTran(Form22.sSerie, 'Número de série: ', '') + '&cnpj=' + LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)), nil, nil, SW_SHOWMAXIMIZED);


        Form1.bStatusFiscal := False;
        Result := False;

      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      begin
        Form1.sStatusECF := 'ECF - Não autorizado.';
      end
      else
      begin

        Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
          Form1.ClienteSmallMobile.sLogRetornoMobile);
        Form1.DestroyWindowHandle;
        FecharAplicacao(ExtractFileName(Application.ExeName));
        FecharAplicacao(ExtractFileName(Application.ExeName));
        //FecharAplicacao(ExtractFileName(Application.ExeName));
      end;

    end;

    if (Legal_ok(Form1.IBDatabase1) = False) // Com bloqueio com paratudo pela Small/Revenda   Ficha 4918
    then
    begin
      Form1.bStatusFiscal := False;
      Result := False;

      SmallMsgBox(PChar('Sistema bloqueado' + ifthen((Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99'),' para movimentações', '')+chr(10)+chr(10)+
                        'Abra o Small, confirme os dados no cadastro do Emitente' + Chr(10) +
                        'e entre em um dos módulos do Small'),
                        'Atenção', MB_ICONWARNING + MB_OK);

      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      begin
        Form1.sStatusECF := 'ECF - Não autorizado.';
      end
      else
      begin
        Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
          Form1.ClienteSmallMobile.sLogRetornoMobile);
        Form1.DestroyWindowHandle;
        FecharAplicacao(ExtractFileName(Application.ExeName));
        FecharAplicacao(ExtractFileName(Application.ExeName));
      end;

    end;


    if SerialMEI(Form1.sSerialSmall) and (MEI) then // Sandro Silva 2021-12-29 if SerialMEI(Form1.sSerialSmall) then
    begin
      // Sandro Silva 2022-02-14 bMEIValido := True;// Parte do princípio que o MEI é válido. Torna-se False durante as validações
      try
        {Sandro Silva 2021-12-03 inicio
        //if LerParametroIni(ExtractFilePath(Application.ExeName) + 'smallcom.inf', 'Licenca', 'MEI', '') = '' then
        if Length(Form1.sChaveMeiCifrada) > 3 then // Executar se o valor da chave mei cifrada é maior que 3 caracteres
        begin
          sDataChaveMei := RightStr(Form1.LbBlowfish1.DecryptString(Form1.sChaveMeiCifrada), 8);
          sDataChaveMei := Copy(sDataChaveMei, 1, 2) + '/' + Copy(sDataChaveMei, 3, 2) + '/' + Copy(sDataChaveMei, 5, 4);
          sCNPJChaveMei := Copy(Form1.LbBlowfish1.DecryptString(Form1.sChaveMeiCifrada), 1, 14);

          if sCNPJChaveMei <> LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) then
          begin

            bMEIValido := False; // Sandro Silva 2021-04-30 Result := False;

          end;
          if DaysBetween(Date, StrToDateDef(sDataChaveMei, StrToDate('30/12/1899'))) > 30 then // Sandro Silva 2021-08-11 if DaysBetween(Date, StrToDateDef(sDataChaveMei, StrToDate('30/12/1899'))) >= 30 then
          begin

            bMEIValido := False; // Sandro Silva 2021-04-30 Result := False;

          end;
        end
        else
        begin
          // A partir de 29/12/2021 o controle de MEI mudou, não fica mais no wind0ws.l0g com uma data cifrada, passa para smallcom.inf com valor SIM ou NAO
          bMEIValido := (LerParametroIni(ExtractFilePath(Application.ExeName) + 'smallcom.inf', 'Licenca', 'MEI', '') = 'SIM');
        end;
        }
        // smallcom.inf controla se é MEI
        bMEIValido := (LerParametroIni(ExtractFilePath(Application.ExeName) + 'smallcom.inf', 'Licenca', 'MEI', '') = 'SIM');

      except
        on E: Exception do
        begin

          bMEIValido := False; // Sandro Silva 2021-04-30 Result := False;

        end;
      end;

      if bMEIValido = False then // Sandro Silva 2021-04-30   if Result = False then
      begin
        Result := False;

        // ShowMessage('teste 01 6238 data chave mei ' + sdatachavemei + #13 + 'cnpj chave mei ' + sCNPJChaveMei + #13 + ' banco ' + Form1.IBDatabase1.DatabaseName); // Sandro Silva 2021-04-27

        {Sandro Silva 2021-12-29 inicio
        if Trim(Form1.sChaveMeiCifrada) <> '' then
        begin
          if DaysBetween(Date, StrToDateDef(sDataChaveMei, StrToDate('30/12/1899'))) > 30 then
          begin
            SmallMsgBox(PAnsiChar('Sistema bloqueado'+Chr(10)+
                                  'É necessário validar seu cadastro MEI'+Chr(10)+
                                  '- Abra o Small'+Chr(10)+
                                  '- Acesse o menu Config/Outros cadastros/Cadastro do Emitente'+Chr(10)+
                                  '- Confirme os dados clicando em OK'+Chr(10)+
                                  '- Feche este aplicativo e abra-o novamente '+Chr(10)+Chr(13)+
                              'Código: 991 '+ Form1.sSerialSmall),
                              'Atenção', MB_ICONWARNING + MB_OK);
          end
          else
          begin
            SmallMsgBox(PAnsiChar('Este sistema não foi totalmente instalado nesta pasta ou'+Chr(10)+
                              'não está liberado para uso neste computador, instale'+Chr(10)+
                              'novamente o sistema informando o número serial da'+Chr(10)+
                              'sua licença de uso.'+Chr(10)+Chr(13)+
                              'Código: 0011 '+ Form1.sSerialSmall),
                              'Atenção', MB_ICONWARNING + MB_OK);
          end;
        end
        else
        begin
          SmallMsgBox(PAnsiChar('Este sistema não foi totalmente instalado nesta pasta ou'+Chr(10)+
                            'não está liberado para uso neste computador, instale'+Chr(10)+
                            'novamente o sistema informando o número serial da'+Chr(10)+
                            'sua licença de uso.'+Chr(10)+Chr(13)+
                            'Código: 001 '+ Form1.sSerialSmall),
                            'Atenção', MB_ICONWARNING + MB_OK);
        end;
        }

        SmallMsgBox(PAnsiChar('Sistema bloqueado'+Chr(10)+
                              'Este sistema só pode ser usado por empresa'+Chr(10)+
                              'enquadrada como Microempreendedor Individual (MEI)'+Chr(10)+Chr(13)+
                              'Código: 991 '+ Form1.sSerialSmall),
                              'Atenção', MB_ICONWARNING + MB_OK);
        {Sandro Silva 2021-12-29 fim}

        FecharAplicacao(ExtractFileName(Application.ExeName));
        FecharAplicacao(ExtractFileName(Application.ExeName));
        FecharAplicacao(ExtractFileName(Application.ExeName));

      end;

    end;

    if ValidaQtdDocumentoFiscal(Form1.ibDataSet27.Transaction, ValidaRecursos) = False then
    begin
      Form1.bStatusFiscal := False;
      Result := False;

      SmallMsgBox(PChar('Você já emitiu o número limite de documentos fiscais'+chr(10)+
                    'permitidos para esta versão do sistema'+chr(10)+
                    'com o número de série '+ StrTran(Form22.sSerie, 'Número de série: ', '') +', para: '+chr(10)+chr(10)+
                     AllTrim(Form1.ibDataSet13.FieldByName('NOME').AsString)+chr(10)+chr(10)+
                     AllTrim(Form1.ibDataSet13.FieldByName('CGC').AsString)+chr(10)+chr(10)+
                     'Código: 100 '+chr(10)+chr(10) +
                     'Para ter acesso à esse recurso, procure seu revendedor ou' + Chr(10) +
                     'entre em contato com a Zucchetti pelo telefone 0800 645 2008'
                     ),
                     'Atenção', MB_ICONWARNING + MB_OK);

    end;

    if Result then
    begin
      //
      //
      Form1.sStatusECF := 'CAIXA LIVRE';

      Form1.sStatusECF_RES := Form1.sStatusECF;

      // Se chegou aqui é porque o ECF está autorizado para uso com frente.exe
      Form1.GravaECF(Form1.sNumeroDeSerieDaImpressora);

      if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') or ((Form1.sModeloECF = '65')
        and (PAFNFCe = False)) // Sandro Silva 2020-07-01 and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE')) // Sandro Silva 2016-02-29
      then
      begin
        if LerParametroIni('FRENTE.INI','NFCE','MOBILE','Não') = 'Sim' then
        begin
          AbrirMonitorMobile;
          Form1.ImportarvendasdoSmallMobile1.Checked := True;
          Form1.Timer2.Enabled := True;
        end else
        begin
          Form1.ImportarvendasdoSmallMobile1.Checked := False;
          Form1.Timer2.Enabled := False;
        end;
      end;

      Form1.sF4Conferencia := ''; // Sandro Silva 2016-08-04 Precisa? Botões já tem texto  '; F4 - Conferência de '+Form1.sMesaOuConta;
      //
      try
        if  Abs(((StrToInt(Copy(TimeToStr(Time),1,2))*60*60) // Hora
              +(StrToInt(Copy(TimeToStr(Time),4,2))*60)    // Minuto
              +(StrToInt(Copy(TimeToStr(Time),7,2))))      // Segundo
           -(
              (StrToInt(Copy(Form1.sHoraDoCupom,11,2)))        // Segundo
            + (StrToInt(Copy(Form1.sHoraDoCupom,9,2))*60)      // Minuto * 60
            + (StrToInt(Copy(Form1.sHoraDoCupom,7,2))*60*60))) // Hora   * 60 * 60
             >= 900                                // Maior que 15 * 60 = 900
        then
        begin
          if P1 then
          begin
            SmallMsg('A hora do seu computador está diferente da impressora'+ Chr(10) +
                     'fiscal.'+Chr(10) +
                     Chr(10) +
                     'Computador: '+ TimeToStr(Time) + Chr(10) +
                     'Impressora fiscal: '+ Copy(Form1.sHoraDoCupom,7,2)+':'+Copy(Form1.sHoraDoCupom,9,2)
                     +':'+Copy(Form1.sHoraDoCupom,11,2)+Chr(10)+Chr(13)+
                     'Acerte a hora do sistema ou contate um técnico habilitado.');
          end;
          Result := False;
        end;
      except
        SmallMsg('Entre em configurações regionais e configure a hora no formato 00:00:00');
        Result := False;
      end;
      //
      try
        if Copy(Form1.sHoraDoCupom,1,2)+'/'+Copy(Form1.sHoraDoCupom,3,2)+'/20'+Copy(Form1.sHoraDoCupom,5,2) <> DateToStr(Date) then
        begin
          SmallMsg('A data do seu computador está diferente da impressora'+ Chr(10) +
                   'fiscal.'+Chr(10) +
                   Chr(10) +
                   'Computador: '+ DAteToStr(DAte) + Chr(10) +
                   'Impressora fiscal: '+Copy(Form1.sHoraDoCupom,1,2)+'/'+Copy(Form1.sHoraDoCupom,3,2)+'/20'+Copy(Form1.sHoraDoCupom,5,2)
                   +Chr(10)+Chr(13)+
                   'Acerte a data do sistema ou contate um técnico habilitado.');
          Result := False;
        end;
      except
        SmallMsg('Entre em configurações regionais e configure a data no formato dd/mm/aaaa');
        Result := False;
      end;
    end;
    //
    Form22.Label6.Caption := Copyright;
    //
    StatusRede(True, 10);
    StatusECF(True, 10);
    StatusFiscal(True, 10);
    //
    Form1.Teclas_touch(True);
    //
  end else
  begin
    //
    // Mesa ou cupom
    //
//Não mosatar 'Mesa'

    Form1.sHoraDoCupom := _ecf01_Dataehoradaimpressora(True);
    Form1.sStatusECF   := Form1.sMesaouConta + ' '+StrZero(Form1.iMesaAberta,2,0);
    Result := True;
  end;
  //
//Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + TimeToStr(Time) + #13; // Sandro Silva 2018-10-19
  //SmallMsg('Teste 01 5417');

  if IBQDadosRequisitoXXIV <> nil then
    FreeAndNil(IBQDadosRequisitoXXIV);
  if IBTDadosRequisitoXXIV <> nil then
    FreeAndNil(IBTDadosRequisitoXXIV);

  // Ativa POS ElginPay
  Form1.PosElginPay.Ativa(Form1.ibDataSet13.FieldByName('CGC').AsString, AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString), Form1.sModeloECF_Reserva{, Form1.sTef = 'Sim'}); // Sandro Silva 2022-02-11
  Screen.Cursor := CursorOld; // Sandro Silva 2018-10-15
end;
//******************** FIM TESTATUDO()*****************************

function AgendaCommit(P1:Boolean): Boolean;
begin
  try
    Form1.ibDataSet99.Close;
    Form1.ibDataSet99.SelectSql.Clear;
    Form1.ibDataset99.SelectSql.Add('select gen_id(G_MUTADO,1) from rdb$database');
    Form1.ibDataset99.Open;
  except end;
  Result := True;
end;

function DestroiMesas(pP1: Boolean) : Boolean;
var
  I, J : Integer;
begin
  try
    //
    Form1.touch_baixo.Visible := False;
    Form1.touch_cima.Visible  := False;
    //
    J := Form1.ComponentCount-1;
    //
    for I := J DownTo 40 do
    begin
      if (Copy(Form1.Components[I].Name,1,11) = 'Label_Mesa_') or
         (Copy(Form1.Components[I].Name,1,11) = 'Image_Mesa_') then
      begin
        Form1.Components[I].Destroy;
      end;
    end;
    //
  except end;
  //
  Result := True;
  //
end;

function Mesas(pP1: Integer) : Boolean;
var
  I, IX, IY : Integer;
begin
  //
  if (Copy(Form1.sConcomitante,1,12) <> 'CONCOMITANTE') and (Form1.bBalancaAutonoma = False) then 
  begin
    //
    //
    if StrToInt(Form1.sMesas) > 0 then
    begin
      //
      DestroiMesas(True);
      //
      if not Form1.Memo1.Visible then
      begin
        //
        Form1.touch_baixo.Visible := True;
        Form1.touch_cima.Visible  := True;
        //
        StatusRede(True, 10);
        StatusECF(True, 10);
        StatusFiscal(True, 10);
        //
        // Form1.Image1.Repaint;
        //
        if pP1 > 0 then
        begin
          //
          IX := 0;
          IY := 0;
          //
          for I := 1+((Form1.iPagina*16)-16) to 16+((Form1.iPagina*16)-16) do
          begin
            //
            if I < pP1+1 then
            begin
              //
              Form1.MontaMesa((180 * IX )+14,((120*IY)-120)+157+100,I);
              //
              IX := IX + 1;
              //
              if IX > 3 then
              begin
                IX := 0;
                IY := IY + 1;
              end;
            end;
            //
          end;
        end;
      end;
      //
    end else
    begin
      Form1.touch_cima.Visible  := False;
      Form1.touch_baixo.Visible := False;
    end;
  end;
  //
  Result := True;
  //
end;

function tForm1.MontaMesa(pX: Integer; pY: Integer; pI: Integer): Boolean;
var
  Label_Mesa_: TLabel;
  Image_Mesa_: TImage;
  sLabel, sHint : String;
  sImagemEscolhida : String;
  IBQMONTAMESA: TIBQuery;
  IBQMONTAMESADATA: TIBQuery;
  IBQMONTAMESACANCELADOS: TIBQuery;
  IBQMONTAMESAOS: TIBQuery;
  sSequencialContaClienteOS: String; // Sandro Silva 2017-12-15
begin
  //
  IBQMONTAMESA           := CriaIBQuery(Form1.IBQuery1.Transaction);
  IBQMONTAMESADATA       := CriaIBQuery(Form1.IBQuery1.Transaction);
  IBQMONTAMESACANCELADOS := CriaIBQuery(Form1.IBQuery1.Transaction);
  IBQMONTAMESAOS         := CriaIBQuery(Form1.IBQuery1.Transaction);
  try
    //
    IBQMONTAMESA.Close;
    IBQMONTAMESA.SQL.Clear;
    IBQMONTAMESA.SQL.Add('select sum(TOTAL), PEDIDO, TIPODAV from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and (PEDIDO='+QuotedStr(FormataNumeroDoCupom(pI))+') group by PEDIDO, TIPODAV'); // Sandro Silva 2021-12-01 IBQMONTAMESA.SQL.Add('select sum(TOTAL), PEDIDO, TIPODAV from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and (PEDIDO='+QuotedStr(StrZero(pI,6,0))+') group by PEDIDO, TIPODAV');
    IBQMONTAMESA.Open;
    //
    sImagemEscolhida := '';
    //
    if IBQMONTAMESA.FieldByName('SUM').AsFloat <> 0 then
    begin
      //
      IBQMONTAMESADATA.Close;
      IBQMONTAMESADATA.SQL.Clear;
      IBQMONTAMESADATA.SQL.Add('select HORA, DATA from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(pI))+' order by ITEM'); // Sandro Silva 2021-12-01 IBQMONTAMESADATA.SQL.Add('select HORA, DATA from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(pI,6,0))+' order by ITEM');
      IBQMONTAMESADATA.Open;
      IBQMONTAMESADATA.Last;
      //
      IBQMONTAMESACANCELADOS.Close;
      IBQMONTAMESACANCELADOS.SQL.Clear;
      IBQMONTAMESACANCELADOS.SQL.Add('select sum(TOTAL)as CANCELADOS from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(pI))+'and (coalesce(VENDEDOR,''XX'')=''<cancelado>'') group by PEDIDO'); // Sandro Silva 2021-12-01 IBQMONTAMESACANCELADOS.SQL.Add('select sum(TOTAL)as CANCELADOS from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(pI,6,0))+'and (coalesce(VENDEDOR,''XX'')=''<cancelado>'') group by PEDIDO');
      IBQMONTAMESACANCELADOS.Open;
      //
      try
        Form1.sHoraMovimento := IBQMONTAMESADATA.FieldByName('HORA').AsString;
        Form1.sDataMovimento := IBQMONTAMESADATA.FieldByName('DATA').AsString;
      except end;
      //
      if Form1.sConcomitante = 'OS'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) then
      begin
        //
        IBQMONTAMESAOS.Close;
        IBQMONTAMESAOS.SQL.Clear;
        IBQMONTAMESAOS.SQL.Add('select max(SEQUENCIALCONTACLIENTEOS) as SEQUENCIALCONTACLIENTEOS from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(pI))+' '); // Sandro Silva 2021-12-01 IBQMONTAMESAOS.SQL.Add('select max(SEQUENCIALCONTACLIENTEOS) as SEQUENCIALCONTACLIENTEOS from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(pI,6,0))+' ');
        IBQMONTAMESAOS.Open;

        sSequencialContaClienteOS := IBQMONTAMESAOS.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString;

        IBQMONTAMESAOS.Close;
        IBQMONTAMESAOS.SQL.Clear;
        IBQMONTAMESAOS.SQL.Add('select * from CONTAOS where CONTA='+QuotedStr(FormataNumeroDoCupom(pI))+' '); // Sandro Silva 2021-12-01 IBQMONTAMESAOS.SQL.Add('select * from CONTAOS where CONTA='+QuotedStr(StrZero(pI,6,0))+' ');
        IBQMONTAMESAOS.Open;
        //
        sLabel := '   '+StrZero(pI,3,0)//+ '  R$ ' + Alltrim(Format('%10.2n',[IBQMONTAMESA.FieldByName('SUM').AsFloat-IBQMONTAMESACANCELADOS.FieldByName('CANCELADOS').AsFloat]))  // Sandro Silva 2019-09-04 ER 02.06 UnoChapeco
         +chr(10)+'   '+sSequencialContaClienteOS
         +chr(10)+'   '+Copy(IBQMONTAMESAOS.FieldByName('IDENTIFICADOR1').AsString, 1, 15)
         +chr(10)+'   '+Copy(IBQMONTAMESAOS.FieldByName('IDENTIFICADOR2').AsString, 1, 15)
         +chr(10)+'   '+Copy(IBQMONTAMESAOS.FieldByName('IDENTIFICADOR3').AsString, 1, 15); 
        //
        IBQMONTAMESAOS.Close;
        //
      end else
      begin
        sLabel := {chr(10)+}'   '+StrZero(pI,3,0);
      end;
      //
      {Sandro Silva 2022-12-07 Início Unochapeco
        sHint := sMesaOuConta+' aberta R$ '+Alltrim(Format('%10.2n',[IBQMONTAMESA.FieldByName('SUM').AsFloat-IBQMONTAMESACANCELADOS.FieldByName('CANCELADOS').AsFloat]));
      }
      if (Consumo) then
        sHint := sMesaOuConta//+' aberta R$ '+Alltrim(Format('%10.2n',[IBQMONTAMESA.FieldByName('SUM').AsFloat-IBQMONTAMESACANCELADOS.FieldByName('CANCELADOS').AsFloat]))
      else
        sHint := sMesaOuConta+' aberta R$ '+Alltrim(Format('%10.2n',[IBQMONTAMESA.FieldByName('SUM').AsFloat-IBQMONTAMESACANCELADOS.FieldByName('CANCELADOS').AsFloat]));
      {Sandro Silva 2022-12-07 Final Unochapeco}
      //
      if Form1.sHoraMovimento = '' then Form1.sHoraMovimento := TimeToStr(Time);
      //
      if (Abs(((StrToInt(Copy(TimeToStr(Time),1,2))*60*60)  // Hora
             +(StrToInt(Copy(TimeToStr(Time),4,2))*60)      // Minuto
             +(StrToInt(Copy(TimeToStr(Time),7,2))))        // Segundo
         -(
            (StrToInt(Copy(Form1.sHoraMovimento,1,2))*60*60) // Hora
          + (StrToInt(Copy(Form1.sHoraMovimento,4,2))*60)    // Minuto
          + (StrToInt(Copy(Form1.sHoraMovimento,7,2)))))     // Segundo
           > (Form1.iMinutosSoneca * 60))                    // Maior que 30 * 60  = 1800
           or (StrToDate(Form1.sDataMovimento) <> Date)
      then
      begin
        sHint := sHint + ', ' + 'não consumindo a ' + TempoDecorridoPorExtenso(Date, StrtoDate(Form1.sDataMovimento), Time, StrToTime(Form1.sHoraMovimento));
      end;
      //
    end else
    begin
      //
      sHint  := sMesaOuConta+' fechada';
      sLabel := {chr(10)+}'   '+StrZero(pI,3,0);
      //
    end;
    //
    if Copy(Form1.sConcomitante,1,4) = 'MESA' then
    begin
      sLabel := {chr(10)+}'   '+StrZero(pI,3,0);
    end;
    //
    IBQMONTAMESA.Active           := False;
    IBQMONTAMESADATA.Active       := False;
    IBQMONTAMESACANCELADOS.Active := False;
    IBQMONTAMESAOS.Active         := False;
    //
  except
    on E: Exception do
    begin
      SmallMsg(E.Message); /// Na NFC-e/SAT Tratar ocorrência Unable to complete network request to host
      if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
      begin
        if AnsiContainsText(E.Message, 'Unable to complete network request to host') then
        begin
          SmallMsgBox(PAnsiChar('Comunicação com banco de dados perdida' + #13 + 'A aplicação será fechada' + #13 + 'Tente abrir novamente'), 'Atenção', MB_OK + MB_ICONWARNING);
          FecharAplicacao(ExtractFileName(Application.ExeName));
        end;
      end;
    end;
  end;

  FreeAndNil(IBQMONTAMESA);
  FreeAndNil(IBQMONTAMESADATA);
  FreeAndNil(IBQMONTAMESACANCELADOS);
  FreeAndNil(IBQMONTAMESAOS);

  //
  Image_Mesa_ := TImage.Create(Self); // Sandro Silva 2016-08-11
  try
    //
    //Image_Mesa_ := TImage.Create(Self);
    //
    Image_Mesa_.Parent      := Form1.Panel1;
    Image_Mesa_.Name        := 'Image_Mesa__'+StrZero(Pi,2,0);
    //
    // Imagem mostra o Status da mesa
    //
    if Pos('fechada',sHint) <> 0 then
    begin
      Image_Mesa_.Picture     := Form1.Mesa.Picture;
    end else
    begin
      if Pos('não',sHint) <> 0 then
      begin
        //
        // Pode escolher a imagem da mesa
        //
        if (sImagemEscolhida <> '') and (Copy(Form1.sConcomitante,1,4) = 'MESA') then
        begin
          if FileExists(Form1.sAtualOnLine+'\mesas\mesa_s_'+sImagemEscolhida+'.bmp') then
          begin
            Image_Mesa_.Picture.LoadFromFile(Form1.sAtualOnLine+'\mesas\mesa_s_'+sImagemEscolhida+'.bmp')
          end else
          begin
            Image_Mesa_.Picture := Form1.sono.Picture;
          end;
        end else
        begin
          Image_Mesa_.Picture := Form1.sono.Picture;
        end;
      end else
      begin
        //
        // Pode escolher a imagem da mesa
        //
        if (sImagemEscolhida <> '') and (Copy(Form1.sConcomitante,1,4) = 'MESA') then
        begin
          if FileExists(Form1.sAtualOnLine+'\mesas\mesa_v_'+sImagemEscolhida+'.bmp') then
          begin
            Image_Mesa_.Picture.LoadFromFile(Form1.sAtualOnLine+'\mesas\mesa_v_'+sImagemEscolhida+'.bmp')
          end else
          begin
            Image_Mesa_.Picture := Form1.vinho.Picture;
          end;
        end else
        begin
          Image_Mesa_.Picture := Form1.vinho.Picture;
        end;
      end;
    end;
    //
    Image_Mesa_.Top         := AjustaAltura(pY);
    Image_Mesa_.Left        := AjustaLargura(pX);
    Image_Mesa_.Visible     := True;
    Image_Mesa_.AutoSize    := True;
    Image_Mesa_.Hint        := sHint; // +' '+IntToStr(pY)+' '+IntToStr(pX);
    Image_Mesa_.ShowHint    := True;
    Image_Mesa_.Cursor      := crHandPoint;
    //
    // Eventos
    //
    Image_Mesa_.PopupMenu   := PopupMenu7; // Sandro Silva 2018-12-03
    Image_Mesa_.OnDblClick  := EscolheAMesa;
    Image_Mesa_.OnDragDrop  := MesaDragDrop;
    Image_Mesa_.OnDragOver  := MesaDragOver;
    Image_Mesa_.OnEndDrag   := MesaEndDrag;
    Image_Mesa_.OnMouseDown := MesaMouseDown;
    Image_Mesa_.OnMouseUp   := MesaMouseUp;
    //
    Image_Mesa_.AutoSize := False;
    Image_Mesa_.Stretch  := True;
    //
    Image_Mesa_.Width  := Form1.mesa.Width;
    Image_Mesa_.Height := Form1.mesa.Height;
    //
    Image_Mesa_.BringToFront; // 2015-07-17
  except end;
  //
  try
    //
    Label_Mesa_ := TLabel.Create(Self);
    //
    Label_Mesa_.Parent      := Form1.Panel1;
    Label_Mesa_.Name        := 'Label_Mesa__'+StrZero(Pi,2,0);
    Label_Mesa_.Transparent := True;
    //Label_Mesa_.Color       := clYellow;
    Label_Mesa_.Visible     := True;
    Label_Mesa_.Font.Color  := clBlack;
    Label_Mesa_.Font.Name   := Form1.Label10.Font.Name;
    // Todos os tipos iguais a mesa
    if Copy(Form1.sConcomitante,1,4) = 'MESA' then
    begin
      Label_Mesa_.Font.Size   := Form1.Label10.Font.Size + AjustaAltura(1); //Sandro Silva 2017-10-23  2;
      Label_Mesa_.Top         := Image_Mesa_.Top + AjustaAltura(7); //AjustaAltura(pY - 15);
      Label_Mesa_.Left        := Image_Mesa_.Left - AjustaLargura(1);
    end
    else
    begin
      Label_Mesa_.Font.Size   := Form1.Label10.Font.Size + AjustaAltura(1); //Sandro Silva 2017-10-23 3;
      Label_Mesa_.Top         := Image_Mesa_.Top + AjustaAltura(5); //AjustaAltura(pY - 15);
      Label_Mesa_.Left        := Image_Mesa_.Left; //AjustaLargura(pX - 3);
    end;

    Label_Mesa_.Layout      := tlCenter;
    //
    Label_Mesa_.Font.Style  := [fsBold];
    Label_Mesa_.Caption     := sLabel;
    Label_Mesa_.AutoSize    := True;
    Label_Mesa_.Hint        := sHint;
    Label_Mesa_.ShowHint    := True;
    Label_Mesa_.Cursor      := crHandPoint;
    Label_Mesa_.PopupMenu   := PopupMenu7; // Sandro Silva 2018-12-03
    //
    Label_Mesa_.OnDblClick  := EscolheAMesa;
    Label_Mesa_.OnDragDrop  := MesaDragDrop;
    Label_Mesa_.OnDragOver  := MesaDragOver;
    Label_Mesa_.OnEndDrag   := MesaEndDrag;
    Label_Mesa_.OnMouseDown := MesaMouseDown;
    //
    if Copy(Form1.sConcomitante,1,4) = 'MESA' then
      Label_Mesa_.OnMouseUp := MesaMouseUp;
    //
  except
  end;
  //
  Result := True;
  //
end;

procedure LogFrente(sTexto: String);
var
  sl: TStringList;
  sNomeLog: String;
  sDirAtual: String;
begin
  /////////

//  if LerParametroIni('FRENTE.INI', 'Frente de Caixa', 'Log PAF', 'Não') = 'Não' then
   Exit; // Comentar essa linha para Ativar apenas quando precisar debugar algum teste. Descomentar a linha para Desativar depois de testar

  GetDir(0, sDirAtual);
  ////////

  sl := TStringList.Create;
  try
    sNomeLog := '\log\LogFrente_' + FormatDateTime('yyyy-mm-dd', Date) + '.txt';
    if FileExists(ExtractFileDir(Application.ExeName) + sNomeLog) then
      sl.LoadFromFile(ExtractFileDir(Application.ExeName) + sNomeLog);
    sl.Add(FormatDateTime('dd/mm/yyyy HH:nn:ss.zzzz', Now) + ' - ' + sTexto);
    sl.SaveToFile(ExtractFileDir(Application.ExeName) + sNomeLog);
  except
  end;
  FreeAndNil(sl);
  ChDir(sDirAtual); // Para voltar
end;

function StatusFiscal(pP1: Boolean; pP2: Integer): Boolean;
begin
  //
  if not Form1.bStatusFISCAL then
  begin
    //
    Form1.Frame_teclado1.Led_FISCAL.Picture := Form1.Frame_teclado1.Image_led_Vermelho.Picture;
    Form1.Frame_teclado1.Led_FISCAL.Hint    := 'ECF não autorizado para uso';
    //
    if (Form1.sModeloECF = '65') then
      Form1.Frame_teclado1.Led_FISCAL.Hint    := 'Internet não disponível no momento';
    if (Form1.sModeloECF = '59') then
      Form1.Frame_teclado1.Led_FISCAL.Hint    := 'Internet não disponível no momento';
    if (Form1.sModeloECF = '99') then
      Form1.Frame_teclado1.Led_FISCAL.Hint    := 'Não disponível no momento';
    //
  end else
  begin
    //
    Form1.Frame_teclado1.Led_FISCAL.Picture := Form1.Frame_teclado1.Image_led_verde.Picture;
    Form1.Frame_teclado1.Led_FISCAL.Hint    := 'ECF autorizado para uso';
    //
    if (Form1.sModeloECF = '65') then
      Form1.Frame_teclado1.Led_FISCAL.Hint    := 'Internet disponível no momento';
    if (Form1.sModeloECF = '59') then
      Form1.Frame_teclado1.Led_FISCAL.Hint    := 'Internet disponível no momento';
    if (Form1.sModeloECF = '99') then
      Form1.Frame_teclado1.Led_FISCAL.Hint    := 'Disponível no momento';
    //
  end;
  //
  Form1.sTipoDocumento := 'do cupom fiscal';
  //
  if (Form1.sModeloECF_Reserva = '65') then
    Form1.sTipoDocumento := 'da NFC-e';
  if (Form1.sModeloECF_Reserva = '59') then
  begin
    Form1.sTipoDocumento := 'do CF-e-SAT';
    if (_ecf59_Tipodaimpressora(False) = 'MFE') then
      Form1.sTipoDocumento := 'do CF-e'; // Sandro Silva 2018-08-01
  end;
  if (Form1.sModeloECF_Reserva = '99') then
    Form1.sTipoDocumento := 'da Venda';

  //
  Form1.sTipoDocumento2 := 'Cupom';// Sandro Silva 2017-10-25  'cupom';
  //
  if (Form1.sModeloECF_Reserva = '65') then
    Form1.sTipoDocumento2 := 'NFC-e';
  if (Form1.sModeloECF_Reserva = '59') then
  begin
    Form1.sTipoDocumento2 := 'CF-e-SAT';
    if (_ecf59_Tipodaimpressora(False) = 'MFE') then
      Form1.sTipoDocumento2 := 'CF-e';//Sandro Silva 2018-08-01
  end;
  if (Form1.sModeloECF_Reserva = '99') then
    Form1.sTipoDocumento2 := 'Venda';
  //
  //
  Result := True;
  //
end;

function CupomComCaixaFormatado: String;
// Sandro Silva 2015-04-07 Retorna o número do cupom atual formatado concatenado com o número do caixa
// Ex.: 00011005
begin
  Result := FormataNumeroDoCupom(Form1.icupom)+RightStr(Form1.sCaixa, 3);
end;

function FormataReceberDocumento(iSequencia: Integer): String;
// Sandro Silva 2015-04-07 Formata o número do documento: ID caixa + cupom + desdobramento
var
  iReferencia: Integer;
  iDesdobramento: Integer;
begin
  iReferencia := 64; // de A-Z

  if (iSequencia > 26) and (iSequencia < 53) then //de a-z
    iReferencia := iReferencia + 6;

  if (iSequencia > 52) and (iSequencia < 63) then // 0-9
      iReferencia := -5;

  if (iSequencia > 62) then // Sempre caractere "_"
    iDesdobramento := 95
  else
    iDesdobramento := iReferencia + iSequencia;

  Result := FormatFloat('000', Form1.iCaixa) + FormataNumeroDoCupom(Form1.iCupom) + chr(iDesdobramento);
end;

function CriaIBTransaction(IBDATABASE: TIBDatabase): TIBTransaction;
{Sandro Silva 2011-04-12 inicio
Cria um objeto TIBTransaction}
begin
  try
    Result := TIBTransaction.Create(Application);
    Result.Params.Add('read_committed');
    Result.Params.Add('rec_version');
    Result.Params.Add('nowait');
    Result.DefaultDatabase := IBDATABASE;
  except
    on E: Exception do
    begin
      SmallMsg(E.Message);
      Result := nil;
    end
  end;
end;

function IncGenerator(IBDataBase: TIBDatabase; sGenerator: String;
  iQtd: Integer = 1): String;
var
  IBTTEMP: TIBTransaction;
  IBQTEMP: TIBQuery;
begin
  IBTTEMP := CriaIBTransaction(IBDataBase);
  IBQTEMP := CriaIBQuery(IBTTEMP);
  Result := '0';
  try
    IBQTEMP.Close;
    IBQTEMP.SQL.Text := 'select gen_id(' + sGenerator + ', '+ IntToStr(iQtd) +') as NUMERO from rdb$database';
    IBQTEMP.Open;
    Result := IBQTEMP.FieldByName('NUMERO').AsString;
    IBQTEMP.Transaction.Rollback;
  except
  end;
  FreeAndNil(IBQTEMP);
  FreeAndNil(IBTTEMP);
end;

function SalvarConfiguracao(sArquivoIni: String; SecaoIni: String;
  ChaveIni: String; Valor: String): Boolean;
//Sandro Silva 2015-04-01 Salva informação em arquivo .ini
var
  Mais1Ini: TIniFile;
begin
  Result := False;
  Mais1ini := TIniFile.Create(sArquivoIni);// DiretorioAplicacao + INI_MDFE_FILE);
  try
    Mais1Ini.WriteString(SecaoIni,ChaveIni,Valor);
    Result := True;
    Sleep(50);
  except

  end;
  FreeAndNil(Mais1Ini);
end;

function NumeroCupom: String;
//Sandro Silva 2015-04-01 Retorna o número do cupom formatado com zeros a esquerda
begin
  Result := FormataNumeroDoCupom(Form1.iCupom); // Sandro Silva 2021-12-01 Result := StrZero(Form1.iCupom,6,0);
end;

function MensagemPromocionalDefault: String;
// Sandro Silva 2015-04-09
// Retorna a mensagem promocional default a ser impressa ou incluída no xml do documento fiscal
begin
  Result := 'www.smallsoft.com.br software para ECF';
  if (Form1.sModeloECF = '65') then
    Result := 'www.smallsoft.com.br software para emissão de NFC-e';
  if (Form1.sModeloECF = '59') then
  begin
    Result := 'www.smallsoft.com.br software para emissão de CF-e-SAT';
    if _ecf59_Tipodaimpressora(False) = 'MFE' then // Sandro Silva 2018-08-01
      Result := 'www.smallsoft.com.br software para emissão de CF-e';
  end;
  if (Form1.sModeloECF = '99') then
    Result := 'www.smallsoft.com.br software para MEI';
end;

{Sandro Silva 2022-09-08 inicio
function Build: String;
var
  Size, Size2: DWord;
  Pt, Pt2: Pointer;
begin
  //
  Size := GetFileVersionInfoSize(PChar (ParamStr (0)), Size2);
  GetMem (Pt, Size);
  GetFileVersionInfo (PChar (ParamStr (0)), 0, Size, Pt);
  VerQueryValue(Pt,'\StringFileInfo\041604E4\FileVersion',Pt2, Size2);
  Result := PChar(pt2);
  FreeMem (Pt);
  //
end;
}

function Copyright: String;
begin
  Result := 'Copyright© Zucchetti® 2005 - ' + Copy(Build, 1, 4); // Sandro Silva 2022-12-02 Unochapeco Result := 'Copyright© Smallsoft® 2005 - ' + Copy(Build, 1, 4);
end;

function Consumo: Boolean;
begin
  // Sandro Silva 2022-02-04 FICHA 5649 Result := (Pos('CONSUMO', AnsiUpperCase(Form1.sConcomitante)) <> 0) or PAFNFCe;// Se tiver consumo
  Result := (Pos('CONSUMO', AnsiUpperCase(Form1.sConcomitante)) <> 0);// Se tiver consumo 
end;

procedure ExibirCaminhoLista;
// Na homologação ER 02.03 foi exigido que exibisse por mais tempo para poder ler o local
begin
  Sleep(1500);
end;

function StatusECF(pP1: Boolean; pP2: Integer): Boolean;
begin
  //
  if not Form1.bStatusECF then
  begin
    //
    Form1.Frame_teclado1.Led_ECF.Picture := Form1.Frame_teclado1.Image_led_Vermelho.Picture;
    Form1.Frame_teclado1.Led_ECF.Hint    := 'ECF não conectado';
    //
    if (Form1.sModeloECF = '65') then
      Form1.Frame_teclado1.Led_ECF.Hint := 'NFC-e - Sem Serviço';
    if (Form1.sModeloECF = '59') then
      Form1.Frame_teclado1.Led_ECF.Hint := _ecf59_Tipodaimpressora + ' - Sem Serviço';
    if (Form1.sModeloECF = '99') then
      Form1.Frame_teclado1.Led_ECF.Hint := 'Conectado';

    //
  end else
  begin
    //
    Form1.Frame_teclado1.Led_ECF.Picture := Form1.Frame_teclado1.Image_led_verde.Picture;
    Form1.Frame_teclado1.Led_ECF.Hint    := 'ECF conectado';
    //
    if (Form1.sModeloECF = '65') then
      Form1.Frame_teclado1.Led_ECF.Hint := 'NFC-e - Serviço em operação';
    if (Form1.sModeloECF = '59') then
      Form1.Frame_teclado1.Led_ECF.Hint := _ecf59_Tipodaimpressora + ' - Serviço em operação';
    if (Form1.sModeloECF = '99') then
      Form1.Frame_teclado1.Led_ECF.Hint := 'Em operação';

    //
  end;
  //
  //
  Result := True;
  //
end;

function StatusRede(pP1: Boolean; pP2: Integer): Boolean;
begin
  //
  if not Form1.bStatusREDE then
  begin
    //
    Form1.Frame_teclado1.Led_REDE.Picture := Form1.Frame_teclado1.Image_led_Vermelho.Picture;
    Form1.Frame_teclado1.Led_REDE.Hint    := 'Rede indisponível no momento';
    //
  end else
  begin
    //
    Form1.Frame_teclado1.Led_REDE.Picture := Form1.Frame_teclado1.Image_led_verde.Picture;
    Form1.Frame_teclado1.Led_REDE.Hint    := 'Rede disponível no momento';
    //
  end;
  //
  Result := True;
  //
end;

function IniciaHashOffLine(sP1: String): Boolean;
var
  IBQHASH: TIBQuery;
begin
  IBQHASH := CriaIBQuery(Form1.ibQuery1.Transaction);
  try

    Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Minha chave secreta

    Form1.ibQuery1.Close;
    Form1.ibQuery1.SQL.Clear;
    Form1.ibQuery1.SQL.Add('select count(REGISTRO) from '+sP1+' ');
    Form1.ibQuery1.Open;

    IBQHASH.Close;
    IBQHASH.SQL.Clear;
    IBQHASH.SQL.Add('set generator G_HASH_' + sP1 + ' to ' + IntToStr(Form1.ibQuery1.FieldByname('COUNT').AsInteger));
    IBQHASH.ExecSQL;

    Form1.ibQuery1.Close;
    Form1.ibQuery1.SQL.Clear;
    Form1.ibQuery1.SQL.Add('select gen_id(G_HASH_'+sP1+',0) as TOTALREG from rdb$database');
    Form1.ibQuery1.Open;

    IBQHASH.Close;
    IBQHASH.SQL.Clear;
    IBQHASH.SQL.Add('update HASHS set ENCRYPTHASH='+QuotedStr(Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.ibQuery1.FieldByname('TOTALREG').AsString))))+' where TABELA='+QuotedStr(sP1)+' ');
    IBQHASH.ExecSQL;

    if IBQHASH.RowsAffected = 0 then
    begin
      // Não existe ainda controle de hash da tabela
      IBQHASH.Close;
      IBQHASH.SQL.Clear;
      IBQHASH.SQL.Add('insert into HASHS(TABELA, ENCRYPTHASH) values(' + QuotedStr(sP1) + ',' + QuotedStr(Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.ibQuery1.FieldByname('TOTALREG').AsString)))) + ')');
      IBQHASH.ExecSQL;
    end;
  except
  end;

  FreeAndNil(IBQHASH);
  Result := True;
end;

function HasHs(sP1: String; bP2: Boolean): boolean;
var
  IBQHASH: TIBQuery;
  IBTHASH: TIBTransaction;
  IBQTEMP: TIBQuery; // Sandro Silva 2021-02-18
begin
  // Testar trocando o FORM1.IBQUERY1 por IBQTEMP local para evitar conflitos onde utiliza FORM1.IBQUERY1 com outras instruções SQL
  // Ex.: NFC-e usando mesas, lançar itens em mesas diferentes e depois fechá-las
  IBQTEMP := CriaIBQuery(Form1.ibQuery1.Transaction);

  Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Sandro Silva 2016-02-29
  //
  if bP2 then
  begin

    IBQTEMP.Close;
    IBQTEMP.SQL.Clear;
    IBQTEMP.SQL.Add('select gen_id(G_HASH_'+sP1+',0) as TOTALREG from rdb$database');
    IBQTEMP.Open;

    try
      IBTHASH := CriaIBTransaction(Form1.ibQuery1.Transaction.DefaultDatabase);
      IBQHASH := CriaIBQuery(IBTHASH);

      IBQHASH.Close;
      IBQHASH.SQL.Clear;
      // Sandro Silva 2021-02-18 IBQHASH.SQL.Add('update HASHS set ENCRYPTHASH='+QuotedStr(Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.ibQuery1.FieldByName('TOTALREG').AsString))))+' where TABELA='+QuotedStr(sP1)+' ');
      IBQHASH.SQL.Add('update HASHS set ENCRYPTHASH='+QuotedStr(Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(IBQTEMP.FieldByName('TOTALREG').AsString))))+' where TABELA='+QuotedStr(sP1)+' ');
      IBQHASH.ExecSQL;

      if IBQHASH.RowsAffected = 0 then
      begin
        //2015-11-26 Não existe ainda controle de hash da tabela
        IBQHASH.Close;
        IBQHASH.SQL.Clear;
        IBQHASH.SQL.Add('insert into HASHS(TABELA, ENCRYPTHASH) values(' + QuotedStr(sP1) + ',' + QuotedStr(Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(IBQTEMP.FieldByName('TOTALREG').AsString)))) + ')');
        IBQHASH.ExecSQL;
      end;

      IBQHASH.Transaction.Commit;

      FreeAndNil(IBTHASH);
      FreeAndNil(IBQHASH);

    except

    end;
    //
    Result := True;
    //
  end else
  begin
    //
    Commitatudo(True); // Valida Hash da tabela
    //
    Form1.ibQuery2.Close;
    Form1.ibQuery2.SQL.Clear;
    Form1.ibQuery2.SQL.Add('select count(REGISTRO) from '+sP1+' ');
    Form1.ibQuery2.Open;

    //Teste 01
    IBQTEMP.Close;
    IBQTEMP.SQL.Clear;
    IBQTEMP.SQL.Add('select gen_id(G_HASH_'+sP1+',0) as TOTALREG from rdb$database');
    IBQTEMP.Open;
    {Sandro Silva 2021-02-18 fim}

    //LogFrente('Teste 01: ' + sP1 + ' Registros ' + Form1.IBQuery2.FieldByName('count').AsString + ' hash ' + IBQTEMP.FieldByName('TOTALREG').AsString);

    IBQTEMP.Close;
    IBQTEMP.SQL.Clear;
    IBQTEMP.SQL.Add('select ENCRYPTHASH from HASHS where TABELA='+QuotedStr(sP1)+' ');
    IBQTEMP.Open;

    if IBQTEMP.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.ibQuery2.FieldByName('COUNT').AsString))) then
    begin
      Result := True;
    end else
    begin
      Result := False;
    end;
    //
  end;
  //
  // Ok testado
  //

  FreeAndNil(IBQTEMP);

end;

procedure AjustaLarguraDBGrid(DBGrid: TDBGrid);
var
  iWidthTotalColunas: Integer;
  iColuna: Integer;
begin
  if DBGrid.Visible then
  begin
    iWidthTotalColunas := 0;
    for iColuna := 0 to DBGrid.Columns.Count -1 do
    begin
      iWidthTotalColunas := iWidthTotalColunas + DBGrid.Columns[iColuna].Width;
    end;
    for iColuna := 0 to DBGrid.Columns.Count -1 do
    begin
      DBGrid.Columns[iColuna].Width := Trunc((DBGrid.Columns[iColuna].Width / iWidthTotalColunas) * (DBGrid.Width - GetSystemMetrics(SM_CXVSCROLL) - IndicatorWidth));
    end;
  end;
end;

function ContaCasasDecimais(dValor: Double): Integer;
var
  iPosVirgula: Integer;
  sDecimais: String;
begin
  iPosVirgula := Pos(',', FloatToStr(dValor));
  if iPosVirgula > 0 then
  begin
    sDecimais := Copy(FloatToStr(dValor), iPosVirgula + 1, Length(FloatToStr(dValor)));
    Result := Length(sDecimais);
  end
  else
    Result := 0;
end;

function Commitatudo(P1:Boolean): Boolean;
var
  Cursor: TCursor;
begin
  Cursor := Screen.Cursor; // Sandro Silva 2017-02-23
  Screen.Cursor := crHourGlass;

  //
  if not Form1.bFechandoMesasAbertas then
  begin
    //
    //
    try
      {Sandro Silva 2022-11-30 inicio
      Form1.IBTransaction1.Commit;
      Form1.IBTransaction2.Commit;
      }
      if Form1.IBTransaction1.Active then
        Form1.IBTransaction1.Commit;
      if Form1.IBTransaction2.Active then
        Form1.IBTransaction2.Commit;
      {Sandro Silva 2022-11-30 fim}
    except
      {Sandro Silva 2022-11-30 inicio
      try
        //
        Sleep(1000);
        //
        try
          Form1.IBTransaction1.Commit;
          Form1.IBTransaction2.Commit;
        except end;
        //
        Sleep(1000);
        Abrearquivos(True);
        //
      except
        SmallMsg('Erro de rede. (A rede física não suportou o tráfego) Erro: 1163');
      end;
      }
      on E: Exception do
      begin
        //ShowMessage('Teste 6112 ' + E.Message); // Sandro Silva 2022-11-30
        try
          //
          Sleep(1000);
          //
          try
            Form1.IBTransaction1.Commit;
            Form1.IBTransaction2.Commit;
          except end;
          //
          Sleep(1000);
          Abrearquivos(True);
          //
        except
          SmallMsg('Erro de rede. (A rede física não suportou o tráfego) Erro: 1163');
        end;
      end;
    end;
    //
    try
      //
      // Form1.ibDataSet27.DisableControls;
      //
      Form1.ibDataSet1.Selectsql.Clear;
      Form1.ibDataSet27.Selectsql.Clear;
      Form1.ibDataSet28.Selectsql.Clear;
      Form1.ibDataSet38.Selectsql.Clear;
      Form1.ibDataSet25.Selectsql.Clear;
      Form1.ibDataSet10.Selectsql.Clear;
      Form1.ibDataset30.Selectsql.Clear;
      Form1.ibDataSet13.Selectsql.Clear;
      Form1.ibDataSet14.Selectsql.Clear;
      Form1.ibDataSet9.Selectsql.Clear;
      Form1.ibDataSet29.Selectsql.Clear;
      Form1.ibDataSet7.Selectsql.Clear;
      Form1.ibDataSet2.Selectsql.Clear;
      Form1.ibDataset88.Selectsql.Clear;
      Form1.ibDataSet4.Selectsql.Clear;
      //
      // Abre tudo em branco
      //
      Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))); // Sandro Silva 2021-11-29 Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0)));
      if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Sandro Silva 2016-04-25 NFC-e e CF-e-SAT gravam PAGAMENT.PEDIDO igual a um venda. Quando abre cupom não pode excluir sangria ou suprimento do caixa
        Form1.ibDataSet28.Selectsql.Add('select * from PAGAMENT where (coalesce(CLIFOR, '''') <> ''Sangria'' and coalesce(CLIFOR, '''') <> ''Suprimento'') and CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))) // Sandro Silva 2021-11-29 Form1.ibDataSet28.Selectsql.Add('select * from PAGAMENT where (coalesce(CLIFOR, '''') <> ''Sangria'' and coalesce(CLIFOR, '''') <> ''Suprimento'') and CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0)))
      else
        Form1.ibDataSet28.Selectsql.Add('select * from PAGAMENT where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))); // Sandro Silva 2021-11-29 Form1.ibDataSet28.Selectsql.Add('select * from PAGAMENT where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0)));
      //
      Form1.ibDataSet1.Selectsql.Add('select * from CAIXA where REGISTRO=''9999999999'' ');
      Form1.ibDataSet38.Selectsql.Add('select * from DEMAIS where ECF=''RRRRRRRRRRRRRRRRRRR''');
      //
      Form1.ibDataSet25.Selectsql.Add('select * from FLUXO');
      Form1.ibDataSet10.Selectsql.Add('select * from GRADE where REGISTRO is null ');
      Form1.ibDataset30.Selectsql.Add('select * from SERIE where REGISTRO is null ');
      Form1.ibDataSet13.Selectsql.Add('select * from EMITENTE');
      Form1.ibDataSet14.Selectsql.Add('select * from ICM order by CFOP');
      Form1.ibDataSet9.Selectsql.Add('select * from VENDEDOR where coalesce(NOME, '''') <> '''' ');
      Form1.ibDataSet29.Selectsql.Add('select * from CONVENIO');
      Form1.ibDataSet7.Selectsql.Add('select * from RECEBER where NUMERONF='+QuotedStr(CupomComCaixaFormatado)+'');  //
      Form1.ibDataSet2.Selectsql.Add('select * from CLIFOR where coalesce(ATIVO,0) = 0 and trim(coalesce(NOME,'''')) <> '''' order by NOME');
      Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' order by DATA');
      Form1.ibDataSet4.Selectsql.Add('select * from ESTOQUE where coalesce(ATIVO,0)=0 and CODIGO='+QuotedStr('XXXXX')+' ');

      //
      try Form1.ibDataSet1.Active  := True except SmallMsg('Erro ao abrir arquivo 1') end;
      try Form1.ibDataSet2.Active  := True except SmallMsg('Erro ao abrir arquivo 2') end;
      try Form1.ibDataset88.Active := True except SmallMsg('Erro ao abrir arquivo 88') end;
      try Form1.ibDataSet4.Active  := True except SmallMsg('Erro ao abrir arquivo 4') end;
      try Form1.ibDataSet7.Active  := True except SmallMsg('Erro ao abrir arquivo 7') end;
      try Form1.ibDataSet9.Active  := True except SmallMsg('Erro ao abrir arquivo 9') end;
      try Form1.ibDataSet29.Active := True except SmallMsg('Erro ao abrir arquivo 29') end;
      try Form1.ibDataSet13.Active := True except SmallMsg('Erro ao abrir arquivo 13') end;
      try Form1.ibDataSet14.Active := True except SmallMsg('Erro ao abrir arquivo 14') end;
      try Form1.ibDataSet10.Active := True except SmallMsg('Erro ao abrir arquivo 10') end;
      try Form1.ibDataset30.Active := True except SmallMsg('Erro ao abrir arquivo 30') end;
      try Form1.ibDataSet25.Active := True except SmallMsg('Erro ao abrir arquivo 25') end;
      try Form1.ibDataSet27.Active := True except SmallMsg('Erro ao abrir arquivo 27') end;
      try Form1.ibDataSet28.Active := True except SmallMsg('Erro ao abrir arquivo 28') end;
      try Form1.ibDataSet38.Active := True except SmallMsg('Erro ao abrir arquivo 38') end;
      //
      Form1.ibDataset25.Edit;
      //

      if FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
      begin
        DeleteFile(pchar(Form1.sPastadoExecutavel+'\offline.fdb'));
      end;
      //
    except
      //
      SmallMsg('Erro ao abrir arquivo '+Form1.IbDatabase1.DatabaseName);
      //
    end;
  end;

  //Sandro Silva 2015-03-26 Não permitir continuar se os dados do emitente estiverem faltando
  if Form1.ibDataSet13.Active then
  begin

    if ((Trim(Form1.ibDataSet13.FieldByName('NOME').AsString) = '')
      or (Trim(Form1.ibDataSet13.FieldByName('CGC').AsString) = '')
      or (Trim(Form1.ibDataSet13.FieldByName('ENDERECO').AsString) = '')
      or (Trim(Form1.ibDataSet13.FieldByName('COMPLE').AsString) = '')
      or (Trim(Form1.ibDataSet13.FieldByName('MUNICIPIO').AsString) = '')
      or (Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = '')
      or (Trim(Form1.ibDataSet13.FieldByName('CEP').AsString) = '')
      or ((Trim(Form1.ibDataSet13.FieldByName('IE').AsString) = '') and (Form1.sModeloECF <> '99'))
      or ((Trim(Form1.ibDataSet13.FieldByName('CRT').AsString) = '') and (Form1.sModeloECF <> '99'))
      )
      and (Form1.bStatusRede)
      and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99'))
    then
    begin
      Application.ProcessMessages;
      Application.BringToFront;
      if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then // Pos(TIPOMOBILE, Form1.ClienteSmallMobile.sVendaImportando) > 0 then
        Form1.ClienteSmallMobile.LogRetornoMobile( // Sandro Silva 2022-08-08 LogRetornoMobile(
                         'Os dados do emitente estão incompletos!' + #13 + #13 +
                         'Abra o programa "Small Commerce", configure o Cadastro do Emitente e tente novamente')
      else
        SmallMsgBox(PChar('Os dados do emitente estão incompletos!' + #13 + #13 +
                          'Abra o programa "Small Commerce", configure o Cadastro do Emitente e tente novamente' + #13 + #13 +
                          'Este programa sera fechado'),
                          'Atenção', MB_ICONWARNING + MB_OK);
      Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
        Form1.ClienteSmallMobile.sLogRetornoMobile);
      Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
      FecharAplicacao(ExtractFileName(Application.ExeName));
    end;

    {Sandro Silva 2021-03-16 inicio}
    // Se for SC e modelo for NFC-e, o aplicativo deve se comportar com as regras do PAF-NFC-e
    // Sandro Silva 2022-11-29 if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'SC') and (Form1.sModeloECF = '65') then
    if (Form1.sModeloECF = '65') then
    begin
      if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'SC') then
      begin

        // ShowMessage('teste 01 7425 '); // Sandro Silva 2021-04-27

        if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = '') or (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = 'NFCE') then // Sandro Silva 2021-08-10 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = '') then// Sandro Silva 2021-04-27 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') <> 'PAFNFCE') then // Sandro Silva 2021-03-19 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', '') <> 'Sim') then
        begin

          GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'PAFNFCE'); // Sandro Silva 2021-03-19 GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', 'Sim');

          //ShowMessage('Teste 7403 UF SC Gravou PAFNFCE=Sim'); // Sandro Silva 2021-03-17

        end
        else
        begin
          //Form1.Caption := 'Aplicativo emissor NFC-e (PAF-NFC-e)';
          //Application.Title := 'Aplicativo emissor NFC-e (PAF-NFC-e)';
        end;

        Form1.Caption     := 'Aplicativo emissor NFC-e (PAF-NFC-e)';
        Application.Title := 'Aplicativo emissor NFC-e (PAF-NFC-e)';

      end;
    end;
    {Sandro Silva 2021-03-16 fim}

    {Sandro Silva 2021-03-17 inicio}
    // Se NÃO for SC e modelo for NFC-e, o aplicativo não deve se comportar com as regras do PAF-NFC-e
    // Sandro Silva 2022-11-29 UnoChapeco  if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) <> 'SC') and (Form1.sModeloECF = '65') then
    if (Form1.sModeloECF = '65') then
    begin
      if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) <> 'SC') then
      begin

        if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = '') then // Sandro Silva 2021-04-27 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = 'PAFNFCE') then // Sandro Silva 2021-03-19 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', '') = 'Sim') then
        begin

          GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'NFCE'); // Sandro Silva 2021-03-19 GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', 'Não');

          //ShowMessage('Teste 7428 UF não é SC Gravou PAFNFCE=Não'); // Sandro Silva 2021-03-17

        end;

        Form1.Caption     := 'Aplicativo emissor NFC-e';
        Application.Title := 'Aplicativo emissor NFC-e';

      end;
      {Sandro Silva 2021-03-17 fim}
    end;


    {Sandro Silva 2021-03-16 inicio}
    // Se for SC e modelo for NFC-e, o aplicativo deve se comportar com as regras do PAF-NFC-e
    // Sandro Silva 2022-11-29 UnoChapeco  if ((AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'CE') or (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'SP') ) and (Form1.sModeloECF = '59') then // Sandro Silva 2021-04-27 if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'CE') and (Form1.sModeloECF = '59') then
    if (Form1.sModeloECF = '59') then
    begin
      if ((AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'CE') or (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'SP') ) then // Sandro Silva 2021-04-27 if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'CE') and (Form1.sModeloECF = '59') then
      begin

        if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = '') then // Sandro Silva 2021-04-27 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') <> 'MFE') then // Sandro Silva 2021-03-19 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', '') <> 'Sim') then
        begin

          if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'CE') then
            GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'MFE'); // Sandro Silva 2021-03-19 GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', 'Sim');

          if (AnsiUpperCase(Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString)) = 'SP') then
            GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'SAT'); // Sandro Silva 2021-03-19 GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', 'Sim');

          //ShowMessage('Teste 7403 UF SC Gravou PAFNFCE=Sim'); // Sandro Silva 2021-03-17

        end
        else
        begin
          //Form1.Caption := 'Aplicativo emissor de CF-e';
          //Application.Title := 'Aplicativo emissor de CF-e';
        end;

        Form1.Caption     := 'Aplicativo emissor de CF-e';
        Application.Title := 'Aplicativo emissor de CF-e';

      end;
    end;
    {Sandro Silva 2021-03-16 fim}

  end;
  //

  if Form1.bStatusRede then
  begin
    Form1.AtualizaECFSCripta;
  end;

  Result := True;
  //
  Screen.Cursor := Cursor; // Sandro Silva 2017-02-23

end;

function Commitatudo2(P1:Boolean): Boolean;
begin
  //
  if not Form1.bFechandoMesasAbertas then
  begin
    try
      //
      Form1.IBTransaction2.Commit;
      //
      if not Form1.ibDataSet27.Active then Form1.ibDataSet27.Active := True;
      if not Form1.ibDataSet4.Active then  Form1.ibDataSet4.Active  := True;

      if not Form1.ibDataSet10.Active then Form1.ibDataSet10.Active  := True; // Grade
      if not Form1.ibDataSet30.Active then Form1.ibDataSet30.Active  := True; // Serie

      //
    except
      Commitatudo(True); // Erro no commitatudo 2
    end;
  end;
  //
  Result := True;
  //
end;

function AssinaRegistroE2(sTexto: String): String; // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco
begin
  Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Minha chave secreta
  Result := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sTexto)));
end;

/////////////////////////////////
function AssinaRegistro(pNome: String; DataSet: TDataSet; bAssina: Boolean): Boolean;
var
  s, sAntigo : String;
  sSemCest, sAntigoSemCest : String; // Sandro Silva 2017-11-13  HOMOLOGA 2017 compatibilizar os hashs que estão no registros e foram gerados pelo PAF anterior
  sAntigoENCRYPTHASH, sAntigoSemCestENCRYPTHASH: String;
begin
  //
  Result := True;
  s := '';
  //
  try
    //
    //
    if pNome = 'EMITENTE' then
    begin
      //
      sAntigo :=
      VarToStr(DataSet.FieldByname('CGC').OldValue)+
      VarToStr(DataSet.FieldByname('IE').OldValue);;
      s :=
      DataSet.FieldByname('CGC').AsString+
      DataSet.FieldByname('IE').AsString;
      //
      //
    end;
    //
    //if pNome = 'VENDAS' then // Sandro Silva 2022-12-08 Unochapeco if pNome = 'VENDA' then
    if pNome = 'VENDA' then // Precisa ser assim resolver 
    begin
      //
      sAntigo :=
      VarToStr(DataSet.FieldByname('NUMERONF').OldValue)+
      VarToStr(DataSet.FieldByname('MODELO').OldValue)+
      VarToStr(DataSet.FieldByname('VENDEDOR').OldValue)+
      VarToStr(DataSet.FieldByname('CLIENTE').OldValue)+
      VarToStr(DataSet.FieldByname('OPERACAO').OldValue)+
      VarToStr(DataSet.FieldByname('EMISSAO').OldValue)+
      VarToStr(DataSet.FieldByname('FRETE').OldValue)+
      VarToStr(DataSet.FieldByname('SEGURO').OldValue)+
      VarToStr(DataSet.FieldByname('DESPESAS').OldValue)+
      VarToStr(DataSet.FieldByname('DESCONTO').OldValue)+
      VarToStr(DataSet.FieldByname('VOLUMES').OldValue)+
      VarToStr(DataSet.FieldByname('ESPECIE').OldValue)+
      VarToStr(DataSet.FieldByname('MARCA').OldValue)+
      VarToStr(DataSet.FieldByname('TRANSPORTA').OldValue)+
      VarToStr(DataSet.FieldByname('FRETE12').OldValue)+
      VarToStr(DataSet.FieldByname('SAIDAH').OldValue)+
      VarToStr(DataSet.FieldByname('SAIDAD').OldValue)+
      VarToStr(DataSet.FieldByname('DUPLICATAS').OldValue)+
      VarToStr(DataSet.FieldByname('BASEICM').OldValue)+
      VarToStr(DataSet.FieldByname('BASEISS').OldValue)+
      VarToStr(DataSet.FieldByname('ICMS').OldValue)+
      VarToStr(DataSet.FieldByname('ICMSSUBSTI').OldValue)+
      VarToStr(DataSet.FieldByname('BASESUBSTI').OldValue)+
      VarToStr(DataSet.FieldByname('ALIQUOTA').OldValue)+
      VarToStr(DataSet.FieldByname('ISS').OldValue)+
      VarToStr(DataSet.FieldByname('IPI').OldValue)+
      VarToStr(DataSet.FieldByname('TOTAL').OldValue)+
      VarToStr(DataSet.FieldByname('MERCADORIA').OldValue)+
      VarToStr(DataSet.FieldByname('EMITIDA').OldValue)+
      VarToStr(DataSet.FieldByname('SERVICOS').OldValue)+
      VarToStr(DataSet.FieldByname('PESOBRUTO').OldValue)+
      VarToStr(DataSet.FieldByname('PESOLIQUI').OldValue)+
      VarToStr(DataSet.FieldByname('REGISTRO').OldValue)+
      VarToStr(DataSet.FieldByname('NSUH').OldValue)+
      VarToStr(DataSet.FieldByname('NSU').OldValue)+
      VarToStr(DataSet.FieldByname('NSUD').OldValue)+
      VarToStr(DataSet.FieldByname('IDENTIFICADOR1').OldValue)+
      VarToStr(DataSet.FieldByname('COMPLEMENTO').OldValue)+
      VarToStr(DataSet.FieldByname('NVOL').OldValue)+
      VarToStr(DataSet.FieldByname('LOKED').OldValue)+
      VarToStr(DataSet.FieldByname('NFEPROTOCOLO').OldValue)+
      VarToStr(DataSet.FieldByname('STATUS').OldValue)+
      VarToStr(DataSet.FieldByname('NFEID').OldValue)+
      VarToStr(DataSet.FieldByname('NFERECIBO').OldValue)+
      VarToStr(DataSet.FieldByname('PLACA').OldValue)+
      VarToStr(DataSet.FieldByname('ANVISA').OldValue)+
      VarToStr(DataSet.FieldByname('DATA_CANCEL').OldValue)+
      VarToStr(DataSet.FieldByname('HORA_CANCEL').OldValue)+
      VarToStr(DataSet.FieldByname('COD_SIT').OldValue)+
      VarToStr(DataSet.FieldByname('FINNFE').OldValue)+ // Sandro Silva 2022-12-08 Unochapeco VarToStr(DataSet.FieldByname('FINNF').OldValue)+
      VarToStr(DataSet.FieldByname('INDFINAL').OldValue)+
      VarToStr(DataSet.FieldByname('INDPRES').OldValue);
      s :=
      DataSet.FieldByname('NUMERONF').AsString+
      DataSet.FieldByname('MODELO').AsString+
      DataSet.FieldByname('VENDEDOR').AsString+
      DataSet.FieldByname('CLIENTE').AsString+
      DataSet.FieldByname('OPERACAO').AsString+
      DataSet.FieldByname('EMISSAO').AsString+
      DataSet.FieldByname('FRETE').AsString+
      DataSet.FieldByname('SEGURO').AsString+
      DataSet.FieldByname('DESPESAS').AsString+
      DataSet.FieldByname('DESCONTO').AsString+
      DataSet.FieldByname('VOLUMES').AsString+
      DataSet.FieldByname('ESPECIE').AsString+
      DataSet.FieldByname('MARCA').AsString+
      DataSet.FieldByname('TRANSPORTA').AsString+
      DataSet.FieldByname('FRETE12').AsString+
      DataSet.FieldByname('SAIDAH').AsString+
      DataSet.FieldByname('SAIDAD').AsString+
      DataSet.FieldByname('DUPLICATAS').AsString+
      DataSet.FieldByname('BASEICM').AsString+
      DataSet.FieldByname('BASEISS').AsString+
      DataSet.FieldByname('ICMS').AsString+
      DataSet.FieldByname('ICMSSUBSTI').AsString+
      DataSet.FieldByname('BASESUBSTI').AsString+
      DataSet.FieldByname('ALIQUOTA').AsString+
      DataSet.FieldByname('ISS').AsString+
      DataSet.FieldByname('IPI').AsString+
      DataSet.FieldByname('TOTAL').AsString+
      DataSet.FieldByname('MERCADORIA').AsString+
      DataSet.FieldByname('EMITIDA').AsString+
      DataSet.FieldByname('SERVICOS').AsString+
      DataSet.FieldByname('PESOBRUTO').AsString+
      DataSet.FieldByname('PESOLIQUI').AsString+
      DataSet.FieldByname('REGISTRO').AsString+
      DataSet.FieldByname('NSUH').AsString+
      DataSet.FieldByname('NSU').AsString+
      DataSet.FieldByname('NSUD').AsString+
      DataSet.FieldByname('IDENTIFICADOR1').AsString+
      DataSet.FieldByname('COMPLEMENTO').AsString+
      DataSet.FieldByname('NVOL').AsString+
      DataSet.FieldByname('LOKED').AsString+
      DataSet.FieldByname('NFEPROTOCOLO').AsString+
      DataSet.FieldByname('STATUS').AsString+
      DataSet.FieldByname('NFEID').AsString+
      DataSet.FieldByname('NFERECIBO').AsString+
      DataSet.FieldByname('PLACA').AsString+
      DataSet.FieldByname('ANVISA').AsString+
      DataSet.FieldByname('DATA_CANCEL').AsString+
      DataSet.FieldByname('HORA_CANCEL').AsString+
      DataSet.FieldByname('COD_SIT').AsString+
      DataSet.FieldByname('FINNFE').AsString+ // Sandro Silva 2022-12-08 Unochapeco DataSet.FieldByname('FINNF').AsString+
      DataSet.FieldByname('INDFINAL').AsString+
      DataSet.FieldByname('INDPRES').AsString;
      //
    end;
    //
    if pNome = 'ITENS001' then
    begin
      //
      sAntigo :=
      VarToStr(DataSet.FieldByname('NUMERONF').OldValue)+
      VarToStr(DataSet.FieldByname('CODIGO').OldValue)+
      VarToStr(DataSet.FieldByname('DESCRICAO').OldValue)+
      VarToStr(DataSet.FieldByname('ST').OldValue)+
      VarToStr(DataSet.FieldByname('IPI').OldValue)+
      VarToStr(DataSet.FieldByname('ICM').OldValue)+
      VarToStr(DataSet.FieldByname('ISS').OldValue)+
      VarToStr(DataSet.FieldByname('MEDIDA').OldValue)+
      VarToStr(DataSet.FieldByname('QUANTIDADE').OldValue)+
      VarToStr(DataSet.FieldByname('SINCRONIA').OldValue)+
      VarToStr(DataSet.FieldByname('UNITARIO').OldValue)+
      VarToStr(DataSet.FieldByname('TOTAL').OldValue)+
      VarToStr(DataSet.FieldByname('LISTA').OldValue)+
      VarToStr(DataSet.FieldByname('CUSTO').OldValue)+
      VarToStr(DataSet.FieldByname('PESO').OldValue)+
      VarToStr(DataSet.FieldByname('BASE').OldValue)+
      VarToStr(DataSet.FieldByname('BASEISS').OldValue)+
      VarToStr(DataSet.FieldByname('ALIQUOTA').OldValue)+
      VarToStr(DataSet.FieldByname('CFOP').OldValue)+
      VarToStr(DataSet.FieldByname('NUMEROOS').OldValue)+
      VarToStr(DataSet.FieldByname('REGISTRO').OldValue)+
      VarToStr(DataSet.FieldByname('XPED').OldValue)+
      VarToStr(DataSet.FieldByname('NITEMPED').OldValue)+
      VarToStr(DataSet.FieldByname('VICMS').OldValue)+
      VarToStr(DataSet.FieldByname('VBC').OldValue)+
      VarToStr(DataSet.FieldByname('VBCST').OldValue)+
      VarToStr(DataSet.FieldByname('VICMSST').OldValue)+
      VarToStr(DataSet.FieldByname('VIPI').OldValue)+
      VarToStr(DataSet.FieldByname('CST_PIS_COFINS').OldValue)+
      VarToStr(DataSet.FieldByname('ALIQ_PIS').OldValue)+
      VarToStr(DataSet.FieldByname('ALIQ_COFINS').OldValue)+
      VarToStr(DataSet.FieldByname('CST_IPI').OldValue)+
      VarToStr(DataSet.FieldByname('CST_ICMS').OldValue)+
      VarToStr(DataSet.FieldByname('ANVISA').OldValue)+
      VarToStr(DataSet.FieldByname('PFCPUFDEST').OldValue)+
      VarToStr(DataSet.FieldByname('PICMSUFDEST').OldValue);
      s :=
      DataSet.FieldByname('NUMERONF').AsString+
      DataSet.FieldByname('CODIGO').AsString+
      DataSet.FieldByname('DESCRICAO').AsString+
      DataSet.FieldByname('ST').AsString+
      DataSet.FieldByname('IPI').AsString+
      DataSet.FieldByname('ICM').AsString+
      DataSet.FieldByname('ISS').AsString+
      DataSet.FieldByname('MEDIDA').AsString+
      DataSet.FieldByname('QUANTIDADE').AsString+
      DataSet.FieldByname('SINCRONIA').AsString+
      DataSet.FieldByname('UNITARIO').AsString+
      DataSet.FieldByname('TOTAL').AsString+
      DataSet.FieldByname('LISTA').AsString+
      DataSet.FieldByname('CUSTO').AsString+
      DataSet.FieldByname('PESO').AsString+
      DataSet.FieldByname('BASE').AsString+
      DataSet.FieldByname('BASEISS').AsString+
      DataSet.FieldByname('ALIQUOTA').AsString+
      DataSet.FieldByname('CFOP').AsString+
      DataSet.FieldByname('NUMEROOS').AsString+
      DataSet.FieldByname('REGISTRO').AsString+
      DataSet.FieldByname('XPED').AsString+
      DataSet.FieldByname('NITEMPED').AsString+
      DataSet.FieldByname('VICMS').AsString+
      DataSet.FieldByname('VBC').AsString+
      DataSet.FieldByname('VBCST').AsString+
      DataSet.FieldByname('VICMSST').AsString+
      DataSet.FieldByname('VIPI').AsString+
      DataSet.FieldByname('CST_PIS_COFINS').AsString+
      DataSet.FieldByname('ALIQ_PIS').AsString+
      DataSet.FieldByname('ALIQ_COFINS').AsString+
      DataSet.FieldByname('CST_IPI').AsString+
      DataSet.FieldByname('CST_ICMS').AsString+
      DataSet.FieldByname('ANVISA').AsString+
      DataSet.FieldByname('PFCPUFDEST').AsString+
      DataSet.FieldByname('PICMSUFDEST').AsString;
      //
    end;

    if pNome = 'ESTOQUE' then
    begin
      // compatibilizar os hashs que estão no registros e foram gerados pelo PAF anterior
      sAntigoSemCest :=
        VarToStr(DataSet.FieldByName('CODIGO').OldValue)+
        VarToStr(DataSet.FieldByName('REFERENCIA').OldValue)+
        VarToStr(DataSet.FieldByName('DESCRICAO').OldValue)+
        VarToStr(DataSet.FieldByName('NOME').OldValue)+
        VarToStr(DataSet.FieldByName('MEDIDA').OldValue)+
        VarToStr(DataSet.FieldByName('PRECO').OldValue)+
        VarToStr(DataSet.FieldByName('QTD_ATUAL').OldValue)+
        VarToStr(DataSet.FieldByName('DAT_INICIO').OldValue)+
        VarToStr(DataSet.FieldByName('ULT_COMPRA').OldValue)+
        VarToStr(DataSet.FieldByName('ULT_VENDA').OldValue)+
        VarToStr(DataSet.FieldByName('CF').OldValue)+
        VarToStr(DataSet.FieldByName('IPI').OldValue)+
        VarToStr(DataSet.FieldByName('CST').OldValue)+
        VarToStr(DataSet.FieldByName('ST').OldValue)+
        VarToStr(DataSet.FieldByName('IAT').OldValue)+
        VarToStr(DataSet.FieldByName('IPPT').OldValue);
      sAntigo :=
        VarToStr(DataSet.FieldByName('CODIGO').OldValue)+
        VarToStr(DataSet.FieldByName('REFERENCIA').OldValue)+
        VarToStr(DataSet.FieldByName('DESCRICAO').OldValue)+
        VarToStr(DataSet.FieldByName('NOME').OldValue)+
        VarToStr(DataSet.FieldByName('MEDIDA').OldValue)+
        VarToStr(DataSet.FieldByName('PRECO').OldValue)+
        VarToStr(DataSet.FieldByName('QTD_ATUAL').OldValue)+
        VarToStr(DataSet.FieldByName('DAT_INICIO').OldValue)+
        VarToStr(DataSet.FieldByName('ULT_COMPRA').OldValue)+
        VarToStr(DataSet.FieldByName('ULT_VENDA').OldValue)+
        VarToStr(DataSet.FieldByName('CF').OldValue)+
        VarToStr(DataSet.FieldByName('IPI').OldValue)+
        VarToStr(DataSet.FieldByName('CST').OldValue)+
        VarToStr(DataSet.FieldByName('ST').OldValue)+
        VarToStr(DataSet.FieldByName('IAT').OldValue)+
        VarToStr(DataSet.FieldByName('CEST').OldValue)+
        VarToStr(DataSet.FieldByName('IPPT').OldValue);

      // compatibilizar os hashs que estão no registros e foram gerados pelo PAF anterior
      sSemCest :=
        DataSet.FieldByName('CODIGO').AsString+
        DataSet.FieldByName('REFERENCIA').AsString+
        DataSet.FieldByName('DESCRICAO').AsString+
        DataSet.FieldByName('NOME').AsString+
        DataSet.FieldByName('MEDIDA').AsString+
        DataSet.FieldByName('PRECO').AsString+
        DataSet.FieldByName('QTD_ATUAL').AsString+
        DataSet.FieldByName('DAT_INICIO').AsString+
        DataSet.FieldByName('ULT_COMPRA').AsString+
        DataSet.FieldByName('ULT_VENDA').AsString+
        DataSet.FieldByName('CF').AsString+
        DataSet.FieldByName('IPI').AsString+
        DataSet.FieldByName('CST').AsString+
        DataSet.FieldByName('ST').AsString+
        DataSet.FieldByName('IAT').AsString+
        DataSet.FieldByName('IPPT').AsString;

      s :=
        DataSet.FieldByName('CODIGO').AsString+
        DataSet.FieldByName('REFERENCIA').AsString+
        DataSet.FieldByName('DESCRICAO').AsString+
        DataSet.FieldByName('NOME').AsString+
        DataSet.FieldByName('MEDIDA').AsString+
        DataSet.FieldByName('PRECO').AsString+
        DataSet.FieldByName('QTD_ATUAL').AsString+
        DataSet.FieldByName('DAT_INICIO').AsString+
        DataSet.FieldByName('ULT_COMPRA').AsString+
        DataSet.FieldByName('ULT_VENDA').AsString+
        DataSet.FieldByName('CF').AsString+
        DataSet.FieldByName('IPI').AsString+
        DataSet.FieldByName('CST').AsString+
        DataSet.FieldByName('ST').AsString+
        DataSet.FieldByName('IAT').AsString+
        DataSet.FieldByName('CEST').AsString+
        DataSet.FieldByName('IPPT').AsString;
    end;
    //
    if pNome = 'ALTERACA' then
    begin

      sAntigo :=
        VarToStr(DataSet.FieldByName('CODIGO').OldValue)+
        VarToStr(DataSet.FieldByName('DESCRICAO').OldValue)+
        VarToStr(DataSet.FieldByName('QUANTIDADE').OldValue)+
        VarToStr(DataSet.FieldByName('MEDIDA').OldValue)+
        VarToStr(DataSet.FieldByName('UNITARIO').OldValue)+
        VarToStr(DataSet.FieldByName('TOTAL').OldValue)+
        VarToStr(DataSet.FieldByName('DATA').OldValue)+
        VarToStr(DataSet.FieldByName('TIPO').OldValue)+
        VarToStr(DataSet.FieldByName('PEDIDO').OldValue)+
        VarToStr(DataSet.FieldByName('ITEM').OldValue)+
        VarToStr(DataSet.FieldByName('VENDEDOR').OldValue)+
        VarToStr(DataSet.FieldByName('CLIFOR').OldValue)+
        VarToStr(DataSet.FieldByName('CAIXA').OldValue)+
        VarToStr(DataSet.FieldByName('VALORICM').OldValue)+
        VarToStr(DataSet.FieldByName('ALIQUICM').OldValue)+
        VarToStr(DataSet.FieldByName('HORA').OldValue)+
        VarToStr(DataSet.FieldByName('DAV').OldValue)+
        VarToStr(DataSet.FieldByName('TIPODAV').OldValue)+
        VarToStr(DataSet.FieldByName('COO').OldValue)+
        VarToStr(DataSet.FieldByName('CCF').OldValue)+
        VarToStr(DataSet.FieldByName('SERIE').OldValue)+
        VarToStr(DataSet.FieldByName('SUBSERIE').OldValue)+
        VarToStr(DataSet.FieldByName('CNPJ').OldValue)+
        VarToStr(DataSet.FieldByName('REFERENCIA').OldValue);

      s :=
        DataSet.FieldByName('CODIGO').AsString+
        DataSet.FieldByName('DESCRICAO').AsString+
        DataSet.FieldByName('QUANTIDADE').AsString+
        DataSet.FieldByName('MEDIDA').AsString+
        DataSet.FieldByName('UNITARIO').AsString+
        DataSet.FieldByName('TOTAL').AsString+
        DataSet.FieldByName('DATA').AsString+
        DataSet.FieldByName('TIPO').AsString+
        DataSet.FieldByName('PEDIDO').AsString+
        DataSet.FieldByName('ITEM').AsString+
        DataSet.FieldByName('VENDEDOR').AsString+
        DataSet.FieldByName('CLIFOR').AsString+
        DataSet.FieldByName('CAIXA').AsString+
        DataSet.FieldByName('VALORICM').AsString+
        DataSet.FieldByName('ALIQUICM').AsString+
        DataSet.FieldByName('HORA').AsString+
        DataSet.FieldByName('DAV').AsString+
        DataSet.FieldByName('TIPODAV').AsString+
        DataSet.FieldByName('COO').AsString+
        DataSet.FieldByName('CCF').AsString+
        DataSet.FieldByName('SERIE').AsString+
        DataSet.FieldByName('SUBSERIE').AsString+
        DataSet.FieldByName('CNPJ').AsString+
        DataSet.FieldByName('REFERENCIA').AsString;
      //
    end;
    //
    if pNome = 'REDUCOES' then
    begin
      s :=
        DataSet.FieldByName('DATA').AsString+
        DataSet.FieldByName('HORA').AsString+
        DataSet.FieldByName('SERIE').AsString+
        DataSet.FieldByName('PDV').AsString+
        DataSet.FieldByName('TIPOECF').AsString+
        DataSet.FieldByName('MARCAECF').AsString+
        DataSet.FieldByName('MODELOECF').AsString+
        DataSet.FieldByName('VERSAOSB').AsString+
        DataSet.FieldByName('DATASB').AsString+
        DataSet.FieldByName('HORASB').AsString+
        DataSet.FieldByName('CUPOMI').AsString+
        DataSet.FieldByName('CUPOMF').AsString+
        DataSet.FieldByName('CONTADORZ').AsString+
        DataSet.FieldByName('TOTALI').AsString+
        DataSet.FieldByName('TOTALF').AsString+
        DataSet.FieldByName('ALIQUOTA01').AsString+
        DataSet.FieldByName('ALIQUOTA02').AsString+
        DataSet.FieldByName('ALIQUOTA03').AsString+
        DataSet.FieldByName('ALIQUOTA04').AsString+
        DataSet.FieldByName('ALIQUOTA05').AsString+
        DataSet.FieldByName('ALIQUOTA06').AsString+
        DataSet.FieldByName('ALIQUOTA07').AsString+
        DataSet.FieldByName('ALIQUOTA08').AsString+
        DataSet.FieldByName('ALIQUOTA09').AsString+
        DataSet.FieldByName('ALIQUOTA10').AsString+
        DataSet.FieldByName('ALIQUOTA11').AsString+
        DataSet.FieldByName('ALIQUOTA12').AsString+
        DataSet.FieldByName('ALIQUOTA13').AsString+
        DataSet.FieldByName('ALIQUOTA14').AsString+
        DataSet.FieldByName('ALIQUOTA15').AsString+
        DataSet.FieldByName('ALIQUOTA16').AsString+
        DataSet.FieldByName('ALIQUOTA17').AsString+
        DataSet.FieldByName('ALIQUOTA18').AsString+
        DataSet.FieldByName('ALIQUOTA19').AsString+
        DataSet.FieldByName('ALIQU01').AsString+
        DataSet.FieldByName('ALIQU02').AsString+
        DataSet.FieldByName('ALIQU03').AsString+
        DataSet.FieldByName('ALIQU04').AsString+
        DataSet.FieldByName('ALIQU05').AsString+
        DataSet.FieldByName('ALIQU06').AsString+
        DataSet.FieldByName('ALIQU07').AsString+
        DataSet.FieldByName('ALIQU08').AsString+
        DataSet.FieldByName('ALIQU09').AsString+
        DataSet.FieldByName('ALIQU10').AsString+
        DataSet.FieldByName('ALIQU11').AsString+
        DataSet.FieldByName('ALIQU12').AsString+
        DataSet.FieldByName('ALIQU13').AsString+
        DataSet.FieldByName('ALIQU14').AsString+
        DataSet.FieldByName('ALIQU15').AsString+
        DataSet.FieldByName('ALIQU16').AsString+
        DataSet.FieldByName('CANCELAMEN').AsString+
        DataSet.FieldByName('DESCONTOS').AsString+
        DataSet.FieldByName('ISSQN').AsString+
        DataSet.FieldByName('SMALL').AsString+
        DataSet.FieldByName('STATUS').AsString+
        DataSet.FieldByName('ESTOQUE').AsString;
      //
      //
    end;
    //
    if pNome = 'ORCAMENT' then
    begin
      sAntigo :=
        VarToStr(DataSet.FieldByName('CODIGO').OldValue)+
        VarToStr(DataSet.FieldByName('DESCRICAO').OldValue)+
        VarToStr(DataSet.FieldByName('QUANTIDADE').OldValue)+
        VarToStr(DataSet.FieldByName('UNITARIO').OldValue)+
        VarToStr(DataSet.FieldByName('TOTAL').OldValue)+
        VarToStr(DataSet.FieldByName('DATA').OldValue)+
        VarToStr(DataSet.FieldByName('TIPO').OldValue)+
        VarToStr(DataSet.FieldByName('PEDIDO').OldValue)+
        VarToStr(DataSet.FieldByName('CLIFOR').OldValue)+
        VarToStr(DataSet.FieldByName('VENDEDOR').OldValue)+
        VarToStr(DataSet.FieldByName('CAIXA').OldValue)+
        VarToStr(DataSet.FieldByName('MEDIDA').OldValue)+
        VarToStr(DataSet.FieldByName('ITEM').OldValue)+
        VarToStr(DataSet.FieldByName('VALORICM').OldValue)+
        VarToStr(DataSet.FieldByName('ALIQUICM').OldValue)+
        VarToStr(DataSet.FieldByName('NUMERONF').OldValue)+
        VarToStr(DataSet.FieldByName('COO').OldValue)
        ;

      s :=
        DataSet.FieldByName('CODIGO').AsString+
        DataSet.FieldByName('DESCRICAO').AsString+
        DataSet.FieldByName('QUANTIDADE').AsString+
        DataSet.FieldByName('UNITARIO').AsString+
        DataSet.FieldByName('TOTAL').AsString+
        DataSet.FieldByName('DATA').AsString+
        DataSet.FieldByName('TIPO').AsString+
        DataSet.FieldByName('PEDIDO').AsString+
        DataSet.FieldByName('CLIFOR').AsString+
        DataSet.FieldByName('VENDEDOR').AsString+
        DataSet.FieldByName('CAIXA').AsString+
        DataSet.FieldByName('MEDIDA').AsString+
        DataSet.FieldByName('ITEM').AsString+
        DataSet.FieldByName('VALORICM').AsString+
        DataSet.FieldByName('ALIQUICM').AsString+
        DataSet.FieldByName('NUMERONF').AsString+
        DataSet.FieldByName('COO').AsString;
      //

    end;
    //
    if pNome = 'PAGAMENT' then
    begin
      sAntigo :=
        VarToStr(DataSet.FieldByName('DATA').OldValue)+
        VarToStr(DataSet.FieldByName('PEDIDO').OldValue)+
        VarToStr(DataSet.FieldByName('COO').OldValue)+
        VarToStr(DataSet.FieldByName('CCF').OldValue)+
        VarToStr(DataSet.FieldByName('CAIXA').OldValue)+
        VarToStr(DataSet.FieldByName('CLIFOR').OldValue)+
        VarToStr(DataSet.FieldByName('VENDEDOR').OldValue)+
        VarToStr(DataSet.FieldByName('FORMA').OldValue)+
        VarToStr(DataSet.FieldByName('VALOR').OldValue)+
        VarToStr(DataSet.FieldByName('GRG').OldValue)+
        VarToStr(DataSet.FieldByName('CDC').OldValue)+
        VarToStr(DataSet.FieldByName('GNF').OldValue)
        ;

      s :=
        DataSet.FieldByName('DATA').AsString+
        DataSet.FieldByName('PEDIDO').AsString+
        DataSet.FieldByName('COO').AsString+
        DataSet.FieldByName('CCF').AsString+
        DataSet.FieldByName('CAIXA').AsString+
        DataSet.FieldByName('CLIFOR').AsString+
        DataSet.FieldByName('VENDEDOR').AsString+
        DataSet.FieldByName('FORMA').AsString+
        DataSet.FieldByName('VALOR').AsString+
        DataSet.FieldByName('GRG').AsString+
        DataSet.FieldByName('CDC').AsString+
        DataSet.FieldByName('GNF').AsString;
      //
    end;
    //
    if pNome = 'DEMAIS' then
    begin
      //
      s :=
        DataSet.FieldByName('DATA').AsString+
        DataSet.FieldByName('HORA').AsString+
        DataSet.FieldByName('ECF').AsString+
        DataSet.FieldByName('DENOMINACAO').AsString+
        DataSet.FieldByName('COO').AsString+
        DataSet.FieldByName('GNF').AsString+
        DataSet.FieldByName('CDC').AsString+
        DataSet.FieldByName('GRG').AsString;
      //
    end;
    //

    if pNome = 'ECFS' then
    begin
      //
      s := DataSet.FieldByName('SERIE').AsString;
      //
    end;

    if pNome = 'NFCE' then
    begin
      //
      sAntigo := VarToStr(DataSet.FieldByName('NFEID').OldValue);
      //
      s := DataSet.FieldByName('NFEID').AsString;
      //
    end;

    //
    //
    Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Minha chave secreta
    //
    if (pNome = 'ALTERACA') or (pNome = 'ESTOQUE') then 
    begin
      sAntigoENCRYPTHASH        := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sAntigo)));
      sAntigoSemCestENCRYPTHASH := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sAntigoSemCest)));
      //ShowMessage('Teste 01 9450 ' + #13 +
      //            'hash antigo ' + sAntigoENCRYPTHASH + #13 +
      //            'hash antigo sem cest ' + sAntigoSemCestENCRYPTHASH + #13 +
      //            'hash banco ' + DataSet.FieldByName('ENCRYPTHASH').AsString);
    end;


    if bAssina then
    begin
      // Assina registro
      //
      if pNome = 'ESTOQUE' then
      begin
//        SmallMsg(DataSet.FieldByName('ENCRYPTHASH').AsString +chr(10)+ Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sAntigo))));
        // compatibilizar os hashs que estão no registros e foram gerados pelo PAF anterior, para assinar novamente após alteração feita pelo PAF
        if (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sAntigoSemCest)))) or (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sAntigo)))) or (DataSet.FieldByName('ENCRYPTHASH').isNull) or (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.sPasta)))) then // Se o registro já foi violado não assina mais fica asssim pra sempre
        begin
          DataSet.FieldByName('ENCRYPTHASH').AsString := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(s))); // Encrypta e grava o hash do registro
        end;
      end else
      begin
        if (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sAntigo)))) or (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.sPasta)))) or (DataSet.FieldByName('ENCRYPTHASH').isNull) then // Se o registro já foi violado não assina mais fica asssim pra sempre // Sandro Silva 2018-05-25
        begin
          DataSet.FieldByName('ENCRYPTHASH').AsString := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(s))); // Encrypta e grava o hash do registro
        end;
      end;
      //
    end else
    begin
      if (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(s)))) or (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.sPasta)))) then  // Encrypta e compara o hash do registro
      begin
        Result := True;
      end else
      begin
        Result := False;
      end;

      // compatibilizar os hashs que estão no registros e foram gerados pelo PAF anterior. Para os registros ainda não alterados pelo paf novo que ainda estão assinados pelo PAF antigo
      if (pNome = 'ESTOQUE') and (Result = False) then
      begin
        // Se resultou False deve validar hash com a assinatura da Versão anterior. Pode ser que o registro ainda não foi alterado após atualizar para nova versão homologada sem campo CEST
        if (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sSemCest)))) or (DataSet.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.sPasta)))) then
        begin
          Result := True;
        end else
        begin
          Result := False;
        end;
      end;
    end;
  except SmallMsg('Erro ao criptografar head do registro do arquivo '+pNome) end;
  //
end;
///////////////////////////////////

function LeArquivoPorFileStream(sArquivo: String): String;
// Sandro Silva 2020-09-03
// Lê o conteúdo do arquivo através de Stream
var
  FileStream: TFileStream;
  MyString: String;
begin
  Result := '';
  FileStream := TFileStream.Create(PAnsiChar(sArquivo), fmOpenRead or fmShareDenyNone); // Abre o arquivo para leitura
  try
    if FileStream.Size = 0 then
      Exit;
    SetLength(MyString, FileStream.Size);
    FileStream.ReadBuffer(MyString[1], FileStream.Size);
    Result := MyString;
  except

  end;
  FreeAndNil(FileStream);
end;

procedure GravaArquivoPorFileStream(sArquivo: String; sAssinatura: String);
// Sandro Silva 2020-09-03
// Grava o conteúdo do arquivo através de Stream
var
  MyString: String;
  FileStream: TFileStream;
begin
  MyString   := LeArquivoPorFileStream(sArquivo) + sAssinatura;
  FileStream := TFileStream.Create(PAnsiChar(sArquivo), fmCreate or fmOpenWrite or fmShareDenyNone); // Abre o arquivo para leitura e gravação
  try
    FileStream.WriteBuffer(MyString[1], Length(MyString));
  except
  end;
  FreeAndNil(FileStream);
end;

function AssinaturaDigital(sP1:String): String;
var
  sEAD, sChavePublica, sChavePrivada, sAtualX, sArquivo1 : String;
  FileSign: TextFile;
begin
  //
  sArquivo1 := Form1.sPastaDoexecutavel+'\DOWNLOAD.TXT';
  //
  Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
  try
    //
    {Sandro Silva 2022-09-23 inicio
    sChavePublica := 'DF9F4DC6AF517A889BCE1181DEF8394455DBCD19768E8C785D9121E8DB9B9B104E5231EE8F8299D24451465178D3FC41D40DAFAF9C855824393FC964C747'+
                     '5C3993104443E8E73333D93C24E5D46B27D9A4DF5E6F0B05490B6C6829CEFA1030294DABC29E498A0F6096E8CE26B407B2E1B4939FDE6174EC1621BB3E988D29742D';
    }
    sChavePublica := CHAVE_PUBLICA;
    {Sandro Silva 2022-09-23 fim}
    sChavePrivada := Form1.sPasta;
    //
    GetDir(0,sAtualx);
    //
    if Pos('\',sP1) = 0 then
      sP1 := sAtualx + '\' + sP1;
    //
    with Form1 do
    begin
      //
      if FileExists(sP1) then
      begin
        //
        sEAD := Replicate(' ',256);
        //
        if pos('.TXT',UpperCAse(sP1)) <> 0 then
        begin
          generateEAD(sP1, sChavePublica, sChavePrivada, sEAD, 1);
        end else
        begin
          //
          //
          if Form7.sMfd = 'MFCOMPLETA' then
          begin
            sArquivo1 := Form1.sPastaDoexecutavel+'\DOWNLOADMF.TXT';
          end else
          begin
            sArquivo1 := Form1.sPastaDoexecutavel+'\DOWNLOADMFD.TXT';
          end;

          if (Form7.sMfd = 'MFPERIODO') then
            sArquivo1 := Form1.sPastaDoexecutavel+'\DOWNLOADMF.TXT';

          //
          generateEAD(sP1, sChavePublica, sChavePrivada, sEAD, 0);
          Sleep(1000);// Aguardar append Sandro Silva 2020-09-02          

          // Faz uma cópia do arquivo gerado e adiciona a assinatura EAD
          CopyFile(PAnsiChar(sP1), PAnsiChar(sArquivo1), False);
          Sleep(1000); // Sandro Silva 2017-07-31 Tempo para salvar em disco;

          sEAD := 'EAD' + sEAD; // 2015-09-30
          //
          if (Form1.sModeloECF = '15') and ((Form7.sMfd = 'MFPERIODO') or (Form7.sMfd = 'MFDPERIODO')) then
          begin
            // Suporte Epson - Pedro orientou que nenhum ECF EPSON gera binários por período
          end
          else
          begin

            {Sandro Silva 2019-09-04  ER 02.06 UnoChapeco inicio
            // Fernando-Unochapeco orientou que deve ser gerado uma cópia do arquivo com a assinatura no final
            //Sandro Silva 2016-02-29 inicio
            if (Form7.sMfd = 'MFCOMPLETA') or (Form7.sMfd = 'MFDCOMPLETA') or (Form7.sMfd = 'MFPERIODO') or (Form7.sMfd = 'MFDPERIODO') then
            begin
              with TStringList.Create do
              begin
                Text := '';
                SaveToFile(pChar(sArquivo1));
                Free;
              end;
            end;
            //Sandro Silva 2016-02-29 final
            {Sandro Silva 2019-09-04 ER 02.06 UnoChapeco fim}

          end;

          if Form1.sModeloECF = '17' then
          begin
            // Usando AssignFile estava ocorrendo de os últimos caracteres serem substituídos pela assinatura, quando deveria acrescentar a assinatura após esses caracteres
            GravaArquivoPorFileStream(sArquivo1, sEAD);
          end
          else
          begin
            AssignFile(FileSign, PAnsiChar(sArquivo1));
            Append(FileSign);
            Writeln(FileSign, sEAD);
            CloseFile(FileSign);                            // Fecha o arquivo
          end;

          Sleep(1000); // Sandro Silva 2017-07-31 Tempo para salvar em disco;
          Application.BringToFront;
          Application.ProcessMessages;
          if bOcultarMensagemArquivoAssinado = False then // Sandro Silva 2017-07-27
            SmallMsg('O arquivo: '+sArquivo1+' foi gravado na pasta: '+extractFilePath(sP1));
          //
        end;
        //
        if Pos('LISTA.TXT',sP1) <> 0 then
        begin
          Form22.Label6.Caption := 'O arquivo: LISTA.TXT foi gravado na pasta: '+extractFilePath(sP1);
          Form22.Label6.Repaint;
          ExibirCaminhoLista; // Na homologação ER 02.03 foi exigido que exibisse por mais tempo para poder ler o local
//          Sleep(3000);
        end else
        begin
          Application.BringToFront;
          if bOcultarMensagemArquivoAssinado = False then // Sandro Silva 2017-07-27
            SmallMsg('O arquivo: '+sP1+' foi gravado na pasta: '+extractFilePath(sP1));
        end;
        //
      end;
    end;
  except
    on E: Exception do
    begin
      SmallMsgBox(pChar(E.Message),'Atenção Erro:22',mb_Ok + MB_ICONWARNING);
      Abort;
    end;
  end;

  // Arquivo xml usado no eECFc.exe para validar os arquivos gerados e assinados
  with TStringList.Create do
  begin
    Add('Chave pública para validação da assinatura digital');
    Add('de que trata o Anexo VII do Ato Cotepe 06/08');
    ForceDirectories(PChar(Form1.sAtual + '\chave publica'));
    SaveToFile(PChar(Form1.sAtual + '\chave publica\Leia-me.txt'));
    Free;
  end;

  with TStringList.Create do
  begin
    Add('<?xml version="1.0"?>');
    Add('<empresa_desenvolvedora>');
    Add('  <nome>' + ConverteAcentos(Form1.sRazaoSocialSmallsoft) + '</nome>');
    Add('  <chave>');
    Add('    <modulo>' + sChavePublica + '</modulo>');
    Add('    <expoente_publico>03</expoente_publico>');  // Arquivos assinados com generateEAD() tem como expoente público 03
    Add('  </chave>');
    Add('</empresa_desenvolvedora>');
    ForceDirectories(PChar(Form1.sAtual + '\chave publica'));
    SaveToFile(PChar(Form1.sAtual + '\chave publica\' + ConverteAcentos(Form1.sRazaoSocialSmallsoft) + '.xml'));
    Free;
  end;
  //
  Screen.Cursor             := crdefault;    // Cursor de Aguardo
  //
  CHDir(Form1.sAtual);
  Form1.Display(Form1.sStatusECF,Form1.sF);
  //
end;

function Descarga(pP1: String): Boolean;
var
  I : Integer;
  sValores, sCampos : String;
  sParam: String;
  bGrava : Boolean;
  sRegistro: String;
  sAssinaturaRegistro: String;
  IBQASSINADESCARGA: TIBQuery;
  IBQDESCARGABLOCOX: TIBQuery;
begin
  LogFrente('Teste 01: Iniciando Descarga ' + pP1);

  {Sandro Silva 2021-02-23 inicio}
  try
    Audita('OFFLINE','FRENTE', '', 'Iniciando descarga: ' + pP1,0,0); // Ato, Modulo, Usuário, Histórico, Valor
  except
  end;
  {Sandro Silva 2021-02-23 fim}
  //
  Form1.ibDataSet99.Close;
  Form1.ibDataSet99.SelectSql.Clear;
  Form1.ibDataSet99.SelectSql.Add('select * from '+pP1+' ');
  Form1.ibDataSet99.Open;
  IBQASSINADESCARGA := CriaIBQuery(Form1.IBDataSet200.Transaction);
  IBQDESCARGABLOCOX := CriaIBQuery(Form1.IBDataSet200.Transaction); // TABELA BLOCOX tem campo BLOB
  //
  while not Form1.ibDataSet99.Eof do
  begin
    //
    sValores := '';
    sCampos  := '';
    sRegistro := ''; //2015-11-05
    sParam := '';

    if pP1 <> 'BLOCOX' then
    begin
      //
      if pP1 = 'ALTERACA' then
      begin
        //
        if AllTrim(Form1.ibDAtaSet99.FieldByName('TIPODAV').AsString) = 'OS' then
        begin
          Form1.IBDataSet200.Close;
          Form1.IBDataSet200.SelectSQL.Clear;
          Form1.IBDataSet200.SelectSQL.Add('update OS set NF='+QuotedStr(FormataNumeroDoCupom(Form1.ibDAtaSet99.FieldByName('PEDIDO').AsInteger)+'I')+' where '+QuotedStr(Form1.ibDAtaSet99.FieldByName('DAV').AsString)+'=NUMERO'); // Sandro Silva 2021-12-01 Form1.IBDataSet200.SelectSQL.Add('update OS set NF='+QuotedStr(StrZero(Form1.ibDAtaSet99.FieldByName('PEDIDO').AsFloat,6,0)+'I')+' where '+QuotedStr(Form1.ibDAtaSet99.FieldByName('DAV').AsString)+'=NUMERO');
          Form1.IBDataSet200.Open;
        end;
      end;
      //
      for I := 0 to Form1.ibDataSet99.FieldCount -1 do
      begin
        //
        bGrava := True;
        //
        if (Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.FieldDefs[I].Name).DataType = ftDate) then
        begin
          if DateToStrInvertida(Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.Fields[I].FieldName).AsDateTime) = '1899/12/30' then
          begin
            bGrava := False;
          end;
        end;
        //
        if Copy(Form1.ibDataSet99.FieldByName('REGISTRO').asString,1,1) = '9' then // Registro iniciando com "9" indica que foi importado do arquivo .off correspondente quando pdv ficou offline, já existe no banco online
          bGrava := False;

        if (pP1 = 'REDUCOES') and (Copy(Form1.IBDataSet99.FieldByName('REGISTRO').AsString, 1, 2) = '90') then
          bGrava := True; // Reduções do offline tem início com 9 sempre

        //
        if bGrava then
        begin
          //
          sCampos := sCampos + Form1.ibDataSet99.Fields[I].FieldName;
          if Form1.ibDataSet99.Fields[I].FieldName <> 'REGISTRO' then
          begin
            if Form1.ibDataSet99.Fields[I].FieldName <> 'TIPO' then
            begin
              if (Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.FieldDefs[I].Name).DataType = ftString)  then
                sValores := sValores + QuotedStr(Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.Fields[I].FieldName).AsString)
              else if (Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.FieldDefs[I].Name).DataType = ftDate)    then
                sValores := sValores + QuotedStr(DateToStrInvertida(Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.Fields[I].FieldName).AsDateTime))
              else if (Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.FieldDefs[I].Name).DataType = ftFloat)   then
                sValores := sValores + StrTran(StrZero(Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.Fields[I].FieldName).AsFloat,12,2),',','.')
              else
                sValores := sValores + QuotedStr('0');
            end else
            begin
              if Form1.ibDataSet99.Fields[I].AsString = 'CANCEL' then
              begin
                sValores := sValores + QuotedStr('CANCEL');
              end else
              begin
                sValores := sValores + QuotedStr('LOKED');
              end;
            end;
          end else
          begin
            //
            try
               Form1.ibDataSet200.Close;
               Form1.ibDataSet200.SelectSql.Clear;
               Form1.ibDataset200.SelectSql.Add('select gen_id(G_'+pP1+',1) from rdb$database');
               Form1.ibDataset200.Open;
               sValores  := sValores + QuotedStr(StrZero(StrToInt(Form1.ibDataSet200.FieldByName('GEN_ID').AsString),10,0));
               sRegistro := StrZero(StrToInt(Form1.ibDataSet200.FieldByName('GEN_ID').AsString),10,0); //2015-11-05
            except
               sValores := sValores + '9999999999';
            end;
          end;
          //
          if I <> Form1.ibDataSet99.FieldCount -1 then
          begin
            sCampos := sCampos + ',';
            sValores := sValores + ',';
          end;
        end;
      end;
      //
      if sCampos <> '' then
      begin
        try
          //
          // Não deve baixar estoque quando esta off line mas não deve gravar sincronia TIPO=LOKED;
          // desta forma baixa quando entra no estoque.
          //
          Form1.IBDataSet200.Close;
          Form1.IBDataSet200.SelectSQL.Clear;
          Form1.IBDataSet200.SelectSQL.Add('insert into '+pP1+' ('+sCampos+') values ('+sValores+')');
          //
          // SmallMsg(Form1.ibDataSet200.Transaction.DefaultDatabase.DatabaseName);
          //
          Form1.IBDataSet200.Open;
          //
          if (pP1 = 'ALTERACA') or (pP1 = 'PAGAMENT') or (pP1 = 'REDUCOES') or (pP1 = 'DEMAIS') then
          begin

            try
              // Assinas registros importados
              Form1.IBDataSet200.Close;
              Form1.IBDataSet200.ModifySQL.Text := '';
              if (pP1 = 'ALTERACA') then
              begin
                Form1.IBDataSet200.ModifySQL.Text := Form1.ibDataSet27.ModifySQL.Text;
              end;

              if (pP1 = 'PAGAMENT') then
              begin
                Form1.IBDataSet200.ModifySQL.Text := Form1.ibDataSet28.ModifySQL.Text;
              end;

              if (pP1 = 'REDUCOES') then
              begin
                Form1.IBDataSet200.ModifySQL.Text := Form1.ibDataSet88.ModifySQL.Text;
              end;

              if (pP1 = 'DEMAIS') then
              begin
                Form1.IBDataSet200.ModifySQL.Text := Form1.ibDataSet38.ModifySQL.Text;
              end;

              Form1.IBDataSet200.SelectSQL.Text :=
                'select * ' +
                'from ' + pP1 +
                ' where REGISTRO = ' + QuotedStr(sRegistro);
              Form1.IBDataSet200.Open;

              LogFrente('Teste 01: Antes ENCRYPTHASH ' + sRegistro + ' ' + Form1.IBDataSet200.FieldByName('ENCRYPTHASH').AsString);

              Form1.IBDataSet200.Edit;
              AssinaRegistro(pP1, Form1.IBDataSet200, True);
              sAssinaturaRegistro := Form1.IBDataSet200.FieldByName('ENCRYPTHASH').AsString;
              Form1.IBDataSet200.Cancel;

              Form1.IBDataSet200.ModifySQL.Text := '';

              //if (pP1 = 'REDUCOES') then
              if (pP1 = 'ALTERACA') or (pP1 = 'PAGAMENT') or (pP1 = 'REDUCOES') or (pP1 = 'DEMAIS') then
              begin
                Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Minha chave secreta
                sAssinaturaRegistro := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.sPasta)));
              end;

              IBQASSINADESCARGA.Close;
              IBQASSINADESCARGA.SQL.Text :=
                'update ' + pP1 + ' set ' +
                ' ENCRYPTHASH = ' + QuotedStr(sAssinaturaRegistro) +
                ' where REGISTRO = ' + QuotedStr(sRegistro);
              IBQASSINADESCARGA.ExecSQL;
              LogFrente('Teste 01: Depois ENCRYPTHASH ' + sAssinaturaRegistro);

              LogFrente('Teste 01: Atualizou ENCRYPTHASH ' + pP1 + ' ' + sRegistro);


            except
              LogFrente('Teste 01: Erro atualizar ENCRYPTHASH ' + pP1 + ' ' + sRegistro);
            end;

          end;

          if (pP1 = 'ALTERACA') or (pP1 = 'PAGAMENT') or (pP1 = 'REDUCOES') or (pP1 = 'DEMAIS') then
          begin
            //LogFrente('Teste 01: Atualizando Hash ' + pP1 + ' voltou online');
            // Para cada registro inserido em REDUCOES deve assinar a tabela
            try
              Form1.ibDataSet200.Close;
              Form1.ibDataSet200.SelectSql.Clear;
              Form1.ibDataset200.SelectSql.Add('select gen_id(G_HASH_' + pP1 + ', 1) from rdb$database');
              Form1.ibDataset200.Open;
              HasHs(pP1, True);
            except

            end;
          end;

        except
          //
          // SmallMsg('Eror no comando: '+Form1.IBDataSet200.SelectSQL.Text);
          //
          on E: Exception do
          begin
            LogFrente('Teste 01: Erro Descarga ' + pP1 + ' ' + E.Message);
          end;
        end;
      end;
      //
    end
    else
    begin // Tabela BLOCOX tem campo blob que não pode ser inserido como texto normal

      IBQDESCARGABLOCOX.Close;
      IBQDESCARGABLOCOX.SQL.Text :=
        'select REGISTRO ' +
        'from BLOCOX ' +
        'where TIPO = ' + QuotedStr(Form1.ibDataSet99.FieldByName('TIPO').AsString);

      if Form1.ibDataSet99.FieldByName('TIPO').AsString = 'ESTOQUE' then
        IBQDESCARGABLOCOX.SQL.Add(' and DATAREFERENCIA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', Form1.ibDataSet99.FieldByName('DATAREFERENCIA').AsDateTime)));

      if Form1.ibDataSet99.FieldByName('TIPO').AsString = 'REDUCAO' then
        IBQDESCARGABLOCOX.SQL.Add(' and SERIE = ' + QuotedStr(Copy(Form1.sNumeroDeSerieDaImpressora, 1, 20)) +
                                  ' and DATAHORA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd HH:nn:ss', Form1.ibDataSet99.FieldByName('DATAHORA').AsDateTime))
                                  );

      IBQDESCARGABLOCOX.Open;

      if IBQDESCARGABLOCOX.FieldByName('REGISTRO').AsString = '' then
      begin

        for I := 0 to Form1.ibDataSet99.FieldCount -1 do
        begin
          //
          bGrava := True;
          //
          //
          if bGrava then
          begin
            //
            sCampos := sCampos + Form1.ibDataSet99.Fields[I].FieldName;
            sParam  := sParam + ':' + Form1.ibDataSet99.Fields[I].FieldName;
            //
            if I <> Form1.ibDataSet99.FieldCount -1 then
            begin
              sCampos  := sCampos + ',';
              sParam   := sParam + ',';
            end;
          end;
        end;

        if sCampos <> '' then
        begin
          IBQDESCARGABLOCOX.Close;
          IBQDESCARGABLOCOX.SQL.Text := 'insert into '+pP1+' ('+sCampos+') values ('+sParam+')';
          for I := 0 to Form1.ibDataSet99.FieldCount -1 do
          begin
            if AnsiUpperCase(Form1.ibDataSet99.Fields[I].FieldName) = 'REGISTRO' then
            begin
              //
              try
                 Form1.ibDataSet200.Close;
                 Form1.ibDataSet200.SelectSql.Clear;
                 Form1.ibDataset200.SelectSql.Add('select gen_id(G_'+pP1+',1) from rdb$database');
                 Form1.ibDataset200.Open;
                 sRegistro := StrZero(StrToInt(Form1.ibDataSet200.FieldByName('GEN_ID').AsString),10,0); //2015-11-05
                 IBQDESCARGABLOCOX.ParamByName(Form1.ibDataSet99.Fields[I].FieldName).AsString := sRegistro;
              except
              end;

            end
            else
              IBQDESCARGABLOCOX.ParamByName(Form1.ibDataSet99.Fields[I].FieldName).Value := Form1.ibDataSet99.FieldByName(Form1.ibDataSet99.Fields[I].FieldName).Value;
          end;
          try
            IBQDESCARGABLOCOX.ExecSQL;
            //SmallMsg('Teste 01 Salvou ' + #13 + #13 +IBQDESCARGABLOCOX.SQL.Text + #13 + #13 + Form1.ibDataSet99.FieldByName('TIPO').AsString);

          except
            on E: Exception do
            begin
              //SmallMsg('Teste 01 ' + #13 + #13 +IBQDESCARGABLOCOX.SQL.Text + #13 + #13 + E.Message);
            end;
          end;
        end;
      end; // if IBQDESCARGABLOCOX.FieldByName().AsString = '' then
      //
    end; // if pP1 <> 'BLOCOX' then
    Form1.IBDataSet99.Next;
    //
  end;

  if pP1 = 'REDUCOES' then
    Form1.ExcluiRZDuplicada(Form1.ibDataSet200.Transaction); //2015-11-04 exclui as reduções duplicadas pela carga do offline

  if pP1 = 'DEMAIS' then
    Form1.ExcluiDemaisDuplicado(Form1.ibDataSet200.Transaction); //2015-11-04 exclui as reduções duplicadas pela carga do offline

  {Sandro Silva 2021-02-23 inicio}
  try
    Audita('OFFLINE','FRENTE', '', 'Finalizando descarga: ' + pP1 + ' Registros: ' + IntToStr(Form1.ibDataSet99.RecordCount),0,0); // Ato, Modulo, Usuário, Histórico, Valor
  except
  end;
  {Sandro Silva 2021-02-23 fim}                                                

  //
  Form1.ibDataSet88.Close;
  Form1.ibDataSet99.Close;
  Form1.ibDataSet200.Close;
  //
  Result := True;

  FreeAndNil(IBQASSINADESCARGA);
  FreeAndNil(IBQDESCARGABLOCOX);
  //
  LogFrente('Teste 01: Final Descarga ' + pP1);
end;


function Carga(pP1: String): Boolean;
var
  I : Integer;
  sValores, sCampos : String;
begin
  //
  Form22.Label6.Caption     := 'Aguarde a CARGA do '+pP1; Form22.Label6.Repaint;
  //
  Form1.ibDataset99.DisableControls;
  //
  Form1.ibDataset200.Close;
  Form1.ibDataset200.SelectSql.Clear;
  Form1.ibDataset200.SelectSql.Add('select * from '+pP1+' ');
  Form1.ibDataset200.Open;
  Form1.ibDataset200.DisableControls;
  //
  while not Form1.ibDataset200.Eof do
  begin
    //
    sValores := '';
    sCampos  := '';
    //
    for I := 0 to Form1.ibDataset200.FieldCount -1 do
    begin
      //
      sCampos := sCampos + Form1.ibDataset200.Fields[I].FieldName;
      if (Form1.ibDataset200.FieldByName(Form1.ibDataset200.FieldDefs[I].Name).DataType = ftString)  then sValores := sValores + QuotedStr(Form1.ibDataset200.FieldByName(Form1.ibDataset200.Fields[I].FieldName).AsString) else
        if (Form1.ibDataset200.FieldByName(Form1.ibDataset200.FieldDefs[I].Name).DataType = ftDate)    then sValores := sValores + QuotedStr(DateToStrInvertida(Form1.ibDataset200.FieldByName(Form1.ibDataset200.Fields[I].FieldName).AsDateTime)) else
          if (Form1.ibDataset200.FieldByName(Form1.ibDataset200.FieldDefs[I].Name).DataType = ftFloat)   then sValores := sValores + StrTran(StrZero(Form1.ibDataset200.FieldByName(Form1.ibDataset200.Fields[I].FieldName).AsFloat,12,2),',','.')
             else sValores := sValores + QuotedStr('0');
      if I <> Form1.ibDataset200.FieldCount -1 then
      begin
        sCampos  := sCampos + ',';
        sValores := sValores + ',';
      end;
      //
    end;
    //
    try
      //
      Form1.IBDataset99.Close;
      Form1.IBDataset99.SelectSQL.Clear;
      Form1.IBDataset99.SelectSQL.Add('insert into '+pP1+' ('+sCampos+') values ('+sValores+')');
      Form1.IBDataset99.Open;
      //
    except
      SmallMsg('Eror no comando: '+Form1.IBDataset99.SelectSQL.Text);
    end;
    //
    Form1.IBDataset200.Next;
    //
  end;
  //
  Result := True;
  //
  // Precisa habilitar sempre que desabilitar. Ronei teve problemas no Small onde desabilitava dentro de loop e habilitava apenas uma vez
  Form1.ibDataset99.EnableControls;// Sandro Silva 2020-11-06
  Form1.ibDataset200.EnableControls;
end;

function ValidaOffLine(Mais1Ini: TIniFile; bCargaNova: Boolean;
  url, IP, Alias: String; Hora, Min, Seg, cent: Word;
  tInicio: tTime): Boolean;
var
  F: TextFile;
  i: Integer;
begin
  try
    //
    // por segurança sempre vai fazer a carga
    //
    //Screen.Cursor := crHourGlass;    // Cursor de Aguardo
    //tInicio := time;
    //
    // Extrai o caminho do executável
    Form1.sPastaDoExecutavel := StrTran(AnsiLowerCase(Application.ExeName),'\frente.exe','');
    Form1.sPastaDoExecutavel := StrTran(Form1.sPastaDoExecutavel,'\nfce.exe','');
    Form1.sPastaDoExecutavel := StrTran(Form1.sPastaDoExecutavel,'\' + ExtractFileName(Application.ExeName), '');

    if PAFNFCe then // Sandro Silva 2020-12-09 if Pos('pafnfce.exe', AnsiLowerCase(ExtractFileName(Application.ExeName))) > 0 then
      Form1.sPastaDoExecutavel := ExtractFileDir(Application.ExeName);

    if Pos('pafdief.exe', AnsiLowerCase(ExtractFileName(Application.ExeName))) > 0 then
      Form1.sPastaDoExecutavel := ExtractFileDir(Application.ExeName);

    bCargaNova := False;
    //
    if Alltrim(Form1.sPastaDoExecutavel) = '' then
      Form1.sPastaDoExecutavel := '\desenvolvimento\fontes\delphi\' + Copy(Build, 1, 4) + '\Projeto-Frente-de-Caixa'; // Quando executa pelo delphi
    //
    GetDir(0,Form1.sAtual);
    //
    //
    if FileExists(Form1.sAtualOnLine+'\small.ini') and not FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
    begin

      // Está online
      //
      // ONLINE
      //

      //
      //
      Form1.bStatusRede := True; // Liga o botão rede no Abrearquivos
      StatusRede(True,90);
      //
      ChDir(Form1.sAtualOnLine);
      //
      //
      if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
      begin

        if Form1.sAtualOnLine <> Form1.sPastadoExecutavel then
        begin
          //
          if FileExists(Form1.sAtualOnLine+'\off13.fdb') then
          begin
            Form22.Label6.Caption     := 'Aguarde... Copiando base off13.fdb';
            Form22.Label6.Repaint;
            // Atualiza o off13.fdb na estação
            CopyFile(pchar(Form1.sAtualOnLine+'\off13.fdb'),pchar(Form1.sPastadoExecutavel+'\off13.fdb'),True);
            //Sleep(7000); // Sandro Silva 2019-08-22 Aguardar até copiar o off13.fdb para a estação
          end;
          //
        end;

      end; //       if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') then

      //
      Mais1Ini := TIniFile.Create(Form1.sAtual+'\small.ini');
      Url      := Mais1Ini.ReadString('Firebird','Server url','');
      IP       := AllTrim(Mais1Ini.ReadString('Firebird','Server IP',''));
      Alias    := AllTrim(Mais1Ini.ReadString('Firebird','Alias',''));

      LogFrente('Teste 01: IP ' + Form1.sAtual+'\small.ini' + ' ' + ip);

      //
      if IP = '' then
        IP := GetIp;

      LogFrente('Teste 01: depois getip ' + ' ' + ip);

      //
      if IP <> '' then
        Url := IP+':'+Url+'\small.fdb' // Sandro Silva 2019-03-15 Url := IP+':'+Url+'\small' + EXTENSAO_BANCO
      else
        Url:= Url+'\small.fdb'; // Sandro Silva 2019-03-15 Url:= Url+'\small' + EXTENSAO_BANCO;
      //
      if Alltrim(Alias) <> '' then
      begin
        Url := IP+':'+Alias;
      end;
      //
      Mais1Ini.Free;
      //
      Form22.Label6.Caption := Form1.sAtual;
      Form22.sIniciandoEm   := 'Iniciando em: '+Form1.sAtual;
      Form22.sUrlDoGdb      := 'Url do FDB:   '+AllTrim(Url);
      //
      try
        Form1.IBDatabase1.Close;
        Form1.IBDatabase1.Params.Clear;
        Form1.IbDatabase1.DatabaseName := Url;
        Form1.IBDatabase1.Params.Add('USER_NAME=SYSDBA');
        Form1.IBDatabase1.Params.Add('PASSWORD=masterkey');
        Form1.IBDatabase1.Open;
        Form1.IBTransaction1.Active := True;
        Form1.IBTransaction2.Active := True;
        //
      except
        on E: Exception do
        begin
          Screen.Cursor := crDefault;

          LogFrente('Teste 01: 9863 ' + E.Message);
          LogFrente('Teste 01: 9863 ' + Form1.IbDatabase1.DatabaseName);

          SmallMsg('Entre antes no programa "Small Commerce" para ajustar os arquivos.');
          Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
            Form1.ClienteSmallMobile.sLogRetornoMobile);
          Form1.DestroyWindowHandle;
          Application.Terminate;
          Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
          FecharAplicacao(ExtractFileName(Application.ExeName));
        end;
      end;
      //
      // O Nome da variável está invertido em relação a situação da rede. bOffline True significa que deve gravar os dados nos arquivos .off
      Form1.bOffLine         := True;  /// Marca True para gravar nos arquivos .off
      Form1.Label1.Caption   := 'On line';
      //
      // copiar sempre para .off
      // quando entra em off converter para dentro do offline.gdb quando nao existe ja o offline.gdb
      //

      //
      // estoque.off
      //

      //
      // Exportação manual seria legal se tivesse a possibilidade de exportar somente alguns campos
      //
      //SmallMsg('Teste gerar dados off' + #13 +
      //            'Pasta do executável: ' + Form1.sPastaDoExecutavel + #13 +
      //            'Pasta atual: ' + Form1.sAtual);
      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      begin
        if UpperCase(Form1.sPastadoExecutavel) <> UpperCase(Form1.sAtual) then
        begin
          //
          Form22.Label6.Caption := 'Aguarde exportando ESTOQUE.OFF para base off line';
          Form22.Label6.Repaint;
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\estoque.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\estoque.off'));
            Sleep(10);
          end;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from ESTOQUE');
          Form1.IBQuery1.Open;

          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\estoque.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          I := 0;
          while not Form1.ibQuery1.Eof do
          begin
            I := I + 1;
            try
              WriteLN(F,'insert into ESTOQUE (CODIGO, REFERENCIA, CST, DESCRICAO, MEDIDA, PRECO, QTD_ATUAL, REGISTRO, ST, CF, CEST, IIA, IIA_UF, IIA_MUNI) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('CODIGO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('REFERENCIA').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CST').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('DESCRICAO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('MEDIDA').AsString)+', '
              +QuotedStr(StrTran(Form1.ibQuery1.FieldByName('PRECO').AsString,',','.'))+', '
              +QuotedStr(StrTran(Form1.ibQuery1.FieldByName('QTD_ATUAL').AsString,',','.'))+', '
              +QuotedStr(StrZero(I,10,0))+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ST').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CF').AsString)+', '// Sandro Silva 2016-08-15
              +QuotedStr(Form1.ibQuery1.FieldByName('CEST').AsString)+', '// Sandro Silva 2016-08-15
              +'nullif(' + QuotedStr(StrTran(Form1.ibQuery1.FieldByName('IIA').AsString, ',', '.'))+', ''''), '
              +'nullif(' + QuotedStr(StrTran(Form1.ibQuery1.FieldByName('IIA_UF').AsString, ',', '.'))+', ''''), '
              +'nullif(' + QuotedStr(StrTran(Form1.ibQuery1.FieldByName('IIA_MUNI').AsString, ',', '.'))+', '''')'
              +' )');
            except
            end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          //
          CloseFile(F);

          //
          // icm.off
          //
          Form22.Label6.Caption := 'Aguarde exportando ICM.off para base off line';
          Form22.Label6.Repaint;
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\icm.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\icm.off'));
            Sleep(10);
          end;
          //
          Form1.IBExtract1.Items.Clear;
          Form1.IBExtract1.ExtractObject(eoData, 'ICM', [etIndex]);
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\icm.off'));
          Rewrite(F);
          WriteLN(F,Form1.IBExtract1.Items.Text);
          CloseFile(F);
          //
          // emitente.off
          //
          Form22.Label6.Caption := 'Aguarde exportando EMITENTE.off para base off line';
          Form22.Label6.Repaint;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from EMITENTE');
          Form1.IBQuery1.Open;
          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\emitente.off'));
          Rewrite(F);
          WriteLN(F,'insert into EMITENTE (ESTADO, CGC, IE, REGISTRO, NOME, ENDERECO, COMPLE, MUNICIPIO, CEP, CRT, CNAE, IM, ENCRYPTHASH, LICENCA) '
                                 +'values ('+QuotedStr(Form1.ibQuery1.FieldByName('ESTADO').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('CGC').AsString)+','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('IE').AsString)+','+QuotedStr('0000000000')+ ','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('NOME').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('ENDERECO').AsString)+','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('COMPLE').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('MUNICIPIO').AsString)+','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('CEP').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('CRT').AsString)+','             // Sandro Silva 2019-08-20
                                            +QuotedStr(Form1.ibQuery1.FieldByName('CNAE').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('IM').AsString)+','             // Sandro Silva 2019-08-20
                                            +QuotedStr(Form1.ibQuery1.FieldByName('ENCRYPTHASH').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('LICENCA').AsString)     // Sandro Silva 2019-08-20
                                            +')');
          CloseFile(F);

          Form1.ibQuery1.Close;
          //
          // vendedor.off
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\vendedor.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\vendedor.off'));
            Sleep(10);
          end;
          //
          Form1.IBExtract1.Items.Clear;
          Form1.IBExtract1.ExtractObject(eoData, 'VENDEDOR', [etIndex]);
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\vendedor.off'));
          Rewrite(F);
          WriteLN(F,Form1.IBExtract1.Items.Text);
          CloseFile(F);
          //
          // convenio.off
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\convenio.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\convenio.off'));
            Sleep(10);
          end;
          //
          Form1.IBExtract1.Items.Clear;
          Form1.IBExtract1.ExtractObject(eoData, 'CONVENIO', [etIndex]);
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\convenio.off'));
          Rewrite(F);
          WriteLN(F,Form1.IBExtract1.Items.Text);
          CloseFile(F);
          //
          // clifor.off
          //
          Form22.Label6.Caption := 'Aguarde exportando CLIFOR.off para base off line';
          Form22.Label6.Repaint;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from CLIFOR where coalesce(ATIVO,0) = 0 and trim(coalesce(NOME,'''')) <> '''' ');
          Form1.IBQuery1.Open;
          //

          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\clifor.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          I := 0;
          while not Form1.ibQuery1.Eof do
          begin
            I := I + 1;
            try
              WriteLN(F,'insert into CLIFOR (NOME, CGC, IE, CEP, CIDADE, COMPLE, ENDERE, ESTADO, REGISTRO) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('NOME').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CGC').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('IE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CEP').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CIDADE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('COMPLE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ENDERE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ESTADO').AsString)+', '
              +QuotedStr(StrZero(I,10,0))+' )');
            except end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          CloseFile(F);

          Form22.Label6.Caption := 'Aguarde exportando ECFS.off para base off line';
          Form22.Label6.Repaint;
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\ecfs.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\ecfs.off'));
            Sleep(10);
          end;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from ECFS');
          Form1.IBQuery1.Open;

          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\ecfs.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          while not Form1.ibQuery1.Eof do
          begin
            try
              WriteLN(F,'insert into ECFS (SERIE, ENCRYPTHASH) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('SERIE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ENCRYPTHASH').AsString)+' )');
            except end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          //
          CloseFile(F);

          //
          // IBPT
          //
          Form22.Label6.Caption := 'Aguarde exportando IBPT_.off para base off line';
          Form22.Label6.Repaint;

          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from IBPT_');
          Form1.IBQuery1.Open;
          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\IBPT_.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          I := 0;
          while not Form1.ibQuery1.Eof do
          begin
            I := I + 1;
            try
              WriteLN(F,'insert into IBPT_ (CODIGO, EX, TIPO, DESCRICAO, NACIONALFEDERAL, IMPORTADOFEDERAL, '
                                          +'ESTADUAL, MUNICIPAL, VIGENCIAINICIO, VIGENCIAFIM, CHAVE, VERSAO, '
                                          + 'FONTE, REGISTRO) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('CODIGO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('EX').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('TIPO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('DESCRICAO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('NACIONALFEDERAL').AsString)+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('IMPORTADOFEDERAL').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('ESTADUAL').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('MUNICIPAL').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('VIGENCIAINICIO').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('VIGENCIAFIM').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('CHAVE').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('VERSAO').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('FONTE').AsString,',','.'))+', '
              +QuotedStr(StrZero(I,10,0))+' )');
            except end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          //
          CloseFile(F);

          //
          // Falta fazer exportação manual exportar apenas alguns campos
          //
        end;
      end;// if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') then
      //
    end else
    begin

      // Ficou em offline Sandro Silva 2019-03-14

      //
      // OFFLINE
      //

      //
      Form1.bStatusRede     := False; // Apaga o botão rede no abrearquivos
      StatusRede(True,90);
      //
      //
      if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
      begin

        if FileExists(pchar(Form1.sPastadoExecutavel+'\estoque.off')) or FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
        begin

          //
          ChDir(Form1.sPastadoExecutavel);
          //
          if not FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
          begin
            //
            if FileExists(Form1.sPastadoExecutavel+'\off13.fdb') then
            begin

              Form22.Label6.Caption     := 'Aguarde... Copiando base off line.'+Form1.sPastadoExecutavel+'\off13.fdb' +' '+Form1.sPastadoExecutavel+'\offline.fdb';
              Form22.Label6.Repaint;
              GetDir(0,Form1.sAtual);
              // Cria o banco offline se ainda não existir. Deve informar no Copy() o parâmetro bFailExist = True para ñão sobrepor em casos de não realizar a descarga
              CopyFile(pchar(Form1.sPastadoExecutavel+'\off13.fdb'),pchar(Form1.sPastadoExecutavel+'\offline.fdb'),True);
              bCargaNova := True;

            end else
            begin
              //
              Screen.Cursor := crDefault;

              LogFrente('Teste 01: 10180');

              SmallMsg('Entre antes no programa "Small Commerce" para ajustar os arquivos......');
              Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
                Form1.ClienteSmallMobile.sLogRetornoMobile);
              Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE );
              FecharAplicacao(ExtractFileName(Application.ExeName));
            end;
          end;

          //
          if Alltrim(Form1.sPastaDoExecutavel) = '' then
          begin
            Form1.sPastaDoExecutavel := '\desenvolvimento\fontes\delphi\' + Copy(LimpaNumero(Form22.sBuild), 1, 4) + '\Projeto-Frente-de-Caixa'; // Quando executa pelo delphi
          end;

          //
          if FileExists(Form1.sPastaDoExecutavel+'\offline.fdb') then
          begin

            //
            Form1.sAtual := Form1.sPastaDoExecutavel;
            CHDir(Form1.sAtual);
            Url := GetIp+':'+Form1.sAtual;
            //
            Form22.sIniciandoEm   := 'Iniciando em: '+Form1.sAtual;
            Form22.sUrlDoGdb      := 'Url do FDB:   '+AllTrim(Url);
            Form22.Repaint;
            //
            try
              Form1.IBDatabase1.Close;
            except
              Form1.IBDatabase1.ForceClose;
              Form1.IBDatabase1.Close;
            end;
            //
            Form1.bOffLine := False;  // Marca False para não gravar mais nos arquivos .off
            //
            //
            try
              Form1.IBDatabase1.Params.Clear;
              Form1.IbDatabase1.DatabaseName := Url+'\offline.fdb';
              Form1.IBDatabase1.Params.Add('USER_NAME=SYSDBA');
              Form1.IBDatabase1.Params.Add('PASSWORD=masterkey');
              Form1.IbDatabase1.Open;

              //SmallMsg('Teste conectou offline.fdb');

              Form1.IBTransaction1.Active := True;
              Form1.IBTransaction2.Active := True;
              //

              Commitatudo(True); // No início abre arquivos
              //
            except
              on E: Exception do
              begin
                //SmallMsg('Teste erro ao conectar offline.fdb' + #13 + E.Message);
                //
                Screen.Cursor := crDefault;
                SmallMsg('Entre antes no programa de retaguarda para ajustar os arquivos. Erro: 5');
                 // Sandro Silva 2022-08-08 EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);
                Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);
                Form1.DestroyWindowHandle;
                Application.Terminate;
                Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
                FecharAplicacao(ExtractFileName(Application.ExeName));
              end;
              //
            end;
            //

            //SmallMsg('Teste carga no pdv ' + BoolToStr(bCargaNova));

            if bCargaNova then
            begin
              //
              Form22.Label6.Caption := 'Aguarde a CARGA do PDV';
              Form22.Label6.Repaint;

              try
                Form1.IBQuery1.Close;
                Form1.IBQuery1.SQL.Clear;
                Form1.IBQuery1.SQL.Text :=
                  'select max(REGISTRO) as ULTIMO from ALTERACA';
                Form1.IBQuery1.Open;

                if (IncrementaGenerator('G_ALTERCA', 0) < StrToIntDef(Form1.IBQuery1.FieldByName('ULTIMO').AsString, 0)) then
                  IncrementaGenerator('G_ALTERCA', StrToIntDef(Form1.IBQuery1.FieldByName('ULTIMO').AsString, 0) - IncrementaGenerator('G_ALTERCA', 0));
              except

              end;

              try
                Commitatudo(True);// bCargaNova // 2015-11-10
              except
              end;

              //
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\estoque.off'));  except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\icm.off'));      except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\emitente.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\vendedor.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\convenio.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\clifor.off'));   except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\ibpt_.off'));    except end; // Sandro Silva 2016-08-16
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\alteraca.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\ecfs.off'));     except end;// 2015-10-01
              //Após importar deve atualizar assina registros das tabelas

              try
                Commitatudo(True); // Após importaSQL // 2015-11-10
              except
              end;

              // Assina registro emitente offline
              Form1.ibDataSet13.Close;
              Form1.ibDataSet13.SelectSQL.Text :=
                'select * from EMITENTE ';
              Form1.ibDataSet13.Open;
              while Form1.ibDataSet13.Eof = False do
              begin
                Form1.ibDataSet13.Edit;
                Form1.ibDataSet13.Post;
                Form1.ibDataSet13.Next;
              end;

              // Calcula hash dos registros importados
              Form1.ibDataSet4.Close;
              Form1.ibDataSet4.SelectSQL.Text :=
                'select * from ESTOQUE';
              Form1.ibDataSet4.Open;
              Form1.ibDataSet4.First;
              while Form1.ibDataSet4.Eof = False do
              begin
                Form1.ibDataSet4.Edit;
                Form1.ibDataSet4.Post;
                Form1.ibDataSet4.Next;
              end;

              // Calcula os hash iniciais para as tabelas controladas
              IniciaHashOffLine('DEMAIS');
              IniciaHashOffLine('REDUCOES');
              IniciaHashOffLine('PAGAMENT');
              IniciaHashOffLine('ALTERACA');
              IniciaHashOffLine('ESTOQUE');

              try
                GravaUltimaReducao(True); // 2015-11-10 Descarga offline
              except
                //LogFrente('Teste 01: Erro gravar última redução no offline');
              end;

              try
                Commitatudo(True); // Após GravaUltimaReducao() // 2015-11-10
              except
              end;

              try
                //LogFrente('Teste 01: Assinando tabela: ESTOQUE');
                HasHs('ESTOQUE', True);
                //LogFrente('Teste 01: Assinando tabela: ALTERACA');
                HasHs('ALTERACA', True);
                //LogFrente('Teste 01: Assinando tabela: REDUCOES');
                HasHs('REDUCOES', True);
                //LogFrente('Teste 01: Assinando tabela: DEMAIS');
                HasHs('DEMAIS', True);
                //LogFrente('Teste 01: Assinando tabela: PAGAMENT');
                HasHs('PAGAMENT', True); // 2015-11-09

                // Acertar em AjustaHASH
                //LogFrente('Teste 01: Assinando tabela: VENDAS');
                HasHs('VENDAS', True); // Sandro Silva 2017-11-09 Polimig
                //LogFrente('Teste 01: Assinando tabela: ITENS001');
                HasHs('ITENS001', True); // Sandro Silva 2017-11-09 Polimig

                Commitatudo(True); // HASH após importar offline // 2015-11-09

                if not HASHs('DEMAIS',False) then LogFrente('Teste 01: DEMAIS HASHS False');
                if not HASHs('REDUCOES',False) then LogFrente('Teste 01: REDUCOES HASHS False');
                if not HASHs('PAGAMENT',False) then LogFrente('Teste 01: PAGAMENT HASHS False');
                if not HASHs('ALTERACA',False) then LogFrente('Teste 01: ALTERACA HASHS False');
                if not HASHs('ESTOQUE',False)  then LogFrente('Teste 01: ESTOQUE HASHS False');

              except

              end;

              //
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\alteraca.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\estoque.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\icm.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\emitente.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\vendedor.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\convenio.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\clifor.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\ecfs.off'));// 2015-10-01
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\ibpt_.off'));// Sandro Silva 2016-08-16
              //
              Form22.Label6.Caption := 'Tempo de carga: '+' '+StrZero(Hora,2,0)+':'+StrZero(Min,2,0)+':'+StrZero(Seg,2,0)+':'+StrZero(cent,3,0)+' ';
              //
              DecodeTime((Time - tInicio), Hora, Min, Seg, cent);
              Form1.Label_7.Hint := 'Tempo de carga: '+' '+StrZero(Hora,2,0)+':'+StrZero(Min,2,0)+':'+StrZero(Seg,2,0)+':'+StrZero(cent,3,0)+' ';
              //
            end; // if bCargaNova then
            //
            Form1.sMesas := '0';
            //
            DestroiMesas(True);
            //
            Form1.bOffLine := True;
            Form1.Label1.Caption := 'Off line';
            Form1.Label1.Repaint;

            //
          end
          else
          begin

            //SmallMsg('Teste não encontrou ' + #13 + Form1.sPastaDoExecutavel+'\offline.fdb');

          end;
        end else
        begin

          Screen.Cursor := crDefault;

          if Copy(UpperCase(Form1.IBDatabase1.DatabaseName),1,32) = '\DESENVOLVIMENTO\FONTES\DELPHI' then  // Minha pasta de projetos
          begin

            LogFrente('Teste 01: 10434');

            SmallMsg('Entre antes no programa "Small Commerce" para ajustar os arquivos.');

          end else
          begin
            SmallMsg('Verifique:'+Chr(10)+Chr(10)+
                        'Se a sua conexão de rede está disponível.'+Chr(10)+
                        Chr(10)+
                        Form1.IBDatabase1.DatabaseName+Chr(10)+
                        Form1.IBDatabase2.DatabaseName+Chr(10)+
                        Chr(10)+
                        '');
          end;

          Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);// Sandro Silva 2016-05-05

          Form1.DestroyWindowHandle;
          Application.Terminate;
          Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
          FecharAplicacao(ExtractFileName(Application.ExeName));

          Abort; // 2015-09-19
        end;

      end;// if é PAF

    end;

    // Abrindo os arquivos

    Commitatudo(True); // No início abre arquivos

    Form1.DeletaDataSet25; // AbreArquivos()
    Form1.ibDataSet25.Append;
    //
  except

    if Form1.ClienteSmallMobile.ImportandoMobile then
      Form1.ClienteSmallMobile.LogRetornoMobile('Não foi possível ativar os arquivos do banco de dados "Client Server"')
    else
      SmallMsgBox(Pchar('Não foi possível ativar os arquivos do banco de dados "Client Server" o programa vai ser fechado.'),'Atenção',mb_IconError+mb_Ok);
    Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);// Sandro Silva 2016-05-05
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );

    FecharAplicacao(ExtractFileName(Application.ExeName));

    Abort;

  end;

end;

function AbreArquivos(pP1: Boolean): Boolean;
var
  F : TextFile;
  sSerieS, sSerial, sLicenca  : String;
  Mais1Ini: TIniFile;
  I, J, iLimiteUsuariosSimultaneos : Integer;
  url, IP, Alias : String;
  bCargaNova : Boolean;
  Hora, Min, Seg, cent : Word;
  tInicio : tTime;
begin
  //
  Form1.Timer1.Enabled := False;
  //
  GetDir(0,Form1.sAtual);
  //
  // controle de licenças de uso
  //
  Form22.Inicio := Time;
  //
  if sLicenca = '' then
    iLimiteUsuariosSimultaneos := 1 // Sandro Silva 2023-05-30 iLimiteUsuariosSimultaneos := 2
  else
    iLimiteUsuariosSimultaneos := 12;
  //
  Mais1ini := TIniFile.Create('WIND0WS.L0G');
  {
  // Versão 2018
  if Mais1Ini.SectionExists('SC') then
    sSerial  := Mais1Ini.ReadString('SC','Ser',''); // 2018

  // Versão 2019
  if Mais1Ini.SectionExists('RR') then
    sSerial  := Mais1Ini.ReadString('RR','Ser',''); // 2019

  // Versão 2020 em diante
  if Mais1Ini.SectionExists('LICENCA') then
    sSerial  := Mais1Ini.ReadString('LICENCA','Ser','');
  }


  ValidaOffLine(Mais1Ini, bCargaNova, url, IP, Alias, Hora, Min, Seg, cent, tInicio);  // Estava abaixo, mudei para function se precisar

  try
    if ValidaRecursos = nil then
      ValidaRecursos := TValidaRecurso.Create;
    ValidaRecursos.IBDATABASE := Form1.ibDataSet27.Transaction.DefaultDatabase;
  except
  end;

  sSerial := ValidaRecursos.SistemaSerial; // Sandro Silva 2023-05-25

  Form1.sSerialSmall     := sSerial; // Sandro Silva 2020-09-29
  Form1.sChaveMeiCifrada := Mais1Ini.ReadString('LICENCA','MEI',''); // Sandro Silva 2020-09-29
  //

  {Sandro Silva 2021-12-29 inicio
  // Não permitir seriais diferentes de MEI abrir MEI.EXE
  if (
    (Copy(sSerial,4,1) <> 'N') and // 12 Usuários Small Mei + OS
    (Copy(sSerial,4,1) <> 'O') and // 07 Usuários Small Mei + OS
    (Copy(sSerial,4,1) <> 'P') and // 02 Usuários Small Mei + OS
    (Copy(sSerial,4,1) <> 'Q') and // 12 Usuários Small Mei
    (Copy(sSerial,4,1) <> 'R') and // 07 Usuários Small Mei
    (Copy(sSerial,4,1) <> 'M')    // 02 Usuários Small Mei
     ) and (MEI) then // Sandro Silva 2021-03-19 ) and (AnsiContainsText(ExtractFileName(Application.ExeName), 'mei.exe')) then
     sSerial := '';
  }
  if (LerParametroIni(ExtractFilePath(Application.ExeName) + 'smallcom.inf', 'Licenca', 'MEI', '') <> 'SIM') and (MEI) then
     sSerial := '';
  {Sandro Silva 2021-12-29 fim}

  {Sandro Silva 2021-04-28 inicio}
  // Validação para definiar quedo MEI precisa ser feita aqui
  // Sandro Silva 2022-11-29 UnoChapeco  if (MEI) and (Form1.sModeloECF = '99') then // Sandro Silva 2021-12-29 if (Form1.sChaveMeiCifrada <> '') and (Form1.sModeloECF = '99') then
  if (Form1.sModeloECF = '99') then
  begin
    if (MEI) then
    begin

      if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') = '') then // Sandro Silva 2021-03-19 if (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', '') <> 'Sim') then
      begin

        GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'MEI'); // Sandro Silva 2021-03-19 GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'PAFNFCE', 'Sim');
        Application.Title := 'Aplicativo MEI';

      end;

    end;
  end;
  {Sandro Silva 2021-04-28 fim}

  if (Form1.sModeloECF = '99') then
  begin
    if ((AnsiContainsText(ExtractFileName(Application.ExeName), 'mei.exe') = False) and (MEI = False))  // Sandro Silva 2021-03-19 if ((AnsiContainsText(ExtractFileName(Application.ExeName), 'mei.exe')) = False) and (Form1.sModeloECF = '99')
      and (AnsiContainsText(ExtractFileDir(Application.ExeName), Copy(Build, 1, 4) + '\Projeto-Frente-de-Caixa') = False) // Para poder executar pelo delphi com F9
    then
      sSerial := '';
  end;

  {Sandro Silva 2021-04-27 fim}

  if sSerial = '' then
  begin
      //
      //ShowMessage('Teste 01 9719'); // Sandro Silva 2021-04-27

      {Sandro Silva 2021-12-29 inicio
      SmallMsg('Este sistema não foi totalmente instalado nesta pasta ou'+Chr(10)+
                'não está liberado para uso neste computador, instale'+Chr(10)+
                'novamente o sistema informando o número serial da'+Chr(10)+
                'sua licença de uso.'+Chr(10)+Chr(13)+
                'Código: 001 '+sLicenca);
      }
      if MEI then
        SmallMsg('Sistema bloqueado'+Chr(10)+
                              'Este sistema só pode ser usado por empresa'+Chr(10)+
                              'enquadrada como Microempreendedor Individual (MEI)'+Chr(10)+Chr(13)+
                              'Código: 991 '+ sLicenca)
      else
        SmallMsg('Este sistema não foi totalmente instalado nesta pasta ou'+Chr(10)+
                  'não está liberado para uso neste computador, instale'+Chr(10)+
                  'novamente o sistema informando o número serial da'+Chr(10)+
                  'sua licença de uso.'+Chr(10)+Chr(13)+
                  'Código: 001 '+sLicenca);
      {Sandro Silva 2021-12-29 fim}

      Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
        Form1.ClienteSmallMobile.sLogRetornoMobile);
      Form1.DestroyWindowHandle;
      //
      Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
      Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
      FecharAplicacao(ExtractFileName(Application.ExeName));
      //
  end else
  begin
    //
    {Sandro Silva 2023-05-25 inicio
    iLimiteUsuariosSimultaneos := 2;
    //
    if Copy(sSerial,4,1) = 'F' then iLimiteUsuariosSimultaneos := 2;
    if Copy(sSerial,4,1) = 'E' then iLimiteUsuariosSimultaneos := 7;
    if Copy(sSerial,4,1) = 'D' then iLimiteUsuariosSimultaneos := 12;
    if Copy(sSerial,4,1) = 'C' then iLimiteUsuariosSimultaneos := 2;
    if Copy(sSerial,4,1) = 'B' then iLimiteUsuariosSimultaneos := 7;
    if Copy(sSerial,4,1) = 'A' then iLimiteUsuariosSimultaneos := 12;
    if Copy(sSerial,4,1) = 'W' then iLimiteUsuariosSimultaneos := 24;
    if Copy(sSerial,4,1) = 'S' then iLimiteUsuariosSimultaneos := 2;

    if Copy(sSerial,4,1) = 'N' then iLimiteUsuariosSimultaneos := 12; // 12 Usuários Small Mei + OS
    if Copy(sSerial,4,1) = 'O' then iLimiteUsuariosSimultaneos := 07; // 07 Usuários Small Mei + OS
    if Copy(sSerial,4,1) = 'P' then iLimiteUsuariosSimultaneos := 02; // 02 Usuários Small Mei + OS
    if Copy(sSerial,4,1) = 'Q' then iLimiteUsuariosSimultaneos := 12; // 12 Usuários Small Mei
    if Copy(sSerial,4,1) = 'R' then iLimiteUsuariosSimultaneos := 07; // 07 Usuários Small Mei
    if Copy(sSerial,4,1) = 'M' then iLimiteUsuariosSimultaneos := 02; // 02 Usuários Small Mei
    }
    iLimiteUsuariosSimultaneos := ValidaRecursos.SistemaLimiteUsuarios;
    {Sandro Silva 2023-05-25 fim}


    {Sandro Silva 2021-12-29 inicio
    //
    if    (Copy(sSerial,4,1) = 'C') or // 02 Usuários + OS
          (Copy(sSerial,4,1) = 'B') or // 07 Usuários + OS
          (Copy(sSerial,4,1) = 'A')    // 12 Usuários + OS
      then
      Form22.sTitulo := 'Small Commerce + Ordem de Serviço'
    else if (Copy(sSerial,4,1) = 'S') then
      Form22.sTitulo := 'Small Start'
    else if (Copy(sSerial,4,1) = 'N') or // 12 Usuários Small Mei + OS
            (Copy(sSerial,4,1) = 'O') or // 07 Usuários Small Mei + OS
            (Copy(sSerial,4,1) = 'P')    // 02 Usuários Small Mei + OS
     then
      Form22.sTitulo := 'Small MEI + Ordem de Serviço'
    else if (Copy(sSerial,4,1) = 'Q')   // 12 Usuários Small Mei
         or (Copy(sSerial,4,1) = 'R')   // 07 Usuários Small Mei
         or (Copy(sSerial,4,1) = 'M')   // 02 Usuários Small Mei
     then
      Form22.sTitulo := 'Small MEI'
    else
      Form22.sTitulo := 'Small Commerce';
    }
    {Sandro Silva 2022-04-11 inicio
    Form22.sTitulo := 'Small Commerce';
    if MEI then
      Form22.sTitulo := 'Small Commerce (MEI)';
    }
    Form22.sTitulo := 'Small';
    if MEI then
      Form22.sTitulo := 'Small (MEI)';
    {Sandro Silva 2022-04-11 fim}

    {Sandro Silva 2021-12-29 fim}
    //
    Form22.sLicenca := 'Licenciado para '+AllTrim(InttoStr(iLimiteUsuariosSimultaneos))+' usuários';
    //
    I := StrToInt('0'+LimpaNumero(Copy(sSerial,6,6)));

    //
    // é aqui a chave pra resolver os controles de seriais                                 X
    //
    {
    //2018
    if (sSerial = StrTran(StrTran(UpperCase('S13F'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S13S'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários Small Start
    or (sSerial = StrTran(StrTran(UpperCase('S13E'+Modulo_11(IntToStr(I+72))+StrZero(I,6,0)+'1'+ Chr(66+StrtoInt(Modulo_11(IntToStr(I+75))))),'I','X'),'L','Z')) // 05 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S13D'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 10 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S13W'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 10 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S13C'+Modulo_11(IntToStr(I+74))+StrZero(I,6,0)+'3'+ Chr(68+StrtoInt(Modulo_11(IntToStr(I+73))))),'I','X'),'L','Z')) // 02 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S13B'+Modulo_11(IntToStr(I+75))+StrZero(I,6,0)+'4'+ Chr(69+StrtoInt(Modulo_11(IntToStr(I+72))))),'I','X'),'L','Z')) // 05 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S13A'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 10 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S13W'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 10 Usuários + Ordem
    //2019 // Sandro Silva 2018-10-09
    or (sSerial = StrTran(StrTran(UpperCase('S14F'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S14S'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários Small Start
    or (sSerial = StrTran(StrTran(UpperCase('S14E'+Modulo_11(IntToStr(I+72))+StrZero(I,6,0)+'1'+ Chr(66+StrtoInt(Modulo_11(IntToStr(I+75))))),'I','X'),'L','Z')) // 05 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S14D'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 10 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S14W'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 10 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S14C'+Modulo_11(IntToStr(I+74))+StrZero(I,6,0)+'3'+ Chr(68+StrtoInt(Modulo_11(IntToStr(I+73))))),'I','X'),'L','Z')) // 02 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S14B'+Modulo_11(IntToStr(I+75))+StrZero(I,6,0)+'4'+ Chr(69+StrtoInt(Modulo_11(IntToStr(I+72))))),'I','X'),'L','Z')) // 05 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S14A'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 10 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S14W'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 10 Usuários + Ordem
    //2020 // ER 02.06 Sandro Silva 2019-06-19
    or (sSerial = StrTran(StrTran(UpperCase('S15F'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S15S'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários Small Start
    or (sSerial = StrTran(StrTran(UpperCase('S15E'+Modulo_11(IntToStr(I+72))+StrZero(I,6,0)+'1'+ Chr(66+StrtoInt(Modulo_11(IntToStr(I+75))))),'I','X'),'L','Z')) // 05 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S15D'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 10 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S15W'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 10 Usuários
    or (sSerial = StrTran(StrTran(UpperCase('S15C'+Modulo_11(IntToStr(I+74))+StrZero(I,6,0)+'3'+ Chr(68+StrtoInt(Modulo_11(IntToStr(I+73))))),'I','X'),'L','Z')) // 02 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S15B'+Modulo_11(IntToStr(I+75))+StrZero(I,6,0)+'4'+ Chr(69+StrtoInt(Modulo_11(IntToStr(I+72))))),'I','X'),'L','Z')) // 05 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S15A'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 10 Usuários + Ordem
    or (sSerial = StrTran(StrTran(UpperCase('S15W'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 10 Usuários + Ordem
    }

    // A partir da versão 2020 o controle não é mais feito pelo número de série do Small, mas pela data de registro
    // Aqui basta validar o serial desconsiderando a versão
    if ((Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('F'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('S'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários Small Start
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('E'+Modulo_11(IntToStr(I+72))+StrZero(I,6,0)+'1'+ Chr(66+StrtoInt(Modulo_11(IntToStr(I+75))))),'I','X'),'L','Z')) // 07 Usuários
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('D'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 12 Usuários
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('W'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 12 Usuários
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('C'+Modulo_11(IntToStr(I+74))+StrZero(I,6,0)+'3'+ Chr(68+StrtoInt(Modulo_11(IntToStr(I+73))))),'I','X'),'L','Z')) // 02 Usuários + Ordem
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('B'+Modulo_11(IntToStr(I+75))+StrZero(I,6,0)+'4'+ Chr(69+StrtoInt(Modulo_11(IntToStr(I+72))))),'I','X'),'L','Z')) // 07 Usuários + Ordem
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('A'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 12 Usuários + Ordem
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('W'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 12 Usuários + Ordem

    // Validações seriais MEI
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('N'+Modulo_11(IntToStr(I+76))+StrZero(I,6,0)+'5'+ Chr(70+StrtoInt(Modulo_11(IntToStr(I+71))))),'I','X'),'L','Z')) // 12 Usuários Small Mei + OS
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('O'+Modulo_11(IntToStr(I+75))+StrZero(I,6,0)+'4'+ Chr(69+StrtoInt(Modulo_11(IntToStr(I+72))))),'I','X'),'L','Z')) // 07 Usuários Small Mei + OS
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('P'+Modulo_11(IntToStr(I+74))+StrZero(I,6,0)+'3'+ Chr(68+StrtoInt(Modulo_11(IntToStr(I+73))))),'I','X'),'L','Z')) // 02 Usuários Small Mei + OS
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('Q'+Modulo_11(IntToStr(I+73))+StrZero(I,6,0)+'2'+ Chr(67+StrtoInt(Modulo_11(IntToStr(I+74))))),'I','X'),'L','Z')) // 12 Usuários Small Mei
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('R'+Modulo_11(IntToStr(I+72))+StrZero(I,6,0)+'1'+ Chr(66+StrtoInt(Modulo_11(IntToStr(I+75))))),'I','X'),'L','Z')) // 07 Usuários Small Mei
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('M'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 02 Usuários Small Mei
     or (Copy(sSerial, 4, 10) = StrTran(StrTran(UpperCase('T'+Modulo_11(IntToStr(I+71))+StrZero(I,6,0)+'0'+ Chr(65+StrtoInt(Modulo_11(IntToStr(I+76))))),'I','X'),'L','Z')) // 01 Usuário Small Go
       )
    // Sandro Silva 2022-11-30 and (StrToIntDef(Copy(sSerial, 2, 2), 0) >= 13) // Maior ou igual a S13. Segurança para evitar uso de serial muito antigo
        and (StrToIntDef(Copy(sSerial, 2, 2), 0) >= 14) // Maior ou igual a S14. Segurança para evitar uso de serial muito antigo
    then
    begin
      Form22.sSerie := 'Número de série: '+sSerial;
    end else
    begin

      //ShowMessage('Teste 01 9863'); // Sandro Silva 2021-04-27

      SmallMsg('Este sistema não foi totalmente instalado nesta pasta ou'+Chr(10)+
               'não está liberado para uso neste computador, instale'+Chr(10)+
               'novamente o sistema informando o número serial da'+Chr(10)+
               'sua licença de uso.'+Chr(10)+Chr(13)+
               'Código: 002 '+sLicenca);
      Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
        Form1.ClienteSmallMobile.sLogRetornoMobile);
      //
      Form1.DestroyWindowHandle;
      Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
      Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
      FecharAplicacao(ExtractFileName(Application.ExeName));
    end;

    //
  end;
  //
  sSerieS := StrTran(Form22.sSerie,'Número de série: ','');
  //
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  begin
    Form1.ImportarvendasdoSmallMobile1.Visible := True;
    if ValidaRecursos.PermiteRecursoParaSerial = False then
    begin
      Form1.ImportarvendasdoSmallMobile1.Enabled := False;
      Form1.ImportarvendasdoSmallMobile1.Checked := False; 
    end;
  end else
  begin
    Form1.ImportarvendasdoSmallMobile1.Visible := False;
    Form1.ImportarvendasdoSmallMobile1.Checked := False;
  end;
  //
  Screen.Cursor := crHourGlass;    // Cursor de Aguardo
  Mais1Ini.Free;
  Form22.sLicenca := 'Licenciado para '+AllTrim(InttoStr(iLimiteUsuariosSimultaneos))+' usuários';
  Form22.Label6.Width   := Screen.Width;
  //                                     //
  // Cria os arquivos no diretório atual //
  //                                     //
  Screen.Cursor := crHourGlass;                  // Cursor de Aguardo

  //SmallMsg('Teste 1 6000');
  //

  (*
  try
    //
    // por segurança sempre vai fazer a carga
    //
    Screen.Cursor := crHourGlass;    // Cursor de Aguardo
    tInicio := time;
    //
    // Extrai o caminho do executável
    Form1.sPastaDoExecutavel := StrTran(AnsiLowerCase(Application.ExeName),'\frente.exe','');
    Form1.sPastaDoExecutavel := StrTran(Form1.sPastaDoExecutavel,'\nfce.exe','');
    Form1.sPastaDoExecutavel := StrTran(Form1.sPastaDoExecutavel,'\' + ExtractFileName(Application.ExeName), '');

    if PAFNFCe then // Sandro Silva 2020-12-09 if Pos('pafnfce.exe', AnsiLowerCase(ExtractFileName(Application.ExeName))) > 0 then
      Form1.sPastaDoExecutavel := ExtractFileDir(Application.ExeName);

    if Pos('pafdief.exe', AnsiLowerCase(ExtractFileName(Application.ExeName))) > 0 then
      Form1.sPastaDoExecutavel := ExtractFileDir(Application.ExeName);

    bCargaNova := False;
    //
    if Alltrim(Form1.sPastaDoExecutavel) = '' then
      Form1.sPastaDoExecutavel := '\desenvolvimento\fontes\delphi\' + Copy(Build, 1, 4) + '\Projeto-Frente-de-Caixa'; // Quando executa pelo delphi
    //
    GetDir(0,Form1.sAtual);
    //
    //
    if FileExists(Form1.sAtualOnLine+'\small.ini') and not FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
    begin

      // Está online
      //
      // ONLINE
      //

      //
      //
      Form1.bStatusRede := True; // Liga o botão rede no Abrearquivos
      StatusRede(True,90);
      //
      ChDir(Form1.sAtualOnLine);
      //
      //
      if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
      begin

        if Form1.sAtualOnLine <> Form1.sPastadoExecutavel then
        begin
          //
          if FileExists(Form1.sAtualOnLine+'\off13.fdb') then
          begin
            Form22.Label6.Caption     := 'Aguarde... Copiando base off13.fdb';
            Form22.Label6.Repaint;
            // Atualiza o off13.fdb na estação
            CopyFile(pchar(Form1.sAtualOnLine+'\off13.fdb'),pchar(Form1.sPastadoExecutavel+'\off13.fdb'),True);
            //Sleep(7000); // Sandro Silva 2019-08-22 Aguardar até copiar o off13.fdb para a estação
          end;
          //
        end;

      end; //       if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') then

      //
      Mais1Ini := TIniFile.Create(Form1.sAtual+'\small.ini');
      Url      := Mais1Ini.ReadString('Firebird','Server url','');
      IP       := AllTrim(Mais1Ini.ReadString('Firebird','Server IP',''));
      Alias    := AllTrim(Mais1Ini.ReadString('Firebird','Alias',''));

      LogFrente('Teste 01: IP ' + Form1.sAtual+'\small.ini' + ' ' + ip);

      //
      if IP = '' then
        IP := GetIp;

      LogFrente('Teste 01: depois getip ' + ' ' + ip);

      //
      if IP <> '' then
        Url := IP+':'+Url+'\small.fdb' // Sandro Silva 2019-03-15 Url := IP+':'+Url+'\small' + EXTENSAO_BANCO
      else
        Url:= Url+'\small.fdb'; // Sandro Silva 2019-03-15 Url:= Url+'\small' + EXTENSAO_BANCO;
      //
      if Alltrim(Alias) <> '' then
      begin
        Url := IP+':'+Alias;
      end;
      //
      Mais1Ini.Free;
      //
      Form22.Label6.Caption := Form1.sAtual;
      Form22.sIniciandoEm   := 'Iniciando em: '+Form1.sAtual;
      Form22.sUrlDoGdb      := 'Url do FDB:   '+AllTrim(Url);
      //
      try
        Form1.IBDatabase1.Close;
        Form1.IBDatabase1.Params.Clear;
        Form1.IbDatabase1.DatabaseName := Url;
        Form1.IBDatabase1.Params.Add('USER_NAME=SYSDBA');
        Form1.IBDatabase1.Params.Add('PASSWORD=masterkey');
        Form1.IBDatabase1.Open;
        Form1.IBTransaction1.Active := True;
        Form1.IBTransaction2.Active := True;
        //
      except
        on E: Exception do
        begin
          Screen.Cursor := crDefault;

          LogFrente('Teste 01: 9863 ' + E.Message);
          LogFrente('Teste 01: 9863 ' + Form1.IbDatabase1.DatabaseName);

          SmallMsg('Entre antes no programa "Small Commerce" para ajustar os arquivos.');
          Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
            Form1.ClienteSmallMobile.sLogRetornoMobile);
          Form1.DestroyWindowHandle;
          Application.Terminate;
          Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
          FecharAplicacao(ExtractFileName(Application.ExeName));
        end;
      end;
      //
      // O Nome da variável está invertido em relação a situação da rede. bOffline True significa que deve gravar os dados nos arquivos .off
      Form1.bOffLine         := True;  /// Marca True para gravar nos arquivos .off
      Form1.Label1.Caption   := 'On line';
      //
      // copiar sempre para .off
      // quando entra em off converter para dentro do offline.gdb quando nao existe ja o offline.gdb
      //

      //
      // estoque.off
      //

      //
      // Exportação manual seria legal se tivesse a possibilidade de exportar somente alguns campos
      //
      //SmallMsg('Teste gerar dados off' + #13 +
      //            'Pasta do executável: ' + Form1.sPastaDoExecutavel + #13 +
      //            'Pasta atual: ' + Form1.sAtual);
      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      begin
        if UpperCase(Form1.sPastadoExecutavel) <> UpperCase(Form1.sAtual) then
        begin
          //
          Form22.Label6.Caption := 'Aguarde exportando ESTOQUE.OFF para base off line';
          Form22.Label6.Repaint;
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\estoque.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\estoque.off'));
            Sleep(10);
          end;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from ESTOQUE');
          Form1.IBQuery1.Open;

          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\estoque.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          I := 0;
          while not Form1.ibQuery1.Eof do
          begin
            I := I + 1;
            try
              WriteLN(F,'insert into ESTOQUE (CODIGO, REFERENCIA, CST, DESCRICAO, MEDIDA, PRECO, QTD_ATUAL, REGISTRO, ST, CF, CEST, IIA, IIA_UF, IIA_MUNI) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('CODIGO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('REFERENCIA').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CST').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('DESCRICAO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('MEDIDA').AsString)+', '
              +QuotedStr(StrTran(Form1.ibQuery1.FieldByName('PRECO').AsString,',','.'))+', '
              +QuotedStr(StrTran(Form1.ibQuery1.FieldByName('QTD_ATUAL').AsString,',','.'))+', '
              +QuotedStr(StrZero(I,10,0))+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ST').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CF').AsString)+', '// Sandro Silva 2016-08-15
              +QuotedStr(Form1.ibQuery1.FieldByName('CEST').AsString)+', '// Sandro Silva 2016-08-15
              +'nullif(' + QuotedStr(StrTran(Form1.ibQuery1.FieldByName('IIA').AsString, ',', '.'))+', ''''), '
              +'nullif(' + QuotedStr(StrTran(Form1.ibQuery1.FieldByName('IIA_UF').AsString, ',', '.'))+', ''''), '
              +'nullif(' + QuotedStr(StrTran(Form1.ibQuery1.FieldByName('IIA_MUNI').AsString, ',', '.'))+', '''')'
              +' )');
            except
            end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          //
          CloseFile(F);

          //
          // icm.off
          //
          Form22.Label6.Caption := 'Aguarde exportando ICM.off para base off line';
          Form22.Label6.Repaint;
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\icm.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\icm.off'));
            Sleep(10);
          end;
          //
          Form1.IBExtract1.Items.Clear;
          Form1.IBExtract1.ExtractObject(eoData, 'ICM', [etIndex]);
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\icm.off'));
          Rewrite(F);
          WriteLN(F,Form1.IBExtract1.Items.Text);
          CloseFile(F);
          //
          // emitente.off
          //
          Form22.Label6.Caption := 'Aguarde exportando EMITENTE.off para base off line';
          Form22.Label6.Repaint;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from EMITENTE');
          Form1.IBQuery1.Open;
          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\emitente.off'));
          Rewrite(F);
          WriteLN(F,'insert into EMITENTE (ESTADO, CGC, IE, REGISTRO, NOME, ENDERECO, COMPLE, MUNICIPIO, CEP, CRT, CNAE, IM, ENCRYPTHASH, LICENCA) '
                                 +'values ('+QuotedStr(Form1.ibQuery1.FieldByName('ESTADO').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('CGC').AsString)+','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('IE').AsString)+','+QuotedStr('0000000000')+ ','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('NOME').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('ENDERECO').AsString)+','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('COMPLE').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('MUNICIPIO').AsString)+','
                                            +QuotedStr(Form1.ibQuery1.FieldByName('CEP').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('CRT').AsString)+','             // Sandro Silva 2019-08-20
                                            +QuotedStr(Form1.ibQuery1.FieldByName('CNAE').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('IM').AsString)+','             // Sandro Silva 2019-08-20
                                            +QuotedStr(Form1.ibQuery1.FieldByName('ENCRYPTHASH').AsString)+','+QuotedStr(Form1.ibQuery1.FieldByName('LICENCA').AsString)     // Sandro Silva 2019-08-20
                                            +')');
          CloseFile(F);

          Form1.ibQuery1.Close;
          //
          // vendedor.off
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\vendedor.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\vendedor.off'));
            Sleep(10);
          end;
          //
          Form1.IBExtract1.Items.Clear;
          Form1.IBExtract1.ExtractObject(eoData, 'VENDEDOR', [etIndex]);
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\vendedor.off'));
          Rewrite(F);
          WriteLN(F,Form1.IBExtract1.Items.Text);
          CloseFile(F);
          //
          // convenio.off
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\convenio.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\convenio.off'));
            Sleep(10);
          end;
          //
          Form1.IBExtract1.Items.Clear;
          Form1.IBExtract1.ExtractObject(eoData, 'CONVENIO', [etIndex]);
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\convenio.off'));
          Rewrite(F);
          WriteLN(F,Form1.IBExtract1.Items.Text);
          CloseFile(F);
          //
          // clifor.off
          //
          Form22.Label6.Caption := 'Aguarde exportando CLIFOR.off para base off line';
          Form22.Label6.Repaint;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from CLIFOR where coalesce(ATIVO,0) = 0 and trim(coalesce(NOME,'''')) <> '''' ');
          Form1.IBQuery1.Open;
          //

          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\clifor.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          I := 0;
          while not Form1.ibQuery1.Eof do
          begin
            I := I + 1;
            try
              WriteLN(F,'insert into CLIFOR (NOME, CGC, IE, CEP, CIDADE, COMPLE, ENDERE, ESTADO, REGISTRO) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('NOME').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CGC').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('IE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CEP').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('CIDADE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('COMPLE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ENDERE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ESTADO').AsString)+', '
              +QuotedStr(StrZero(I,10,0))+' )');
            except end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          CloseFile(F);

          Form22.Label6.Caption := 'Aguarde exportando ECFS.off para base off line';
          Form22.Label6.Repaint;
          //
          while FileExists(pchar(Form1.sPastadoExecutavel+'\ecfs.off')) do
          begin
            DeleteFile(pchar(Form1.sPastadoExecutavel+'\ecfs.off'));
            Sleep(10);
          end;
          //
          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from ECFS');
          Form1.IBQuery1.Open;

          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\ecfs.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          while not Form1.ibQuery1.Eof do
          begin
            try
              WriteLN(F,'insert into ECFS (SERIE, ENCRYPTHASH) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('SERIE').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('ENCRYPTHASH').AsString)+' )');
            except end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          //
          CloseFile(F);

          //
          // IBPT
          //
          Form22.Label6.Caption := 'Aguarde exportando IBPT_.off para base off line';
          Form22.Label6.Repaint;

          Form1.IBQuery1.Close;
          Form1.IBQuery1.SQL.Clear;
          Form1.IBQuery1.SQL.Add('select * from IBPT_');
          Form1.IBQuery1.Open;
          //
          AssignFile(F,pchar(Form1.sPastadoExecutavel+'\IBPT_.off'));
          Rewrite(F);
          Form1.ibQuery1.First;
          I := 0;
          while not Form1.ibQuery1.Eof do
          begin
            I := I + 1;
            try
              WriteLN(F,'insert into IBPT_ (CODIGO, EX, TIPO, DESCRICAO, NACIONALFEDERAL, IMPORTADOFEDERAL, '
                                          +'ESTADUAL, MUNICIPAL, VIGENCIAINICIO, VIGENCIAFIM, CHAVE, VERSAO, '
                                          + 'FONTE, REGISTRO) values ('
              +QuotedStr(Form1.ibQuery1.FieldByName('CODIGO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('EX').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('TIPO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('DESCRICAO').AsString)+', '
              +QuotedStr(Form1.ibQuery1.FieldByName('NACIONALFEDERAL').AsString)+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('IMPORTADOFEDERAL').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('ESTADUAL').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('MUNICIPAL').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('VIGENCIAINICIO').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('VIGENCIAFIM').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('CHAVE').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('VERSAO').AsString,',','.'))+', '
              +QuotedStr(StrTRan(Form1.ibQuery1.FieldByName('FONTE').AsString,',','.'))+', '
              +QuotedStr(StrZero(I,10,0))+' )');
            except end;
            Form1.ibQuery1.Next;
          end;
          //
          Form1.ibQuery1.Close;
          //
          CloseFile(F);

          //
          // Falta fazer exportação manual exportar apenas alguns campos
          //
        end;
      end;// if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') then
      //
    end else
    begin

      // Ficou em offline Sandro Silva 2019-03-14

      //
      // OFFLINE
      //

      //
      Form1.bStatusRede     := False; // Apaga o botão rede no abrearquivos
      StatusRede(True,90);
      //
      //
      if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
      begin

        if FileExists(pchar(Form1.sPastadoExecutavel+'\estoque.off')) or FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
        begin

          //
          ChDir(Form1.sPastadoExecutavel);
          //
          if not FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) then
          begin
            //
            if FileExists(Form1.sPastadoExecutavel+'\off13.fdb') then
            begin

              Form22.Label6.Caption     := 'Aguarde... Copiando base off line.'+Form1.sPastadoExecutavel+'\off13.fdb' +' '+Form1.sPastadoExecutavel+'\offline.fdb';
              Form22.Label6.Repaint;
              GetDir(0,Form1.sAtual);
              // Cria o banco offline se ainda não existir. Deve informar no Copy() o parâmetro bFailExist = True para ñão sobrepor em casos de não realizar a descarga
              CopyFile(pchar(Form1.sPastadoExecutavel+'\off13.fdb'),pchar(Form1.sPastadoExecutavel+'\offline.fdb'),True);
              bCargaNova := True;

            end else
            begin
              //
              Screen.Cursor := crDefault;

              LogFrente('Teste 01: 10180');

              SmallMsg('Entre antes no programa "Small Commerce" para ajustar os arquivos......');
              Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
                Form1.ClienteSmallMobile.sLogRetornoMobile);
              Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE );
              FecharAplicacao(ExtractFileName(Application.ExeName));
            end;
          end;

          //
          if Alltrim(Form1.sPastaDoExecutavel) = '' then
          begin
            Form1.sPastaDoExecutavel := '\desenvolvimento\fontes\delphi\' + Copy(LimpaNumero(Form22.sBuild), 1, 4) + '\Projeto-Frente-de-Caixa'; // Quando executa pelo delphi
          end;

          //
          if FileExists(Form1.sPastaDoExecutavel+'\offline.fdb') then
          begin

            //
            Form1.sAtual := Form1.sPastaDoExecutavel;
            CHDir(Form1.sAtual);
            Url := GetIp+':'+Form1.sAtual;
            //
            Form22.sIniciandoEm   := 'Iniciando em: '+Form1.sAtual;
            Form22.sUrlDoGdb      := 'Url do FDB:   '+AllTrim(Url);
            Form22.Repaint;
            //
            try
              Form1.IBDatabase1.Close;
            except
              Form1.IBDatabase1.ForceClose;
              Form1.IBDatabase1.Close;
            end;
            //
            Form1.bOffLine := False;  // Marca False para não gravar mais nos arquivos .off
            //
            //
            try
              Form1.IBDatabase1.Params.Clear;
              Form1.IbDatabase1.DatabaseName := Url+'\offline.fdb';
              Form1.IBDatabase1.Params.Add('USER_NAME=SYSDBA');
              Form1.IBDatabase1.Params.Add('PASSWORD=masterkey');
              Form1.IbDatabase1.Open;

              //SmallMsg('Teste conectou offline.fdb');

              Form1.IBTransaction1.Active := True;
              Form1.IBTransaction2.Active := True;
              //

              Commitatudo(True); // No início abre arquivos
              //
            except
              on E: Exception do
              begin
                //SmallMsg('Teste erro ao conectar offline.fdb' + #13 + E.Message);
                //
                Screen.Cursor := crDefault;
                SmallMsg('Entre antes no programa de retaguarda para ajustar os arquivos. Erro: 5');
                 // Sandro Silva 2022-08-08 EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);
                Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);
                Form1.DestroyWindowHandle;
                Application.Terminate;
                Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
                FecharAplicacao(ExtractFileName(Application.ExeName));
              end;
              //
            end;
            //

            //SmallMsg('Teste carga no pdv ' + BoolToStr(bCargaNova));

            if bCargaNova then
            begin
              //
              Form22.Label6.Caption := 'Aguarde a CARGA do PDV';
              Form22.Label6.Repaint;

              try
                Form1.IBQuery1.Close;
                Form1.IBQuery1.SQL.Clear;
                Form1.IBQuery1.SQL.Text :=
                  'select max(REGISTRO) as ULTIMO from ALTERACA';
                Form1.IBQuery1.Open;

                if (IncrementaGenerator('G_ALTERCA', 0) < StrToIntDef(Form1.IBQuery1.FieldByName('ULTIMO').AsString, 0)) then
                  IncrementaGenerator('G_ALTERCA', StrToIntDef(Form1.IBQuery1.FieldByName('ULTIMO').AsString, 0) - IncrementaGenerator('G_ALTERCA', 0));
              except

              end;

              try
                Commitatudo(True);// bCargaNova // 2015-11-10
              except
              end;

              //
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\estoque.off'));  except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\icm.off'));      except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\emitente.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\vendedor.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\convenio.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\clifor.off'));   except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\ibpt_.off'));    except end; // Sandro Silva 2016-08-16
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\alteraca.off')); except end;
              try ImportaSQL(pchar(Form1.sPastadoExecutavel+'\ecfs.off'));     except end;// 2015-10-01
              //Após importar deve atualizar assina registros das tabelas

              try
                Commitatudo(True); // Após importaSQL // 2015-11-10
              except
              end;

              // Assina registro emitente offline
              Form1.ibDataSet13.Close;
              Form1.ibDataSet13.SelectSQL.Text :=
                'select * from EMITENTE ';
              Form1.ibDataSet13.Open;
              while Form1.ibDataSet13.Eof = False do
              begin
                Form1.ibDataSet13.Edit;
                Form1.ibDataSet13.Post;
                Form1.ibDataSet13.Next;
              end;

              // Calcula hash dos registros importados
              Form1.ibDataSet4.Close;
              Form1.ibDataSet4.SelectSQL.Text :=
                'select * from ESTOQUE';
              Form1.ibDataSet4.Open;
              Form1.ibDataSet4.First;
              while Form1.ibDataSet4.Eof = False do
              begin
                Form1.ibDataSet4.Edit;
                Form1.ibDataSet4.Post;
                Form1.ibDataSet4.Next;
              end;

              // Calcula os hash iniciais para as tabelas controladas
              IniciaHashOffLine('DEMAIS');
              IniciaHashOffLine('REDUCOES');
              IniciaHashOffLine('PAGAMENT');
              IniciaHashOffLine('ALTERACA');
              IniciaHashOffLine('ESTOQUE');

              try
                GravaUltimaReducao(True); // 2015-11-10 Descarga offline
              except
                //LogFrente('Teste 01: Erro gravar última redução no offline');
              end;

              try
                Commitatudo(True); // Após GravaUltimaReducao() // 2015-11-10
              except
              end;

              try
                //LogFrente('Teste 01: Assinando tabela: ESTOQUE');
                HasHs('ESTOQUE', True);
                //LogFrente('Teste 01: Assinando tabela: ALTERACA');
                HasHs('ALTERACA', True);
                //LogFrente('Teste 01: Assinando tabela: REDUCOES');
                HasHs('REDUCOES', True);
                //LogFrente('Teste 01: Assinando tabela: DEMAIS');
                HasHs('DEMAIS', True);
                //LogFrente('Teste 01: Assinando tabela: PAGAMENT');
                HasHs('PAGAMENT', True); // 2015-11-09

                // Acertar em AjustaHASH
                //LogFrente('Teste 01: Assinando tabela: VENDAS');
                HasHs('VENDAS', True); // Sandro Silva 2017-11-09 Polimig
                //LogFrente('Teste 01: Assinando tabela: ITENS001');
                HasHs('ITENS001', True); // Sandro Silva 2017-11-09 Polimig

                Commitatudo(True); // HASH após importar offline // 2015-11-09

                if not HASHs('DEMAIS',False) then LogFrente('Teste 01: DEMAIS HASHS False');
                if not HASHs('REDUCOES',False) then LogFrente('Teste 01: REDUCOES HASHS False');
                if not HASHs('PAGAMENT',False) then LogFrente('Teste 01: PAGAMENT HASHS False');
                if not HASHs('ALTERACA',False) then LogFrente('Teste 01: ALTERACA HASHS False');
                if not HASHs('ESTOQUE',False)  then LogFrente('Teste 01: ESTOQUE HASHS False');

              except

              end;

              //
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\alteraca.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\estoque.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\icm.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\emitente.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\vendedor.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\convenio.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\clifor.off'));
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\ecfs.off'));// 2015-10-01
              DeleteFile(pchar(Form1.sPastadoExecutavel+'\ibpt_.off'));// Sandro Silva 2016-08-16
              //
              Form22.Label6.Caption := 'Tempo de carga: '+' '+StrZero(Hora,2,0)+':'+StrZero(Min,2,0)+':'+StrZero(Seg,2,0)+':'+StrZero(cent,3,0)+' ';
              //
              DecodeTime((Time - tInicio), Hora, Min, Seg, cent);
              Form1.Label_7.Hint := 'Tempo de carga: '+' '+StrZero(Hora,2,0)+':'+StrZero(Min,2,0)+':'+StrZero(Seg,2,0)+':'+StrZero(cent,3,0)+' ';
              //
            end; // if bCargaNova then
            //
            Form1.sMesas := '0';
            //
            DestroiMesas(True);
            //
            Form1.bOffLine := True;
            Form1.Label1.Caption := 'Off line';
            Form1.Label1.Repaint;

            //
          end
          else
          begin

            //SmallMsg('Teste não encontrou ' + #13 + Form1.sPastaDoExecutavel+'\offline.fdb');

          end;
        end else
        begin

          Screen.Cursor := crDefault;

          if Copy(UpperCase(Form1.IBDatabase1.DatabaseName),1,32) = '\DESENVOLVIMENTO\FONTES\DELPHI' then  // Minha pasta de projetos
          begin

            LogFrente('Teste 01: 10434');

            SmallMsg('Entre antes no programa "Small Commerce" para ajustar os arquivos.');

          end else
          begin
            SmallMsg('Verifique:'+Chr(10)+Chr(10)+
                        'Se a sua conexão de rede está disponível.'+Chr(10)+
                        Chr(10)+
                        Form1.IBDatabase1.DatabaseName+Chr(10)+
                        Form1.IBDatabase2.DatabaseName+Chr(10)+
                        Chr(10)+
                        '');
          end;

          Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);// Sandro Silva 2016-05-05

          Form1.DestroyWindowHandle;
          Application.Terminate;
          Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
          FecharAplicacao(ExtractFileName(Application.ExeName));

          Abort; // 2015-09-19
        end;

      end;// if é PAF

    end;

    // Abrindo os arquivos

    Commitatudo(True); // No início abre arquivos

    Form1.DeletaDataSet25; // AbreArquivos()
    Form1.ibDataSet25.Append;
    //
  except

    if Form1.ClienteSmallMobile.ImportandoMobile then
      Form1.ClienteSmallMobile.LogRetornoMobile('Não foi possível ativar os arquivos do banco de dados "Client Server"')
    else
      SmallMsgBox(Pchar('Não foi possível ativar os arquivos do banco de dados "Client Server" o programa vai ser fechado.'),'Atenção',mb_IconError+mb_Ok);
    Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);// Sandro Silva 2016-05-05
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );

    FecharAplicacao(ExtractFileName(Application.ExeName));

    Abort;

  end;
  *)

  //
  if (Copy(sSerial,4,1) = 'S') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin

    //ShowMessage('Teste 01 10667'); // Sandro Silva 2021-04-27

    if SmallMsgBox(PChar('Este sistema não foi totalmente instalado nesta pasta ou'+Chr(10)+
                         'não está liberado para uso neste computador, instale'+Chr(10)+
                         'o sistema Small Commerce informando o número serial da'+Chr(10)+
                         'sua licença de uso.'+Chr(10)+Chr(13)+
                         'Código: 002 '+sLicenca + #13 + #13 +
                         'Adquirir o upgrade para a versão completa do Small Commerce?'),
                         'Small Commerce', MB_ICONQUESTION + MB_YESNO) = idYes then
      ShellExecute(Application.Handle, nil, PChar('http://www.smallsoft.com.br/loja/atualiza-via-small?serial=' + sSerial + '&cnpj=' + LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)), nil, nil, SW_SHOWMAXIMIZED);

    Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;

  J := UsuariosConectados(Form1.IBDatabase1);

  if J > iLimiteUsuariosSimultaneos then
  begin
    SmallMsg('Este sistema está licenciado somente para '+IntToStr(iLimiteUsuariosSimultaneos)+' usuários'+Chr(10)+
             'neste momento '+IntToStr(J)+' estão tentando usar o sistema.'+Chr(10)+chr(13)+
             'Você pode adquirir licenças de uso adicionais acessando'+Chr(10)+// Sandro Silva 2022-12-02 Unochapeco 'Você pode adquirir licenças de uso adicionais entrando'+Chr(10)+
             'smallsoft.com.br'); // Sandro Silva 2022-12-02 Unochapeco 'em contato com a Smallsoft.');

    Form1.ClienteSmallMobile.EnviarLogParaMobile(Form1.ClienteSmallMobile.sLogRetornoMobile);
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;

  Screen.Cursor := crDefault;

  // Esta pasta é gravada no .ini para voltar on line
  if (Form1.sAtual <> Form1.sPastaDoExecutavel) then
  begin
    Mais1ini  := TIniFile.Create('FRENTE.INI');
    Mais1Ini.WriteString('On line','Pasta',pchar(Form1.sAtualOnLine));  // AbreArquivos()
    Mais1ini.Free;
  end;

  Form1.Timer1.Enabled := True;
  Form1.TimerHora.Enabled := True;// // Sandro Silva 2018-04-24

  Result := True;

end;

function GravaUltimaReducao(pP1: boolean): boolean;
// pP1 deve ser True apenas quando for gravar a RZ após executar opção Menu F10
var
  I : Integer;
  s : String;
  sData : String;
  sHora: String; // Sandro Silva 2017-11-08 Polimig
  sCodigoModeloECF, sTipo, sMarca, sModelo, sHoraIntalacaoSB, sDataIntalacaoSB, sVersaoSB : String;
begin
  //
  Screen.Cursor := crHourGlass; // Cursor de Aguardo
  Result := False;
  //
  Form22.Label6.Caption := 'Aguarde, lendo dados da última redução...';
  Form22.Label6.Repaint;
  //
  try
    //
    s := Replicate('0',1278);
    //
    s := Form1.PDV_DadosDaUltimaReducaoZ(True);
    //
    sData := Copy(s,1,2)+'/'+Copy(s,3,2)+'/20'+Copy(s,5,2); // Data da última redução Z
    //
    //    SmallMsg('Teste Data da última redução Z: '+sData);  // Teste de travamento na Z

    ///ShowMessage('Teste 01 Dados da Z' + #13 + s + #13 + 'Data Movimento ' + sData);

    if (Form1.sModeloECF = '02') then // Bematech não retorna data da última rz quando a ecf fica muito tempo sem movimentação. MP-3000 durante testes
    begin
      if sData = '00/00/2000' then
      begin
        try
          sData := _ecf02_DataUltimaReducao;
          StrToDate(sData);
        except
          sData := '00/00/2000'
        end;
      end;
    end;

    if sData <> '00/00/2000' then
    begin

      //
      Form1.ibDataset88.Close;
      Form1.ibDataset88.SelectSQL.Clear;
      Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' and DATA='+QuotedStr(DateToStrInvertida(StrToDate(sData)))+' ');
      Form1.ibDataset88.Open;
      //
      try
        if (DateToStr(Form1.ibDataset88.FieldByname('DATA').AsDateTime) = sData) and (Form1.ibDataset88.FieldByname('STATUS').AsString <> '9') then
        begin
          Form1.ibDataset88.Delete;
        end;
      except end;
      //
      if (DateToStr(Form1.ibDataset88.FieldByname('DATA').AsDateTime) <> sData) or (Copy(AllTrim(Form1.ibDataset88.FieldByname('SERIE').AsString), 1, 20) <> Copy(Form1.sNumeroDeSerieDaImpressora, 1, 20)) then
      begin
        //
        //  SmallMsg('Teste Gravando redução Z'); // Teste de travamento na Z
        //
        //
        sHora := TimeToStr(Time);
        try
          if Form1.sModeloECF = '02' then
            sHora := _ecf02_HoraUltimaReducao;
        except
        end;

        if LimpaNumero(sHora) = '' then
          sHora := TimeToStr(Time);

        Form7.DateTimePicker1.Date := StrToDate(sData);
        Form7.DateTimePicker2.Date := StrToDate(sData);
        //
        Form1.ibDataset88.Append;
        Form1.ibDataset88.FieldByname('STATUS').AsString := '9';
        Form1.ibDataset88.FieldByname('DATA').AsDateTime := StrToDate(sData);
        Form1.ibDataset88.FieldByname('HORA').AsString   := sHora; // Sandro Silva 2017-11-08 Polimig
        Form1.ibDataset88.FieldByname('PDV').AsString    := Form1.sCaixa;
        Form1.ibDataset88.FieldByname('SERIE').AsString  := Form1.sNumeroDeSerieDaImpressora;

        // Quando DLL ECF retorna número do caixa vazio. Identificado com ECF BEMATECH
        try
          if Trim(Form1.ibDataset88.FieldByName('PDV').AsString) = '' then
          begin
            // Seleciona o número do CAIXA da redução anterior que tiver o número do caixa gravado 
            Form1.ibQuery1.Close;
            Form1.ibQuery1.SQL.Clear;
            Form1.ibQuery1.SQL.Add('select first 1 PDV from REDUCOES where coalesce(PDV, '''') <> '''' and SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' order by DATA desc');
            Form1.ibQuery1.Open;
            if Trim(Form1.ibQuery1.FieldByName('PDV').AsString) <> '' then
              Form1.ibDataset88.FieldByName('PDV').AsString := Right('000' + Trim(Form1.ibQuery1.FieldByName('PDV').AsString), 3);
          end;

        except

        end;

        //
        // Valor inicial
        //
        try
          Form1.ibQuery1.Close;
          Form1.ibQuery1.SQL.Clear;
          Form1.ibQuery1.SQL.Add('select TOTALF, CUPOMF from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' order by DATA desc');
          Form1.ibQuery1.Open;
          //
          Form1.ibQuery1.First;
          //
          Form1.ibDataset88.FieldByname('TOTALI').AsString     := Form1.ibQuery1.FieldByName('TOTALF').AsString;
          Form1.ibDataset88.FieldByname('CUPOMI').AsString     := FormataNumeroDoCupom(StrToInt('0'+Form1.ibQuery1.FieldByName('CUPOMF').AsString)+1); // Sandro Silva 2021-12-01 Form1.ibDataset88.FieldByname('CUPOMI').AsString     := StrZero(StrToInt('0'+Form1.ibQuery1.FieldByName('CUPOMF').AsString)+1,6,0);
          //
        except end;
        //
        Form1.ibDataset88.FieldByname('CUPOMF').AsString     := FormataNumeroDoCupom(StrToIntDef(Copy(s,7,6), 0)); // Sandro Silva 2021-12-01 Form1.ibDataset88.FieldByname('CUPOMF').AsString     := Copy(s,7,6);
        Form1.ibDataset88.FieldByname('TOTALF').AsFloat      := StrToFloat(Copy(s,13,18))/100;
        Form1.ibDataset88.FieldByname('CONTADORZ').AsString  := Copy(s,31,4);
        //
        for I := 1 to 16 do
        begin
          //
          Form1.ibDataset88.FieldByName('ALIQU'+StrZero(I,2,0)).AsString   := Copy(copy(s,35,64),(I*4)-3,4);
          Form1.ibDataset88.FieldByName('ALIQUOTA'+StrZero(I,2,0)).AsFloat := StrtoFloat(Copy(Copy(s,99,224),(I*14)-13,14))/100;
          //
        end;
        //
        Form1.ibDataset88.FieldByname('ALIQUOTA16').AsFloat := StrtoFloat(Copy(s,323,4));  // 323,  4 Contador de reinício de operação
        //
        Form1.ibDataset88.FieldByname('CANCELAMEN').AsFloat := StrtoFloat(Copy(s,327,14))/100; // 327, 14 Totalizador de cancelamentos em ICMS
        Form1.ibDataset88.FieldByname('DESCONTOS').AsFloat  := StrtoFloat(Copy(s,341,14))/100;  // 341, 14 Totalizador de descontos em ICMS
        //
        Form1.ibDataset88.FieldByname('ALIQUOTA17').AsFloat := StrtoFloat(Copy(s,355,14))/100; // 355, 14 Totalizador de isenção de ICMS
        Form1.ibDataset88.FieldByname('ALIQUOTA18').AsFloat := StrtoFloat(Copy(s,369,14))/100; // 369, 14 Totalizador de não incidência de ICMS
        Form1.ibDataset88.FieldByname('ALIQUOTA19').AsFloat := StrtoFloat(Copy(s,383,14))/100; // 383, 14 Totalizador de substituição tributária de ICMS
        //
        // Tipo
        //
        sTipo := Form1.PDV_TipoDaImpressora(True);
        //
        // Marca
        //
        sMarca := Form1.PDV_MarcaImpressora(True);
        //
        // Modelo
        //
        sModelo := Form1.PDV_ModeloImpressora(True);
        //
        // VersaoSB
        //
        sVersaoSB := Form1.PDV_VersaoSBImpressora(True);
        //
        // DataIntalacaoSB
        //
        sDataIntalacaoSB := Form1.PDV_DataInstalacaoSB(True);
        //
        // HoraIntalacaoSB
        //
        sHoraIntalacaoSB := Form1.PDV_HoraInstalacaoSB(True);
        //
        sCodigoModeloECF := '000000';
        //
        sCodigoModeloECF := Form1.PDV_CodigoModeloECF(True);
        //
        Form1.ibDataset88.FieldByname('CODIGOECF').AsString  := sCodigoModeloECF;
        Form1.ibDataset88.FieldByname('TIPOECF').AsString    := sTipo;
        Form1.ibDataset88.FieldByname('MARCAECF').AsString   := sMarca;
        Form1.ibDataset88.FieldByname('MODELOECF').AsString  := sModelo;
        Form1.ibDataset88.FieldByname('HORASB').AsString     := sHoraIntalacaoSB;
        Form1.ibDataset88.FieldByname('DATASB').AsString     := sDataIntalacaoSB;
        Form1.ibDataset88.FieldByname('VERSAOSB').AsString   := sVersaoSB;
        Form1.ibDataset88.FieldByname('SMALL').AsString      := Form1.sModeloECF;
        //
        Form1.ibDataset88.Post;

        Result := True;// 2015-11-11 Gravou a RZ

        LogFrente('Teste 01: Gravou dados da Última RZ ' + s);

        //
      end;
      //
      Screen.Cursor := crDefault; // Cursor normal
      //
      Form1.ibDataset88.Close;
      Form1.ibDataset88.SelectSQL.Clear;
      Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' order by DATA');
      Form1.ibDataset88.Open;
      Form1.ibDataset88.Last;

      if AssinaRegistro('REDUCOES', Form1.ibDataset88, False) = False then
      begin
        LogFrente('Teste 01: Gravou dados da Última RZ evidenciado');
      end;
      //
      // 2015-11-11 Somente se gravou a RZ Result := True;
      //
    end
    else
    begin // Sandro Silva 2016-07-19 Se não houve movimento sData = 00/00/2000
      Result := True;
    end;
  except end;

  if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
  begin

    try
      // O pdv que tiver certificado assina os xml e o que tiver internet transmite. Sempre grava o último xml da RZ e estoque no c:\blocox do pdv
      Form1.BlocoxRestaurarArquivos1('REDUCAO', PASTA_REDUCOES_BLOCO_X, Form1.sNumeroDeSerieDaImpressora, True);
      SalvarHashPasta('REDUCAO', PASTA_REDUCOES_BLOCO_X, '*.xml');
      ChDir(Form1.sAtual); // Sandro Silva 2018-09-18
      Form1.BlocoxRestaurarArquivos1('ESTOQUE', PASTA_ESTOQUE_BLOCO_X, '', True);
      SalvarHashPasta('ESTOQUE', PASTA_ESTOQUE_BLOCO_X, '*.xml');
      ChDir(Form1.sAtual); // Sandro Silva 2018-09-18
    except

    end;

    ChDir(Form1.sAtual); // Sandro Silva 2018-03-13 Funções do bloco X mudam a pasta apontada. Precisa voltar para pasta do executável
  end;

  //
  Form1.ibQuery1.Close;
  //
  Form1.ibDataset88.EnableControls;
  Form22.Label6.Caption := Copyright;
  Form22.Label6.Repaint;
  //
  if pP1 = False then
    Result := True;

  Screen.Cursor := crDefault; // Cursor normal
  //
end;

function SmallCripto(pP1: String): String;
begin
  Form1.LbBlowfish1.GenerateKey(Form1.sPasta);
  Result := Form1.LbBlowfish1.EncryptString(pP1); // Encrypta o parametro
  // Result := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(pP1))); // Encrypta o hash do parametro
end;

function ValorTotalDoDia(pP1: Boolean): Boolean;
var
  sTotalDia: String;
  Mais1Ini : TiniFile;
begin
  //
  sTotalDia := Form1.PDV_GrandeTotal(True);
  // ---------------------------- //
  // Grava arquivo criptografado  //
  // com total das vendas do dia  //
  // ---------------------------- //
  if StrToFloat('0'+LimpaNumero(sTotalDia)) > 0 then
  begin
    //
    Mais1ini := TIniFile.Create(Form1.sArquivo);
    //
    try
      sTotalDia := Right(StrZero(StrToFloat(sTotalDia),18,0),12);
    except
      sTotalDia := Right(StrZero(StrToFloat('0000000'),18,0),12);
    end;
    //
    Mais1Ini.WriteString('ECF','GT',SmallCripto(FormatFloat('0.00',(StrToFloat(sTotalDia)/100)))); // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco Mais1Ini.WriteString('ECF','GT',SmallCripto(FloatToStr((StrToFloat(sTotalDia)/100))));
    //
    Mais1Ini.UpdateFile;
    Mais1Ini.Free;
    //
  end;
  //
  Result := True;
  //
end;

procedure TForm1.EscolheAMesa(Sender:TObject);
begin
  //Evitando problema de não exibir itens lançados nas mesas por 2 terminais diferentes. Um não exibe os dados do outro na primeira abertura da mesa. Ver com Gian/Fernanda}
  Commitatudo(True); // Início EscolheAMesa()
  //
  if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
  begin
    SmallMsg('Tecle <ESC> para fechar a '+sMesaOuConta+' '+Alltrim(IntToStr(Form1.iMesaAberta))+' que esta aberta.');
  end else
  begin
    //
    if Form1.Memo1.Visible then
    begin
      SmallMsg('Feche antes o cupom para abrir a '+sMesaOuConta+'.');
    end else
    begin
      //
      Form1.iMesaAberta := StrToInt('0'+LimpaNumero(tComponent(Sender).Name));
      //
      if (Form1.iMesaAberta <=0) or (Form1.iMesaAberta>StrToInt(Form1.sMesas)) then
      begin
        SmallMsg(sMesaOuConta+' inválida');
      end else
      begin
        Form1.sModeloECF := '01';
        Button2Click(Sender);
        Abort;
      end;
    end;
  end;
  //
end;

function ConfiguraNFCE(sP1:Boolean) : Boolean;
var
  Mais1Ini: TIniFile;
  sCaminhoIntegrador: String;
  sChaveAcessoValidador: String;
begin
  try

    // Criando aqui em runtime para evitar problema quando não tem instalado o NFC-e_setup
    // Frente.exe ecf e cfesat.exe não precisam do nfc-e_setup
    if Form1.spdNFCeDataSets1 = nil then
    begin
      Form1.spdNFCeDataSets1 := TspdNFCeDataSets.Create(Application);
      Form1.spdNFCeDataSets1.VersaoEsquema            := pl_008a;
      Form1.spdNFCeDataSets1.ValidaRegrasNegocio      := False;
      Form1.spdNFCeDataSets1.ValidaRegrasNegocioTecno := False;

    end;

    if Form1.spdNFCe1 = nil then
    begin
      Form1.spdNFCe1 := TspdNFCe.Create(Application);
      {Sandro Silva 2022-12-15 inicio
      Form1.spdNFCe1.ConfigurarSoftwareHouse('07426598000124', '9830b685216a9c4613bc76c84098272d');// Sandro Silva 2018-05-30
      }
      Form1.ConfiguraCredencialTecnospeed;
      {Sandro Silva 2022-12-15 fim}


      Form1.spdNFCe1.AtualizarArquivoServidores := True; // Sempre atualizar os link dos arquivos servidores .ini Sandro Silva 2021-02-01 

      Form1.spdNFCe1.VersaoManual                      := vm60; // Sandro Silva 2020-02-14
      Form1.spdNFCe1.DanfceSettings.FraseContingencia  := 'Danfce em contingência - Impresso em decorrência de problemas técnicos';
      Form1.spdNFCe1.DanfceSettings.FraseHomologacao   := 'SEM VALOR FISCAL';
      Form1.spdNFCe1.DanfceSettings.QtdeCopias         := 1;
      Form1.spdNFCe1.DanfceSettings.LineDelimiter      := '|';
      Form1.spdNFCe1.DanfceSettings.InfCplMaxCol       := 68;
      Form1.spdNFCe1.DanfceSettings.InfCplMaxRow       := 7;
      Form1.spdNFCe1.DanfceSettings.FormatoDanfce      := fdNormal;
      Form1.spdNFCe1.DanfceSettings.ExibirDetalhamento := False;
      Form1.spdNFCe1.CaracteresRemoverAcentos          := 'áéíóúàèìòùâêîôûäëïöüãõñçÁÉÍÓÚÀÈÌÒÙÂÊÎÔÛÄËÏÖÜÃÕÑÇºª';
      Form1.spdNFCe1.TipoCertificado                   := ckFile;
      Form1.spdNFCe1.IgnoreInvalidCertificates         := True;
      Form1.spdNFCe1.Ambiente                          := akHomologacao;
      Form1.spdNFCe1.ValidarEsquemaAntesEnvio          := True;
      Form1.spdNFCe1.EmailSettings.Autenticacao        := False;
      Form1.spdNFCe1.EmailSettings.TimeOut             := 15000;
      Form1.spdNFCe1.EmailSettings.AnexarDanfcePDF     := True;
      Form1.spdNFCe1.EmailSettings.ConteudoHtml        := False;
      Form1.spdNFCe1.ConexaoSegura                     := True;
      Form1.spdNFCe1.TimeOut                           := TIMEOUT_NFCE;
      Form1.spdNFCe1.SectionINI                        := 'NFCE';
      Form1.spdNFCe1.MaxSizeLoteEnvio                  := 500;
      Form1.spdNFCe1.EntregaXML                        := exEmail;
      Form1.spdNFCe1.HashCertificado                   := '00000000000000000000000000000000';
      if Form1.UsaIntegradorFiscal(Form1.ibDataSet13.FieldByName('ESTADO').AsString) then
      begin
        sCaminhoIntegrador := LerParametroIni(FRENTE_INI, SECAO_MFE, CHAVE_CAMINHO_INTEGRADOR_FISCAL, Form1.IntegradorCE.CaminhoIntegrador); // 'c:\Integrador';
        if sCaminhoIntegrador = '' then
        begin
          if ConfiguraCaminhoIntegradorFiscal then
            sCaminhoIntegrador := LerParametroIni(FRENTE_INI, SECAO_MFE, CHAVE_CAMINHO_INTEGRADOR_FISCAL, Form1.IntegradorCE.CaminhoIntegrador); // 'c:\Integrador';
        end;

        sChaveAcessoValidador := LerParametroIni(FRENTE_INI, SECAO_MFE, CHAVE_CHAVE_ACESSO_VALIDADOR, Form1.IntegradorCE.ChaveAcessoValidador); // '25CFE38D-3B92-46C0-91CA-CFF751A82D3D';
        if sChaveAcessoValidador = '' then
        begin
          GravarParametroIni(FRENTE_INI, SECAO_MFE, CHAVE_CHAVE_ACESSO_VALIDADOR, '25CFE38D-3B92-46C0-91CA-CFF751A82D3D'); // Usar a chave padrão enquanto a SEFAZ não disponivilizar uma chave para cada contribuinte // Sandro Silva 2019-04-01
          if ConfiguraChaveAcessoValidadorFiscal then
            sChaveAcessoValidador := LerParametroIni(FRENTE_INI, SECAO_MFE, CHAVE_CHAVE_ACESSO_VALIDADOR, Form1.IntegradorCE.ChaveAcessoValidador); // '25CFE38D-3B92-46C0-91CA-CFF751A82D3D';
        end;

        try
          ForceDirectories(sCaminhoIntegrador + '\INPUT');
          ForceDirectories(sCaminhoIntegrador + '\OUTPUT');
        except
        end;

        if Form1.UsaIntegradorFiscal() then
        begin
          Form1.spdNFCe1.Integrador.Ativar                 := True; // Ceará obrigatório uso do Integrador Fiscal

          Form1.spdNFCe1.Integrador.DiretorioEntrada       := sCaminhoIntegrador + '\INPUT';
          Form1.spdNFCe1.Integrador.DiretorioSaida         := sCaminhoIntegrador + '\OUTPUT';
          Form1.spdNFCe1.Integrador.TimeOut                := 60;
          
        end;

        if Form1.sModeloECF = '65' then
        begin
          // Componente NFC-e da tecnospeed não trata as questões relacionadas às vendas em cartão exigidas pela SEFAZ/CE
          Form1.IntegradorCE.CnpjContribuinte     := LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString); // Sandro Silva 2018-07-03
          Form1.IntegradorCE.DiretorioAtual       := Form1.sAtual; // Sandro Silva 2018-07-03
          Form1.IntegradorCE.CaminhoLog           := ExtractFilePath(Application.ExeName) + 'log';// Sandro Silva 2018-07-03
          Form1.IntegradorCE.CaminhoIntegrador    := sCaminhoIntegrador; // Sandro Silva 2018-07-03
          Form1.IntegradorCE.ChaveAcessoValidador := sChaveAcessoValidador; // Sandro Silva 2018-07-03
          Form1.IntegradorCE.ComponenteMFE        := COMPONENTE_NFCE; // Sandro Silva 2018-07-03
        end;

      end;

    end;

    if Form1.UsaIntegradorFiscal() then
    begin
      Form1.IntegradorCE.Caixa                := Form1.sCaixa; // Sandro Silva 2018-07-03
    end;

    Form1.NmerodoCredencimentodoPAFECF1.Visible        := False; // Sandro Silva 2017-08-04
    Form1.NmerodoCredencimentodaImpressoraECF1.Visible := False; // Sandro Silva 2017-08-04

    if Form1.sModeloECF = '65' then
    begin
      Form1.N30.Visible := False; // Sandro Silva 2017-09-05
      Form1.ConsultarStatusdoServio1.Caption := 'Consultar Status do Serviço...';

      Form1.ConsultaStatusOperacionaldoSAT1.Visible      := False;
      Form1.ExtrairLogdoSAT1.Visible                     := False;
      Form1.SATInicializaoAlternativa1.Visible           := False;
      Form1.Nfcetimeout1.Visible                         := True; // Sandro Silva 2017-02-02
      Form1.SATConectarServidorSAT1.Visible              := False; // Sandro Silva 2017-03-03
      Form1.SATCaminhodecomunicaocomServidorSAT1.Visible := False; // Sandro Silva 2017-03-03
      Form1.ConfigurarNmerodoCaixa1.Visible              := False; // Sandro Silva 2017-03-03
      Form1.ConfigurarFabricanteeModeloSAT1.Visible      := False; // Sandro Silva 2017-07-12
      Form1.VincularAssinaturaAC1.Visible                := False; // Sandro Silva 2018-08-29
      Form1.VersoLeiauteSat0071.Visible                  := False; // Sandro Silva 2019-05-14
      Form1.VersoLeiauteSat0081.Visible                  := False; // Sandro Silva 2019-05-14
      Form1.InformaesdoresponsveltcnicoNFCe1.Visible     := False; // Sandro Silva 2021-09-01
      // Sandro Silva 2021-09-01 Form1.InformaesdoresponsveltcnicoNFCe1.Visible     := True; // Sandro Silva 2019-04-11
      Form1.HorriodeVero1.Visible                  := True; // Sandro Silva 2019-02-21
      Form1.Selecionarcertificadodigital1.Visible  := True; // 2015-07-21
      // Sandro Silva 2021-09-01 Form1.ConfigurarServidoresHomologao1.Visible := True;
      // Sandro Silva 2021-09-01 Form1.ConfigurarServidoresdeProduo1.Visible  := True;
      Form1.NFCenoperodo1.Visible                  := True; // Sandro Silva 2018-04-11
      Form1.ransmitircontingncia2.Visible          := True; // Sandro Silva 2019-08-12
      Form1.NFCenoperodo1.Caption                  := 'NFC-e no período...'; // Sandro Silva 2018-06-04

      Form1.IdentificarCredenciadoraPoS1.Caption   := 'Identificar Credenciadora Cartão POS'; // Sandro Silva 2017-09-06
      Form1.IdentificarCredenciadoraPoS1.MenuIndex := Form1.Modopagamentocommltiploscartes1.MenuIndex - 1; // Sandro Silva 2017-09-06

      Form1.ConsultarStatusdoServio1.MenuIndex := Form1.ExportarXMLparacontabilidade1.MenuIndex - 1; // Sandro Silva 2017-09-05
      Form1.InutilizaodeNFCes1.MenuIndex       := Form1.ExportarXMLparacontabilidade1.MenuIndex + 1; // Sandro Silva 2017-09-05

      //     
      Form1.spdNFCe1.DiretorioTemporario      := Form1.sAtual + '\nfce';
      Form1.spdNFCe1.DiretorioLogErro         := Form1.sAtual + '\logErro';
      Form1.spdNFCe1.DiretorioLog             := Form1.sAtual + '\log';
      Form1.spdNFCe1.DiretorioXmlDestinatario := Form1.sAtual + '\XmlDestinatario\NFCE';
    end;
    //
    if AllTrim(Form1.ibDataSet13.FieldByName('ESTADO').AsString) <> '' then
    begin
      //
      Mais1ini               := TIniFile.Create('FRENTE.INI');
      if Form1.sModeloECF = '65' then
      begin
        //
        if FileExists(PAnsiChar(Form1.sAtual + '\nfce\nfceServidoresHom.ini')) = False then
          SmallMsg('Arquivo com configuração dos Servidor de Homologação não encontrado');
        if FileExists(PAnsiChar(Form1.sAtual + '\nfce\nfceServidoresProd.ini')) = False then
          SmallMsg('Arquivo com configuração dos Servidor de Produção não encontrado');
        Form1.spdNFCe1.CNPJ                  := LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString);
        Form1.spdNFCe1.ArquivoServidoresHom  := Form1.sAtual + '\nfce\nfceServidoresHom.ini';
        Form1.spdNFCe1.ArquivoServidoresProd := Form1.sAtual + '\nfce\nfceServidoresProd.ini';
        //
        if UpperCase(Mais1Ini.ReadString('NFCE','Tipo certificado','File')) = 'FILE'            then Form1.spdNFCe1.TipoCertificado := ckFile;
        if UpperCase(Mais1Ini.ReadString('NFCE','Tipo certificado','File')) = 'SMARTCARD'       then Form1.spdNFCe1.TipoCertificado := ckSmartCard;
        if UpperCase(Mais1Ini.ReadString('NFCE','Tipo certificado','File')) = 'ACTIVEDIRECTORY' then Form1.spdNFCe1.TipoCertificado := ckActiveDiretory;
        if UpperCase(Mais1Ini.ReadString('NFCE','Tipo certificado','File')) = 'MEMORY'          then Form1.spdNFCe1.TipoCertificado := ckMemory;
        if UpperCase(Mais1Ini.ReadString('NFCE','Tipo certificado','File')) = 'LOCALMACHINE'    then Form1.spdNFCe1.TipoCertificado := ckLocalMachine;

        if Mais1Ini.ReadString('NFCE', 'Timeout', '') = '' then
          Mais1Ini.WriteInteger('NFCE', 'Timeout', TIMEOUT_NFCE); // Sandro Silva 2017-02-17 Inicia 20 segundos como padrão
        Form1.spdNFCe1.TimeOut := Mais1Ini.ReadInteger('NFCE', 'Timeout', TIMEOUT_NFCE) * 1000;

        if Form1.spdNFCe1.TimeOut < 20000 then
        begin
          Form1.spdNFCe1.TimeOut := 20000;
          Mais1Ini.WriteInteger('NFCE', 'Timeout', 20000);
        end;

        Form1.Versodolayout1.Visible         := False; // Sandro Silva 2021-09-01
        Form1.VersodoManualdaNFCe1.Visible   := False; // Sandro Silva 2021-09-01

        if LowerCase(Mais1Ini.ReadString('NFCE', CHAVE_INI_VERSAO_MANUAL, '')) = '' then
          Mais1Ini.WriteString('NFCE', CHAVE_INI_VERSAO_MANUAL, 'vm60');

        Form1.NFCeVersaoManualvm601.Checked   := True;
        Form1.NFCeVersaoSchemapl0091.Checked  := True;

      end;
      //
      if Mais1Ini.ReadString('NFCE','Imprimir DANFCE','Sim')   = 'Sim' then Form1.ImprimirDANFCE1.Checked             := True else Form1.ImprimirDANFCE1.Checked             := False;
      if Mais1Ini.ReadString('NFCE','Visualizar DANFCE','Não') = 'Sim' then Form1.VisualizarDANFCE1.Checked           := True else Form1.VisualizarDANFCE1.Checked           := False;
      if Mais1Ini.ReadString('NFCE','DANFCE detalhado','Sim')  = 'Sim' then Form1.DANFCEdetalhado1.Checked            := True else Form1.DANFCEdetalhado1.Checked            := False;
      if Mais1Ini.ReadString('NFCE','ENVIAR COMPACTADO','Não') = 'Sim' then Form1.EnviarDANFCEeXMLcompactado1.Checked := True else Form1.EnviarDANFCEeXMLcompactado1.Checked := False; // 2015-11-30

      Form1.sinfRespTec := 'Sim';
      //
      //
      // Altera a Versão do Manual no Componente NFe
      // essa mudança afeta o comportamento do componente quanto á
      // Geração da Chave de Acesso, Assinatura, Comunicação com SEFAZ, Validação de Esquema
      //
      if Form1.sModeloECF = '65' then
      begin
        //
        // vm60
        //
        Form1.spdNFCe1.DiretorioEsquemas                := Form1.sAtual + '\nfce\Esquemas\vm60';
        Form1.spdNFCe1.DiretorioTemplates               := Form1.sAtual + '\nfce\Templates\vm60';
        Form1.spdNFCe1.UF                               := UpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString);
        Form1.spdNFCe1.VersaoManual                     := vm60;
        Form1.spdNFCeDataSets1.VersaoEsquema            := pl_009;
        Form1.spdNFCeDataSets1.XMLDicionario            := Form1.sAtual + '\nfce\Templates\vm60\Conversor\NFCeDataSets.xml';
        //
        // Nestas 3 linhas que dava o erro ....
        //
        Form1.spdNFCe1.DanfceSettings.LogotipoEmitente := Form1.sAtual + '\logofrente.bmp';
        Form1.spdNFCe1.DanfceSettings.IdTokenNFCe      := Mais1Ini.ReadString('NFCE','ID Token NFCE','');
        Form1.spdNFCe1.DanfceSettings.TokenNFCe        := Mais1Ini.ReadString('NFCE','Número do Token NFCE','');

        {Sandro Silva 2022-05-02 inicio}
        if Form1.spdNFCe1.DanfceSettings.IdTokenNFCe = '' then
        begin
          // Recupera o ID CSC e CSC salvos em nfe.ini
          Mais1Ini.WriteString('NFCE', 'ID Token NFCE', LerParametroIni(ExtractFilePath(Application.ExeName) + 'NFE.INI', 'NFCE', 'ID Token NFCE', ''));
          Mais1Ini.WriteString('NFCE', 'Número do Token NFCE', LerParametroIni(ExtractFilePath(Application.ExeName) + 'NFE.INI', 'NFCE', 'Número do Token NFCE', ''));
          Form1.spdNFCe1.DanfceSettings.IdTokenNFCe      := Mais1Ini.ReadString('NFCE','ID Token NFCE','');
          Form1.spdNFCe1.DanfceSettings.TokenNFCe        := Mais1Ini.ReadString('NFCE','Número do Token NFCE','');
        end;
        {Sandro Silva 2022-05-02 fim}

        Form1.spdNFCe1.DanfceSettings.InfCplMaxCol     := 700;
        Form1.spdNFCe1.DanfceSettings.InfCplMaxRow     := 500;

        if Form1.bBalancaAutonoma = False then // Sandro Silva 2019-01-25
        begin
          //
          try

            _ecf65_ImportaCertificadoNFe(Form1.sAtualOnLine + '\nfe.ini'); // Sandro Silva 2021-08-12

            if (Mais1Ini.ReadString('NFCE','Certificado','XXX') <> 'XXX') or (Mais1Ini.ReadString('NFCE','Certificado','') = '') then // Sandro Silva 2019-03-19 if Mais1Ini.ReadString('NFCE','Certificado','XXX') <> 'XXX' then
            begin
              Form1.spdNFCe1.NomeCertificado.Text := StringReplace(Mais1Ini.ReadString('NFCE','Certificado',''), 'XXX', '', [rfReplaceAll]); // Sandro Silva 2019-03-19 Form1.spdNFCe1.NomeCertificado.Text          := Mais1Ini.ReadString('NFCE','Certificado','');

              if AllTrim(Form1.spdNFCe1.NomeCertificado.Text) = '' then
              begin
                //
                Form1.Selecionarcertificadodigital1Click(Form1.Selecionarcertificadodigital1);
                //
              end;

            end;

          except
            //
            on E: Exception do
            begin

              SmallMsgBox(
                          pChar(
                          chr(10) +'Erro:'
                          +Chr(10)
                          +Chr(10)+E.Message
                          +Chr(10)
                          +chr(10)+'1 - Verifique se o seu certificado está instalado'
                          +chr(10)+'2 - Verifique se o seu certificado está selecionado'
                          +chr(10)+'3 - Seu certificado pode estar vencido'
                          +chr(10)+'4 - Seu certificado pode ser inválido'
                          + chr(10)
                          +chr(10)+'Certificados recomendados' // Sandro Silva 2022-12-02 Unochapeco +chr(10)+'Certificados recomendados pela Smallsoft®'
                          +chr(10)+''
                          +chr(10)+'1. Certificados SERASA'
                          +chr(10)+'    * A1'
                          +chr(10)+'    * SmartCard'
                          +chr(10)+'    * E-CNPJ'
                          +chr(10)+'2. Certificados Certisign A1 e A3'
                          +chr(10)+'3. Certificados dos Correios A1 e A3'
                          +chr(10)+'4. Certificados A3 PRONOVA ACOS5'
                          +chr(10)
                          +chr(10)
                          +'OBS: Não ligue para o suporte técnico da Zucchetti® por este motivo.'),  // Sandro Silva 2022-12-02 Unochapeco +'OBS: Não ligue para o suporte técnico da Smallsoft® por este motivo.'),
                          'Atenção',mb_Ok + MB_ICONWARNING);
            end;
            //
          end;

        end;
      end;
      //
      // Ambiente
      //
      if Form1.sModeloECF = '65' then // 2015-06-18
      begin
        if (AnsiUpperCase(Mais1Ini.ReadString('NFCE','Ambiente',_65_AMBIENTE_HOMOLOGACAO)) <> _65_AMBIENTE_HOMOLOGACAO)
          and (AnsiUpperCase(Mais1Ini.ReadString('NFCE','Ambiente',_65_AMBIENTE_HOMOLOGACAO)) <> _65_AMBIENTE_PRODUCAO) then
          Mais1Ini.WriteString('NFCE','Ambiente',_65_AMBIENTE_HOMOLOGACAO);
        if Form1.sModeloECF = '65' then
        begin
          if AnsiUpperCase(Mais1Ini.ReadString('NFCE','Ambiente',_65_AMBIENTE_HOMOLOGACAO)) = _65_AMBIENTE_HOMOLOGACAO then
            Form1.spdNFCe1.Ambiente := akHomologacao
          else
            Form1.spdNFCe1.Ambiente := akProducao;
        end;
      end;

      if Form1.sModeloECF = '59' then // 2015-06-18
      begin
        if (Mais1Ini.ReadString(SECAO_59,_59_CHAVE_AMBIENTE,_59_AMBIENTE_HOMOLOGACAO) <> _59_AMBIENTE_HOMOLOGACAO)
          and (Mais1Ini.ReadString(SECAO_59,_59_CHAVE_AMBIENTE,_59_AMBIENTE_HOMOLOGACAO) <> _59_AMBIENTE_PRODUCAO) then
        begin

          if _ecf59_LeAssinaturaAssociada <> '' then
            Mais1Ini.WriteString(SECAO_59,_59_CHAVE_AMBIENTE,_59_AMBIENTE_PRODUCAO)
          else
            Mais1Ini.WriteString(SECAO_59,_59_CHAVE_AMBIENTE,_59_AMBIENTE_HOMOLOGACAO);
        end;

        Form1.IDTokenNFCE1.MenuIndex             := Form1.SATConectarServidorSAT1.MenuIndex - 1; // Sandro Silva 2017-09-05

        Form1.IdentificarCredenciadoraPoS1.Caption   := 'Informar o número de parcelas para Cartão com POS'; // Sandro Silva 2017-09-06
        Form1.IdentificarCredenciadoraPoS1.MenuIndex := Form1.EF1.MenuIndex - 1; // Sandro Silva 2017-09-06

      end;

      if Form1.sModeloECF = '65' then // 2015-06-18
      begin

        // Sandro Silva 2021-01-11  Form1.NFCeemContingncia1.Enabled := (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) <> 'SC') and (Form1.UsaIntegradorFiscal() = False); // Sandro Silva 2018-07-03  AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) <> 'SC';
        Form1.NFCeemContingncia1.Enabled := ((AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) <> 'SC') and (Form1.UsaIntegradorFiscal() = False) or (PAFNFCe));

        if Form1.UsaIntegradorFiscal() then
        begin
          Form1.IntegradorFiscal1.Visible := True;
          Form1.AdquirentesPOS1.Enabled   := True;
          Form1.AdquirentesPOS1.Visible   := True;
          Form1.N27.Visible               := True;
       end;

      end;

      //
      Mais1ini.Free;
      //
      Result := True;
      //
    end else
    begin
      if (Form1.ClienteSmallMobile.sVendaImportando = '')
        and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65')) then
      begin
        Application.ProcessMessages;
        Application.BringToFront;
        SmallMsg('Configure o ESTADO no cadastro do emitente.');
      end;
      Result := False;
      //
    end;

    if DirectoryExists(Form1.sAtual + '\nfce\Esquemas\vm60') = False then
    begin
      Application.ProcessMessages;
      Application.BringToFront;
      {Sandro Silva 2022-04-11 inicio
      if Copy(StringReplace(Form22.sSerie, 'Número de série: ', '', [rfReplaceAll]), 4, 1) = 'S' then
        SmallMsgBox(PAnsiChar('Versão desatualizada' + #13 + 'Abra o Small Start e faça a atualização em' + #13 + #13 + 'Config\Atualizar programa pela Internet' + #13 + #13 + 'Essa aplicação será fechada'), 'Atenção', MB_OK + MB_ICONWARNING)
      else
        SmallMsgBox(PAnsiChar('Versão desatualizada' + #13 + 'Abra o Small Commerce e faça a atualização em' + #13 + #13 + 'Config\Atualizar programa pela Internet' + #13 + #13 + 'Essa aplicação será fechada'), 'Atenção', MB_OK + MB_ICONWARNING);
      }
      SmallMsgBox(PAnsiChar('Versão desatualizada' + #13 + 'Abra o Small e faça a atualização em' + #13 + #13 + 'Config\Atualizar programa pela Internet' + #13 + #13 + 'Essa aplicação será fechada'), 'Atenção', MB_OK + MB_ICONWARNING);
      {Sandro Silva 2022-04-11 fim}
      FecharAplicacao(ExtractFileName(Application.ExeName));
    end;

  except
    Result := False;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  I : Integer;
  sSecoes :  TStrings;
  Mais1Ini: TIniFile;
  sExeName: String;
  bInicializa: Boolean;// Sandro Silva 2017-07-05
begin
  AjustarBufferChuncks(Form1);
  ClienteSmallMobile := TSmallMobileCliente.Create;

  if Aplicacao = nil then
    Aplicacao := TMyApplication.Create(Application);

  {Sandro Silva 2023-05-25 inicio}
  if ValidaRecursos = nil then
    ValidaRecursos := TValidaRecurso.Create;
  {Sandro Silva 2023-05-25 fim}

  PosElginPay := TSmallElginPayPos.Create(Form1); // Sandro Silva 2022-02-11

  TipoEntrega := TTipoEntrega.Create(Application); // Sandro Silva 2020-06-01

  bGerarXmlReducaoRecuperada := True; // Sandro Silva 2019-09-09 ER 02.06 UnoChapeco
  bInicializa                := False; // Sandro Silva 2018-07-18

  IntegradorCE := TIntegradorFiscal.Create; // Sandro Silva 2018-07-03

  ContingenciaPendente := TContingencia.Create; // Sandro Silva 2019-08-14
  ContingenciaPendente.LimiteDias := 14; // Sandro Silva 2019-09-30  7; // Sandro Silva 2019-08-14

  CDSR01.CreateDataSet; // Sandro Silva 2017-11-28 Polimig

  Form1.Label13.Visible := False; // Sandro Silva 2021-07-29
  Form1.Label_CopyRight.Left := MARGEM_ESQUERDA_OBJ; // Sandro Silva 2021-07-29

  Panel3.Color := $00AFD39D;// verde
  Panel3.BorderStyle := bsNone; // Sandro Silva 2017-09-15

  VendasporPerodo1.Visible := False; // Sandro Silva 2017-07-24 Requisito Revogado a partir da ER 02.04
  bOcultarMensagemArquivoAssinado := False; // Sandro Silva 2017-07-27

  //ListaTransacoesCartao := TTransacaoCartaoList.Create; // Sandro Silva 2017-06-14
  TransacoesCartao := TTransacaoFinanceira.Create(Application); // Sandro Silva 2017-08-29
  TransacoesCartao.Parent := Form1; // Sandro Silva 2017-08-29

  //
  Panel2.BevelOuter  := bvNone;
  Panel2.BorderWidth := 0;

  Panel9.BevelOuter  := bvNone;
  Panel9.BorderWidth := 0;

  Panel4.BevelOuter  := bvNone;
  Panel4.BorderWidth := 0;

  //
  Form1.DBGrid2.Options := [dgAlwaysShowSelection, dgConfirmDelete, dgCancelOnExit];  // Sandro Silva 2016-08-04

  touch_baixo.Visible := False;
  touch_cima.Visible  := False; // Sandro Silva 2016-08-12

  //
  //SmallMsg('Teste 01 Create início');
  //LogFrente('Teste 01: Inciando FormCreate');

  LabelESC2.Width  := touch_ESC2.Width;
  LabelESC2.Height := touch_ESC2.Height;
  LabelESC2.Top    := touch_ESC2.Top;
  LabelESC2.Left   := touch_ESC2.Left;

  LabelESC2.Alignment := taCenter;
  LabelESC2.Caption   := 'ESC' + #13 + 'Voltar';

  LabelPesquisaNFCe.Width     := touch_PesquisaNFCe.Width;
  LabelPesquisaNFCe.Height    := touch_PesquisaNFCe.Height;
  LabelPesquisaNFCe.Top       := touch_PesquisaNFCe.Top;
  LabelPesquisaNFCe.Left      := touch_PesquisaNFCe.Left;
  LabelPesquisaNFCe.Alignment := taCenter;
  LabelPesquisaNFCe.Caption   := 'Pesquisa';

  LabelOpcoesNFCe.Width       := touch_OpcoesNFCe.Width;
  LabelOpcoesNFCe.Height      := touch_OpcoesNFCe.Height;
  LabelOpcoesNFCe.Top         := touch_OpcoesNFCe.Top;
  LabelOpcoesNFCe.Left        := touch_OpcoesNFCe.Left;
  LabelOpcoesNFCe.Alignment   := taCenter;
  LabelOpcoesNFCe.Caption     := 'Opções';

  List_paramentros := TStringList.Create;
  List_paramentros.Clear;
  for I := 1 to 100 do
  begin
    if (Trim(ParamStr(I)) <> '') then
      List_paramentros.Add(ParamStr(I));
  end;

  sFormaPag        := '';// 2015-06-29 Form1.sFormaPag := '';
  Form1.ClienteSmallMobile.sVendaImportando := '';

  Timer2.Interval := INTERVAL_FRENTE_MAXIMIZADO; // 2015-06-23

  Minimizarnabandeja1.Visible := False;
  Iniciarminimizado1.Visible  := Iniciarminimizado1.Visible;
  N10.Visible                 := Iniciarminimizado1.Visible;
  IniciarcomWindows1.Visible  := Iniciarminimizado1.Visible;

  //Reduz a quantia de vezes que a tela pisca
  Form1.DoubleBuffered  := True;
  Panel1.DoubleBuffered := True;
  Panel9.DoubleBuffered := True;

  NotifyIconData.cbSize := SizeOf(TNotifyIconData);

  //
  // ChDir('c:\Projeto 2014\2014');
  //
  // Altera
  Form1.Caption := 'Programa Aplicativo Fiscal (PAF-ECF)';

  sExeName := AnsiLowerCase(ExtractFileName(Application.ExeName));

  if (sExeName = 'nfce.exe') or (NFCe)then // Sandro Silva 2021-03-19 if (sExeName = 'nfce.exe') then
  begin
    Form1.Caption := 'Aplicativo emissor NFC-e';
  end;
  if (sExeName = 'cfesat.exe') or (SAT) or (MFE) then // Sandro Silva 2021-03-19 if (sExeName = 'cfesat.exe') then
  begin
    Form1.Caption := 'Aplicativo emissor CF-e';
  end;
  if (sExeName = 'mei.exe') or (MEI) then // Sandro Silva 2021-03-19 if (sExeName = 'mei.exe') then
  begin
    Form1.Caption := 'Aplicativo MEI';
  end;

  if (PAFNFCe) then
  begin
    Form1.Caption := 'Aplicativo emissor NFC-e (PAF-NFC-e)';
  end;
  //
  Getdir(0,sAtualOnLine);
  Getdir(0,sAtual);

  //
  Form22.Image1.Left    := (Screen.Width - Form22.Image1.Width ) div 2;
  Form22.Image1.Top     := ((Screen.Height - Form22.Image1.Height ) div 2) - 160 - 70;//90 // Sandro Silva 2021-07-22 (Screen.Height - Form22.Image1.Height ) div 2 - 160 - 50;
  Form22.Image1.Visible := True;
  //
  Form22.Button1.Left   := (Screen.Width - Form22.Button1.Width ) div 2;
  Form22.Button1.Top    := (Screen.Height - Form22.Button1.Height ) div 2 - 160 + 250;
  //
  //
  Form22.Label6.Top     := Form22.Image1.Top + Form22.Image1.Height + 20;
  Form22.Label6.Width   := Screen.Width;
  Form22.Label6.Left    := 0;
  //
  //if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65')
  //  and (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'FRENTE.EXE') then // Sandro Silva 2017-04-12
  begin

    if Trim(Form1.sPastaDoExecutavel) <> '' then
    begin
      Form22.Label6.Caption := 'O arquivo: LISTA.TXT foi gravado na pasta: '+Form1.sPastaDoExecutavel + '\';
      Form22.Label6.Repaint; // 2015-09-08
      ExibirCaminhoLista;
    end;

  end;
  //
  Form1.touch_F2.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F3.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F4.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F5.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F6.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F7.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F8.Picture           := Form1.touch_F1.Picture;
  Form1.touch_F12.Picture          := Form1.touch_ESC.Picture;
  Form1.touch_F11.Picture          := Form1.touch_ESC.Picture;
  Form1.touch_ESC2.Picture         := Form1.touch_ESC.Picture;
  Form1.touch_cima_cupom.Picture   := Form1.touch_cima.Picture;
  Form1.touch_baixo_cupom.Picture  := Form1.touch_baixo.Picture;
  Form1.touch_PesquisaNFCe.Picture := Form1.touch_F1.Picture; // Sandro Silva 2017-12-13
  Form1.touch_OpcoesNFCe.Picture   := Form1.touch_F1.Picture; // Sandro Silva 2017-12-13
  //
  Form1.sMotivoContingencia    := '';
  Form1.sMensagemMesaConferida := '';
  Form1.sHoraMovimento         := TimeToStr(Time);
  iPagina             := 1;
  Form1.iMesaAberta   := 0;
  //
  bPedeDadosOs        := True;
  Form1.bStatusRede   := True;
  Form1.bStatusFiscal := True;
  Form1.bStatusECF    := True;
  //
  Form1.bFechaTudo := False;
  Form1.sPasta := CHAVE_CIFRAR;
  //
  sAjuda   := 'ecf_teclas.htm';
  sArquivo := NOME_ARQUIVO_AUXILIAR_CRIPTOGRAFADO_PAF_ECF; // Sandro Silva 2022-12-02 sArquivo := 'arquivoauxiliarcriptografadopafecfsmallsoft.ini'; Unochapeco
  //
  Form1.sProximo027 := '';
  Form1.sProximo27 := '';
  Form1.sModeloECF := '01';

  //ShowMessage('Teste 01 12283'); // Sandro Silva 2017-11-03

  // A partir deste ponto o tamanho dos objetos está dimensionado conforme a resolução do monitor
  AjustaResolucao(Form1);
  AjustaResolucao(Form1.Frame_teclado1);

  //
  Mais1ini   := TIniFile.Create(Form1.sAtual+'\EST0QUE.DAT');
  sLiberacao := Mais1Ini.ReadString('Frente de caixa','B17','1');
  //
  if sLiberacao = '1'
    then BloqueioPorSenha1.Checked := False
      else BloqueioPorSenha1.Checked := True;
  //
  Mais1Ini.Free; // Sandro Silva 2018-11-21 Memória
  //
  iAjuste := 99; // Ajusta o tamanho dos elementos na tela.
  bSairDoPrograma := False;
  bData           := True;
  //
  // Configuração visuais
  //
  Mais1ini    := TIniFile.Create(Form1.sAtual+'\smallcom.inf');
  //
  ConfCusto   := Mais1Ini.ReadString('Permitir','Vendas abaixo do custo','Sim');
  ConfCasas   := Mais1Ini.ReadString('Outros','Casas decimais na quantidade','2');
  ConfPreco   := Mais1Ini.ReadString('Outros','Casas decimais no preço','2');
  sPropaganda := Mais1Ini.ReadString('Outros','Propaganda','');
  ModoMercado := 'Sim';

  iDiasCartaoCredito := StrToIntDef(Mais1Ini.ReadString('Cartoes','Dias Credito','30'), 30); // Sandro Silva 2019-11-19
  iDiasCartaoDebito  := StrToIntDef(Mais1Ini.ReadString('Cartoes','Dias Debito','30'), 30); // Sandro Silva 2019-11-19

  //
  GetWindowsDirectory(aWinDir,200);
  //
  Mais1Ini.Free;
  // Ano 200 bug free
  bNaoSaiComESC := False;
  ShortDateFormat := 'dd/mm/yyyy';
  sPrazo  := '';
  sPorta  := '';
  fQuantidadeVendida := 1; // Produto pesado

  //ShowMessage('Teste 01 12320'); // Sandro Silva 2017-11-03

  //
  Mais1ini               := TIniFile.Create('FRENTE.INI');

  try
    if DirectoryExists(DIRETORIO_BKP_TEF) = False then
      ForceDirectories(DIRETORIO_BKP_TEF);
  except

  end;

  if Mais1Ini.ReadString('Frente de caixa', 'Modelo do ECF', '') = '' then
  begin
    // Faz a configuração automática se não existir configuração do modelo de ecf para SAT e NFCe
    if AnsiContainsText(ExtractFileName(Application.ExeName), 'cfesat.exe') or (SAT) or (MFE) then // Sandro Silva 2021-03-19 if AnsiContainsText(ExtractFileName(Application.ExeName), 'cfesat.exe') then
    begin
      Mais1Ini.WriteString('Frente de caixa', 'Modelo do ECF', '59');
    end;
    if AnsiContainsText(ExtractFileName(Application.ExeName), 'nfce.exe') or (NFCe) or (PAFNFCE) then // Sandro Silva 2021-03-19 if AnsiContainsText(ExtractFileName(Application.ExeName), 'nfce.exe') then
    begin
      Mais1Ini.WriteString('Frente de caixa', 'Modelo do ECF', '65');
    end;
  end
  else
  begin
    // Já tem o modelo definido no frente.ini e não tem definido o uso da balança autonoma
    // Balança autonoma é definida como Não
    if Mais1Ini.ReadString('Frente de caixa', 'Balanca autonoma', '') = '' then // Sandro Silva 2019-02-11
      Mais1Ini.WriteString('Frente de caixa', 'Balanca autonoma', 'Não');
  end;

  sCodigoIdentificaEcf := LimpaNumero(Mais1Ini.ReadString('Frente de caixa', 'id ECF', '')); // Sandro Silva 2016-04-02
  if Length(sCodigoIdentificaEcf) <> 6 then
    sCodigoIdentificaEcf := '';

  iTimeOutDLLG2 := StrToIntDef(Mais1Ini.ReadString('Frente de caixa', 'TIMEOUTDLLG2', '5'), 5);

  sAvancoPapel := Mais1Ini.ReadString('Frente de caixa', 'Avanco Papel', '200');

  sRGTurbo               := Mais1Ini.ReadString('Frente de caixa'  , 'RG TURBO'               ,'Sim');
  sPorta                 := Mais1Ini.ReadString('Frente de caixa'  , 'Porta'                  ,'COM1');
  sVendedorFixo          := Mais1Ini.ReadString('Frente de caixa'  , 'Vendedor fixo'          ,'');
  iVias                  := Mais1Ini.ReadInteger('Frente de caixa' , 'Vias do Cupom Vinculado',1);
  Form1.sModeloECF       := Mais1Ini.ReadString('Frente de caixa'  , 'Modelo do ECF'          ,'01');

  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  begin
    Form1.sOrdemExtraNFCe1 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 1', '99'), 1, 2);
    Form1.sOrdemExtraNFCe2 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 2', '99'), 1, 2);
    Form1.sOrdemExtraNFCe3 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 3', '99'), 1, 2);
    Form1.sOrdemExtraNFCe4 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 4', '99'), 1, 2);
    Form1.sOrdemExtraNFCe5 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 5', '99'), 1, 2);
    Form1.sOrdemExtraNFCe6 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 6', '99'), 1, 2);
    Form1.sOrdemExtraNFCe7 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 7', '99'), 1, 2);
    Form1.sOrdemExtraNFCe8 := Copy(Mais1Ini.ReadString(SECAO_65, 'Ordem forma extra 8', '99'), 1, 2);
  end;

  if LerParametroIni('FRENTE.INI', 'Frente de caixa', CHAVE_PESQUISA_CONTENDO, '') = '' then // Não tem a configuração
    GravarParametroIni('Frente.ini', 'Frente de caixa', CHAVE_PESQUISA_CONTENDO, 'Sim');// 2016-02-10 Sandro Silva: Gian relatou reclamação, melhor pesquisar como padrão em qualquer parte GravarParametroIni('Frente.ini', 'Frente de caixa', PESQUISA_CONTENDO, 'Não');
  if LerParametroIni('FRENTE.INI', 'Frente de caixa', CHAVE_PESQUISA_CONTENDO, 'Não') <> 'Sim' then
  begin
    Form1.Pesquisarpeloinciodotexto1.Checked       := True;
  end
  else
  begin
    Form1.Pesquisaremqualquerpartedotexto1.Checked := True;
  end;

  //
  if (Pos('nfce.exe',AnsiLowerCase(Application.ExeName))<>0) or (NFCe) or (PAFNFCE) then // Sandro Silva 2021-03-19 if Pos('nfce.exe',AnsiLowerCase(Application.ExeName))<>0 then
    Form1.sModeloECF   := '65';

  if (Pos(NOME_APLICATIVO_59, AnsiLowerCase(Application.ExeName))<>0) or (SAT) or (MFE) then // Sandro Silva 2021-03-19 if Pos(NOME_APLICATIVO_59, AnsiLowerCase(Application.ExeName))<>0 then
  begin
    Form1.sModeloECF   := '59';
  end;

  if MEI then // Sandro Silva 2021-03-17 if Pos('mei.exe',AnsiLowerCase(Application.ExeName))<>0 then
    Form1.sModeloECF   := '99';

  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  begin
    Getdir(0, sCaminhoMobile);
  end;

  if Mais1Ini.ReadString('CARTOES', 'ACEITA MULTIPLOS', '') = '' then
  begin
    Mais1Ini.WriteString('CARTOES', 'ACEITA MULTIPLOS', 'Sim');
    Mais1Ini.WriteString('CARTOES', 'NUMERO MAXIMO CARTOES', '5');
  end;
  bModoMultiplosCartoes  := (Mais1Ini.ReadString('CARTOES', 'ACEITA MULTIPLOS', 'XXX') = 'Sim');
  iNumeroMaximoDeCartoes := StrToIntDef(Mais1Ini.ReadString('CARTOES', 'NUMERO MAXIMO CARTOES', '1'), 1);
  Form1.Modopagamentocommltiploscartes1.Checked := bModoMultiplosCartoes;

  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
    ConfNegat   := LerParametroIni(Form1.sAtual+'\smallcom.inf', 'Permitir', 'Estoque negativo', 'Não')
  else
    ConfNegat   := 'Não';

  _ecf65_ValidaNFCe_Setup;

  if LerParametroIni('Frente.ini', 'Frente de Caixa', 'Balanca Autonoma', 'Não') = 'Não' then // Sandro Silva 2019-02-20
  begin

    if Mais1Ini.ReadString('Frente de caixa', 'TEM TEF','XXX') = 'XXX' then
    begin
      if Application.MessageBox(PAnsiChar('Usa TEF para pagamentos com cartão?'), 'Atenção', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = id_Yes then
        Mais1Ini.WriteString('Frente de caixa', 'TEM TEF','Sim')
      else
        Mais1Ini.WriteString('Frente de caixa', 'TEM TEF','Não');
    end;
  end;

  sMensagemPromocional   := Mais1Ini.ReadString('Frente de caixa', 'Mensagem'               , MensagemPromocionalDefault);
  //
  Form1.sSAngria         := Mais1Ini.ReadString('Frente de caixa', 'Sangria'                 ,'999.999,99');
  iPeso                  := Mais1Ini.ReadInteger('Frente de caixa', 'Peso'       ,1);
  Form1.sTef             := Mais1Ini.ReadString('Frente de caixa', 'TEM TEF','Sim');
  sGertec                := Mais1Ini.ReadString('Frente de caixa', 'Teclado gertec','Não');
  sPromissoria           := Mais1Ini.ReadString('Frente de caixa', 'Promissória','Não');
  sCreditosDF            := Mais1Ini.ReadString('Frente de caixa', 'Créditos DF','Não');
  LeConfiguracaoTipoEtiquetaBalanca; // Sandro Silva 2022-07-13 sTipoEtiqueta          := Mais1Ini.ReadString('Frente de caixa', 'Tipo etiqueta','KG');
  sIdentificaConsumidor  := Mais1Ini.ReadString('Frente de caixa', 'Identifica consumidor','Não');
  sSenhaDeUsuario        := Mais1Ini.ReadString('Frente de caixa', 'SDU','Não');
  sPlanoDeContas         := Mais1Ini.ReadString('Frente de caixa', 'Plano de contas','Receita de vendas ECF');
  sBAlanca               := Mais1ini.ReadString('Frente de caixa', 'Balança','Não');
  sFuso                  := Mais1ini.ReadString('NFCE', 'Fuso', '-03:00');
  Form1.bHorarioDeVerao  := (Mais1ini.ReadString('NFCE', 'Horario de Verao', 'Não') = 'Sim'); // Sandro Silva 2019-02-27
  sVersaoLayoutNFCe      := Mais1ini.ReadString('NFCE','Versão do Layout','4.00'); // Sandro Silva 2018-12-03 '3.10'  // Sandro Silva 2017-10-27  '3.10';
  sCRLF                  := Mais1Ini.ReadString('Frente de caixa', 'CRLF','Sim');
  sCortaPapel            := Mais1Ini.ReadString('Frente de caixa', 'Corta papel','Não');
  iTrunca                := Mais1Ini.ReadInteger('Frente de caixa', 'Trunca',1);
  sAbreComOLeitor        := Mais1Ini.ReadString('Frente de caixa', 'Abre com o leitor','Sim');
  iGaveta                := StrToInt('0'+LimpaNumero(Mais1Ini.ReadString('Frente de caixa','Gaveta','0')));
  iStatusGaveta          := StrToInt('0'+LimpaNumero(Mais1Ini.ReadString('Frente de caixa','Status Gaveta','0')));
  sAviso                 := Mais1Ini.ReadString('Frente de caixa','Aviso','Não');
  sPastaVoltaOffLine     := Mais1Ini.ReadString('On line','Pasta','');
  sMesas                 := LimpaNumero(Mais1Ini.ReadString('Frente de caixa','Mesas','0'));
  iMinutosSoneca         := Mais1Ini.ReadInteger('Frente de caixa','Soneca',30);
  sImprimirCEST          := 'Não'; // Sandro Silva 2019-08-26 ER 02.06 UnoChapeco 'Sim';

  Form1.bBalancaAutonoma := (LerParametroIni('Frente.ini', 'Frente de Caixa', 'Balanca Autonoma', 'Não') = 'Sim'); // Sandro Silva 2018-12-18

  Form1.BalanaAutonoma1.Checked := Form1.bBalancaAutonoma;

  Form1.sOrdemAliquotaISS := OrdemAliquotaISSECF(False); // Sandro Silva 2018-05-14

  Form1.ImprimirCESTNCMnocupomfiscal1.Checked := (sImprimirCEST = 'Sim'); // Sandro Silva 2016-09-13

  EnviaremailcomXMLePDFacadavenda1.Checked := Mais1Ini.ReadString(SECAO_65, 'Enviar email XML', 'Sim') = 'Sim';// Ficha 4736 Sandro Silva 2019-08-02

  Form1.CarnResumido1.Checked := (Mais1Ini.ReadString('Frente de caixa', CHAVE_CARNE_RESUMIDO, 'Sim') = 'Sim'); // Sandro Silva 2018-04-29
  Form1.bCarneResumido := Form1.CarnResumido1.Checked;
  Form1.sTamanhoPapel  := AnsiUpperCase(LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Papel Cupom', '')); // Sandro Silva 2018-06-18

  if Trim(Form1.sTamanhoPapel) = '' then
  begin
    if Form1.sModeloECF = '99' then
      Form1.sTamanhoPapel := '80';
  end;

  {Sandro Silva 2021-09-01 inicio}
  if Form1.sTef = 'Não' then
  begin
    if Mais1ini.ReadString(SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, '') = '' then
    begin
      Mais1ini.WriteString(SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, 'Sim');
    end;
  end;
  {Sandro Silva 2021-09-01 fim}

  Form1.sIdentificaPOS := Mais1ini.ReadString(SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, 'Não');
  Form1.IdentificarCredenciadoraPoS1.Checked := (Form1.sIdentificaPOS = 'Sim'); // Sandro Silva 2017-11-13  HOMOLOGA 2017 Não exibia a opção marcada nas configuração

  CNAEdispensadoatransmissodosarquivosdoEstoque1.Checked := (Mais1Ini.ReadString('Frente de caixa', 'Dispensado do Envio do Estoque', 'Não') = 'Sim'); // Sandro Silva 2018-11-14
  InformarindIntermedNFCe1.Checked := (LerParametroIni(FRENTE_INI, SECAO_65, 'indIntermed', 'Não') = 'Sim');

  if Form1.sModeloECF = '65' then
    Form1.sValorLimiteIdentificaConsumidor := LerParametroIni(FRENTE_INI, SECAO_65, 'LIMITE IDENTIFICA', Form1.sValorLimiteIdentificaConsumidor);

  {Sandro Silva 2021-07-12 inicio}
  if Form1.sModeloECF = '65' then
    Form1.sValorLimiteSemIdentificarConsumidor := LerParametroIni(FRENTE_INI, SECAO_65, 'LIMITE SEM IDENTIFICAR', Form1.sValorLimiteSemIdentificarConsumidor);
  {Sandro Silva 2021-07-12 fim}

  if Form1.sModeloECF = '65' then
  begin
    Form1.N4001.Checked := True;
  end;

  if StrToIntDef(sMesas, 0) > 999 then
    sMesas := '999';

  //
  if Form1.sModeloECF = '01' then
  begin
    Form1.sModeloECF := '00';
  end;
  //
  sMesasOffline := sMesas;
  //
  Form1.sModeloECF_Reserva := Form1.sModeloECF;

  Form1.sImpressoraDestino := ''; // Sandro Silva 2017-09-06
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Sandro Silva 2018-06-25
  begin
    try
      if Printer.Printers.Count > 0 then // Sandro Silva 2018-06-13
      begin
        if Printer.PrinterIndex < 0 then
          Form1.sImpressoraPadraoWindows := Printer.Printers.Strings[0]// Sandro Silva 2020-04-07 Ficha 4964
        else
          Form1.sImpressoraPadraoWindows := Printer.Printers.Strings[Printer.PrinterIndex]; // Sandro Silva 2017-09-06
      end;
    except
      Form1.sImpressoraPadraoWindows := '';
    end;
  end;

  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin

    if _BlocoX = nil then
    begin
      _BlocoX := TSmallBlocoX.Create(Application);
    end;

    if LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Certificado', 'XXX') = 'XXX' then
    begin
      if Mais1Ini.ValueExists('Frente de caixa', 'Certificado') = False then // Sandro Silva 2018-11-22
        BlocoXSelecionaCertificadoDigital
      else
        MensagemAlertaCertificado;

    end;

    ForceDirectories(PASTA_ESTOQUE_BLOCO_X);
    ForceDirectories(PASTA_REDUCOES_BLOCO_X);

    Form1.ConfigurarImpressora1.Visible := False; // Sandro Silva 2018-06-18

    if LerParametroIni(Form1.sArquivo, INI_SECAO_ECF, INI_CHAVE_NUMERO_CREDENCIAMENTO_PAF, '') = '' then
    begin
      SmallMsgBox(PAnsiChar('Configure o Número de Credenciamento do PAF' + #13 + #13 + 'Essa informação é necessária para a geração dos arquivos relacionados ao Bloco X do PAF'), 'Atenção', MB_ICONWARNING + MB_OK);
    end;
  end
  else
  begin
    Form1.touch_F9.Visible := False;
    Form1.LabelF9.Visible  := False;
    Form1.ConfigurarImpressora1.Visible := True; // Sandro Silva 2018-06-18

    sImpressoraDestino := LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IMPRESSORA_PADRAO, '');
  end;

  //
  if AllTrim(sPastaVoltaOffLine) <> '' then
    sAtualOnLine := sPastaVoltaOffLine;
  //
  if Mais1Ini.ReadString('Frente de caixa','MFD','xxx') = 'xxx' then
    Mais1Ini.WriteString('Frente de caixa','MFD','Sim');
  Form1.sMFD_ := Mais1Ini.ReadString('Frente de caixa','MFD','Sim');
  //
  // 2015-10-29 Aparentemente causa erro nas versões mais nova do windows com MP-4200 FI if sTef = 'Sim' then
  //            Precisa passar por esse if
  if True then
  begin

    // Configurações de TEF
    //
    if Mais1Ini.ReadString('Sitef','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('Sitef','Pasta','CLIENT');
      Mais1Ini.WriteString('Sitef','Req','Req');
      Mais1Ini.WriteString('Sitef','Resp','Resp');
      Mais1Ini.WriteString('Sitef','Exec','C:\CLIENT\ClientSitef.EXE');
      Mais1Ini.WriteString('Sitef','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('TEF Dial','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('TEF Dial','Pasta','TEF_DIAL');
      Mais1Ini.WriteString('TEF Dial','Req','Req');
      Mais1Ini.WriteString('TEF Dial','Resp','Resp');
      Mais1Ini.WriteString('TEF Dial','Exec','C:\TEF_DIAL\TEF_DIAL.EXE');
      Mais1Ini.WriteString('TEF Dial','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('TEF Disc','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('TEF Disc','Pasta','TEF_DISC');
      Mais1Ini.WriteString('TEF Disc','Req','Req');
      Mais1Ini.WriteString('TEF Disc','Resp','Resp');
      Mais1Ini.WriteString('TEF Disc','Exec','C:\TEF_DISC\TEF_DISC.EXE');
      Mais1Ini.WriteString('TEF Disc','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('Disk TEF','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('Disk TEF','Pasta','DISKTEF');
      Mais1Ini.WriteString('Disk TEF','Req','DIR_SOLI');
      Mais1Ini.WriteString('Disk TEF','Resp','DIR_RESP');
      Mais1Ini.WriteString('Disk TEF','Exec','C:\DISKTEF\DISKTEF.EXE');
      Mais1Ini.WriteString('Disk TEF','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('HiperCard','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('HiperCard','Pasta','HIPERCARD');
      Mais1Ini.WriteString('HiperCard','Req','Req');
      Mais1Ini.WriteString('HiperCard','Resp','Resp');
      Mais1Ini.WriteString('HiperCard','Exec','C:\HIPERCARD\HIPERCARD.EXE');
      Mais1Ini.WriteString('HiperCard','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('TEF CSHP','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('TEF CSHP','Pasta','TEF_CSHP');
      Mais1Ini.WriteString('TEF CSHP','Req','Req');
      Mais1Ini.WriteString('TEF CSHP','Resp','Resp');
      Mais1Ini.WriteString('TEF CSHP','Exec','C:\TEF_CSHP\TEF_CSHP.EXE');
      Mais1Ini.WriteString('TEF CSHP','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('SuperTEF','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('SuperTEF','Pasta','SUPERTEF');
      Mais1Ini.WriteString('SuperTEF','Req','Req');
      Mais1Ini.WriteString('SuperTEF','Resp','Resp');
      Mais1Ini.WriteString('SuperTEF','Exec','C:\SUPERTEF\SUPERTEF.EXE');
      Mais1Ini.WriteString('SuperTEF','bAtivo','Sim');
      //
    end;
    //
    if Mais1Ini.ReadString('Direcao','Pasta','XXX') = 'XXX' then
    begin
      //
      Mais1Ini.WriteString('Direcao','Pasta','TEF_DIAL');
      Mais1Ini.WriteString('Direcao','Req','Req');
      Mais1Ini.WriteString('Direcao','Resp','Resp');
      Mais1Ini.WriteString('Direcao','Exec','C:\DPOS8\Bin\GPDirecao.exe');
      Mais1Ini.WriteString('Direcao','bAtivo','Sim');
      //
    end;

    if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
    begin
      if Mais1Ini.ReadString('Auttar','Pasta','XXX') = 'XXX' then
      begin
        // Ficha 4339
        Mais1Ini.WriteString('Auttar','Pasta','Auttar_TefIP');
        Mais1Ini.WriteString('Auttar','Req','Req');
        Mais1Ini.WriteString('Auttar','Resp','Resp');
        Mais1Ini.WriteString('Auttar','Exec','C:\Program Files (x86)\Auttar\IntegradorTEF-IP\IntegradorTEF-IP.EXE');
        Mais1Ini.WriteString('Auttar','bAtivo','Sim');
        //
      end;
    end;

  end else
  begin
    //
    if Form1.sModeloECF = '02' then
    begin
      Sleep(1000);
    end;
  end; // if True then
  //
  try
    AbreArquivos(True);

    {Sandro Silva 2022-11-04 inicio}
    // --------------- //
    // Número do caixa //
    // --------------- //

    bInicializa := Form1.PDV_Inicializa(sPorta); // Sandro Silva 2022-11-08

    if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Obtem o número do caixa para salvar na auditoria
    begin
      bInicializa := Form1.PDV_Inicializa(sPorta); // Sandro Silva 2022-11-30

      Form1.sCaixa := Form1.PDV_NumeroDoCaixa(True);
      Audita('ACESSOU','FRENTE', '', 'ACESSOU O SISTEMA - Caixa: ' + Form1.sCaixa + ' ' + ExtractFileName(Application.ExeName) + ' Build: ' + LimpaNumero(Form22.sBuild),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2019-03-06

      {Sandro Silva 2023-03-28 inicio}
      Form1.ibQuery65.Close;
      Form1.ibQuery65.SQL.Clear;
      Form1.ibQuery65.SQL.Text := 'select max(REGISTRO) as MAIOR_REGISTRO, max(gen_id(G_NFCE, 0)) as VALOR_GENERATOR from NFCE';
      Form1.ibQuery65.Open;
      if Form1.IBQuery65.FieldByName('VALOR_GENERATOR').AsInteger < StrToIntDef(Form1.IBQuery65.FieldByName('MAIOR_REGISTRO').AsString, 0) then
      begin
        IncrementaGenerator('G_NFCE', StrToIntDef(Form1.IBQuery65.FieldByName('MAIOR_REGISTRO').AsString, 0) - Form1.IBQuery65.FieldByName('VALOR_GENERATOR').AsInteger);
      end;
      {Sandro Silva 2023-03-28 fim}

    end
    else
    begin
      Audita('ACESSOU','FRENTE', '', 'ACESSOU O SISTEMA - ' + ExtractFileName(Application.ExeName) + ' Build: ' + LimpaNumero(Form22.sBuild),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2019-03-06
    end;

    //Audita('ACESSOU','FRENTE', '', 'ACESSOU O SISTEMA - ' + ExtractFileName(Application.ExeName) + ' Build: ' + LimpaNumero(Form22.sBuild),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2019-03-06
  except
    SmallMsg('Não foi possível abrir o banco de dados.'+Chr(10)+
                ''+Chr(10)+
                '1 - Verifique sua conexão de rede.'+Chr(10)+
                '2 - Verifique SMALL.INI'+Chr(10)+
                '');
    Form22.Label6.Caption := 'Este programa vai ser fechado...';
    bSairDoPrograma := True;
  end;

  //
  // Precisa ser depois de abrir tabelas porque CancelaTEFPendente() lê o cnpj do cadastro do emitente
  //
  sSecoes := TStringList.Create;
  Mais1Ini.ReadSections(sSecoes);
  //
  for I := 0 to (sSecoes.Count - 1) do
  begin
    if Mais1Ini.ReadString(sSecoes[I],'bAtivo','Não') = 'Sim' then
    begin
      if not CancelaTEFPendente(Mais1Ini.ReadString(sSecoes[I],'Pasta','XXXXXXXX'),Mais1Ini.ReadString(sSecoes[I],'Req','Req'),Mais1Ini.ReadString(sSecoes[I],'Resp','Resp'),Mais1Ini.ReadString(sSecoes[I],'Exec','xxx.xxx'), sSecoes[I]) then
      begin
        Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
        FecharAplicacao(ExtractFileName(Application.ExeName));
      end;
    end;
  end;
  sSecoes.Free; // Sandro Silva 2018-11-21 Memória

  // ----------------------------------- //
  // Detectando porta de comunicação   //
  // ----------------------------------- //
  if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') then
  begin
    if Form1.bBalancaAutonoma = False then // Sandro Silva 2019-01-23
    begin
      if (Form1.sModeloECF = '65') then
        Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços da NFC-e...';
      if (Form1.sModeloECF = '59') then
        Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços do ' + _ecf59_Tipodaimpressora + '...';

      {Sandro Silva 2020-12-07 inicio}
      if PAFNFCe then
        Form22.Label6.Caption := Form22.Label6.Caption + #13 + MSG_ALERTA_MENU_FISCAL_INACESSIVEL; // Sandro Silva 2021-07-28 Form22.Label6.Caption := Form22.Label6.Caption + ' ' + MSG_ALERTA_MENU_FISCAL_INACESSIVEL;
      {Sandro Silva 2020-12-07 fim}

      if Mais1ini.ReadString('NFCE', 'Fuso', '') = '' then
      begin
        if Trim(Form1.ibDataSet13.FieldByName('ESTADO').AsString) <> '' then
          Form1.sFuso := DefineFusoHorario('FRENTE.INI', 'NFCE', 'Fuso', Form1.ibDataSet13.FieldByName('ESTADO').AsString, '', False);
      end;

      // Ajusta o fuso horário quando trocar a UF do Emitente
      Form1.sFuso := ValidaAjustaFusoHorario(Form1.ibDataSet13.FieldByName('ESTADO').AsString, Form1.sFuso, FusoHorarioPadrao(Form1.ibDataSet13.FieldByName('ESTADO').AsString), bHorarioDeVerao);

    end;
    Form22.Label6.Repaint;
  end else
  if (Form1.sModeloECF = '99') then
  begin
    // MEI
  end else
  begin
    Form22.Label6.Caption := 'Detectando porta de comunicação...';
    Form22.Label6.Repaint;
  end;
  //
  try
    //
    if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      bInicializa := Form1.PDV_Inicializa(sPorta);

    {Sandro Silva 2022-07-13 inicio}
    if (Form1.sModeloECF = '65') then
    begin
      try
        if Form1.spdNFCe1.NomeCertificado.Text <> '' then
        begin
          if DaysBetween(Date, Form1.spdNFCe1.GetVencimentoCertificado) < 30 then
          begin

            Form22.Label6.Caption := 'Certificado digital - Validade: ' + FormatDateTime('dd/mm/yyyy', Form1.spdNFCe1.GetVencimentoCertificado);
            if Form1.spdNFCe1.GetVencimentoCertificado >= Date then
              Form22.Label6.Caption := Form22.Label6.Caption + ' - restando ' + FormatFloat('0', Form1.spdNFCe1.GetVencimentoCertificado - Date) + ' dia(s)'
            else
              Form22.Label6.Caption := Form22.Label6.Caption + ' - Expirado';
            Form22.Label6.Caption := Form22.Label6.Caption + #13 + 'Faça a renovação';

            Form22.Label6.Repaint;
            if DaysBetween(Date, Form1.spdNFCe1.GetVencimentoCertificado) < 10 then
              Sleep(2000);

          end;
        end;
      except

      end;
    end;
    {Sandro Silva 2022-07-13 fim}

    //ShowMessage('Teste 01 12715'); // Sandro Silva 2017-11-03

    if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
    begin
      Form1.OrdemdaaliquotadeISS1.Visible := True; // Sandro Silva 2018-05-14
    end;

    if bInicializa then
    begin

      // Pode precisar fechar a aplicação para corrigir informações de falha de schema, por exemplo
      if PDV_CupomAberto = False then
      begin
        TEFDeletarCopiasArquivos(DIRETORIO_BKP_TEF);
        Form1.sCupomTEFCancelado := '';
      end;

    end;

    if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      //and (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'FRENTE.EXE') then // Sandro Silva 2017-04-12
    begin

      //
      Form22.Label6.Caption := 'O arquivo: LISTA.TXT foi gravado na pasta: '+Form1.sPastaDoExecutavel + '\';
      Form22.Label6.Repaint;
      ExibirCaminhoLista; // 2015-09-08

    end;
    //
    Form1.sHoraDoCupom := Form1.PDV_DataeHoraDaImpressora(True);
    //
    // Hora do sistema
    //
    Form1.sDataDoCupom := DateToStr(Date);
    //
    if (Length(AllTrim(Limpanumero(Form1.sHoraDoCupom))) = 12) then
    begin
      // ------------------------------------------------ //
      // O sistema grava a porta Detectada no FRENTE.INI  //
      // ------------------------------------------------ //
      Mais1Ini.WriteString('Frente de caixa','Porta',sPorta);
      Mais1ini.Free;
      //
      // -------------------- //
      // Retorna as aliquotas //
      // -------------------- //
      Form1.sAliquotas := Form1.PDV_RetornaAliquotas(True);

      // ---------------------- //
      // Verifica se tem gaveta //
      // ---------------------- //
      //
      if iGAveta <> 0 then
      begin
        //
        sGaveta := Form1.PDV_StatusGaveta(True);
        //
        if sGaveta = '255' then sGaveta := '128';
        //
      end;

      // --------------- //
      // Número do caixa //
      // --------------- //
      Form1.sCaixa := Form1.PDV_NumeroDoCaixa(True);


      //erro atualizar estoque da grade quando produto tiver sido editado pelo small

      if Trim(Form1.sCaixa) = '' then
      begin
        if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
          SmallMsg('A Impressora Fiscal não retornou um número de caixa para o PDV e reinicie o aplicativo.') // Sandro Silva 2018-10-04
        else
          SmallMsg('Configure um número de caixa para o PDV e reinicie o aplicativo.');
        Form1.Close;
        FecharAplicacao(ExtractFileName(Application.ExeName));
      end;
      //
      // iCaixa Define as letras nas duplicatas Ex: E00001A
      //
      Form1.iCaixa := StrToIntDef(LimpaNumero(Form1.sCaixa), 0);
      //

      if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
      begin
        if (Form1.iCaixa < 1)
          or (Form1.iCaixa > 889) then // 889 é a maior série permitida para NFC-e, acima desta são Séries reservadas pela SEFAZ
        begin
          SmallMsg('Configure um número de caixa para o PDV entre 001 e 889 e reinicie o aplicativo.');
          Form1.Close;
          FecharAplicacao(ExtractFileName(Application.ExeName));
        end;
      end
      else
      begin
        if (Form1.iCaixa < 1)
          or (Form1.iCaixa > 20) then
        begin
          SmallMsg('Configure um número de caixa para o PDV entre 001 e 020 e reinicie o aplicativo.');
          Form1.Close;
          FecharAplicacao(ExtractFileName(Application.ExeName));
        end;
      end;
      //
      //    Form22.Label6.Caption := '';
      //
      Form1.fTotal := 0;
      //
    end else
    begin
      //
      SmallMsg('Não foi possível estabelecer comunicação com'+Chr(10)+
                  'a impressora fiscal.                        '+Chr(10)+
                  'Sugestão: Desligue/ligue a impressora e reinicie'+Chr(10)+
                  'o aplicativo.');
      //
    end;
  except
    on E: Exception do
    begin
      SmallMsgBox(pChar(E.Message+chr(10)+chr(10)+'Ao inicializar a impressora.'),'Atenção Erro:061211',mb_Ok + MB_ICONWARNING);
    end;
  end;
  //
  Button4.Enabled   := False; // On create
  //
  Form1.Memo1.Visible  := False;
  Form1.Panel5.Visible := False;
  Form1.Memo2.Visible  := False;
  Form1.Memo3.Visible  := False;

  ExibeScrollCupom(Form1.Memo1.Visible); // Sandro Silva 2016-08-03

  //
  TipoDeConta(True);

  //

  if (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99') then
  begin
    MD5_Da_lista(True);

    try
      PopupMenu1.Items.Remove(MesasAbertas1);
      PopupMenu5.Items.Add(MesasAbertas1);
      MesasAbertas1.MenuIndex := EspelhoMFD1.MenuIndex;
    except

    end;
  end;
  //

  if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then
  begin
    try
      // Move meios de pagamento para relatórios gerenciais
      PopupMenu1.Items.Remove(MeiosdePagto1);
      MovimentoDia1.Parent.Add(MeiosdePagto1);
      MeiosdePagto1.MenuIndex := MovimentoDia1.MenuIndex;
    except

    end;

    if bInicializa then
    begin
      try
        if (UsaIntegradorFiscal()) then
        begin
          if StrToDateDef(LerParametroIni('FRENTE.INI', 'MFe', 'Transmissao Pendentes VFPE', ''), Date - 1) <> Date then
          begin
            try
              EnviarRespostaFiscalPendente(Form1.ibDataSet27.Transaction, Form1.sModeloECF, Form22.Label6, sCaixa, False);
              GravarParametroIni('FRENTE.INI', 'MFe', 'Transmissao Pendentes VFPE', FormatDateTime('dd/mm/yyyy', Date));
            except
            end;
          end;
        end;
      except

      end;

    end;

    if LerParametroIni('FRENTE.INI', 'NFCE','MOBILE', 'Não') = 'Sim' then
    begin // Sandro Silva 2015-05-25

      Iniciarminimizado1.Checked := (LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_INICIAR_MINIMIZADO, 'Não') = 'Sim'); //False;
      bSystray                   := Iniciarminimizado1.Checked;

      HabilitarOpcoesMonitor(True);
    end;
  end;

  //LogFrente('Teste 01: Saindo do FormCreate');

  if (Screen.Height = 600) and (Screen.Width = 800) then
  begin
    Form1.Memo1.Font.Size  := Form1.Memo1.Font.Size + 1;
    Form1.Memo1.Font.Color := clBlack;
  end;

  lbReferenciaItemCupom.Font := Memo1.Font;// Usado calcular altura linhas do Form1.Memo1 Sandro Silva 2016-08-03

  Label13.Height := Label13.Height + AjustaAltura(1);
  Label13.Width  := Label_10.Width;
  Label8.Width   := Label8.Width + (Label_11.BoundsRect.Right - Label8.BoundsRect.Right);
  Label9.Width   := Label8.Width;
  Label10.Width  := Label8.Width;

  Label_CopyRight.Height := Label_CopyRight.Height + AjustaAltura(3);

  // Seleciona o código do produto que será lançado quando um peso for lido pelo método de pesagem sem operador da balança
  if Form1.bBalancaAutonoma then // exclui pesagem antiga
  begin

    SelecionaMesaInicialPesoAutonomo; // Lê configuração da mesa inicial

    Mais1ini  := TIniFile.Create('FRENTE.INI');
    //
    try
      Mais1Ini.WriteString('NFCE','CUPOM','000000');
    except
    end;

    // Diretórios usados para troca de informação de pesagem sem intervenção de operador da balança
    ForceDirectories(Form1.sAtual + '\balanca\input'); // Sandro Silva 2019-02-28 ForceDirectories('\balanca\input');
    ForceDirectories(Form1.sAtual + '\balanca\output'); // Sandro Silva 2019-02-28 ForceDirectories('\balanca\output');
    //
    Form1.sCodigoProdutoPesado := StrZero(StrToIntDef(Mais1Ini.ReadString('Frente de Caixa', 'Produto Balanca', '0'), 0), 5, 0);

    Mais1Ini.Free;
    DeleteFile(aWinDir + '\peso.txt');
    if FileExists(PChar(Form1.sAtual + '\balanca\input\pesar.xml')) then
    begin
      DeleteFile(PChar(Form1.sAtual + '\balanca\input\pesar.xml'));
      DeleteFile(PChar(Form1.sAtual + '\balanca\input\pesar.tmp'));
      Sleep(250);
    end;
    if FileExists(PChar(Form1.sAtual + '\balanca\output\peso.xml')) then
    begin
      DeleteFile(PChar(Form1.sAtual + '\balanca\output\peso.xml'));
      DeleteFile(PChar(Form1.sAtual + '\balanca\output\peso.res'));
      Sleep(250);
    end;

    Form1.iEtapaPesagem := 0;

    Timer2.Enabled := False;

    Sleep(250); // Tempo para excluir
  end;

  Timer3.Enabled := Form1.bBalancaAutonoma;
  //
  //
end;

procedure TForm1.Button18Click(Sender: TObject); // Fechamento Cupom
var
  Mais1Ini: TIniFile;
  I, bButton : Integer;
  F : TextFile;
  sCupomFiscalVinculado : String;
  bChaveTeste : Boolean;  // TEF
  bFechado : Boolean;
  bNaoAbriu, bInicializa : Boolean;
  sConvenio, sLabels : String;
  iCOO, ICCF : Integer;
  fISS, fICMS : Real;
  sA, sM : String;
  //
  sConveniadoCNPJ: String;
  sEnderecoCliente: String; // Sandro Silva 2016-03-07 POLIMIG
  sNomeCliente: String; // Sandro Silva 2016-03-07 POLIMIG
  sMsgSemComunicacao: String;
  bRetornoComando: Boolean; //2015-10-06
  IBQMODELO02: TIBQuery;
  sCOOModelo02: String;
  sCCFModelo02: String;
  sPedidoModelo02: String; // 2015-10-16
  sFormaDinheiro: String; // 2016-02-03
  sFormaPrazo: String; // 2016-02-03
  iTentaVFPe: Integer; // Sandro Silva 2017-05-16
  dTotalOutrasFormas: Double;
  sIdentificaTransacaoTEF: String; // Sandro Silva 2017-06-22
  bChave: Boolean; // Sandro Silva 2017-07-03
  bSair: Boolean; // Sandro Silva 2017-07-03
  iTransacaoCartao: Integer; // Sandro Silva 2017-08-25
  bNFCeUsoDenegado: Boolean; // Sandro Silva 2020-05-18
  //iFormaExtra: Integer; // Sandro Silva 2022-08-04
  //iniFormas: TIniFile; 
begin
  //
  Screen.Cursor := crHourGlass; // Cursor de Aguardo
  bFechado            := False; // Sandro Silva 2016-04-12
  Form1.bNFazMaisNada := False;
  bInicializa         := False;
  bChave              := False; // Sandro Silva 2020-04-14
  sCOOModelo02    := '';
  sCCFModelo02    := '';
  sPedidoModelo02 := '';
  bNFCeUsoDenegado := False; // Sandro Silva 2020-05-21

  //
  if (Pos(TIPOCONTINGENCIA, Form1.ClienteSmallMobile.sVendaImportando) = 0) then // Sandro Silva 2016-04-25
  begin
    if (Form1.ibDataSet25.State in [dsInsert, dsEdit]) = False then // Sandro Silva 2016-05-06
      Form1.ibDataSet25.Edit;
    Form1.ibDataSet25.FieldByName('VALOR01').AsFloat := 0;
    Form1.ibDataSet25.FieldByName('VALOR02').AsFloat := 0;
    Form1.ibDataSet25.FieldByName('VALOR03').AsFloat := 0;
    Form1.ibDataSet25.FieldByName('VALOR04').AsFloat := 0;
  end;
  //
  // Desabilita os timers para não dar um commit
  //
  Form1.Timer1.Enabled := False;

  if Form1.UsaIntegradorFiscal() then
  begin
    Form1.IntegradorCE.EnviarFormaPagamento.Clear;
  end;
  //
  try
    //
    if Form1.fTotal > 999999.98 then
      Form1.fTotal := 0;
    //
    dBgrid2.Visible      := False;
    //
    Form1.fTotal := PDV_SubTotal(True);
    //
    if Form1.fTotal <> 0 then
    begin
      //
      Display('TOTAL '+Right(Replicate(' ',14)+Format('%m',[Form1.fTotal]),14),'');
      /////////////////////////////////////////////////////////////////////
      // TEF - ZEREZIMA - MULTIPLOS CARTOES                              //
      /////////////////////////////////////////////////////////////////////
      Form1.fDescontoNoTotal  := 0;
      Form1.fTEFPago          := 0;
      fTotalPago              := 0;
      Form1.sCupomTEF         := '';
      Form1.sCupomTEFReduzido := ''; // Sandro Silva 2017-06-14

      Form1.sCupomTEF        := Form1.sCupomTEF + Form1.sCupomTEFCancelado;// Sandro Silva 2017-06-28

      /////////////////////////////////////////////////////////////////////
      while (Form1.fTotal - fTotalPago) > 0.001 do
      begin
        //
        // SmallMsg(FloatToStr(fTotalPAgo));
        //
        if Form1.bf12 then
        begin
          try
            //
            Form2.Show;     

            if (Form1.ClienteSmallMobile.sVendaImportando <> '')
              and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) then
              Form2.SendToBack;

            if Form1.ClienteSmallMobile.ImportandoMobile // Sandro Silva 2022-08-08 if (ImportandoMobile)
              and (Form1.ClienteSmallMobile.sVendaImportando <> '') then // 2015-06-29
            begin

              if sFormaPag = FORMA_PAGAMENTO_A_VISTA then
              begin
                Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
              end;
              if sFormaPag = FORMA_PAGAMENTO_BOLETO then
              begin
                Form1.ibDataSet25.Edit;
                Form1.ibDataSet25.FieldByName('RECEBER').AsFloat    := Form1.fTotal;
                Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := Form1.fTotal;
                Form1.ibDataSet25.Post;
              end;
              if sFormaPag = FORMA_PAGAMENTO_CARTAO then
              begin
                Form1.ibDataSet25.Edit;
                Form1.ibDataSet25.FieldByName('RECEBER').AsFloat := Form1.fTotal;
                Form1.ibDataSet25.FieldByName('PAGAR').AsFloat   := Form1.fTotal;
                Form1.ibDataSet25.Post;
              end;
              if sFormaPag = FORMA_PAGAMENTO_CHEQUE then
              begin
                Form1.ibDataSet25.Edit;
                Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := Form1.fTotal;
                Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0.00;
                Form1.ibDataSet25.Post;
              end;

              {Sandro Silva 2022-08-04 inicio}
              // Implementado formas extras no smallmobile.com.br
              ClienteSmallMobile.PagamentoComFormaExtra(sFormaPag, Form1.fTotal);
              {Sandro Silva 2022-08-04 fim}

            end; // if Form1.bImportando then

            Form2.Button1Enter(Sender); // //LogFrente('Teste 01 ButtomEnter 9306');
            Form2.Button1Click(Sender); // //LogFrente('Teste 01 ButtomClick 9307');
            Form2.Button1Click(Sender); // //LogFrente('Teste 01 ButtomClick 9308');

            {Sandro Silva 2021-09-08 inicio}
            if (Form1.ClienteSmallMobile.ImportandoMobile = False) // Sandro Silva 2022-08-08  if (ImportandoMobile = False)
              and (Form1.ClienteSmallMobile.sVendaImportando = '') then // 2015-06-29
            begin
            // Se não é venda do mobile sendo processada e for cartão
              if Form1.bFechaRapidoCartao then
              begin
                Form1.bFechaRapidoCartao := False;
                Form1.ibDataSet25.Edit;
                Form1.ibDataSet25.FieldByName('RECEBER').AsFloat := Form1.fTotal;
                Form1.ibDataSet25.FieldByName('PAGAR').AsFloat   := Form1.fTotal;
                Form1.ibDataSet25.Post;
              end;
              
            end;
            {Sandro Silva 2021-09-08 fim}   
            //
            bVolta := False;
            Form1.bf12 := False;
            Form2.Close;
            //
          except
            Form2.WindowState     := WsNormal;
            Form2.Close;
          end;
          //
        end else
        begin
          if (Form1.ClienteSmallMobile.sVendaImportando = '') then
          begin
            Form2.ShowModal; // Formas de pagamento
          end
          else
          begin
            Form2.Show;
            Form2.SendToBack;
          end;
        end;
        //
        //
        if Form1.bNFazMaisNada then
        begin
          Abort;
        end;
        //
        Form1.Repaint;
        Screen.Cursor := crHourGlass;  // Cursor de Aguardo
        // ---------------------------------------------------------------------------------------------------------------- //
        //                                                                                                                  //
        // C A R T A O                                                                                                      //
        //                                                                                                                  //
        // ---------------------------------------------------------------------------------------------------------------- //
        //
        // 25PAGAR CArtão
        // 25ACUMULADO1 Cheque
        //
        if (Form1.ibDataSet25.FieldByName('PAGAR').AsFloat <> 0) // Cartão
          or ((Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat <> 0) and (FileExists('c:\TEF_DIAL\TEF_DIAL.INI'))) then // Cheque tem que autorizar se o tef_dial estiver instalado
        begin
          // ---------------------------------------------- //
          // Transferência Eletrônica de Fundos (TEF)       //
          // Suporte Técnico Com - SevenPedv  (011)2531722  //
          // Suporte do PinPad - VeriFone (011)8228733      //
          // com Kiochi Matsuda                             //
          // (0xx11)253-1722                                //
          // ---------------------------------------------- //
          //
          Mais1ini := TIniFile.Create('FRENTE.INI');
          Mais1Ini.WriteString('Frente de caixa','Queda','Sim');
          Mais1ini.Free;
          //
          Form2.bCancela := False;
          //
          if (Form1.sTef = 'Sim') and (Form1.ClienteSmallMobile.sVendaImportando = '') then
          begin
            //
            if not TEFMultiplosCartoes(True) then
              Form2.bCancela := True;
            //
          end else
          begin
            // Usando POS
            TransacaoComPoS(tcxPosOffLine);// Sandro Silva 2022-02-11
          end;// if (Form1.sTef = 'Sim') and (Form1.ClienteSmallMobile.sVendaImportando = '') then

          if Form1.TransacoesCartao.Transacoes.Count > 0 then // Mostrar mensagem apenas se pagou com cartão  Sandro Silva 2018-09-05
          begin
            Form1.ExibePanelMensagem('Transação com cartão realizada', True); // Sandro Silva 2017-09-15
            Sleep(1000); 
          end;
          Form1.OcultaPanelMensagem;
        end;
        //
        if Form2.bCancela then
        begin
          //
          DeleteFile('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.001');
          DeleteFile('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.STS');
          DeleteFile('c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
          DeleteFile(pChar('c:\'+sDiretorio+'.res'));
          //
          Display('OPERACAO NAO CONFIRMADA','Use outra forma de pagamento');
          //
          Form1.Repaint;
          Sleep(1000);
          Panel3.Visible  := False;

          //
          Form1.Repaint;
          Screen.Cursor := crDefault; // Cursor normal

          if (Form1.ClienteSmallMobile.sVendaImportando = '') then
            Edit1.SetFocus;
          //
        end;
        // ---------------------------------------------------------------------------------------------------------------- //
        //                                                                                                                  //
        // C A R T A O    T H E    E N D                                                                                    //
        //                                                                                                                  //
        // ---------------------------------------------------------------------------------------------------------------- //

        // Outras formas diferente de cartão
        dTotalOutrasFormas := Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat // Dinheiro
                              + Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat // Cheque
                              + Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat // Prazo
                              + Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR07').AsFloat
                              + Form1.ibDataSet25.FieldByName('VALOR08').AsFloat;

        fTotalPago := fTEFPago
                      + Form1.fDescontoNoTotal
                      + dTotalOutrasFormas;
      end;
      //
      // SmallMsg(Format('%20.10n',[Abs(fTotal - fTotalPago)]));
      //
    end;
    //
    //  Form1.Repaint;
    //
    if bVolta = False then
    begin
      //
      Screen.Cursor := crHourGlass; // Cursor de Aguardo
      Button18.Enabled := False;
      //
      bFechado := False;
      //
      if fTotal = 0 then // Cupom com valor zerado
      begin
        //
        bFechado := False;
        //
        bFechado := Form1.PDV_CancelaUltimoCupom(False); // Button18Click()
        //
        if not bFechado then
        begin
          SmallMsg('Não é possível fechar o cupom com valor zerado.');
          Form1.bF12 := False; // Para F3 não fechar sem passar pelas formas de pagamento Sandro Silva 2018-04-27
        end
        else
        begin
          // Cancelou
          // Lançou desconto ou acréscimo e depois cancela itens
          Form1.ibDataSet27.Close;
          Form1.ibDataSet27.SelectSQL.Clear;
          Form1.ibDataSet27.SelectSQL.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))); // Sandro Silva 2021-11-29 Form1.ibDataSet27.SelectSQL.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0)));
          Form1.ibDataSet27.Open;

          while Form1.ibDataSet27.Eof = False do
          begin
            if ((Form1.ibDataSet27.FieldByName('ITEM').AsString = '') and (Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Desconto') or (Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Acréscimo')) then
            begin // Desconto ou Acréscimo no cupom
              try
                Form1.ibDataSet27.Delete;
              except
              end;
            end
            else
              Form1.ibDataSet27.Next;
          end;
          Demais('NC');
        end;
        //
      end else
      begin
        if ((Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99')) or (Form1.ClienteSmallMobile.sLogRetornoMobile = '') then
        begin
          //
          Mais1ini             := TIniFile.Create('FRENTE.INI');
          sMensagemPromocional := Mais1Ini.ReadString('Frente de caixa'  , 'Mensagem' , MensagemPromocionalDefault);
          Mais1Ini.Free;
          //
          //if True then
          //begin
            //
            // Valor Aproximado dos Tributos IIA Indicie de Imposto Aproximado
            //

            if (Form1.sModeloECF <> '99') then // Sandro Silva 2020-09-23
            begin

              try
                Form1.IBQuery1.Close;
                Form1.IBQuery1.SQL.Clear;
                Form1.IBQuery1.SQL.Add('select sum(cast((ESTOQUE.IIA*(ALTERACA.TOTAL+coalesce(ALTERACA.DESCONTO,0))/100)  as numeric(18,2))) as TRIBUTOS1, '
                                            + 'sum(cast((ESTOQUE.IIA_UF*(ALTERACA.TOTAL+coalesce(ALTERACA.DESCONTO,0))/100) as numeric(18,2))) as TRIBUTOS2, '
                                            + 'sum(cast((ESTOQUE.IIA_MUNI*(ALTERACA.TOTAL+coalesce(ALTERACA.DESCONTO,0))/100) as numeric(18,2))) as TRIBUTOS3 '
                                     + 'from ALTERACA,ESTOQUE where PEDIDO=' + QuotedStr(Form1.ibDataSet27.FieldByname('PEDIDO').AsString)
                                     + ' and CAIXA='+QuotedStr(Form1.ibDataSet27.FieldByname('CAIXA').AsString)
                                     + ' and TIPO<>''CANCEL'''
                                     + ' and ESTOQUE.CODIGO=ALTERACA.CODIGO and (ALTERACA.DESCRICAO<>''Desconto'' and ALTERACA.DESCRICAO<>''Acréscimo'')');
                //
                Form1.IBQuery1.Open;
                //
                if (Form1.IBQuery1.FieldByName('TRIBUTOS1').AsFloat + Form1.IBQuery1.FieldByName('TRIBUTOS2').AsFloat + Form1.IBQuery1.FieldByName('TRIBUTOS3').AsFloat)  > 0 then
                begin
                  sM := 'Trib aprox R$: ';
                  if Form1.IBQuery1.FieldByName('TRIBUTOS1').AsFloat > 0 then sM := sM + AllTrim(Format('%12.2n',[Form1.IBQuery1.FieldByName('TRIBUTOS1').AsFloat*(1-(Form1.fDescontoNoTotal / Form1.fTotal))])) +' Federal ';
                  if Form1.IBQuery1.FieldByName('TRIBUTOS2').AsFloat > 0 then sM := sM + AllTrim(Format('%12.2n',[Form1.IBQuery1.FieldByName('TRIBUTOS2').AsFloat*(1-(Form1.fDescontoNoTotal / Form1.fTotal))])) +' Estadual ';
                  if Form1.IBQuery1.FieldByName('TRIBUTOS3').AsFloat > 0 then sM := sM + AllTrim(Format('%12.2n',[Form1.IBQuery1.FieldByName('TRIBUTOS3').AsFloat*(1-(Form1.fDescontoNoTotal / Form1.fTotal))])) +' Municipal ';

                  //
                  Form1.fTributos_federais   := Form1.IBQuery1.FieldByName('TRIBUTOS1').AsFloat;
                  Form1.fTributos_estaduais  := Form1.IBQuery1.FieldByName('TRIBUTOS2').AsFloat;
                  Form1.fTributos_municipais := Form1.IBQuery1.FieldByName('TRIBUTOS3').AsFloat;
                  //
                  Form1.IBQuery1.Close;
                  Form1.IBQuery1.SQL.Clear;
                  Form1.IBQuery1.SQL.Add('select first 1 distinct CHAVE, FONTE from IBPT_ '); // Sandro Silva 2016-08-16 Seleciona apenas 1 linha da tabela
                  Form1.IBQuery1.Open;
                  //
                  sM := sM + chr(10) + 'Fonte: ' + Form1.IBQuery1.FieldByName('FONTE').AsString + ' ' + Form1.IBQuery1.FieldByName('CHAVE').AsString;
                end;
              except
                  on E: Exception do SmallMsg('Erro 567: '+chr(10)+chr(10)+ E.Message +chr(10)+chr(10)+ Form1.IBQuery1.SQL.Text);
              end;
              //
            end;
          //end;
          //
          Form1.sMensagemNFMod02 := ''; // Sandro Silva 2017-11-07 Polimig
          if AllTrim(sReferenteNFModelo2) <> '' then
          begin
            //
            IBQMODELO02 := CriaIBQuery(Form1.ibDataSet27.Transaction);// Tem que estar na mesma transação de IBDATASET27 que lança os dados do cupom
            IBQMODELO02.Close;
            IBQMODELO02.SQL.Clear;
            IBQMODELO02.SQL.Add('select * from ALTERACA where PEDIDO= '+QuotedStr(FormataNumeroDoCupom(Form1.iCupom))+' and CAIXA='+QuotedStr(sCAIXA)+' '); // Sandro Silva 2020-10-16 IBQMODELO02.SQL.Add('select * from ALTERACA where PEDIDO= '+QuotedStr(StrZero(iCupom,6,0))+' and CAIXA='+QuotedStr(sCAIXA)+' ');
            IBQMODELO02.Open;
            //
            // 2015-10-08 COO e CCF para DESCONTOS. IBDATASET27 não grava COO e CCF para os descontos do cupom
            sCOOModelo02    := '';
            sCCFModelo02    := '';
            sPedidoModelo02 := sReferenteNFModelo2;
            while not IBQMODELO02.eof do
            begin

              if (sCOOModelo02 = '') and (IBQMODELO02.FieldByName('COO').AsString <> '') then
              begin
                sCOOModelo02 := IBQMODELO02.FieldByName('COO').AsString;
                sCCFModelo02 := IBQMODELO02.FieldByName('CCF').AsString;
              end;

              //
              try
                // Precisa usar IBDATASET27 para que os registros inseridos fiquem assinados corretamente
                //
                ibQuery6.Close;
                ibQuery6.SQL.Clear;
                ibQuery6.SQL.Add('insert into ALTERACA ('+
                                                        'CODIGO,'+
                                                        'DESCRICAO,'+
                                                        'QUANTIDADE,'+
                                                        'MEDIDA,'+
                                                        'UNITARIO,'+
                                                        'TOTAL,'+
                                                        'DATA,'+
                                                        'TIPO,'+
                                                        'PEDIDO,'+
                                                        'ITEM,'+
                                                        'CLIFOR,'+
                                                        'VENDEDOR,'+
                                                        'CAIXA,'+
                                                        'VALORICM,'+
                                                        'ALIQUICM,'+
                                                        'REGISTRO,'+
                                                        'DESCONTO,'+
                                                        'ENCRYPTHASH,'+
                                                        'COO,'+
                                                        'CCF,'+
                                                        'CNPJ,'+
                                                        'REFERENCIA,'+
                                                        'HORA,'+
                                                        'DAV,'+
                                                        'TIPODAV,'+
                                                        'CST_PIS_COFINS,'+
                                                        'ANVISA,'+
                                                        'CST_ICMS,'+
                                                        'ALIQ_PIS,'+
                                                        'ALIQ_COFINS,'+
                                                        'OBS,'+
                                                        'STATUS,'+
                                                        'SERIE,'+
                                                        'SUBSERIE,'+
                                                        'CFOP) values('+

                                                        ':CODIGO,'+
                                                        ':DESCRICAO,'+
                                                        ':QUANTIDADE,'+
                                                        ':MEDIDA,'+
                                                        ':UNITARIO,'+
                                                        ':TOTAL,'+
                                                        ':DATA,'+
                                                        ':TIPO,'+
                                                        ':PEDIDO,'+
                                                        ':ITEM,'+
                                                        ':CLIFOR,'+
                                                        ':VENDEDOR,'+
                                                        ':CAIXA,'+
                                                        ':VALORICM,'+
                                                        ':ALIQUICM,'+
                                                        ':REGISTRO,'+
                                                        ':DESCONTO,'+
                                                        ':ENCRYPTHASH,'+
                                                        ':COO,'+
                                                        ':CCF,'+
                                                        ':CNPJ,'+
                                                        ':REFERENCIA,'+
                                                        ':HORA,'+
                                                        ':DAV,'+
                                                        ':TIPODAV,'+
                                                        ':CST_PIS_COFINS,'+
                                                        ':ANVISA,'+
                                                        ':CST_ICMS,'+
                                                        ':ALIQ_PIS,'+
                                                        ':ALIQ_COFINS,'+
                                                        ':OBS,'+
                                                        ':STATUS,'+
                                                        ':SERIE,'+
                                                        ':SUBSERIE,'+
                                                        ':CFOP)');
                ibQuery6.Prepare;
                //
                ibQuery6.ParamByName('CODIGO').Value         := IBQMODELO02.FieldByName('CODIGO').Value;
                ibQuery6.ParamByName('DESCRICAO').Value      := IBQMODELO02.FieldByName('DESCRICAO').Value;
                ibQuery6.ParamByName('QUANTIDADE').Value     := IBQMODELO02.FieldByName('QUANTIDADE').Value;
                ibQuery6.ParamByName('MEDIDA').Value         := IBQMODELO02.FieldByName('MEDIDA').Value;
                ibQuery6.ParamByName('UNITARIO').Value       := IBQMODELO02.FieldByName('UNITARIO').Value;
                ibQuery6.ParamByName('TOTAL').Value          := IBQMODELO02.FieldByName('TOTAL').Value;
                ibQuery6.ParamByName('DATA').Value           := IBQMODELO02.FieldByName('DATA').Value;
                ibQuery6.ParamByName('TIPO').Value           := 'VENDA';
                ibQuery6.ParamByName('PEDIDO').Value         := FormataNumeroDoCupom(StrToInt('0'+Limpanumero(sReferenteNFModelo2))); // Sandro Silva 2021-12-01 ibQuery6.ParamByName('PEDIDO').Value         := StrZero(StrToInt('0'+Limpanumero(sReferenteNFModelo2)),6,0);
                ibQuery6.ParamByName('ITEM').Value           := IBQMODELO02.FieldByName('ITEM').Value;
                ibQuery6.ParamByName('CLIFOR').Value         := IBQMODELO02.FieldByName('CLIFOR').Value;
                ibQuery6.ParamByName('VENDEDOR').Value       := IBQMODELO02.FieldByName('VENDEDOR').Value;
                ibQuery6.ParamByName('CAIXA').Value          := IBQMODELO02.FieldByName('CAIXA').Value;
                ibQuery6.ParamByName('VALORICM').Value       := Form1.iCupom; // Sandro Silva 2021-11-17 ibQuery6.ParamByName('VALORICM').Value       := iCupom;
                ibQuery6.ParamByName('ALIQUICM').Value       := IBQMODELO02.FieldByName('ALIQUICM').Value;
                //
                Form1.ibDataSet100.Close;
                Form1.ibDataSet100.SelectSql.Clear;
                Form1.ibDataset100.SelectSql.Add('select gen_id(G_ALTERACA,1) from rdb$database');
                Form1.ibDataset100.Open;
                //
                ibQuery6.ParamByName('REGISTRO').Value       := '1'+StrZero(StrToInt(Form1.ibDataSet100.FieldByName('GEN_ID').AsString),9,0);
                ibQuery6.ParamByName('DESCONTO').Value       := IBQMODELO02.FieldByName('DESCONTO').Value;
                ibQuery6.ParamByName('ENCRYPTHASH').Clear; // Precisa ser NULL. Assina depois. 
                if (IBQMODELO02.FieldByName('DESCRICAO').AsString = 'Desconto')
                  or (IBQMODELO02.FieldByName('DESCRICAO').AsString = 'Acréscimo') then
                begin
                  ibQuery6.ParamByName('COO').Value          := sCOOModelo02;
                  ibQuery6.ParamByName('CCF').Value          := sCCFModelo02;
                end
                else
                begin
                  ibQuery6.ParamByName('COO').Value          := IBQMODELO02.FieldByName('COO').Value;
                  ibQuery6.ParamByName('CCF').Value          := IBQMODELO02.FieldByName('CCF').Value;
                end;
                ibQuery6.ParamByName('CNPJ').Value           := IBQMODELO02.FieldByName('CNPJ').Value;
                ibQuery6.ParamByName('REFERENCIA').Value     := IBQMODELO02.FieldByName('REFERENCIA').Value;
                ibQuery6.ParamByName('HORA').Value           := IBQMODELO02.FieldByName('HORA').Value;
                ibQuery6.ParamByName('DAV').Value            := IBQMODELO02.FieldByName('DAV').Value;
                ibQuery6.ParamByName('TIPODAV').Value        := IBQMODELO02.FieldByName('TIPODAV').Value;
                ibQuery6.ParamByName('CST_PIS_COFINS').Value := IBQMODELO02.FieldByName('CST_PIS_COFINS').Value;
                ibQuery6.ParamByName('ANVISA').Value         := IBQMODELO02.FieldByName('ANVISA').Value;
                ibQuery6.ParamByName('CST_ICMS').Value       := IBQMODELO02.FieldByName('CST_ICMS').Value;
                ibQuery6.ParamByName('ALIQ_PIS').Value       := IBQMODELO02.FieldByName('ALIQ_PIS').Value;
                ibQuery6.ParamByName('ALIQ_COFINS').Value    := IBQMODELO02.FieldByName('ALIQ_COFINS').Value;
                ibQuery6.ParamByName('OBS').Value            := IBQMODELO02.FieldByName('OBS').Value;
                ibQuery6.ParamByName('STATUS').Value         := IBQMODELO02.FieldByName('STATUS').Value;
                ibQuery6.ParamByName('SERIE').Value          := sSerieReferenteNFModelo2;
                ibQuery6.ParamByName('SUBSERIE').Value       := sSubSerieReferenteNFModelo2;
                ibQuery6.ParamByName('CFOP').Value           := IBQMODELO02.FieldByName('CFOP').Value;

                ibQuery6.ExecSQL;

                //2015-10-16 Atualiza HASH de ALTERACA
                try
                  ibDataSet99.Close;
                  ibDataSet99.SelectSql.Clear;
                  ibDataset99.SelectSql.Add('select gen_id(G_HASH_ALTERACA,1) from rdb$database');
                  ibDataset99.Open;

                  HasHs('ALTERACA',True); // Sandro Silva 2016-02-25
                except end;
                //
              except
                on E: Exception do
                begin
                  SmallMsg(E.Message);
                end;
              end;
              //
              IBQMODELO02.NExt;
              //
            end; // while not IBQMODELO02.eof do
            //
            Form1.sMensagemNFMod02 := 'NF: '+ sReferenteNFModelo2;
            sReferenteNFModelo2 := '';
            //
            FreeAndNil(IBQMODELO02); // 2015-10-08
          end; // if AllTrim(sReferenteNFModelo2) <> '' then

          //
          if AllTrim(Form2.Edit8.Text) <> '' then // Nome do cliente preenchido
          begin
            //
            Mais1ini :=  TIniFile.Create(Form1.sAtual+'\LABELS.INI');
            //
            if (AllTrim(Form2.Edit8.Text) = AllTrim(Form1.ibDataSet2.FieldByName('NOME').AsString)) then
            begin
              sLabels := '';
              if bImp2 then sLabels := sLabels + Mais1ini.ReadString('CLIENTES','Label20','Pai')       + ': ' + ibDataSet2.FieldByName('IDENTIFICADOR1').AsString + Chr(10);
              if bImp3 then sLabels := sLabels + Mais1ini.ReadString('CLIENTES','Label21','Mãe')       + ': ' + ibDataSet2.FieldByName('IDENTIFICADOR2').AsString + Chr(10);
              if bImp4 then sLabels := sLabels + Mais1ini.ReadString('CLIENTES','Label22','Conjuge')   + ': ' + ibDataSet2.FieldByName('IDENTIFICADOR3').AsString + Chr(10);
              if bImp5 then sLabels := sLabels + Mais1ini.ReadString('CLIENTES','Label23','Natural')   + ': ' + ibDataSet2.FieldByName('IDENTIFICADOR4').AsString + Chr(10);
              if bImp1 then sLabels := sLabels + Mais1ini.ReadString('CLIENTES','Label19','Profissão') + ': ' + ibDataSet2.FieldByName('IDENTIFICADOR5').AsString + Chr(10);
              //
            end;
            //
            Mais1Ini.Free;
            //
            //          if ((Form1.sModeloECF = '02') or (Form1.sModeloECF = '15') or (Form1.sModeloECF = '12') or (Form1.sModeloECF = '14')) and (sIdentificaConsumidor = 'Sim') then // Daruma e URANO identifica o cunsumidor no FechaCupom
            if (Form1.sModeloECF <> '03') and (Form1.sModeloECF <> '17') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99') then
            begin
              //
              sConveniadoCNPJ  := AllTrim(Form2.Edit2.Text);

              sEnderecoCliente := AllTrim(Form2.Edit1.Text);

              sNomeCliente     := Copy(AllTrim(Form2.Edit8.Text), 1, 35); 
              if (Form1.sModeloECF = '14') and (Form1.sIdentificaConsumidor = 'Sim') then // Sweda e identifica consumidor não lista o CNPJ porque vai na abertura do cupom
                Form1.sMensagemPromocional := 'Cliente: ' + sNomeCliente + Chr(10) +
                                              sEnderecoCliente     + Chr(10) +
                                              AllTrim(Form2.Edit3.Text) + Chr(10) +
                                              Form1.sMensagemPromocional
              else
                Form1.sMensagemPromocional := 'Cliente: ' + sNomeCliente + Chr(10) +
                                              sConveniadoCNPJ     + Chr(10) +
                                              sEnderecoCliente     + Chr(10) +
                                              AllTrim(Form2.Edit3.Text) + Chr(10) +
                                              Form1.sMensagemPromocional;
              //
            end
            // Para não imprimir duplicado os dados do cliente
            else
            begin
             if (Form1.sModeloECF = '03') or (Form1.sModeloECF = '17') then
             begin
               if (LimpaNumero(sCPF_CNPJ_Validado) = '') then
               begin
                 sEnderecoCliente := AllTrim(Form2.Edit1.Text);

                 sNomeCliente     := Copy(AllTrim(Form2.Edit8.Text), 1, 35); 
                 Form1.sMensagemPromocional := 'Cliente: ' + sNomeCliente + Chr(10) +
                                                sEnderecoCliente     + Chr(10) +
                                                AllTrim(Form2.Edit3.Text) + Chr(10) +
                                                Form1.sMensagemPromocional;
               end;
             end;
            end;
            //
          end else
          begin
            //
            // Não informou nome do cliente Form2.Edit8.Text
            //
            //
            if (Form1.sModeloECF <> '03') and (Form1.sModeloECF <> '17') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99') then
            begin
              //SmallMsg('Teste 01 3 CPF ' + Form2.edit2.Text + #13 + ' alteraca ' + Form1.ibDataSet27.FieldByName('CNPJ').AsString);
              sConveniadoCNPJ  := AllTrim(Form2.Edit2.Text);

              sEnderecoCliente := AllTrim(Form2.Edit1.Text);
              sNomeCliente     := Copy(AllTrim(Form2.Edit8.Text), 1, 35); 

              if CpfCgc(LimpaNumero(sConveniadoCNPJ)) and (LimpaNumero(sConveniadoCNPJ) <> '') then
              begin
                if (Form1.sModeloECF = '14') and (Form1.sIdentificaConsumidor = 'Sim') then  // Sweda e identifica consumidor não lista o CNPJ porque vai na abertura do cupom
                  Form1.sMensagemPromocional := 'Cliente: '+sNomeCliente+chr(10)+
                                                sEnderecoCliente     + Chr(10) +
                                                Form1.sMensagemPromocional
                else
                  Form1.sMensagemPromocional := 'CPF/CNPJ: '+ FormataCpfCgc(LimpaNumero(sConveniadoCNPJ)) + chr(10) +
                                                'Cliente: '+sNomeCliente+chr(10)+
                                                sEnderecoCliente     + Chr(10) +
                                                Form1.sMensagemPromocional;
              end;

            end
            else
            begin
              // Não imprimir duplicado dados do cliente

              if (Form1.sModeloECF = '03') or (Form1.sModeloECF = '17') then
              begin

                if (LimpaNumero(sCPF_CNPJ_Validado) = '') then
                begin
                  sEnderecoCliente := AllTrim(Form2.Edit1.Text);
                  sNomeCliente     := Copy(AllTrim(Form2.Edit8.Text), 1, 35); 
                  if (Trim(sEnderecoCliente) <> '') or (Trim(sNomeCliente) <> '') or (AllTrim(Form2.Edit3.Text) <> '') then
                    Form1.sMensagemPromocional := 'Cliente: ' + sNomeCliente + Chr(10) +
                                                  sEnderecoCliente     + Chr(10) +
                                                  AllTrim(Form2.Edit3.Text) + Chr(10) +
                                                  Form1.sMensagemPromocional;
                end;
              end;
            end;
            //
          end;
          //
          if AllTrim(Form1.sSeriais) <> '' then
            Form1.sMensagemPromocional := Form1.sSeriais + chr(10) +  Form1.sMensagemPromocional; 

          if AllTrim(sVendedor) <> '' then
          begin
            if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') then
              Form1.sMensagemPromocional := Form1.sMensagemPromocional + chr(10) + ' Vendedor.: ' + AllTrim(sVendedor)
            else
              Form1.sMensagemPromocional := Form1.sMensagemPromocional + chr(10) + 'Vend.: ' + Copy(AllTrim(sVendedor), 1, 35); // Sandro Silva 2019-08-08 Form1.sMensagemPromocional := Form1.sMensagemPromocional + chr(10) + 'Vend.: ' + AllTrim(sVendedor);
          end;

          if AllTrim(Form2.Edit1.Text) = AllTrim(Form1.ibDataSet2.FieldByName('NOME').AsString) then
            if AllTrim(Form1.ibDataSet2.FieldByName('CONVENIO').AsString) <> '' then
              Form1.sMensagemPromocional := 'Conv.: '+Form1.ibDataSet2.FieldByName('CONVENIO').AsString + chr(10) +  Form1.sMensagemPromocional;

          if PAFNFCE = False then
          begin

            //
            if (Copy(Form1.sConcomitante,1,3) = 'DAV') then
            begin
              if AllTrim(Form1.sOrcame) <> '' then
                Form1.sMensagemPromocional := 'DAV ' + sOrcame + ' CONF ORCAMENTO '+ chr(10) + Form1.sMensagemPromocional;
              if AllTrim(Form1.sOS)     <> '' then
                Form1.sMensagemPromocional := 'DAV-OS ' + sOS     + ' CONF OS '    + chr(10) + Form1.sMensagemPromocional;
            end;

          end
          else
          begin
            Form1.ibDataSet27.First;
            while Form1.ibDataSet27.Eof = False do
            begin
              if Form1.ibDataSet27.FieldByName('TIPODAV').AsString = 'ORÇAMENTO' then
              begin
                if Form1.ibDataSet27.FieldByName('DAV').AsString <> '' then
                begin
                  if AnsiContainsText(Form1.sMensagemPromocional, 'DAV ' + Form1.ibDataSet27.FieldByName('DAV').AsString) = False then
                    Form1.sMensagemPromocional := 'DAV ' + Form1.ibDataSet27.FieldByName('DAV').AsString + chr(10) + Form1.sMensagemPromocional; // Form1.sMensagemPromocional := 'DAV ' + Form1.ibDataSet27.FieldByName('DAV').AsString + '|' + chr(10) + Form1.sMensagemPromocional;
                end;
              end;
              Form1.ibDataSet27.Next;
            end;

            //if AnsiContainsText(Form1.sMensagemPromocional, 'DAV ') then
            //  Form1.sMensagemPromocional := '|' + Form1.sMensagemPromocional;

            Form1.ibDataSet27.First;

          end;

          //
          //
          Form1.sMD5DaLista := MD5Print(MD5File(pChar(Form1.sPastaDoExecutavel+'\LISTA.TXT')));
          //
          Form1.sMD5DaLista := StrTran(Form1.sMD5DaLista,'"NL"','');
          //
          Form1.sMensagemParaibaLegal := '';
          if Form1.sUF = 'PB'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) then
          begin
            //
            // Paraíba Legal
            //
            Form1.sMensagemParaibaLegal := 'PARAÍBA LEGAL - RECEITA CIDADÃ'+chr(10)+'TORPEDO PREMIADO: '
              + LimpaNumero(Form1.ibDataSet13.FieldByName('IE').AsString) + ' '
              + StrTran(DateToStr(Date),'/','')  + ' '
              + FormataNumeroDoCupom(Form1.iCupom) + ' ' // Sandro Silva 2020-10-16 + strzero(iCupom,6,0) + ' '
              + LimpaNumero(Copy(Format('%10.2n',[Form1.ibDataSet25.FieldByName('RECEBER').AsFloat*100]),1,7)) + ' ';
            //
          end;

          // Sandro Silva 2016-09-14
          // IBPT é última mensagem concatenada e primeira a ser impressa
          if ((Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99')) or (Form1.ClienteSmallMobile.sLogRetornoMobile = '') then
          begin
            if Trim(sM) <> '' then
              Form1.sMensagemPromocional := sM + Chr(10) + Form1.sMensagemPromocional;
          end;

          if Form1.sMensagemNFMod02 <> '' then
            Form1.sMensagemPromocional := Form1.sMensagemNFMod02 + Chr(10) + Form1.sMensagemPromocional;

          if Form1.sMensagemParaibaLegal <> '' then
            Form1.sMensagemPromocional := Form1.sMensagemParaibaLegal + Chr(10) + Form1.sMensagemPromocional;

          if Alltrim(sMensagemMesaConferida) <> '' then
          begin
            if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // Sandro Silva 2016-03-17
              Form1.sMensagemPromocional := sMensagemMesaConferida + chr(10) + Form1.sMensagemPromocional;
            sMensagemMesaConferida := '';
          end;

          if (Form1.sModeloECF = '59') then
            Form1.sMensagemPromocional := Form1.sMensagemPromocional + chr(10) + ' Build: ' + Build;

          {Sandro Silva 2022-10-04 inicio}
          if (Form1.sModeloECF = '65') then
            Form1.sMensagemPromocional := Form1.sMensagemPromocional + chr(10) + '|' +  'Caixa: ' + Form1.sCaixa;
          {Sandro Silva 2022-10-04 fim}

          Form1.sMensagemPromocional := StringReplace(Form1.sMensagemPromocional, #10#10, #10, [rfReplaceAll]);

          AcertaPendenciaCancelAlteraca; // Fechamento do cupom Sandro Silva 2019-03-21
          //
          // bInicializa := True;
          //
          bInicializa := False;
          bChaveTeste := True;
          bNaoAbriu   := True;
          //
          if sCupomTEF <> '' then // Cartão e cheque
          begin
            try
              //
              // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@Form1.xBlockInput) then Form1.xBlockInput(True);   // Disable Keyboard & mouse
              //
              Sleep(3000);
              //
              while (not bInicializa) and (bChaveTeste) do
              begin
                //
                bInicializa := Form1.PDV_Inicializa(sPorta);
                //
                if not bInicializa then
                begin
                  // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse

                  sMsgSemComunicacao := 'Impressora não responde.'+Chr(10)
                                                              +Chr(10)
                                                              +'Tentar novamente?'+chr(10)
                                                              +Chr(10);

                  if Form1.sModeloECF = '59' then
                  begin
                    sMsgSemComunicacao := _ecf59_Tipodaimpressora + ' não responde.'+Chr(10)
                                                            +Chr(10)
                                                            +'Tentar novamente?'+chr(10)
                                                            +Chr(10);
                  end;
                  if Form1.sModeloECF = '65' then
                  begin
                    Application.ProcessMessages;
                    Application.BringToFront;

                    sMsgSemComunicacao := 'Servidor SEFAZ não responde.'+Chr(10)
                                                            +Chr(10)
                                                            +'Tentar novamente?'+chr(10)
                                                            +Chr(10);
                  end;

                  bButton := SmallMsgBox(pChar(sMsgSemComunicacao),'Atenção (Inicializa)', mb_YesNo + mb_DefButton1 + MB_ICONWARNING);
                  if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then // Pos(TIPOMOBILE, Form1.ClienteSmallMobile.sVendaImportando) > 0 then
                    bButton := IDNO;

                  if bButton = IDYES then
                  begin
                    bChaveTeste := True;
                    // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse
                    Sleep(5000);
                  end else
                  begin
                    //
                    bChaveTeste := False;
                    bNaoAbriu   := False;

                    //
                    AssignFile(F,Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'));
                    Rewrite(F);
                    //NCN Não confirmação da venda e/ou da impressão.
                    WriteLn(F,'000-000 = NCN');                               // Header: Cartão 3c
                    WriteLn(F,'001-000 = '+StrTran(TimeToStr(Time),':',''));  // Identificação: Eu uso a hora
                    // WriteLn(F,'003-000 = '+ Form1.sValorTot);              // Identificação: Eu uso o número do cupom 10c
                    WriteLn(F,'010-000 = '+ Form1.sNomeRede);                 // Nome da rede:
                    WriteLn(F,'012-000 = '+ Form1.sTransaca);                 // Número da transação NSU:
                    WriteLn(F,'027-000 = '+ Form1.sFinaliza);                 // Finalização:
                    AdicionaCNPJRequisicaoTEF(F, Form1.ibDataSet13); // ENVIO DE INFORMAÇÕES LIVRES 1-CNPJ do Estabelecimento Comercial; 2-CNPJ da Empresa de Automação Comercial // Sandro Silva 2019-08-13
                    WriteLn(F,'999-999 = 0');                                 // Trailer - REgistro Final, constante '0' .
                    CloseFile(F);
                    Sleep(100); // Sandro Silva 2017-06-14
                    RenameFile(Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'),'c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
                    Sleep(6000);

                    // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse

                    //
                    SmallMsgBox(pChar('Última transação TEF não foi efetuada. Favor reter o cupom.'+
                                       Chr(10)+
                                       // Chr(10)+'Rede: '+Form1.sNomeRede+
                                       Chr(10)+'NSU: '+Form1.sTransaca),'Atenção!',mb_Ok + MB_ICONERROR);
                    //
                  end;
                  //
                end else
                  bchaveTeste := False;
                //
              end;
            finally
              // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
            end;
          end;
          //
          if bNaoAbriu then
          begin
            //
            bFecha := True;
            //
            bFecha := Form1.PDV_FechaCupom(True);

            //SmallMsg('Teste 1 Sequência fechando cupom fiscal');

            //
            ValorTotalDoDia(True);
            //
            if bFecha then
            begin
              // Sandro Silva 2016-03-01 ExibirMsgMenuF10Indisponivel(False); // Sandro Silva 2016-03-01
              //
              Commitatudo2(False); // Fecha o cupom grava o desconto ou o acréscimo e o fechamento
              //
            end;
            //
            Form1.Label_7.Caption := 'Forma de pagamento';
            //
            bFechado := Form1.PDV_Pagamento(True); // Fecha cupom

            if PAFNFCe then
            begin
              if bFechado then
                GeraEstoqueDia(DateToStr(Date));//
            end;
            //
          end;
          //

          if (Form1.ClienteSmallMobile.sVendaImportando <> '') and (bFechado = False) then
          begin
            Form1.Button8Click(Sender); // Corta o papel, commita, etc e tal, fecha a tela da mesa do cupom status das mesas, zeresima
            //
            if Form1.bNFazMaisNada then
            begin
              if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
                Display('EM VENDA','Entre com EAN 13, Código ou Descrição')
              else
                Display('EM VENDA','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'); // Sandro Silva 2016-03-01

            end
            else
              Display(Form1.sStatusECF,Form1.sF);

            if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
            begin  // Estava ficando a tela escondida atrás de form22
              Form1.Top    := 0;
              Form1.Left   := 0;
              Form1.Width  := Screen.Width;
              Form1.Height := Screen.Height;
              Form1.BringToFront;
              Form1.Repaint;
            end;

            Abort;
          end;

          if bFechado then
          begin
            //
            try
              //
              iCOO := 0;
              iCCF := 0;
              //
              try
                if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
                  iCOO := StrToInt('0'+Form1.PDV_NumeroDoCupom(False))
                else
                  iCOO := StrToInt('0'+Form1.PDV_NumeroDoCupom(True));
                //
                iCCF := iCOO;
                //
                if Form1.sModeloECF = '02' then iCCF := StrToInt('0'+_ecf02_CCF(True));
                if Form1.sModeloECF = '03' then iCCF := StrToInt('0'+_ecf03_CCF(True));
                if Form1.sModeloECF = '14' then iCCF := StrToInt('0'+_ecf14_CCF(True));
                if Form1.sModeloECF = '15' then iCCF := StrToInt('0'+_ecf15_CCF(True));
                if Form1.sModeloECF = '17' then iCCF := StrToInt('0'+_ecf17_CCF(True));
                //
                if Form1.sModeloECF = '02' then iGNF := StrToInt('0'+LimpaNumero(_ecf02_GNF(True)))+1; // Ok
                if Form1.sModeloECF = '03' then iGNF := StrToInt('0'+LimpaNumero(_ecf03_GNF(True)))+1; //
                if Form1.sModeloECF = '15' then iGNF := StrToInt('0'+LimpaNumero(_ecf15_GNF(True)))+1; //
                if Form1.sModeloECF = '17' then iGNF := StrToInt('0'+LimpaNumero(_ecf17_GNF(True)))+1; //
                //

                //AtualizaCROCripta; // 2015-09-24

              except
                //
                // SmallMsg('ECF desligado');
                //
              end;
              //
              // Primeiro exclui as formas lançadas anteriormente e inclui novamente
              try
                Form1.ibDataSet28.First;
                while Form1.ibDataSet28.Eof = False do
                  Form1.ibDataSet28.Delete;
              except
              end;

              if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
              begin
                // Atualiza a data do cupom para a data que foi autorizada a NFC-e/CF-e e ficou gravado na tabela ALTERACA
                if Form1.ibDataSet27.FieldByName('DATA').AsString = '' then // Sandro Silva 2020-09-25
                  Form1.sDataDoCupom := FormatDateTime('dd/mm/yyyy', Date)
                else
                  Form1.sDataDoCupom := Form1.ibDataSet27.FieldByName('DATA').AsString;

                // Seleciona a data do documento na tabela NFCE
                // Se a data contida em sDataDoCupom for diferente daquela contida no campo NFCE.DATA então será usada a data da tabela NFCE para ser aplicada em ALTERACA e PAGAMENT
                //
                Form1.IBDataSet150.Close;
                Form1.IBDataSet150.SelectSQL.Text :=
                  'select * ' +
                  'from NFCE ' +
                  'where MODELO = ' + QuotedStr(Form1.sModeloECF) +
                  ' and NUMERONF = ' + QuotedStr(Form1.ibDataSet27.FieldByName('PEDIDO').AsString) +
                  ' and CAIXA = ' + QuotedStr(Form1.ibDataSet27.FieldByName('CAIXA').AsString);
                Form1.IBDataSet150.Open;

                if _ecf65_UsoDenegado(Form1.IBDataSet150.FieldByName('NFEXML').AsString) then
                  bNFCeUsoDenegado := True;

                if (Form1.IBDataSet150.FieldByName('DATA').AsString <> '') and (Form1.IBDataSet150.FieldByName('DATA').AsString <> sDataDoCupom) then
                begin
                  Form1.sDataDoCupom := FormatDateTime('dd/mm/yyyy', Form1.IBDataSet150.FieldByName('DATA').AsDateTime);
                  Form1.ibDataSet27.First;
                  while Form1.ibDataSet27.Eof = False do
                  begin
                    try
                      Form1.ibDataSet27.Edit;
                      Form1.ibDataSet27.FieldByName('DATA').AsDateTime := StrToDate(Form1.sDataDoCupom);
                      Form1.ibDataSet27.Post;
                    except

                    end;
                    Form1.ibDataSet27.Next;
                  end;

                  Form1.ibDataSet27.First;
                end;

              end;

              if Trim(Form1.sDataDoCupom) = '' then
                Form1.sDataDoCupom := FormatDateTime('dd/mm/yyyy', Date);

              if bNFCeUsoDenegado = False then // Sandro Silva 2020-05-18
              begin

                if (Form1.ibDataSet25.FieldByName('RECEBER').AsFloat <> 0) then   // Total do documento
                begin
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-01 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-01 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '00 Total';
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat * -1));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat * -1;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                end;
                //
                if (Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat <> 0) then  // Cheque
                begin

                  try
                    //
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-01 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-01 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('GNF').AsString      := FormataNumeroDoCupom(iGnf); // Sandro Silva 2021-12-01 Form1.ibDataSet28.FieldByName('GNF').AsString      := StrZero(iGnf, 6, 0);
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '01 Em cheque';
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                end;
                //
                if (Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat <> 0) then // Dinheiro
                begin
                  sFormaDinheiro := '02 Dinheiro';
                  if Form1.sModeloECF = '65' then
                    sFormaDinheiro := '02 Dinheiro NFC-e';

                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString       := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString       := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString       := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString       := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString    := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString     := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString    := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString  := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString     := sFormaDinheiro;
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat      := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString      := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                end;
                //
                if (Form1.ibDataSet25.FieldByName('PAGAR').AsFloat <> 0) then // Cartao
                begin
                  //
                  try
                    for iTransacaoCartao := 0 to Form1.TransacoesCartao.Transacoes.Count -1 do  // Um registro para cada transação com cartão
                    begin
                      try
                        if Pos('CREDITO',Form10.sNomeDoTEF) <> 0 then Form1.sDebitoOuCredito := 'CREDITO';
                        if Pos('DEBITO',Form10.sNomeDoTEF) <> 0  then Form1.sDebitoOuCredito := 'DEBITO';
                        if AllTrim(Form1.sDebitoOuCredito) = ''  then Form1.sDebitoOuCredito := 'DEBITO';

                        Form1.ibDataSet28.Append;
                        //
                        Form1.ibDataSet28.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                        Form1.ibDataSet28.FieldByName('COO').AsString       := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString       := StrZero(iCOO, 6, 0); //
                        Form1.ibDataSet28.FieldByName('CCF').AsString       := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString       := StrZero(iCCF, 6, 0); //
                        Form1.ibDataSet28.FieldByName('PEDIDO').AsString    := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                        Form1.ibDataSet28.FieldByName('GNF').AsString       := FormataNumeroDoCupom(iGnf); // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('GNF').AsString       := StrZero(iGnf, 6, 0);
                        Form1.ibDataSet28.FieldByName('CAIXA').AsString     := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                        Form1.ibDataSet28.FieldByName('CLIFOR').AsString    := sConveniado;
                        Form1.ibDataSet28.FieldByName('VENDEDOR').AsString  := sVendedor;
                        Form1.ibDataSet28.FieldByName('FORMA').AsString     := '03 Cartao '+Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].DebitoOuCredito; // Sandro Silva 2017-08-25  Form1.sDebitoOuCredito;
                        {Sandro Silva 2021-07-07 inicio}
                        //if Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].CarteiraDigital = True then
                        if Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].Modalidade = tModalidadeCarteiraDigital then
                          Form1.ibDataSet28.FieldByName('FORMA').AsString     := '18 Carteira Digital';
                        if Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].Modalidade = tModalidadePix then
                          Form1.ibDataSet28.FieldByName('FORMA').AsString     := '17 Pagto Instantaneo';
                        {Sandro Silva 2021-07-07 fim}

                        Form1.ibDataSet28.FieldByName('VALOR').AsFloat      := StrToFloat(FormatFloat('0.00', Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].ValorPago)); // Sandro Silva 2017-08-25  StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('PAGAR').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('PAGAR').AsFloat;
                        Form1.ibDataSet28.FieldByName('HORA').AsString      := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30

                        if (UsaIntegradorFiscal()) then // Sandro Silva 2017-06-28 if Form1.sModeloECF = '59' then
                        begin
                          GravarRespostaFiscalValidadorFiscal(Form1.ibDataSet28.FieldByName('DATA').AsDateTime,
                                                      Form1.ibDataSet28.FieldByName('PEDIDO').AsString,
                                                      Form1.ibDataSet28.FieldByName('CAIXA').AsString,
                                                      Form1.ibDataSet28.FieldByName('FORMA').AsString,
                                                      Form1.ibDataSet28.FieldByName('VALOR').AsFloat,
                                                      IntegradorCE.GetidPagamento('03', iTransacaoCartao),
                                                      IntegradorCE.GetidRespostaFiscal('03', IntegradorCE.GetidPagamento('03', iTransacaoCartao)),
                                                      IntegradorCE.GetStatusTransmissaoidRespostaFiscal('03', IntegradorCE.GetidPagamento('03', iTransacaoCartao)),
                                                      Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].Transaca,
                                                      Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].NomeRede,
                                                      Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].Autorizacao, // Sandro Silva 2018-07-03
                                                      Form1.TransacoesCartao.Transacoes.Items[iTransacaoCartao].Bandeira // Sandro Silva 2018-07-03
                                                      );
                        end;

                        //
                        Form1.ibDataSet28.Post;
                        //
                      except
                      end;
                    end; // for iTransacaoCartao := 0 to Form1.TransacoesCartao.Transacoes.Count -1 do

                    if Form1.UsaIntegradorFiscal() then
                    begin
                      Form1.IntegradorCE.EnviarFormaPagamento.Formas.Clear; // Sandro Silva 2018-07-03
                      Form1.IntegradorCE.UltimoidPagamento := '';
                    end;


                  except

                  end;
                end; // Fim Cartão
                //
                if (Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat <> 0) then // Prazo
                begin
                  //
                  try
                    sFormaPrazo := '04 A prazo';
                    if Form1.sModeloECF = '65' then
                      sFormaPrazo := '04 A prazo NFC-e';

                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString       := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString       := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString       := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString       := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString    := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('GNF').AsString       := FormataNumeroDoCupom(iGnf); // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('GNF').AsString       := StrZero(iGnf, 6, 0);
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString     := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString    := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString  := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString     := sFormaPrazo;
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat      := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('DIFERENCA_').Asfloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString      := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;
                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR01').AsFloat <> 0) then // Extra 1
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString       := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString       := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString       := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString       := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString    := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString     := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString    := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString  := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString     := '05 ' + AllTrim(Form2.Label18.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat      := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR01').AsFloat)); // Sandro Silva 2016-09-05 Form1.ibDataSet25.FieldByName('VALOR01').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString      := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('1', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR01').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('1', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR01').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR02').AsFloat <> 0) then // Extra 2
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '06 ' + AllTrim(Form2.Label19.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR02').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('VALOR02').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('2', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR02').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('2', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR02').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR03').AsFloat <> 0) then // Extra 3
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '07 ' + AllTrim(Form2.Label20.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR03').AsFloat)); // Sandro Silva 2016-09-05 Form1.ibDataSet25.FieldByName('VALOR03').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('3', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR03').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('3', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR03').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR04').AsFloat <> 0) then // Extra 4
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '08 ' + AllTrim(Form2.Label21.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR04').AsFloat)); // Sandro Silva 2016-09-05 Form1.ibDataSet25.FieldByName('VALOR04').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('4', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR04').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('4', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR04').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR05').AsFloat <> 0) then // Extra 5
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '09 ' + AllTrim(Form2.Label22.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR05').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('VALOR05').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('5', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR05').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('5', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR05').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR06').AsFloat <> 0) then // Extra 6
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '10 ' + AllTrim(Form2.Label23.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR06').AsFloat)); // Sandro Silva 2016-09-05 Form1.ibDataSet25.FieldByName('VALOR06').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('6', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR06').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('6', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR06').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR07').AsFloat <> 0) then // Extra 7
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '11 ' + AllTrim(Form2.Label24.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR07').AsFloat));// Sandro Silva 2016-09-05 Form1.ibDataSet25.FieldByName('VALOR07').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('7', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR07').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('7', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR07').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                //
                if (Form1.ibDataSet25.FieldByName('VALOR08').AsFloat <> 0) then // Extra 8
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '12 ' + AllTrim(Form2.Label25.Caption);
                    Form1.ibDataSet28.FieldByName('VALOR').AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR08').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('VALOR08').AsFloat;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;

                  {Sandro Silva 2021-07-27 inicio}
                  try
                    FormaExtraLancaReceber('8', sCaixa, FormataNumeroDoCupom(iCOO), Form1.ibDataSet25.FieldByName('VALOR08').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30); // Sandro Silva 2021-12-02 FormaExtraLancaReceber('8', sCaixa, StrZero(iCOO, 6, 0), Form1.ibDataSet25.FieldByName('VALOR08').AsFloat, StrToDate(Form1.sDataDoCupom), StrToDate(Form1.sDataDoCupom) + 30);
                  except
                  end;
                  {Sandro Silva 2021-07-27 fim}

                end;
                // Sempre cria Troco
                begin
                  //
                  try
                    Form1.ibDataSet28.Append;
                    //
                    Form1.ibDataSet28.FieldByName('DATA').AsDateTime   := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet28.FieldByName('COO').AsString      := FormataNumeroDoCupom(iCOO); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('COO').AsString      := StrZero(iCOO, 6, 0); //
                    Form1.ibDataSet28.FieldByName('CCF').AsString      := FormataNumeroDoCupom(iCCF); // // Sandro Silva 2021-12-02 Form1.ibDataSet28.FieldByName('CCF').AsString      := StrZero(iCCF, 6, 0); //
                    Form1.ibDataSet28.FieldByName('PEDIDO').AsString   := Form1.ibDataSet27.FieldByName('PEDIDO').AsString;
                    Form1.ibDataSet28.FieldByName('CAIXA').AsString    := Form1.ibDataSet27.FieldByName('CAIXA').AsString;
                    Form1.ibDataSet28.FieldByName('CLIFOR').AsString   := sConveniado;
                    Form1.ibDataSet28.FieldByName('VENDEDOR').AsString := sVendedor;
                    Form1.ibDataSet28.FieldByName('FORMA').AsString    := '13 Troco';
                    if Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat <> 0 then
                      Form1.ibDataSet28.FieldByName('VALOR').AsFloat    := StrToFloat(FormatFloat('0.00', Abs(Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat)));// Sandro Silva 2017-05-20  StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat * -1));// Sandro Silva 2016-09-05 Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat * -1;
                    Form1.ibDataSet28.FieldByName('HORA').AsString     := Form1.ibDataSet27.FieldByName('HORA').AsString; // Sandro Silva 2018-11-30
                    //
                    Form1.ibDataSet28.Post;
                    //
                  except
                  end;
                end;

                //Aqui confere as formas de pagamento para NFC-e se não existir forma corretamente importa do xml?
                if (Form1.sModeloECF = '65') then
                begin

                  Form1.ibDataSet28.First;
                  Form1.ibDataSet28.Last;

                  if Form1.ibDataSet28.RecordCount < 3 then
                  begin

                    Audita('VENDA','FRENTE', Form15.UsuarioPub, 'IMPORTOU PAGAMENTOS DO XML DEPOIS DE FECHAR VENDA ' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + ' CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString, 0, 0); // Ato, Modulo, Usuário, Histórico, Valor

                    Form1.IBDataSet150.Close;
                    Form1.IBDataSet150.SelectSQL.Text :=
                      'select * ' +
                      'from NFCE ' +
                      'where MODELO = ' + QuotedStr(Form1.sModeloECF) +
                      ' and NUMERONF = ' + QuotedStr(Form1.ibDataSet27.FieldByName('PEDIDO').AsString) +
                      ' and CAIXA = ' + QuotedStr(Form1.ibDataSet27.FieldByName('CAIXA').AsString);
                    Form1.IBDataSet150.Open;

                    if Form1.IBDataSet150.FieldByName('NFEXML').AsString <> '' then
                    begin
                      _ecf65_GravaPagamentFromXML(Form1.IBDataSet150.FieldByName('NFEXML').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('CAIXA').AsString);
                    end;

                  end;
                end; // if (Form1.sModeloECF = '65') then

                // Troca RECEBER.EMISSAO
                Form1.ibDataSet7.First;
                while Form1.ibDataSet7.Eof = False do
                begin
                  if Form1.ibDataSet7.FieldByName('NUMERONF').AsString = (Form1.ibDataSet27.FieldByName('PEDIDO').AsString + Form1.ibDataSet27.FieldByName('CAIXA').AsString) then 
                  begin

                    if Form1.ibDataSet7.FieldByName('EMISSAO').AsDateTime <> Form1.ibDataSet27.FieldByName('DATA').AsDateTime then
                    begin
                      try
                        Form1.ibDataSet7.Edit;
                        Form1.ibDataSet7.FieldByName('EMISSAO').AsDateTime := Form1.ibDataSet27.FieldByName('DATA').AsDateTime;
                        Form1.ibDataSet7.Post;
                      except
                      end;
                    end;

                  end;
                  Form1.ibDataSet7.Next;
                end;


              end;// if bNFCeUsoDenegado = False then
            except  end;
          end;// if bFechado then

        end; // Sem log mobile ou ECF
      end;
      //
      Form1.Top    := 0;
      Form1.Left   := 0;
      Form1.Width  := Screen.Width;
      Form1.Height := Screen.Height;

      if bFechado then
      begin
        //----------------------------------------- //
        //                                          //
        //              G A V E T A                 //
        //                                          //
        //  Para seguir a gaveta deve estar         //
        //  fechada                                 //
        //                                          //
        //----------------------------------------- //
        if iGaveta <> 0 then
        begin
          I := 1;
          Form1.Display('Feche a gaveta'+Replicate('.',I),'Gaveta aberta');
          while Form1.sGaveta = '255' do
          begin
            //
            I := I + 1;
            if I > 10 then I := 1;
            //
            Form1.Label_10.Caption := 'Feche a gaveta'+Replicate('.',I);
            Form1.Label_10.Repaint;
            //
            Form1.sGaveta := Form1.PDV_StatusGaveta(True);
            //
            if I = 600 then
            begin
              I := 0;
              SmallMsg('Feche a gaveta.');
            end;
            //
          end;
          //
          Form1.Display('Aguarde...','Aguarde...');
          Form1.Repaint;
          //
        end;
        //----------------------------------------- //
        //                                          //
        //                 C A R N Ê                //
        //                                          //
        //----------------------------------------- //
        if (Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat <> 0) and (Form1.icupom <> 0) then
        begin
          //
          sCupomFiscalVinculado := Replicate('-',39);
          for I := 1 to (Length(Form1.sPrazo) div 20) do
          begin
            //
            if AllTrim(Form1.ibDataSet2.FieldByName('CONVENIO').AsString) <> '' then
              sConvenio := Copy('Convênio: '+Form1.ibDataSet2.FieldByName('CONVENIO').AsString + Replicate(' ',40),1,39)+ chr(10)
            else
              sConvenio := '';
             //
            if Form1.bCarneResumido then
            begin
              if i = 1 then
              begin
                sCupomfiscalVinculado := sCupomfiscalVinculado                     + Chr(10) +
                  sConvenio +
                  Copy(Form1.ibDataSet2.FieldByName('NOME').AsString                     + Replicate(' ',40),1,39)+ chr(10) +
                  Copy(Form1.ibDataSet2.FieldByName('ENDERE').AsString                   + Replicate(' ',40),1,39)+ chr(10) +
                  Copy(AllTrim(Form1.ibDataSet2.FieldByName('CEP').AsString)
                  +' - ' + AllTrim(Form1.ibDataSet2.FieldByName('CIDADE').AsString)
                  + ', ' + AllTrim(Form1.ibDataSet2.FieldByName('ESTADO').AsString)      + Replicate(' ',40),1,39)+ chr(10) +
                  Copy(Form1.ibDataSet2.FieldByName('CGC').AsString                      + Replicate(' ',40),1,39)+ chr(10) +
                  Copy(Replicate('-',40),1,39)+ chr(10) +
                  Copy(TITULO_PARCELAS_CARNE_RESUMIDO + Replicate(' ',40),1,39)+ chr(10) +
                  Copy(Replicate('-',40),1,39)+ chr(10);

              end;
              sCupomfiscalVinculado := sCupomfiscalVinculado +
                Copy(FormataReceberDocumento(I) + '  ' + Copy(Form1.sPrazo,01+(I*21)-21,10) + '   ' + Copy(Form1.sPrazo,11+(I*21)-21,10) + Replicate(' ',40),1,39)+ chr(10);
            end
            else
            begin
              sCupomfiscalVinculado := sCupomfiscalVinculado                     + Chr(10) +
                sConvenio +
                Copy(Form1.ibDataSet2.FieldByName('NOME').AsString                     + Replicate(' ',40),1,39)+ chr(10) +
                Copy(Form1.ibDataSet2.FieldByName('ENDERE').AsString                   + Replicate(' ',40),1,39)+ chr(10) +
                Copy(AllTrim(Form1.ibDataSet2.FieldByName('CEP').AsString)
                +' - ' + AllTrim(Form1.ibDataSet2.FieldByName('CIDADE').AsString)
                + ', ' + AllTrim(Form1.ibDataSet2.FieldByName('ESTADO').AsString)      + Replicate(' ',40),1,39)+ chr(10) +
                Copy(Form1.ibDataSet2.FieldByName('CGC').AsString                      + Replicate(' ',40),1,39)+ chr(10) +
                Copy('Documento: '+FormataReceberDocumento(I)           + Replicate(' ',40),1,39)+ chr(10) +//chr(69+iCaixa-1)+FormataNumeroDoCupom(Form1.iCupom) + chr(64+I)           + Replicate(' ',40),1,39)+ chr(10) +
                Copy('Vencimento: '+Copy(Form1.sPrazo,01+(I*21)-21,10)             + Replicate(' ',40),1,39)+ chr(10) +
                Copy('Valor R$: '+Copy(Form1.sPrazo,11+(I*21)-21,10)               + Replicate(' ',40),1,39)+ chr(10)+
                Copy(Replicate('-',40),1,39)+ chr(10);
             //
            end;
          end;

          if Form1.bCarneResumido then
            sCupomfiscalVinculado := sCupomfiscalVinculado + Copy(Replicate('-',40),1,39)+ chr(10);

          ////////////////
          //            //
          // C A R N Ê  //
          //            //
          ////////////////
          if Form1.sPromissoria = 'Sim' then
          begin
            //----------------------------------------- //
            //                                          //
            //                 PROMISSOÓIA              //
            //                                          //
            //----------------------------------------- //
            try
              //
              sCupomfiscalVinculado := sCupomfiscalVinculado +
              Copy('           NOTA PROMISSORIA'+ Replicate(' ',40),1,39)+ chr(10) +
              Copy(Replicate('-',40),1,39)+ chr(10)+
              Copy('Pagarei por esta nota promissoria ao'+ Replicate(' ',40),1,39)+ chr(10) +
              Copy('CNPJ: '+Form1.ibDataSet13.FieldByName('CGC').AsString+' ou a sua'+ Replicate(' ',40),1,39)+ chr(10) +
              Copy('ordem na cidade de'+ Replicate(' ',40),1,39)+ chr(10) +
              Copy(Form1.ibDataSet13.FieldByName('MUNICIPIO').AsString + Replicate(' ',40),1,39)+ chr(10) +
              Copy('a quantia de R$ '+ AllTrim(Format('%10.2n',[Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat])) + Replicate(' ',40),1,39)+ chr(10) +
              Copy('em moeda corrente no pais.'+ Replicate(' ',40),1,39)+ chr(10) +
              Copy(' '+ Replicate(' ',40),1,39)+ chr(10) +
              Copy(' '+ Replicate(' ',40),1,39)+ chr(10) +
              Copy(' '+ Replicate('_',40),1,39)+ chr(10) + // ____________________________
              Copy('Assinatura:'+Replicate(' ',40),1,39)+chr(10)+ // Sandro Silva 2018-10-05 Copy('Assinatura:'+Replicate(' ',40),1,39)+chr(10)+
              Copy(Form1.ibDataSet2.FieldByName('NOME').AsString                     + Replicate(' ',40),1,39)+ chr(10) +
              Copy(Form1.ibDataSet2.FieldByName('CGC').AsString                     + Replicate(' ',40),1,39)+ chr(10)+
              Copy(Replicate('-',40),1,39)+ chr(10);
              //
            except end;
            //----------------------------------------- //
            //                                          //
            //                 PROMISSOÓIA              //
            //                                          //
            //----------------------------------------- //
          end;
          //
          if bNFCeUsoDenegado = False then // Sandro Silva 2020-05-18 
          begin
            for I:= 1 to iVias do
            begin
              //
              bRetornoComando := PDV_ImpressaoNaoSujeitoaoICMS(sCupomfiscalVinculado);
              //
              if bRetornoComando then
                Demais('RG'); //2015-10-06 Inserir em DEMAIS 1 RG para cada via do vinculado impressa
            end;
          end; // if bNFCeUsoDenegado = False then
          //
          // 2015-10-06 Demais('RG');
          //
        end; // if (Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat <> 0) and (Form1.icupom <> 0) then
        //
        //---------------------------------------------------  //
        //                                                     //
        // Grava no arquivo alteraca os descontos e acréscimos //
        //                                                     //
        //---------------------------------------------------  //

        AjustaAlteracaDesconto;

        // Sandro Silva 2021-08-06 Button4.Enabled := True;
        //
        // ----------------------------- //
        // Termina Fechamento de Cupom   //
        // ----------------------------- //
        Button7.Enabled  := True;
        Button2.Enabled  := True;
        Button4.Enabled  := True;
        Button9.Enabled  := True;
        //
        Display(Form1.sStatusECF,Form1.sF);
        Form1.Memo2.Lines.Text := 'Total R$ 0,00';
        Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);
        //        Form1.Image2.Visible := False;
        //        Form1.Panel9.Visible := False;
        //
      end else
      begin

        if Form1.sTef = 'Sim' then
        begin
          if AllTrim(Form1.OkSim) = '0' then
          begin

            AssignFile(F,Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'));
            Rewrite(F);
            sIdentificaTransacaoTEF := StrTran(TimeToStr(Time),':','');
            //NCN Não confirmação da venda e/ou da impressão.
            WriteLn(F,'000-000 = NCN');                               // Header: Cartão 3c
            WriteLn(F,'001-000 = '+sIdentificaTransacaoTEF);  // Identificação: Eu uso a hora // Sandro Silva 2017-06-22  WriteLn(F,'001-000 = '+StrTran(TimeToStr(Time),':',''));  // Identificação: Eu uso a hora
            //
            // WriteLn(F,'003-000 = '+ Form1.sValorTot);              // Identificação: Eu uso o número do cupom 10c
            //
            WriteLn(F,'010-000 = '+ Form1.sNomeRede);                 // Nome da rede:
            WriteLn(F,'012-000 = '+ Form1.sTransaca);                 // Número da transação NSU:
            WriteLn(F,'027-000 = '+ Form1.sFinaliza);                 // Finalização:
            AdicionaCNPJRequisicaoTEF(F, Form1.ibDataSet13); // ENVIO DE INFORMAÇÕES LIVRES 1-CNPJ do Estabelecimento Comercial; 2-CNPJ da Empresa de Automação Comercial // Sandro Silva 2019-08-13
            WriteLn(F,'999-999 = 0');                                 // Trailer - REgistro Final, constante '0' .
            CloseFile(F);
            Sleep(100); // Sandro Silva 2017-06-14
            RenameFile(Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'),'c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
            Sleep(1000); // Sandro Silva 2017-06-23
            TEFAguardarRetornoStatus('c:\'+sDiretorio+'\'+sRESP, sIdentificaTransacaoTEF); // Sandro Silva 2017-06-22 Form1.TEFAguardarRetornoStatus('c:\'+sDiretorio+'\'+sRESP, sIdentificaTransacaoTEF); // Sandro Silva 2017-06-22

            Sleep(10000);
          end;
          //quando excluir se deu tudo certo?
        end;

        //
        DeleteFile('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.001');
        DeleteFile('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.STS');
        DeleteFile('c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
        DeleteFile(pChar('c:\'+sDiretorio+'.res'));
        // Sandro Silva 2017-06-22 Deve excluir apenas se conseguir cancelar  TEFDeletarCopiasArquivos(sDiretorio); // Sandro Silva 2017-06-13
        //
        Display('OPERACAO NAO CONFIRMADA','Use outra forma de pagamento');
        Form1.Repaint;
        //
        Sleep(1000);
        Panel3.Visible  := False;

        if (Form1.ibDataSet25.State in [dsInsert, dsEdit]) = False then
          Form1.ibDataSet25.Edit;

        Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0;
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0;
        Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0;
        Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0;
        Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
        Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
        //
        Form1.bVolta := True;
        //
        if (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '99') then
        begin
          Form1.Button18Click(Sender);
        end;
        //
        Form1.Repaint;
        Screen.Cursor := crDefault; // Cursor normal
        if (Form1.ClienteSmallMobile.sVendaImportando = '') then
          Edit1.SetFocus;
        //
        Abort;
        //
      end; // if bFechado then

      //-------------------------------------------------
      if (AllTrim(sCupomTef) <> '') then
      begin
        //
        Form1.Top    := 0;
        Form1.Left   := 0;
        Form1.Width  := Screen.Width;
        Form1.Height := Screen.Height;
        Form1.Repaint;
        //
        Panel3.Repaint;
        //
        Form1.Top    := 0;
        Form1.Left   := 0;
        Form1.Width  := Screen.Width;
        Form1.Height := Screen.Height;
        Form1.Repaint;
        ////////////////
        //            //
        // T  E   F   //
        //            //
        ////////////////
        bButton := IDYES;
        try
          if bInicializa then
          begin
            //
            // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse
            //
            if (Form1.ibDataSet25.FieldByname('ACUMULADO1').AsFloat <> 0) and (UpperCase(sDIRETORIO) = 'TEF_DIAL') then
            begin
              //
              // Quando é CHEQUE / TEF não é comprovante fiscal vinculado e GERENCIAL
              //
              bChave := PDV_ImpressaoNaoSujeitoaoICMS(sCupomTef);
              Sleep(100);
              if bChave then // 2015-10-21
                Demais('RG');
              //
            end else
            begin
              //
              bButton := 1;
              //
              // Alterei todo este boloco na homologação do modular 2012
              // Quando desliga a impressora antes de completar o pagamento
              // Este bloco so funciona na BEMATECH
              // Portanto sempre homologar com BEMATECH
              //
              //if Form1.sModeloECF = '15' then
              //begin
              //  _ecf15_CodeErro(0, '');
              //end;

              if Form1.sModeloECF = '02' then
              begin
                //
                for I := 1 to 10 do
                begin
                  bChave := _ecf02_TestaLigadaePapel(True);
                end;
                //
                // Se usar outro ECF tem que implementear aqui
                //
                while (not bChave) and (bButton <> IDNO) do
                begin
                  //
                  bChave := _ecf02_TestaLigadaePapel(true);

                  //
                  // Se usar outro ECF tem que implementear aqui
                  //
                  //
                  if not bChave then
                  begin
                    // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);   // Enable Keyboard & mouse
                    //
                    bButton := SmallMsgBox(pChar('Impressora não responde.'+Chr(10)
                                                  +Chr(10)
                                                  +'Tentar novamente?'+chr(10)
                                                  +Chr(10)
                                                  ),'Atenção (TEF) 9000', mb_YesNo + mb_DefButton1 + MB_ICONWARNING);

                    if bButton = IDYES then
                    begin
                      //
                      Sleep(5000);
                      //
                      bChave := _ecf02_TestaLigadaePapel(true);

                      //
                      if bChave then
                      begin
                        //
                        bPagamento := False;
                        //
                        bPagamento := Form1.PDV_FaltaPagamento(True);
                        //
                        if bPagamento then
                        begin
                          //
                          Form1.PDV_Pagamento(True);
                        end;
                      end;
                    end;
                  end;
                end;
              end;// if Form1.sModeloECF = '02' then
              //
              // Alterei todo este boloco na homologação do modular 2012
              //
              if (bButton <> IDNO) then
              begin
                //
                //
                // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse
                //
                Mais1ini               := TIniFile.Create('FRENTE.INI');
                Mais1Ini.WriteString('Frente de caixa','Queda','Não');
                Mais1ini.Free;
                //
                if Form1.sModeloECF = '01' then bChave := _ecf01_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '02' then bChave := _ecf02_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '03' then bChave := _ecf03_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '12' then bChave := _ecf12_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '14' then bChave := _ecf14_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '15' then bChave := _ecf15_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '17' then bChave := _ecf17_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '59' then bChave := _ecf59_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '65' then bChave := _ecf65_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '99' then bChave := _ecf99_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);

                {Sandro Silva 2021-07-22 inicio
                if Form1.sModeloECF = '04' then bChave := _ecf04_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '05' then bChave := _ecf05_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '06' then bChave := _ecf06_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '07' then bChave := _ecf07_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '08' then bChave := _ecf08_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '09' then bChave := _ecf09_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '10' then bChave := _ecf10_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                if Form1.sModeloECF = '11' then bChave := _ecf11_CupomNaoFiscalVinculado(sCupomTef,Form1.iCupom);
                }

                //
                if bChave then
                begin

                  Demais('CC'); // 2015-10-21

                  //
                  for I := 2 to iVias do
                  begin
                    //
                    Sleep(100);
                    //
                    bChave := PDV_ImpressaoNaoSujeitoaoICMS(sCupomTef);
                    Sleep(100);

                    if bChave then // 2015-10-21
                      Demais('RG');

                  end;
                  //
                end;
                //
              end; // if (bButton <> IDNO) then
              //
            end;
            //
            // if bChave then SmallMsg('Teste Ok') else SmallMsg('Teste Erro');
            //
            // bButton := IDYES;
            //
            // NFC-e não considerar a impressão concluída para desfazer as transações TEF
            if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
            begin
              bChave := True;
            end;

            while (not bChave) and (bButton <> IDNO) do
            begin
              //
              Form1.Repaint;
              Sleep(100);
              // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
              //
              if not bChave then
              begin
                //
                bButton := SmallMsgBox(pChar('Impressora não responde.'+Chr(10)
                                        +Chr(10)
                                        +'Tentar novamente?'+chr(10)
                                        +Chr(10)
                                        ),'Atenção (TEF) 3000', mb_YesNo + mb_DefButton1 + MB_ICONWARNING);

                if bButton = IDYES then
                begin
                  //
                  // Quando não deu tempo ou deu algum problema no vinculado.
                  //
                  // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse
                  Sleep(3000);
                  //
                  Form1.PDV_FechaCupom2(True);
                  //
                  Sleep(100);
                  //
                  bChave := PDV_ImpressaoNaoSujeitoaoICMS(sCupomTef);
                  Sleep(100);
                  // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
                  //
                  if bChave then // 2015-10-21
                    Demais('RG');
                end else bChave := False;
              end;
            end;
          end;// if bInicializa then
          //
          Panel3.Visible  := False;
          CortaPapelNoVideo(True); // fecha a venda TForm1.Button18Click()
        finally
          //
          // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable Keyboard & mouse
        end;
        //
        AtivaGeranciadorPadrao(Form1.sDiretorio, Form1.sReq, Form1.sResp, Form1.sExec, '');
        //
        if FileExists('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.STS') then
        begin
          //
          // bFechado := False;
          //
          if (bChave = True)   then
          begin

            if Form1.UsaIntegradorFiscal() then
              Form1.ExibePanelMensagem('Finalizando TEF'); // Sandro Silva 2018-07-03

            // Confirmando a transação TEF
            AssignFile(F,Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'));
            Rewrite(F);
            WriteLn(F,'000-000 = CNF');                               // Header: Cartão 3c
            WriteLn(F,'001-000 = '+StrTran(TimeToStr(Time),':',''));  // Identificação: Eu uso a hora
            // WriteLn(F,'003-000 = '+ Form1.sValorTot);              // Identificação: Eu uso o número do cupom 10c
            WriteLn(F,'010-000 = '+ Form1.sNomeRede);                 // Nome da rede:
            WriteLn(F,'012-000 = '+ Form1.sTransaca);                 // Número da transação NSU:
            WriteLn(F,'027-000 = '+ Form1.sFinaliza);                 // Finalização:
            AdicionaCNPJRequisicaoTEF(F, Form1.ibDataSet13); // ENVIO DE INFORMAÇÕES LIVRES 1-CNPJ do Estabelecimento Comercial; 2-CNPJ da Empresa de Automação Comercial // Sandro Silva 2019-08-13
            WriteLn(F,'999-999 = 0');                                 // Trailer - REgistro Final, constante '0' .
            CloseFile(F);
            Sleep(1000);
            RenameFile(Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'),'c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
            Sleep(6000); 
            //
            // 2015-10-08 Sleep deixa muito tempo de intervalo entre a hora impressa e a DEMAIS.HORA Demais('CC');
            //
            //Precisa? Form1.TEFAguardarRetornoStatus();
            if FileExists('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.STS') then // Sandro Silva 2017-06-22
              TEFDeletarCopiasArquivos(DIRETORIO_BKP_TEF); // Sandro Silva 2017-06-30

            Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31  Form1.Panel3.Visible := False; // Sandro Silva 2018-07-03

          end else
          begin
            //
            // Não
            //
            if AllTrim(Form1.OkSim) <> 'FF' then // Ronei Mudei aqui
            begin                                  //
              Form1.ExibePanelMensagem('Desfazendo a transação do último cartão'); // Sandro Silva 2017-09-15

              AssignFile(F,Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'));
              Rewrite(F);
              WriteLn(F,'000-000 = NCN');                                      // Header: Cartão 3c
              WriteLn(F,'001-000 = '+StrTran(TimeToStr(Time),':',''));  // Identificação: Eu uso a hora
              // WriteLn(F,'003-000 = '+ Form1.sValorTot);                        // Identificação: Eu uso o número do cupom 10c
              WriteLn(F,'010-000 = '+ Form1.sNomeRede);                                              // Nome da rede:
              WriteLn(F,'012-000 = '+ Form1.sTransaca);                                              // Número da transação NSU:
              WriteLn(F,'027-000 = '+ Form1.sFinaliza);                                              // Finalização:
              AdicionaCNPJRequisicaoTEF(F, Form1.ibDataSet13); // ENVIO DE INFORMAÇÕES LIVRES 1-CNPJ do Estabelecimento Comercial; 2-CNPJ da Empresa de Automação Comercial // Sandro Silva 2019-08-13
              WriteLn(F,'999-999 = 0');                                                       // Trailer - REgistro Final, constante '0' .
              CloseFile(F);
              Sleep(1000); // Sandro Silva 2017-06-13
              RenameFile(Pchar('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp'),'c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
              Sleep(6000);

              Form1.OcultaPanelMensagem;

              if FileExists('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.STS') then // Sandro Silva 2017-06-22
                TEFCancelarTransacoesDemaisCartoes(sDiretorio, sREQ, sRESP); // Sandro Silva 2017-06-14

              Sleep(1000);
              if Form1.sCupomTEFCancelado <> '' then
              begin
                /////////////////////////////////////////
                /// Impressão dos cancelamentos início
                /////////////////////////////////////////
                bChave := False;
                bSair  := False;
                try
                  //
                  while (not bChave) and (not bSair) do
                  begin

                    //
                    // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse Trava teclado e mause
                    //
                    Panel3.Repaint;
                    Application.ProcessMessages;
                    //
                    Sleep(100);
                    //
                    Form1.PDV_FechaCupom2(True);
                    //
                    bChave := PDV_ImpressaoNaoSujeitoaoICMS(sCupomTEFCancelado);
                    //
                    Sleep(500); // Sandro Silva 2017-07-03
                    //
                    if bChave then // 2015-10-06
                      Demais('RG');
                    //
                    if not bChave then
                    begin
                      //
                      // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
                      bButton := SmallMsgBox(pChar('Impressora não responde.'+Chr(10)
                                                    +Chr(10)
                                                    +'Tentar novamente?'+chr(10)
                                                    +Chr(10)
                                                     ),'Atenção (Comprovante cancelamento)', mb_YesNo + mb_DefButton1 + MB_ICONWARNING);
                      if bButton = IDYES then
                      begin
                        //
                        // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse
                        Sleep(5000);
                        //
                        Form1.PDV_FechaCupom2(True);
                        //
                        Sleep(2000);
                        //
                      end;
                      if bButton <> IDYES then bSair := True;
                    end;
                  end; // while (not bChave) and (not bSair) do

                  if bChave then // Exclui bkp cancelamento se foram impressos
                    TEFDeletarCopiasArquivos(DIRETORIO_BKP_TEF);
                finally
                  //
                  // 2015-09-08 if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
                end;
                ///
                /////////////////////////////////////////
                /// Impressão dos cancelamentos fim
                /////////////////////////////////////////

              end;

              SmallMsgBox(pChar('Última transação TEF não foi efetuada. Favor reter o cupom.'+
                                 Chr(10)+
                                 // Chr(10)+'Rede: '+Form1.sNomeRede+
                                 Chr(10)+'NSU: '+Form1.sTransaca),'Atenção!',mb_Ok + MB_ICONERROR);
              //
            end;
          end;
          //
          DeleteFile('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.001');
          DeleteFile('c:\'+sDiretorio+'\'+sRESP+'\INTPOS.STS');
          DeleteFile('c:\'+sDiretorio+'\'+sREQ+'\IntPos.tmp');
          DeleteFile('c:\'+sDiretorio+'\'+sREQ+'\INTPOS.001');
          DeleteFile(pChar('c:\'+sDiretorio+'.res'));
          //
        end else
        begin
          SmallMsgBox('O gerenciador padrão não está ativo. Cod: 999','Operador',mb_Ok + MB_ICONEXCLAMATION);
        end;
      end;
      //
      //-------------------------------------------------
      //
    end;
    //
    //
    // if not bVolta then
    begin
      //
      if Form1.bNFazMaisNada then
        Abort;
      //
      Panel3.Visible  := False;
      //
      Label_11.Caption := Right(Replicate(' ',8)+'0,00',8);
      Label_12.Caption := Right(Replicate(' ',8)+'0,00',8);
      Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);
      //
      Form1.Top    := 0;
      Form1.Left   := 0;
      Form1.Width  := Screen.Width;
      Form1.Height := Screen.Height;
      //
      // Form1.Panel2.Repaint;
      // Form1.Image5.Repaint;
      //
      Form1.Repaint;
      //                                  //
      // Repassa o nome do cliente SEMPRE //
      //                                  //
      Label_7.Caption := 'Aguarde, atualizando server...';
      Label_7.Repaint;
      //
      Screen.Cursor := crHourGlass; // Cursor de Aguardo

      if (AllTrim(sConveniado) <> '') or (Alltrim(sVendedor)<>'') or (Alltrim(sConveniadoCNPJ)<>'') then
      begin

        if (Trim(sConveniado) <> '') and (sConveniadoCNPJ = '') then // Com cliente informado mas o CNPJ/CPF não
        begin
          ibDataSet2.Close;
          ibDataSet2.SelectSQL.Clear;
          ibDataSet2.SelectSQL.Add('select * from CLIFOR where Upper(NOME) = ' + QuotedStr(UpperCase(Trim(sConveniado))) + ' and coalesce(NOME, '''') <> '''' ');
          ibDataSet2.Open;

          if Trim(sConveniado) = ibDataSet2.FieldByName('NOME').AsString then
            sConveniadoCNPJ := ibDataSet2.FieldByName('CGC').AsString;
        end;

        if sConveniadoCNPJ = '..-' then
          sConveniadoCNPJ := ''; // não gravar apenas a máscara do cpf

        Form1.ibDataSet27.Close;
        Form1.ibDataSet27.SelectSQL.Clear;
        Form1.ibDataSet27.SelectSQL.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))); // Sandro Silva 2021-11-29 Form1.ibDataSet27.SelectSQL.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0)));
        Form1.ibDataSet27.Open;

        if Trim(sConveniadoCNPJ) = '' then // Sandro Silva 2016-03-07 POLIMIG
          sConveniadoCNPJ := Form2.Edit2.Text;

        while Form1.ibDataSet27.Eof = False do
        begin
          Form1.ibDataSet27.Edit;
          Form1.ibDataSet27.FieldByName('CLIFOR').AsString   := sConveniado;
          Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := sVendedor;
          Form1.ibDataSet27.FieldByName('CNPJ').AsString     := Trim(sConveniadoCNPJ);
          Form1.ibDataSet27.Post;
          Form1.ibDataSet27.Next;
        end;
      end;
      //
      Button4.Enabled := True;

      Label_7.Caption := 'Aguarde, atualizando valor do dia...';
      Label_7.Repaint;
      ValorTotalDoDia(False);
      //
      Form1.Button8Click(Sender); // Corta o papel, commita, etc e tal, fecha a tela da mesa do cupom status das mesas, zeresima

      // Sandro Silva 2020-05-14 uso denegado cancela venda

      if Form1.sModeloECF = '65' then
      begin
        Screen.Cursor := crHourGlass; // Cursor de Aguardo
        Form1.ibDataset150.Close;
        Form1.ibDataset150.SelectSql.Clear;
        Form1.ibDataset150.SelectSQL.Add('select * from NFCE where NUMERONF='+QuotedStr(FormataNumeroDoCupom(Form1.iCupom)) + ' and CAIXA = ' + QuotedStr(Form1.sCaixa) + ' and MODELO = ' + QuotedStr('65')); // Sandro Silva 2021-11-29 Form1.ibDataset150.SelectSQL.Add('select * from NFCE where NUMERONF='+QuotedStr(StrZero(Form1.iCupom,6,0)) + ' and CAIXA = ' + QuotedStr(Form1.sCaixa) + ' and MODELO = ' + QuotedStr('65'));
        Form1.ibDataset150.Open;

        if _ecf65_UsoDenegado(Form1.IBDataSet150.FieldByName('NFEXML').AsString) then
        begin
          try
            Form1.CancelaVendaAtualNoBanco(FormataNumeroDoCupom(Form1.iCupom), FormatDateTime('dd/mm/yyyy', Form1.IBDataSet150.FieldByName('DATA').AsDateTime), False); // Sandro Silva 2021-11-29 Form1.CancelaVendaAtualNoBanco(StrZero(Form1.iCupom, 6, 0), FormatDateTime('dd/mm/yyyy', Form1.IBDataSet150.FieldByName('DATA').AsDateTime), False);
          except
          end;
        end;
        Screen.Cursor := crDefault; // Cursor de Aguardo
      end;

      // 2015-10-16 Se lançou NF. mod. 02 deve assinar os registros ALTERACA.TIPO = VENDA
      if (sCOOModelo02 <> '') and (AllTrim(sPedidoModelo02) <> '') then
      begin
        // Assina o registro referente a NF modelo 02 que passou pelo ECF (Perfil do DF)
        Form1.ibDataSet27.Close;
        Form1.ibDataSet27.SelectSQL.Text :=
          'select * ' +
          'from ALTERACA ' +
          'where COO = ' + QuotedStr(sCOOModelo02) +
          ' and CCF = ' + QuotedStr(sCCFModelo02) +
          ' and TIPO = ''VENDA'' ' +
          ' and CAIXA = ' + QuotedStr(Form1.sCaixa) +
          ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(StrToIntDef(Limpanumero(sPedidoModelo02), 0))); // Sandro Silva 2021-12-02 ' and PEDIDO = ' + QuotedStr(StrZero(StrToIntDef(Limpanumero(sPedidoModelo02), 0), 6, 0));
        Form1.ibDataSet27.Open;
        while Form1.ibDataSet27.Eof = False do
        begin
          Form1.ibDataSet27.Edit;
          Form1.ibDataSet27.Post;// Post assina o registro
          Form1.ibDataSet27.Next;
        end;
        Commitatudo2(True);
        Commitatudo(True); // Button18Click() NF modelo 02 impressas ecf
      end;

      if (sCOOModelo02 = '') and (AllTrim(sPedidoModelo02) = '') then
      begin
        // Assina os registros do cupom
        Form1.ibDataSet27.Close;
        Form1.ibDataSet27.SelectSQL.Text :=
          'select * ' +
          'from ALTERACA ' +
          'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
          ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)); // Sandro Silva 2021-11-29 ' and PEDIDO = ' + QuotedStr(StrZero(Form1.icupom, 6, 0));
        Form1.ibDataSet27.Open;
        while Form1.ibDataSet27.Eof = False do
        begin
          Form1.ibDataSet27.Edit;
          Form1.ibDataSet27.Post;
          Form1.ibDataSet27.Next;
        end;
        Commitatudo2(True);
        Commitatudo(True); // Button18Click() cupom
      end;

      //
      if Form1.bNFazMaisNada then
      begin
        if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
          Display('EM VENDA','Entre com EAN 13, Código ou Descrição')
        else
          Display('EM VENDA','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'); // Sandro Silva 2016-03-01

      end
      else
        Display(Form1.sStatusECF,Form1.sF);
      //
      bFechandoCupom := False; // Sandro Silva 2016-02-10 Controlar que pressione F7 durante o fechamento do cupom e cancela a venda na impressora
    end;
    //
  except
    Button18.Enabled  := True
  end;
  //
  // Reabilita os timers
  //
  Form1.Edit1.Text     := '';

  Form1.Timer1.Enabled := True;
  //

  //if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  //begin
    if bFechado = False then
    begin
      bFechandoCupom := False;
    end;

    if bFechado then
    begin
      if (Form1.sModeloECF = '65') and (Form1.UsaIntegradorFiscal = False) then // Sandro Silva 2019-10-16 if Form1.sModeloECF = '65' then
      begin
        if Form1.NFCeemContingncia1.Checked then
        begin
          Form1.FormShow(Sender); // Form1.Button18Click();
        end;
        _ecf65_VerificaContingenciaPendentedeTransmissao(Date - Form1.ContingenciaPendente.LimiteDias, Date, Form1.sCaixa);
        Form1.ExibeAlertaContingenciaPendente; // Sandro Silva 2019-08-14
        Form1.Display(Form1.sStatusECF, Form1.sF);
      end;
    end;
  //end;
end;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sandro Silva 2020-05-13
procedure TForm1.CancelaVendaAtualNoBanco(sPedido: String; sData: String;
  bValidacaoObrigatoria: Boolean);
var
  IBQDADOSCUPOM: TIBQuery;
  IBQDADOSITENSCUPOM: TIBQuery;
  IBQCUPOMCANCELADO: TIBQuery;
  IBQPENDENCIA: TIBQuery; // Sandro Silva 2019-04-01
begin
  try
    //
    Button4.Enabled := False;
    // -------------------------------------------- //
    // Apaga do arquivo alteraca e retorna a qtd no //
    // Estoque                                      //
    // -------------------------------------------- //
    Form1.fTotal  := 0;
    //
    // NFC-e e SAT permitem cancelar qualquer cupom dentro do tempo limite
    // Se fechar e abrir o frente para cancelar ibDataSet27 vai estar aberto com o cupom = '0000000';
    ////////
    /////// Cancelamento produtos (retorno quantidade para estoque, acerto grade de produtos, acerto produtos com número de série)
    /////// Faz acerto do estoque, grade, série em loop separados para reduzir as chances de dead lock com produtos em edição no Small (Cadastro aberto, nota de entrada, nota de saída, etc ...)
    ///////
    IBQCUPOMCANCELADO := CriaIBQuery(Form1.IBTransaction1);
    IBQPENDENCIA      := CriaIBQuery(Form1.ibDataSet27.Transaction); // Sandro Silva 2019-04-01

    IBQCUPOMCANCELADO.DisableControls; // Sandro Silva 2020-02-18
    IBQPENDENCIA.DisableControls; // Sandro Silva 2020-02-18

    IBQCUPOMCANCELADO.Close;
    IBQCUPOMCANCELADO.SQL.Text :=
      'select * ' +
      'from ALTERACA ' +
      'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
      ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)) + // Sandro Silva 2021-11-29 ' and PEDIDO = ' + QuotedStr(StrZero(Form1.icupom, 6, 0)) +
      ' order by REGISTRO';
    IBQCUPOMCANCELADO.Open;

    //////////////
    //Primeiro loop para retornar as quantidades ao estoque
    //////////////

    IBQCUPOMCANCELADO.First;
    while IBQCUPOMCANCELADO.Eof = False do
    begin

      // Ocorria "dead lock" se for cancelar um cupom que teve a descrição do produto alterado no cadastro de estoque fazendo com que nenhum ou apenas parte dos itens fossem cancelados
      // Antes de começar cancelamento atualiza a transação para obter os dados alterados
      Commitatudo2(True); // Cancelamento de item de cupom cancelado

      Form1.ibDataSet27.Close;
      Form1.ibDataSet27.SelectSQL.Text :=
        'select * ' +
        'from ALTERACA ' +
        'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
        ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)) + // Sandro Silva 2021-11-29 ' and PEDIDO = ' + QuotedStr(StrZero(Form1.icupom, 6, 0)) +
        ' and REGISTRO = ' + QuotedStr(IBQCUPOMCANCELADO.FieldByName('REGISTRO').AsString);
      Form1.ibDataSet27.Open;

      try
        Form1.ibDataSet27.First;
        //
        while not Form1.ibDataSet27.Eof do
        begin
          IBQPENDENCIA.Close;
          IBQPENDENCIA.SQL.Text :=
            'select * ' +
            'from PENDENCIA ' +
            'where CAIXA = ' + QuotedStr(Form1.ibDataSet27.FieldByName('CAIXA').AsString) +
            ' and PEDIDO = ' + QuotedStr(Form1.ibDataSet27.FieldByName('PEDIDO').AsString) +
            ' and coalesce(ITEM, '''' ) = ' + QuotedStr(Form1.ibDataSet27.FieldByName('ITEM').AsString);
          IBQPENDENCIA.Open;

          //
          if DateToStr(Form1.ibDataSet27.FieldByName('DATA').AsDateTime) <> '' then
            sData := DateToStr(Form1.ibDataSet27.FieldByName('DATA').AsDateTime);
          //
          Form1.fTotal := Form1.fTotal + Form1.ibDataSet27.FieldByName('TOTAL').AsFloat;
          try
            //
            if Trim(Form1.ibDataSet27.FieldByName('CODIGO').AsString) <> '' then
            begin
              // Desconto/Acréscimo não tem o campo CODIGO preenchido. Não processar o estoque nesses casos

              ////////////////////////////////////
              // Localiza o produto no cadastro //
              ////////////////////////////////////

              Form1.ibDataSet4.Close;
              Form1.ibDataSet4.SelectSQL.Clear;
              Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(Form1.ibDataSet27.FieldByName('CODIGO').AsString))+' ');
              Form1.ibDataSet4.Open;

              if Form1.ibDataSet27.FieldByName('CODIGO').AsString = Form1.ibDataSet4.FieldByName('CODIGO').AsString then
              begin
                if IBQPENDENCIA.FieldByName('TIPO').AsString <> 'KOLNAC' then // Existe pendência para atualizar o tipo na tabela ALTERACA Sandro Silva 2019-04-01
                begin
                  // ------------------------------ //
                  // Altera a quantidade no estoque //
                  // ------------------------------ //
                  if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // serviços não altera a quantidade
                  begin
                    try
                      if Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO' then
                      begin
                        //
                        Form1.ibDataSet4.Edit;  // Quando apaga
                        Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat    := Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat; // Quando apaga
                        Form1.ibDataSet4.Post;
                        //
                      end;
                    except
                      try
                        Form1.ibDataSet27.Edit;
                        Form1.ibDataSet27.FieldByName('TIPO').AsString := 'CANLOK';
                        Form1.ibDataSet27.Post; // Sandro Silva 2019-03-21
                      except
                        on E: Exception do
                        begin
                          // Grava item na tabela de pendências para ajustar no alteraca o tipo quando o registro estiver liberado de dead lock
                          GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'CANLOK');

                          Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#15577 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03

                        end;
                      end;
                    end;
                  end;
                end
                else
                begin
                  try
                    Form1.ibDataSet27.Edit;
                    Form1.ibDataSet27.FieldByName('TIPO').AsString := 'KOLNAC'; // Deve ficar KOLNAC para depois o Small realizar o processamento do estoque
                    Form1.ibDataSet27.Post;
                  except
                    on E: Exception do
                    begin

                    end;
                  end;
                end;
              end;

            end; // if Trim(Form1.ibDataSet27.FieldByName('CODIGO').AsString) <> '' then

          except

          end;

          if IBQPENDENCIA.FieldByName('TIPO').AsString <> 'KOLNAC' then // Existe pendência para atualizar o tipo na tabela ALTERACA Sandro Silva 2019-04-01
          begin

            //
            if Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'CANLOK' then
            begin
              try
                Form1.ibDataSet27.Edit;
                Form1.ibDataSet27.FieldByName('TIPO').AsString := 'CANCEL';
                Form1.ibDataSet27.Post; // Sandro Silva 2019-03-21
              except
                on E: Exception do
                begin
                  GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'CANCEL');//, Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);

                  Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#15624 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03

                end;

              end;
            end;
            //
          end;
          Form1.ibDataSet27.Next;
          //
        end;
      except
        on E: Exception do  // Para proteger código em caso de erro ao assinar registro e o Form1.ibDataSet27.Next
        begin
          //ShowMessage('Teste 01 15715 ' + E.Message); // Sandro Silva 2017-09-21
        end;
      end;

      IBQCUPOMCANCELADO.Next;

      Commitatudo2(True); // Cancelamento de item de cupom cancelado

    end; // while IBQCUPOMCANCELADO.Eof = False do

    //////////////
    //Segundo loop para acertar grade e série produtos
    //////////////

    IBQCUPOMCANCELADO.First;
    while IBQCUPOMCANCELADO.Eof = False do
    begin

      // Apenas os item da venda que não foram cancelados
      if (IBQCUPOMCANCELADO.FieldByName('TIPO').AsString <> 'CANCEL') and (IBQCUPOMCANCELADO.FieldByName('TIPO').AsString <> 'CANLOK') then
      begin

        // Ocorria "dead lock" se for cancelar um cupom que teve a descrição do produto alterado no cadastro de estoque fazendo com que nenhum ou apenas parte dos itens fossem cancelados
        // Antes de começar cancelamento atualiza a transação para obter os dados alterados
        Commitatudo2(True); // Cancelamento de item de cupom cancelado

        Form1.ibDataSet27.Close;
        Form1.ibDataSet27.SelectSQL.Text :=
          'select * ' +
          'from ALTERACA ' +
          'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
          ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)) + // Sandro Silva 2021-11-29 ' and PEDIDO = ' + QuotedStr(StrZero(Form1.icupom, 6, 0)) +
          ' and REGISTRO = ' + QuotedStr(IBQCUPOMCANCELADO.FieldByName('REGISTRO').AsString);
        Form1.ibDataSet27.Open;

        try
          Form1.ibDataSet27.First;
          //
          while not Form1.ibDataSet27.Eof do
          begin
            //
            if DateToStr(Form1.ibDataSet27.FieldByName('DATA').AsDateTime) <> '' then
              sData := DateToStr(Form1.ibDataSet27.FieldByName('DATA').AsDateTime);

            if bValidacaoObrigatoria then // 2019-07-26
            begin
              // Só entra aqui quando estiver cancelando venda por método diferente de cancelamento por substituiçao da transmissão de contingência

              //
              //////////////////////////
              // Controle de serie    //
              // Esta rotina cancela  //
              // um item na venda     //
              //////////////////////////
              try
                //
                if Trim(Form1.ibDataSet27.FieldByName('CODIGO').AsString) <> '' then
                begin
                  // Desconto/Acréscimo não tem o campo CODIGO preenchido. Não processar o estoque nesses casos
                  ////////////////////////////////////
                  // Localiza o produto no cadastro //
                  ////////////////////////////////////

                  Form1.ibDataSet4.Close;
                  Form1.ibDataSet4.SelectSQL.Clear;
                  Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(Form1.ibDataSet27.FieldByName('CODIGO').AsString))+' ');
                  Form1.ibDataSet4.Open;

                  /////////////////////////////////////////////////
                  //
                  // S E R I A L - início
                  //
                  /////////////////////////////////////////////////
                  if Form1.ibDataSet4.FieldByName('SERIE').Value = 1 then // Produto com controle de serial
                  begin

                    // Ajusta o controle por número de série
                    Form1.ibDataSet30.Close;
                    Form1.ibDataSet30.SelectSQL.Clear;
                    Form1.ibDataSet30.Selectsql.Add('select * from SERIE where CODIGO='+QuotedStr(Form1.ibDataSet4.FieldByName('CODIGO').AsString));
                    Form1.ibDataSet30.Open;
                    while not Form1.ibDataSet30.Eof do
                    begin
                      if Copy(Form1.ibDataset30.FieldByName('NFVENDA').AsString,1,6) = sPedido then
                      begin
                        try
                          Form1.ibDataset30.Edit;
                          Form1.ibDataset30.FieldByName('NFVENDA').AsString  := '';
                          Form1.ibDataset30.FieldByName('VALVENDA').AsString := '';
                          Form1.ibDataset30.FieldByName('DATVENDA').AsString := '';
                        except

                        end;
                      end;
                      Form1.ibDataset30.Next;
                    end;
                  end;
                  /////////////////////////////////////////////////
                  //
                  // S E R I A L - final
                  //
                  /////////////////////////////////////////////////

                  /////////////////////////////////////////////////
                  //
                  //  G R A D E - início
                  //
                  /////////////////////////////////////////////////
                  Form1.ibDataSet10.Close;
                  Form1.ibDataSet10.SelectSQL.Clear;
                  Form1.ibDataSet10.Selectsql.Add('select * from GRADE where CODIGO='+QuotedStr(Form1.ibDataSet4.FieldByName('CODIGO').AsString)+' order by CODIGO, COR, TAMANHO');
                  Form1.ibDataSet10.Open;
                  Form1.ibDataSet10.First;
                  //
                  //
                  bApaga := True;
                  if IBQCUPOMCANCELADO.FieldByName('TIPO').AsString <> 'CANCEL' then // Não abrir tela para retorno na grade se o item já tiver cancelado durante a venda Sandro Silva 2019-03-18
                  begin

                    if AllTrim(Form1.ibDataSet4.FieldByName('CODIGO').AsString) <> '' then  // Quando estava em branco desconto ou acrescimo chamava a grade
                    begin
                      if Form1.ibDataSet4.FieldByName('CODIGO').AsString = Form1.ibDataSet10.FieldByName('CODIGO').AsString then
                      begin
                        Form13.TipoMovimento  := mgRetorno; // Sandro Silva 2018-10-30
                        Form13.Label2.Caption := 'Retorno de: ' + Form1.ibDataSet27.FieldByName('QUANTIDADE').AsString; // Sandro Silva 2018-10-30                       Form13.Label2.Caption := 'Retorno de:';
                        Form13.ShowModal; // Quando cancela o cupom
                        Form13.Label2.Caption := 'Saída de: ';
                      end;
                    end;

                  end;
                  //
                  bApaga := False;
                  /////////////////////////////////////////////////
                  //
                  //  G R A D E - final
                  //
                  /////////////////////////////////////////////////

                  //
                end; // if Trim(Form1.ibDataSet27.FieldByName('CODIGO').AsString) <> '' then

              except

              end;

            end; // if bValidacaoObrigatoria then


            //
            ///////////////////////////
            Form1.ibDataSet10.Active := False; //  Fecha dataset grade

            Form1.ibDataSet27.Next;
            //
          end;
        except
          on E: Exception do
          begin
            //ShowMessage('Teste 01 15715 ' + E.Message); // Sandro Silva 2017-09-21
          end;
        end;

      end;

      Commitatudo2(True); // Cancelamento de item de cupom cancelado

      IBQCUPOMCANCELADO.Next;

    end; // while IBQCUPOMCANCELADO.Eof = False do

    FreeAndNil(IBQCUPOMCANCELADO);
    FreeAndNil(IBQPENDENCIA); // Sandro Silva 2019-06-18

    //////
    //////

    /// Fim retorno quantidade ao estoque

    //
    // 2015-10-08 Exclui os registros ALTERACA.TIPO = 'VENDA' (NF. modelo 02)
    //
    IBQDADOSCUPOM      := CriaIBQuery(Form1.ibDataSet27.Transaction);
    IBQDADOSITENSCUPOM := CriaIBQuery(Form1.ibDataSet27.Transaction);

    IBQDADOSCUPOM.DisableControls; // Sandro Silva 2020-02-18
    IBQDADOSITENSCUPOM.DisableControls; // Sandro Silva 2020-02-18

    try

      IBQDADOSCUPOM.Close;
      IBQDADOSCUPOM.SQL.Text :=
        'select REGISTRO, PEDIDO, COO, DATA, CAIXA ' +
        'from ALTERACA ' +
        'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
        ' and TIPO = ' + QuotedStr('VENDA') +
        ' and COO = ' + QuotedStr(sPedido) +
        ' and DATA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', Form1.ibDataSet27.FieldByName('DATA').AsDateTime));
      IBQDADOSCUPOM.Open;

      while IBQDADOSCUPOM.Eof = False do
      begin

        Form1.ibDataSet27.Close;
        Form1.ibDataSet27.SelectSQL.Text :=
          'select * ' +
          'from ALTERACA ' +
          'where TIPO = ''VENDA'' ' +
          'and REGISTRO = ' + QuotedStr(IBQDADOSCUPOM.FieldByName('REGISTRO').AsString);
        Form1.ibDataSet27.Open;

        if Form1.ibDataSet27.FieldByName('REGISTRO').AsString <> '' then
        begin
          try
            Form1.ibDataSet27.Edit;
            Form1.ibDataSet27.FieldByName('TIPO').AsString := 'CANCEL';
            Form1.ibDataSet27.Post;
          except

            on E: Exception do
            begin
              GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'CANCEL');//, Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);

              Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#15872 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03

            end;

          end;
        end;

        IBQDADOSCUPOM.Next;
      end; // while IBQDADOSCUPOM.Eof = False do
      //
    except
      on E: Exception do
      begin
        SmallMsg('Erro! '+E.Message);
      end;
    end;

    ////////////////////////////////////////////////////////
    //
    // Receber
    //
    try
      Form1.ibDataSet99.Close;
      Form1.ibDataSet99.SelectSQL.Clear;
      //
      Form1.ibDataSet99.SelectSQL.Add('delete from RECEBER where NUMERONF='+QuotedStr(CupomComCaixaFormatado)+ ' and EMISSAO='+ QuotedStr(DateToStrInvertida(StrToDate(sData))) + ' ');
      Form1.ibDataSet99.Open;
      //
    except
      on E: Exception do
      begin
        SmallMsg('Erro! '+E.Message);
      end;
    end;
    //
    //  Apaga do arquivo PAGAMENT
    //
    if (((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) and (PAFNFCe = False)) then // Sandro Silva 2020-07-01 if (((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65')) and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE')) then // Sandro Silva 2016-03-01
    begin
      try
        Form1.ibDataSet99.Close;
        Form1.ibDataSet99.SelectSQL.Clear;
        Form1.ibDataSet99.SelectSQL.Add('delete from PAGAMENT where (coalesce(CLIFOR, '''') <> ''Sangria'' and coalesce(CLIFOR, '''') <> ''Suprimento'') and CAIXA = ' + QuotedStr(Form1.sCaixa) + ' and PEDIDO = ' + QuotedStr(sPedido) + ' ');
        Form1.ibDataSet99.ExecSQL;

        try
          IBQDADOSITENSCUPOM.Close;
          IBQDADOSITENSCUPOM.SQL.Text :=
            'select gen_id(G_HASH_PAGAMENT, -' + IntToStr(IBDataSet99.RowsAffected) +') from rdb$database';
          IBQDADOSITENSCUPOM.Open;

          HasHs('PAGAMENT', True); // Sandro Silva 2016-02-25
        except
        end;

      except
        on E: Exception do
        begin
          SmallMsg('Erro! '+E.Message);
        end;
      end;
    end;
    FreeAndNil(IBQDADOSITENSCUPOM);
    FreeAndNil(IBQDADOSCUPOM);
    //
    // 2015-10-08 SmallMsg('A venda número: '+sPedido+' foi cancelada.');
    //
  except end;
  //
end; // procedure TForm1.CancelaVenda(sPedido: String; sData: String);
///////////////////////////////////////////////////////////////////////////////////////////////////////////

procedure TForm1.Button4Click(Sender: TObject);
var
  sPedido, sData  : String;
  bButton  : Integer;
  bUltimo  : Boolean;
  bValidacaoObrigatoria: Boolean; // Controlar quando é obrigatório solicitar senha, confirmações  Sandro Silva 2019-07-25
begin
  //
  // Cancelamento cupom
  //
  //
  bValidacaoObrigatoria := True;

  if (Form1.sModeloECF <> '65') or (Form1.UsaIntegradorFiscal()) then // Somente se for NFC-e // Sandro Silva 2019-10-16 if Form1.sModeloECF <> '65' then // Somente se for NFC-e
    _ecf65_bTransmitindoContingenciaNFCe := False;

  if _ecf65_bTransmitindoContingenciaNFCe then
    bValidacaoObrigatoria := False;

  if bValidacaoObrigatoria then
  begin
    if (sLiberacao = '2') or (sLiberacao = '3') then
    begin

      //ShowMessage('Teste 01 16091'); // Sandro Silva 2019-01-17

      Small_InputBox('Senha','Informe a senha do administrador:','');
      if Form12.Caption <> 'Liberado' then
        Abort;
    end;
  end;

  AcertaPendenciaCancelAlteraca; // Cancela cupom Sandro Silva 2019-03-21

  //
  Screen.Cursor := crHourGlass; // Cursor de Aguardo
  bUltimo := False; // Sandro Silva 2016-04-01
  try
    //
    sPedido := FormataNumeroDoCupom(Form1.iCupom); // Sandro Silva 2020-10-16 sPedido := StrZero(iCupom,6,0);
    sData   := DateToStr(Date);
    //
    Screen.Cursor := crDefault; // Cursor normal

    if bValidacaoObrigatoria then
    begin
      if sModeloECF = '65' then
        bButton := Application.MessageBox(pChar('Confirma o cancelamento da NFC-e '+sPedido+'??'),'Atenção', mb_YesNo + mb_DefButton1 + MB_ICONQUESTION)
      else
        if sModeloECF = '59' then
          bButton := Application.MessageBox(pChar('Confirma o cancelamento do ' + sTipoDocumento + ' '+sPedido+'??'),'Atenção', mb_YesNo + mb_DefButton1 + MB_ICONQUESTION) // Sandro Silva 2018-08-01  bButton := Application.MessageBox(pChar('Confirma o cancelamento do CF-e-SAT '+sPedido+'??'),'Atenção', mb_YesNo + mb_DefButton1 + MB_ICONQUESTION)
        else
          if sModeloECF = '99' then
            bButton := Application.MessageBox(pChar('Confirma o cancelamento ' + sTipoDocumento + ' '+sPedido+'??'),'Atenção', mb_YesNo + mb_DefButton1 + MB_ICONQUESTION) // Sandro Silva 2018-08-01  bButton := Application.MessageBox(pChar('Confirma o cancelamento do CF-e-SAT '+sPedido+'??'),'Atenção', mb_YesNo + mb_DefButton1 + MB_ICONQUESTION)
          else
            bButton := Application.MessageBox(pChar('Confirma o cancelamento do cupom '+sPedido+'??'),'Atenção', mb_YesNo + mb_DefButton1 + MB_ICONQUESTION);
    end
    else
    begin
      bButton := IDYES;
    end;

    if bButton = IDYES then
    begin
      //
      bUltimo := False; // Sandro Silva 2016-07-26
      //
      if bValidacaoObrigatoria then
        bUltimo := Form1.PDV_CancelaUltimoCupom(True) // Button4Click()
      else
        bUltimo := True;
      //
      if bUltimo then
      begin
        //ShowMessage('Teste 01 15563'); // Sandro Silva 2017-09-21
        // 
        Demais('NC');
        //ShowMessage('Teste 01 15567'); // Sandro Silva 2017-09-21

        //
        Screen.Cursor := crHourGlass; // Cursor de Aguardo
        Form1.CancelaVendaAtualNoBanco(sPedido, sData, bValidacaoObrigatoria); // Sandro Silva 2020-05-15

        {Sandro Silva 2021-11-03 inicio}
        if _ecf65_bTransmitindoContingenciaNFCe then
        begin

          try
            Audita('CANCELA','FRENTE', '', 'Cancelamento NFC-e ' + sPedido, 0,0); // Ato, Modulo, Usuário, Histórico, Valor
          except

          end;

        end;
        {Sandro Silva 2021-11-03 fim}
        //
        // 2015-10-08 SmallMsg('A venda número: '+sPedido+' foi cancelada.');
        //
      end; // if bUltimo then
      //
    end; // if bButton = IDYES then
  except end;
  //
  // Sandro
  //
  if bValidacaoObrigatoria then
  begin
    Commitatudo(True); // Cancela cupom. Antes da mensagem commitar
    Form1.ibDataset25.Edit;

    if bUltimo then // Depois de commitar exibe a mensagem. Usuário não clica no OK da mensagem, os dados não ficam visíveis para outros usuários.
      SmallMsg('A venda número: '+sPedido+' foi cancelada.');
  end;
  //
  Screen.Cursor := crDefault; // Cursor de Aguardo
  //
end;

procedure TForm1.Button2Click(Sender: TObject); const MAX_PATH = 144;
var
  bAbre: Boolean;
  sCodigo: String;
  Mais1Ini: TIniFile;
  IBQTEMP: TIBQuery;
begin
  Form1.Label13.Visible := True; // Sandro Silva 2021-07-29

  Form1.Minimizarnabandeja1.Enabled := False;

  if Form1.sModeloECF = '59' then
  begin
    if Form1.UsaIntegradorFiscal('') then
    begin
      if _ecf59_Tipodaimpressora = 'MFE' then
        Form1.ExibePanelMensagem('Consultando Integrador Fiscal');
    end;
  end;

  //
  if TestaTudo(True) then // Abre cupom
  begin
    //
    if (Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01') then
      EstoqueDoDia(True);
    //
    if Form1.sTef = 'Sim' then
    begin
      DeleteFile('c:\TEF_CSHP\RESP\IntPos.001');
      DeleteFile('c:\TEF_CSHP\RESP\IntPos.sts');
      DeleteFile('c:\TEF_CSHP\REQ\IntPos.tmp');
      DeleteFile('c:\TEF_CSHP\REQ\IntPos.001');
    end;
    //
    fDesconto := 0;
    //
    Form1.sSeriais := '';
    sPrazo         := '';
    sOrcame        := '';
    sOS            := '';
    iItem          := 0;
    Form1.bf12     := False;
    
    Form1.bFechaRapidoCartao := False; // Sandro Silva 2021-09-08
    //
    try
      // --------------------------------- //
      // Abertura de Cupom Fiscal          //
      // --------------------------------- //
      bAbre := False;
      sCPF_CNPJ_Validado := '';
      //
      if ((Form1.sModeloECF = '02') or (Form1.sModeloECF = '03') or (Form1.sModeloECF = '12') or (Form1.sModeloECF = '14') or (Form1.sModeloECF = '17') or (Form1.sModeloECF = '15') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') ) // Sandro Silva 2018-10-23 if ((Form1.sModeloECF = '02') or (Form1.sModeloECF = '15') or (Form1.sModeloECF = '12') or (Form1.sModeloECF = '14') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') )
        and (sIdentificaConsumidor = 'Sim')
         then
      begin
        if (Form1.ClienteSmallMobile.sVendaImportando = '') and (bCupomAberto = False) and (bImportandoDAVorOS = False) then
        begin
          //
          bCPF_CNPJ := False;
          //
          while not bCPF_CNPJ do
          begin
            //
            sCPF_CNPJ_Validado := Small_InputBox('CPF ou CNPJ',INFORME_CPF_OU_CNPJ,''); // 2015-09-16
            if LimpaNumero(sCPF_CNPJ_Validado) <> '' then
            begin
              if CpfCgc(LimpaNumero(sCPF_CNPJ_Validado)) then
              begin
                sCPF_CNPJ_Validado := ConverteCpfCgc(AllTrim(LimpaNumero(sCPF_CNPJ_Validado)));
                Form2.Edit2.Text   := sCPF_CNPJ_Validado;
                Form2.Edit2Exit(Form2.Edit2);
                bCPF_CNPJ := True;
              end else
              begin
                SmallMsg('CPF ou CNPJ inválido!');
              end;
            end else bCPF_CNPJ := True;
          end;
        end;
      end;
      //
      AcertaPendenciaCancelAlteraca; // Abre Novo cupom Sandro Silva 2019-03-21
      //
      if Form1.sModeloECF = '01' then bAbre := _ecf01_AbreNovoCupom(True);
      if Form1.sModeloECF = '02' then bAbre := _ecf02_AbreNovoCupom(True);
      if Form1.sModeloECF = '03' then bAbre := _ecf03_AbreNovoCupom(True);
      if Form1.sModeloECF = '12' then bAbre := _ecf12_AbreNovoCupom(True);
      if Form1.sModeloECF = '14' then bAbre := _ecf14_AbreNovoCupom(True);
      if Form1.sModeloECF = '15' then bAbre := _ecf15_AbreNovoCupom(True);
      if Form1.sModeloECF = '17' then bAbre := _ecf17_AbreNovoCupom(True); // ok 2015-08-24
      if Form1.sModeloECF = '59' then bAbre := _ecf59_AbreNovoCupom(True);
      if Form1.sModeloECF = '65' then bAbre := _ecf65_AbreNovoCupom(True);
      if Form1.sModeloECF = '99' then bAbre := _ecf99_AbreNovoCupom(True);

      {Sandro Silva 2021-07-22 inicio
      if Form1.sModeloECF = '04' then bAbre := _ecf04_AbreNovoCupom(True);
      if Form1.sModeloECF = '05' then bAbre := _ecf05_AbreNovoCupom(True);
      if Form1.sModeloECF = '06' then bAbre := _ecf06_AbreNovoCupom(True);
      if Form1.sModeloECF = '07' then bAbre := _ecf07_AbreNovoCupom(True);
      if Form1.sModeloECF = '08' then bAbre := _ecf08_AbreNovoCupom(True);
      if Form1.sModeloECF = '09' then bAbre := _ecf09_AbreNovoCupom(True);
      if Form1.sModeloECF = '10' then bAbre := _ecf10_AbreNovoCupom(True);
      if Form1.sModeloECF = '11' then bAbre := _ecf11_AbreNovoCupom(True);
      }
      //
      if bAbre then
      begin

        if (Form1.sModeloECF <> '01') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65')  and (Form1.sModeloECF <> '99')then
          GeraEstoqueDia(DateToStr(Date));// Abre cupom Form1.Button2Click()

        //
        Form1.dBgrid2.Visible := False;
        //
        sConveniado     := '';
        sEnderecoClifor := ''; // Sandro Silva 2016-09-30
        sCidadeClifor   := ''; // Sandro Silva 2016-09-30
        Form1.fTotal    := 9999999.99;
        Form1.icupom    := 0;

        /////////////////////////////////////////////////////////////////////
        // TEF - ZEREZIMA - MULTIPLOS CARTOES                              //
        /////////////////////////////////////////////////////////////////////
        Form1.fDescontoNoTotal  := 0;
        Form1.fTEFPago          := 0;
        fTotalPago              := 0;
        Form1.sCupomTEF         := '';
        Form1.sCupomTEFReduzido := ''; // Sandro Silva 2017-06-14
        
        Form1.sParcelas   := '0'; // Sandro Silva 2016-07-26 SITEF não retorna quando Débito. Estava ficando as parcelas da transação anterior
        Form1.sValorTot   := '';
        Form1.sValorSaque := '';
        Form1.sNomeRede   := '';
        Form1.sTransaca   := '';
        Form1.sAutoriza   := '';
        Form1.sFinaliza   := '';
        Form1.sLinha      := '';

        // -------------------------------- //
        // Retorna o número do Cupom        //
        // -------------------------------- //
        Form1.icupom := StrToInt('0'+Form1.PDV_NumeroDoCupom(True));
        //
        iCCF := Form1.iCupom;
        iGNF := Form1.iCupom;
        //
        if Form1.sModeloECF = '02' then iCCF := StrToInt('0'+_ecf02_CCF(True));
        if Form1.sModeloECF = '03' then iCCF := StrToInt('0'+_ecf03_CCF(True));
        if Form1.sModeloECF = '14' then iCCF := StrToInt('0'+_ecf14_CCF(True));
        if Form1.sModeloECF = '15' then iCCF := StrToInt('0'+_ecf15_CCF(True));
        if Form1.sModeloECF = '17' then iCCF := StrToInt('0'+_ecf17_CCF(True)); // ok 2015-08-2
        //
        if Form1.sModeloECF = '02' then iGNF := StrToInt('0'+_ecf02_GNF(True));
        if Form1.sModeloECF = '03' then iGNF := StrToInt('0'+_ecf03_GNF(True));
        if Form1.sModeloECF = '14' then iGNF := StrToInt('0'+_ecf14_GNF(True));
        if Form1.sModeloECF = '15' then iGNF := StrToInt('0'+_ecf15_GNF(True));
        if Form1.sModeloECF = '17' then iGNF := StrToInt('0'+_ecf17_GNF(True)); // ok 2015-08-2
        // --------------------- //
        //  Retorno do Subtotal  //
        // --------------------- //
        fTotal := PDV_SubTotal(True);
        //
        // := 'SUBTOTAL R$ '+AllTrim(Format('%10.2n',[fTotal]));
        //
        Cadastraraliquota1.Enabled := False;
        if (Form1.ClienteSmallMobile.sVendaImportando = '') then
        begin
          if Edit1.CanFocus then
          begin
            try
              Edit1.SetFocus;
            except
            end;
          end;
        end;
        // ------------------------------------------------------- //
        // Botão finaliza fica desabilitado até não fechar o Cupom //
        // ------------------------------------------------------- //
        Button7.Enabled   := False;
        Button2.Enabled   := False;
        Button4.Enabled   := False;
        Button9.Enabled   := False;
        Button18.Enabled  := True;
        //
        // Esconde todas as mesas
        //
        DestroiMesas(True);
        //
        // Mesa ou cupom
        //
        if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
        begin
          //
          // Cabeçalho MESA
          //
          Form1.Memo3.Height    := AjustaAltura(100); // Sandro Silva 2016-08-02
          Form1.Memo3.Font.Size := AjustaAltura(13); // Sandro Silva 2016-08-02
          Form1.Memo3.Lines.Clear;
          Form1.Memo3.Lines.Add('');

          if Copy(Form1.sConcomitante,1,2) = 'OS' then
          begin
            Form1.IBQuery1.Close;
            Form1.IBQuery1.SQL.Clear;
            Form1.IBQuery1.SQL.Add('select first 1 * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Sandro Silva 2020-10-15 Form1.IBQuery1.SQL.Add('select first 1 * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM');
            Form1.IBQuery1.Open;

            Form1.Memo3.Lines.Add(StrZero(Form1.icupom,3,0)); 
            Form1.Memo3.Lines.Add(sMesaOuConta+' '+Form1.IBQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString);
          end
          else
            Form1.Memo3.Lines.Add(sMesaOuConta+' '+StrZero(Form1.icupom,3,0));

          ImprimeNoVideo('');

          if (Consumo = False) then
          begin
            //
            ImprimeNoVideo(TRACO_CUPOM_TELA);
            ImprimeNoVideo('IT  DESCRICAO       QTD   R$ UNIT   R$ TOTAL');// 2015-09-12
            ImprimeNoVideo(TRACO_CUPOM_TELA);// 2015-09-12
          end
          else
          begin
            //
            ImprimeNoVideo(TRACO_CUPOM_TELA);
            ImprimeNoVideo('IT  DESCRICAO       QTD                     ');// 2015-09-12
            ImprimeNoVideo(TRACO_CUPOM_TELA);// 2015-09-12
          end;

          //
          if Form1.sModeloECF = '01' then
            bCupomAberto := PDV_CupomAberto; // Sandro Silva 2021-12-01 bCupomAberto := _ecf01_CupomAberto(True);
          //
          if Form1.sConcomitante = 'OS'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) then
          begin
            if bPedeDadosOs then
            begin
              Form11.ShowModal;
              Form1.Memo3.Lines.Add(Copy(Form11.Edit1.Text, 1, 15)); // Sandro Silva 2018-09-13 Form1.Memo3.Lines.Add(Form11.Edit1.Text);
            end;
          end;
          //
        end else
        begin
          //
          // Cabeçalho
          //
          //
          if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then
          begin
            Form1.Memo3.Height    := AjustaAltura(100);
            Form1.Memo3.Font.Size := AjustaAltura(8);
            Form1.Memo3.Lines.Clear;
            Form1.Memo3.Lines.Add('');
            Form1.Memo3.Lines.Add(' ' + Copy(Form1.ibDataSet13.FieldByName('NOME').AsString, 1, 30));
            Form1.Memo3.Lines.Add('CNPJ: '+Form1.ibDataSet13.FieldByName('CGC').AsString);
            Form1.Memo3.Lines.Add(Copy(AllTrim(Form1.ibDataSet13.FieldByName('MUNICIPIO').AsString), 1, 30)+', '+AllTrim(Form1.ibDataSet13.FieldByName('ESTADO').AsString) );
          end else
          begin
            Form1.Memo3.Height    := AjustaAltura(100);// Sandro Silva 2016-08-02  AjustaAltura(90);
            Form1.Memo3.Font.Size := AjustaAltura(13); // Sandro Silva 2016-08-02
            Form1.Memo3.Lines.Clear;
            Form1.Memo3.Lines.Add('');
            Form1.Memo3.Lines.Add('CUPOM FISCAL');
          end;
          //
          // ImprimeNoVideo('');
          if ((sModeloECF <> '59') and (sModeloECF <> '65') and (sModeloECF <> '99')) or
            (Pos(UpperCase(Copy(Form1.sTipoDocumento2,1,1))+Copy(Form1.sTipoDocumento2+' ',2,Length(Form1.sTipoDocumento2))+FormataNumeroDoCupom(Form1.icupom)+ ' Caixa '+sCaixa, Form1.Memo1.Text) = 0) then
          begin
            ImprimeNoVideo(TRACO_CUPOM_TELA);
            ImprimeNoVideo(UpperCase(Copy(Form1.sTipoDocumento2,1,1))+Copy(Form1.sTipoDocumento2+' ',2,Length(Form1.sTipoDocumento2))+FormataNumeroDoCupom(Form1.icupom)+ ' Caixa '+sCaixa);
            ImprimeNoVideo(TRACO_CUPOM_TELA);
            ImprimeNoVideo('IT  DESCRICAO       QTD   R$ UNIT   R$ TOTAL');
            ImprimeNoVideo(TRACO_CUPOM_TELA);
          end;
          //
        end;
        //
        if bCupomAberto then
        begin
          //
          // Mesa ou cupom
          //
          if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
          begin
            //
            // Mesa
            //
            Form1.fTotal := GetTotalMesa(Form1.icupom);

            //
            sBonecoEscolhido := GetBonecoEscolhido(Form1.icupom);
            //
            Form1.ibQuery1.Close;
            //
            Form1.ibDataSet27.Close;
            Form1.ibDataSet27.SelectSQL.Clear;
            Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Sandro Silva 2021-11-29 Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM');
            Form1.ibDataSet27.Open;
            //
          end else
          begin
            //
            Form1.ibDataSet27.Close;
            Form1.ibDataSet27.SelectSQL.Clear;
            Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Listar os itens conforme foram lançados. Testar fechando/abrindo frente com cupom aberto // Sandro Silva 2021-11-29 Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM'); // Listar os itens conforme foram lançados. Testar fechando/abrindo frente com cupom aberto
            Form1.ibDataSet27.Open;
            //
          end;
          //
          Form1.ibDataSet27.First;
          //
          //
          iItem := 0;
          //
          Form1.fTotal := PDV_SubTotal(True);
          //
          // := 'SUBTOTAL R$ '+AllTrim(Format('%10.2n',[fTotal]));
          //
          while (not Form1.ibDataSet27.EOF) do
          begin
            //
            if AllTrim(Form1.ibDataSet27.FieldByname('DESCRICAO').AsString) = 'Acréscimo' then // Sandro Silva 2018-07-20
            begin
              // Não exibir acréscimo na tela do cupom. Situação de abrir o frente com uma venda ainda não finalizada
            end else
            if AllTrim(Form1.ibDataSet27.FieldByname('DESCRICAO').AsString) = 'Desconto' then
            begin

              if AllTrim(Form1.ibDataSet27.FieldByname('ITEM').AsString) = '' then
              begin
                Form1.fDescontoNoTotal := Form1.ibDataSet27.FieldByname('TOTAL').AsFloat*-1;
                //
                // SmallMsg('Desconto no total: '+FloatToStr(Form1.fDescontoNoTotal));
                //
              end else
              begin
                if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then // 2016-01-08
                  ImprimeNoVideo(Copy(StrZero(iItem,3,0)+' '+'Desconto'+Replicate(' ',53),1,52)+'         '+Format('%9.2n',[Form1.ibDataSet27.FieldByname('TOTAL').AsFloat])) // 2016-01-08
                else
                  ImprimeNoVideo(Copy(StrZero(iItem,3,0)+' '+'Desconto'+Replicate(' ',53),1,52)+'         '+Format('%9.2n',[Form1.ibDataSet27.FieldByname('TOTAL').AsFloat*-1]));
              end;

            end else
            if ((Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99'))
              and (Trim(Form1.ibDataSet27.FieldByName('CODIGO').AsString) = '')
              and ((Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) = '<CANCELADO>') or (Trim(Form1.ibDataSet27.FieldByName('TIPO').AsString) = 'KOLNAC')) then // Sandro Silva 2019-03-26 and (Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) = '<CANCELADO>') then
            begin
               //Não exibir descontos cancelados, igual quando clica F3 ImprimeNoVideo(Copy(StrZero(iItem,3,0)+' '+'Desconto <CANCELADO>'+Replicate(' ',53),1,52)+'         '+Format('%9.2n',[ibDataSet27TOTAL.AsFloat])) // 2016-01-08
            end else
            begin
              //
              if AllTrim(Form1.ibDataSet27.FieldByname('DESCRICAO').AsString) <> '' then
              begin
                //
                // Inicio Cria um componente dinamicamente
                //
                Form1.iItem := Form1.iItem + 1;
                //
                if not bServico then
                begin
                  //
                  ibDAtaSet4.Close;
                  ibDataSet4.SelectSQL.Clear;
                  ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(Form1.ibDataSet27.FieldByName('CODIGO').AsString))+' ');
                  ibDAtaSet4.Open;
                  //
                  if AllTrim(IbDataSet4.FieldByname('CODIGO').AsString) <> '' then
                  begin
                    //
                    if (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 13)
                      or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 14)
                      or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 12)
                      or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 8)
                      then
                      sCodigo := ibDataSet4.FieldByName('REFERENCIA').AsString
                    else
                      sCodigo := StrZero(StrToInt(ibDataSet4.FieldByName('CODIGO').AsString),14,0);
                  end;
                  //
                end else sCodigo := StrZero(0,14,0);
                //
                if Length(sCodigo) =13 then
                  scodigo := sCodigo+' ';
                //
                //  Mesa ou cupom
                //

                if (Form1.ibDataSet27.FieldByName('VENDEDOR').AsString = '<cancelado>') and ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01')) then
                begin
                  if (Consumo = False) then
                  begin
                    ImprimeNoVideo(StrZero(iItem,3,0)+' '+sCodigo+' '+Copy(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25) +
                                                     Right('        '+AllTrim(Format('%'+IntToStr(7-StrToInt(ConfCasas))+'.'+ConfCasas+'n'
                                                     ,[Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat])),11)+' '+Copy(Form1.ibDataSet27.FieldByName('MEDIDA').AsString+Replicate(' ',3),1,3)+' '+
                                                     ' <cancelado>');
                  end;

                  if (Consumo) then
                  begin
                    ImprimeNoVideo(StrZero(iItem,3,0)+' '+sCodigo+' '+Copy(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25) +
                                                     Right('        '+AllTrim(Format('%'+IntToStr(7-StrToInt(ConfCasas))+'.'+ConfCasas+'n'
                                                     ,[Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat])),11)+' '+Copy(Form1.ibDataSet27.FieldByName('MEDIDA').AsString+Replicate(' ',3),1,3)+' '+
                                                     ' <cancelado>');
                  end;

                end else
                begin

                  if (Consumo = False) or ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01')) then
                  begin
                    ImprimeNoVideo(StrZero(iItem,3,0)+' '+sCodigo+' '+Copy(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25) +
                                                      ' ' + // 2015-09-09
                                                      Right('        '+AllTrim(Format('%'+IntToStr(7-StrToInt(ConfCasas))+'.'+ConfCasas+'n'
                                                      ,[Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat])),11)+' '+Copy(Form1.ibDataSet27.FieldByName('MEDIDA').AsString+Replicate(' ',3),1,3)+' '+ Replicate(' ', 9) +
                                                      Format('%9.'+Form1.ConfPreco+'n',[Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat])
                                                      +' '+Format('%9.2n',[Form1.ibDataSet27.FieldByName('TOTAL').AsFloat]));
                  end
                  else
                  if (Consumo) or ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01')) then
                  begin
                    // Não exibe no vídeo o que está sendo lançado na mesa
                    // ER02.03, Requisito XLVII, item 19, letra a
                    ImprimeNoVideo(StrZero(iItem,3,0)+' '+sCodigo+' '+Copy(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25) +
                                                      Right('        '+AllTrim(Format('%'+IntToStr(7-StrToInt(ConfCasas))+'.'+ConfCasas+'n'
                                                      ,[Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat])),11));
                  end;
                end;
                //
                //  Mesa ou cupom
                //
                if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
                begin
                  if (Alltrim(Form1.ibDataSet27.FieldByName('DAV').AsString)<>'')
                  then
                  begin
                    //
                    ImprimeNoVideo('Item '+Right(Form1.ibDataSet27.FieldByName('ITEM').AsString,3)+' transferido da '+sMesaOuConta+' '+Right(Form1.ibDataSet27.FieldByName('DAV').AsString,3));
                    //
                  end;
                end;
                //
              end;
              //
            end;
            //
            Form1.ibDataSet27.Next;
            //
          end;
          //
          bCupomAberto := False;
          //
        end;
        //
        Form1.Memo1.Visible := True;
        Form1.Memo2.Visible := True;
        Form1.Memo3.Visible := True;

        ExibeScrollCupom(Form1.Memo1.Visible); // Sandro Silva 2016-08-03

        //
        Button4.Enabled        := False;
        //
        if (Consumo = False) or ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01')) then
        begin
          Form1.Memo2.Lines.Text := 'Total R$ '+AllTrim(Format('%12.2n',[Form1.fTotal]));
          Label_13.Caption := Format('%10.2n',[Form1.fTotal]);

          if ((Form1.iMesaAberta > 0) and (Form1.sModeloECF = '01')) then // 2015-09-16
            Label10.Caption := 'Total da ' + Form1.sMesaOuConta + ' R$'; // 2015-09-10
        end
        else
        begin
          Form1.Memo2.Lines.Text := '';
          Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);
          Label10.Caption := 'Total da ' + Form1.sMesaOuConta + ' R$'; // 2015-09-10
        end;

        //
        // SmallMsg('Teste SubTotal '+FloatToStr(Form1.fTotal)+chr(10)+'Total R$ '+AllTrim(Format('%12.2n',[Trunca(Form1.fTotal,2)])));
        //
        // Mesa ou cupom
        //
        if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
        begin
          Form1.sF4Conferencia := ''; // Sandro Silva 2016-08-04 Precisa? Botões já tem texto  '; F4 - Conferência de '+Form1.sMesaOuConta;
          if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
            Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,3,0),'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia)
          else
            if Copy(Form1.sconcomitante, 1, 2) = 'OS' then
            begin

              Form1.IBQuery1.Close;
              Form1.IBQuery1.SQL.Clear;
              Form1.IBQuery1.SQL.Add('select first 1 * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Sandro Silva 2021-11-29 Form1.IBQuery1.SQL.Add('select first 1 * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM');
              Form1.IBQuery1.Open;

              Display(sMesaOuConta+' '+Form1.IBQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);// Sandro Silva 2017-12-27 Polimig  Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,3,0) + Form1.IBQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
            end
            else
              Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,3,0),'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);

          if bImprimeConferencia then // 2015-08-31 ER 02.03 Requisito XLVII, item 19, alínea "b"
          begin
            if Form1.Confernciademesa1.Enabled then
              Form1.Confernciademesa1Click(Sender);
            bImprimeConferencia := False;
          end;

        end else
        begin
          if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
            Display('EM VENDA','Entre com EAN 13, Código ou Descrição')
          else
            Display('EM VENDA','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'); // Sandro Silva 2016-03-01
          end;
        //
        Mais1ini               := TIniFile.Create('FRENTE.INI');
        //
        if (Mais1Ini.ReadString('Frente de caixa','Queda','Sim') = 'Sim') then
        begin
          Mais1Ini.WriteString('Frente de caixa','Queda','Não');
          Mais1ini.Free;
        end;
        //
      end
      else
      begin
        if StrToInt(sMesas) > 0 then
          bChaveGerencialOk := False; // Para Fechamento de mesas após a RZ sair o Mesas abertas antes de fechar

        Edit1.Text := ''; // Ficha 4594 Sandro Silva 2019-04-29 Ficava em loop quando tentava abrir o cupom por código de barras usando leitor e abertura não permitida
        
      end;

      if (Form1.ClienteSmallMobile.sVendaImportando = '') and (bAbre) then
      begin

        //
        // Idenfica o vendedor lançado no cupom. Para casos que fecha o frente com o cupom aberto
        //

        IBQTEMP := CriaIBQuery(Form1.IBQuery1.Transaction);

        try

          IBQTEMP.Close;
          IBQTEMP.SQL.Text :=
            'select first 1 VENDEDOR ' +
            'from ALTERACA ' +
            //'where coalesce(VENDEDOR, '''') <> '''' ' +
            //' and coalesce(VENDEDOR, '''') <> ''<cancelado>'' ' +
            ' where TIPO <> ''CANCEL'' ' +
            ' and DESCRICAO <> ''Acréscimo'' ' +
            ' and DESCRICAO <> ''Desconto'' ' +
            ' and DESCRICAO <> ''<CANCELADO>'' ' +
            ' and TIPO <> ''KOLNAC'' ' + // Sandro Silva 2019-03-26 Quando em Dead Lock, regsitro fica com TIPO=KOLNAC. Altera para "CANCEL" quando estiver destravado            
            ' and VENDEDOR <> ''<cancelado>'' ' +
            ' and CAIXA = ' + QuotedStr(Form1.sCaixa) +
            ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)); // Sandro Silva 2021-11-29 ' and PEDIDO = ' + QuotedStr(StrZero(Form1.icupom,6,0));
          IBQTEMP.Open;

          // Verifica se tem cliente informado na venda selecionada
          if (IBQTEMP.FieldByName('VENDEDOR').AsString <> '') and (Trim(Form2.Edit9.Text) = '') then
          begin
            Form2.Edit9.Text := IBQTEMP.FieldByName('VENDEDOR').AsString;
            Form2.Edit9Change(Sender); // 2015-07-13
            if (Form1.ibDataSet99.FieldByName('NOME').AsString <> IBQTEMP.FieldByName('VENDEDOR').AsString) then
              Form2.Edit9.Text := '';
          end;

          IBQTEMP.Close;
          IBQTEMP.SQL.Text :=
            'select first 1 CLIFOR, CNPJ ' +
            'from ALTERACA ' +
            'where coalesce(CLIFOR, '''') <> '''' ' +
            ' and CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom)); // Sandro Silva 2021-11-29 ' and CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0));
          IBQTEMP.Open;

          if IBQTEMP.FieldByName('CLIFOR').AsString <> '' then
          begin
            Form2.Edit2.Text := IBQTEMP.FieldByName('CNPJ').AsString;
            Form2.Edit8.Text := IBQTEMP.FieldByName('CLIFOR').AsString;
            Form2.Edit8Enter(Sender);
            Form2.Edit8Exit(Sender);
          end;

          {Sandro Silva 2022-04-05 inicio}
          if Form1.sModeloECF = '65' then
          begin

            Form2.edMarketplace.Visible := True;
            // Valida se tem informou marketplace
            IBQTEMP.Close;
            IBQTEMP.SQL.Text :=
              'select first 1 MARKETPLACE ' +
              'from ALTERACA ' +
              'where coalesce(MARKETPLACE, '''') <> '''' ' +
              ' and CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom)); // Sandro Silva 2021-11-29 ' and CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0));
            IBQTEMP.Open;

            if IBQTEMP.FieldByName('MARKETPLACE').AsString <> '' then
            begin
              Form2.edMarketplace.Text := IBQTEMP.FieldByName('MARKETPLACE').AsString;
              Form2.edMarketplaceEnter(Sender);
            end;
            
          end
          else
          begin
            Form2.edMarketplace.Visible := False;
          end;
          Form2.lbMarketplace.Visible := Form2.edMarketplace.Visible;
          {Sandro Silva 2022-04-05 fim}

          IBQTEMP.Close;
        finally
          FreeAndNil(IBQTEMP);
        end;
      end; // if (Form1.ClienteSmallMobile.sVendaImportando = '') and (bAbre) then

      //
      //
    except
      AbreArquivos(True);
    end;
  end else
  begin
    //
    //
    Form1.Button8Click(Sender); // Corta o papel, commita, etc e tal, fecha a tela da mesa do cupom status das mesas, zeresima

    Edit1.Text := ''; // Ficha 4594 Sandro Silva 2019-04-29 Ficava em loop quando tentava abrir o cupom por código de barras usando leitor e abertura não permitida
    //
  end; // if TestaTudo(True) then // Abre cupom
  //
  MostraALogo(True, True); // Sandro Silva 2018-04-26  MostraALogo(True);
  //

  if Form1.sModeloECF = '59' then
    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible := False;
end;

procedure TForm1.FormActivate(Sender: TObject);
begin
  //SmallMsg('Teste 01 Active início');
  //LogFrente('Teste 01: Entrando FormActive');
  //
  try
    //
    Edit1.Left    := -800;
    Button2.Left  := -800;
    Button18.Left := -800;
    Button4.Left  := -800;
    Button6.Left  := -800;
    Button9.Left  := -800;
    Button7.Left  := -800;
    //
    //
    try
      //
      Image1.Top   := 0;
      Image1.Left  := 0;
      //
      Form1.Top    := 0;
      Form1.Left   := 0;
      Form1.Width  := Screen.Width;
      Form1.Height := Screen.Height;
      //
      bApaga := False;
      //
    except end;
    //
    bServico := False;
    bApaga   := False;
    bf12     := False;
    //
    if bSairDoPrograma then
    begin
      Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
        ExtractFileName(Application.ExeName) + ' finalizado pelo usuário');
      Form1.Close;
      Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
      FecharAplicacao(ExtractFileName(Application.ExeName));
    end;
  except
    SmallMsg('Erro: 7466');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.Close;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
  //

  if Form1.sModeloECF = '65' then
    Homologao1.Caption     := AnsiUpperCase(LerParametroIni('Frente.ini', SECAO_65, _65_AMBIENTE, _65_AMBIENTE_HOMOLOGACAO));

  if Form1.sModeloECF = '59' then
    Homologao1.Caption := AnsiUpperCase(LerParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_AMBIENTE, _59_AMBIENTE_HOMOLOGACAO));

  //LogFrente('Teste 01: Saindo FormActive');

  if Form1.Active then
  begin
    Form1.BringToFront;
    Form1.Panel1.BringToFront;
  end;
  Application.ProcessMessages; // 2015-11-11
  //SmallMsg('Teste 01 Active fim');
end;

procedure TForm1.ibDataSet20VENCIMENTOSetText(Sender: TField;
  const Text: String);
begin
  { ------------------------------------------------------------------ }
  { Cuidado: Esta rotina está associada a todos os campos do tipo data }
  { ------------------------------------------------------------------ }
  if Text = '  /  /    ' then
  begin
    Sender.AsString := '';
  end
  else
    try
    Sender.AsString := Text;
  except
    begin
      SmallMsg('Esta data não é válida, digite-a novamente.');
    end;
  end;
end;


procedure TForm1.Button7Click(Sender: TObject);
var
  bButton: Integer;
begin
  //
  if not bNaoSaiComESC then
  begin
    if Form1.bBalancaAutonoma then
    begin
      Form1.bBalancaAutonoma := False;
      Timer3.Enabled := False;
      FecharAplicacao('Pesado.exe');
    end;
    // -------------------------------- //
    // Sair do sistema                  //
    // -------------------------------- //
    if (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99') then
    begin
      bButton := Application.MessageBox(Chr(10) +
                                        '         No final do expediente é necessário fazer a Redução Z,    ' + Chr(10) +
                                        '         este procedimento deve ser feito todo dia mas somente'+ Chr(10) +
                                        '         no final do expediente.'+
                                        Chr(10) + Chr(10)+
                                        '    Sair do programa?           '
                                        , 'Atenção',
                                        mb_YesNo + mb_DefButton1 + MB_ICONQUESTION);
    end else
    begin
      bButton := IDYES;
    end;
    //
    if bButton = IDYES then
    begin
      //
      Form1.Hide;
      bSairDoPrograma := True;
      Close;

      //
    end;
  end else
  begin
    bNaoSaiComESC := False;
  end;
end;        

procedure TForm1.ibDataSet1NewRecord(DataSet: TDataSet);
begin
  DataSet.FieldByName('REGISTRO').AsString := sProximo;
end;

// -------------- //
// Leitura X      //
// -------------- //

procedure TForm1.Fechamentodocaixa1Click(Sender: TObject);
var
  bButton: Integer;
begin
  // -------------------------------- //
  // Redução Z                        //
  // -------------------------------- //
  //if Form1.bStatusFiscal then
  Commitatudo(True); // Sandro Silva 2017-11-08 Polimig Fechamentodocaixa1Click(

  if TestaTudo(True) then
  begin
    //
    bButton := Application.MessageBox(pChar('Atenção:' + Chr(10) +
                                            ' '        + Chr(10) +
                                            '         O caixa será fechado e só poderá ser' + Chr(10) +
                                            '         reaberto amanhã as 00:00:01 horas.                        ' + Chr(10) +
                                            ' ' + Chr(10) +
                                            '         Este procedimento deve ser feito todo dia, somente' + Chr(10) +
                                            '         no final do expediente.' + Chr(10) +
                                            ' ' + Chr(10) +
                                            'Continuar ?')
                                            , 'Atenção',
                                            mb_YesNo + mb_DefButton2 + MB_ICONWARNING);
    //
    Form1.Repaint;
    // ------------------------------------------------------------------------------------ //
    // Só efetua a redução Z depois que o usuário responder a pergunta clicando no botão OK //
    // ------------------------------------------------------------------------------------ //
    if bButton = IDYES then
    begin
      Display('Aguarde... Emitindo a Redução Z', 'Emitindo a Redução Z');
      EmitirReducaoZ(Sender);
      Display(Form1.sStatusECF,Form1.sF);
    end; // if bButton = IDYES then
  end;
  //
  try
    Button8Click(Sender);
  except end;
  //
end;

procedure TForm1.Sangria1Click(Sender: TObject);
begin
  //
  Commitatudo(True); // Sandro Silva 2017-11-08 Polimig Sangria1Click(

  if TestaTudo(True) then   // Sangria
  begin
    // ---------------- //
    // Sangria de caixa //
    // ---------------- //
    Form1.bFlag2 := True; // Form1.Sangria1Click(
    //
    Form3.Caption := TITULO_FORM_SANGRIA; // Sandro Silva 2021-02-26 'Retirada de caixa';

    Form1.ibDataSet25.Edit;
    Form1.ibDataSet25.FieldByname('ACUMULADO1').AsFloat := 0;

    if ((Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99')) and (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then // Sandro Silva 2016-03-21 
    begin
      if SenhaAdministradorOk then //Ficha 4791 Sandro Silva 2020-04-13
      begin
        Timer2.Enabled := False;
        Form3.ShowModal;
        if Form1.ImportarvendasdoSmallMobile1.Checked then
          Timer2.Enabled := True;
      end;
    end
    else
      Form3.Show;
    //
    Form1.bFlag2 := False; // Form1.Sangria1Click(
    Button4.Enabled := False;
  end;;
  //
  //
end;

procedure TForm1.Sobreoprograma1Click(Sender: TObject);
var
  sVersaoNFCe: String;
  sMarcaECF: String; // Sandro Silva 2018-10-23
  sTempovalidadeCertificado: String;
  iUsuariosAtivos: Integer; // Sandro Silva 2019-06-19
  sMensagemDiasExpirar: String; // Sandro Silva 2022-12-08 Unochapeco
begin
  //
  Form22.Close;
  //
  try
   if StrToIntDef(Copy(StrTran(Form22.sSerie, 'Número de série: ', ''), 2, 2), 0) < 15 then
   begin
    if Form1.IBDatabaseInfo1.UserNames.Count = 1 then
      Form22.sAtivos :=  AllTrim(InttoStr(Form1.IBDatabaseInfo1.UserNames.Count))+' usuário ativo'
    else
      Form22.sAtivos :=  AllTrim(InttoStr(Form1.IBDatabaseInfo1.UserNames.Count))+' usuários ativos';
   end
   else
   begin
     iUsuariosAtivos := UsuariosConectados(Form1.IBDatabase1);
     Form22.sAtivos := InttoStr(iUsuariosAtivos) + IfThen(iUsuariosAtivos = 1, ' usuário ativo', ' usuários ativos');
   end;
  except
    Form22.sAtivos := '? usuários ativos';
  end;

  sVersaoNFCe := '';
  if Form1.sModeloECF = '59' then
  begin
    sVersaoNFCe := Chr(10) + Form1.PDV_TipoDaImpressora(True) + ' Leiaute Versão: ' + _59.VersaoDadosEnt + Chr(10);
  end;

  if Form1.sModeloECF = '65' then
  begin
    try
      if Form1.spdNFCe1.GetVencimentoCertificado >= Date then
        sTempovalidadeCertificado := ' - restando ' + FormatFloat('0', Form1.spdNFCe1.GetVencimentoCertificado - Date) + ' dia(s)'
      else
        sTempovalidadeCertificado := ' - Expirado';

      sVersaoNFCe := Chr(10) + Form1.PDV_TipoDaImpressora(True) + ' Leiaute Versão: ' + Form1.sVersaoLayoutNFCe +
                     Chr(10) + 'Certificado Digital: ' + Copy(Form1.spdNFCe1.NomeCertificado.Text, 1, Pos(',', Form1.spdNFCe1.NomeCertificado.Text) - 1) +
                     Chr(10) + 'Validade Certificado: ' + FormatDateTime('dd/mm/yyyy', Form1.spdNFCe1.GetVencimentoCertificado) + sTempovalidadeCertificado;
    except

    end;
  end;

  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin
    try
      sMarcaECF := Form1.PDV_MarcaImpressora(True);
    except

    end;


    sVersaoNFCe := Chr(10) + 'Marca/Modelo do ECF: ' + Form1.sModeloECF_Reserva + ' - ' + sMarcaECF + ' ' + Form1.sModeloFabricante +
                   Chr(10) + 'Série: ' + Form1.sNumeroDeSerieDaImpressora +
                   Chr(10) + 'Porta de comunicação: ' + Form1.sPorta +
                   Chr(10) + 'Configuração de casas decimais: ' + Form1.ConfPreco + ' para o Preço, ' + Form1.ConfCasas + ' para a Quantidade';
  end;

  //
  with Form22.RichEdit1 do
  begin
    //
    Lines.Clear;
    SelAttributes.Name   := 'Microsoft Sans Serif';// Sandro Silva 2017-09-26  SelAttributes.Name   := 'Quicksand Book';
    SelAttributes.Style  := [fsBold];
    SelAttributes.Color  := clWhite;// Sandro Silva 2019-08-26 ER 02.06 UnoChapeco clBlack; // Sandro Silva 2016-09-01  clWhite;
    SelAttributes.Height := AjustaAltura(25); // Sandro Silva 2017-09-26  25;
    Lines.Add(Form22.sTitulo);
    //
    SelStart := Length(Text)-1;
    SelAttributes.Style  := [];
    SelAttributes.Height := AjustaAltura(16); // Sandro Silva 2017-09-26  16;
    //
    {Sandro Silva 2022-12-08 Início Unochapeco
    SelText := chr(10) + chr(10) +
               Form22.sBuild + chr(10) +
               'Usuário: ' + Usuario + chr(10) +
               Form22.sLicenca + chr(10) +
               Form22.sSerie + chr(10) +
               Form22.sIniciandoEm  + chr(10) +
               Form22.sUrlDoGdb + chr(10) +
               Form22.sAtivos  + chr(10) +
               'Seu sistema está devidamente licenciado para mais ' + IntToStr(DiasParaExpirar(Form1.IBDatabase1)) + ' dias' + Chr(10) +
               Form22.sHoraNoServidor
               + sVersaoNFCe
               ;
    }

    sMensagemDiasExpirar := 'Seu sistema está devidamente licenciado para mais ' + IntToStr(DiasParaExpirar(Form1.IBDatabase1)) + ' dias';
    if DiasParaExpirar(Form1.IBDatabase1) < 0 then
      sMensagemDiasExpirar := Chr(10) + 'Sistema Bloqueado';

    SelText := chr(10) + chr(10) +
               Form22.sBuild + chr(10) +
               'Usuário: ' + Usuario + chr(10) +
               Form22.sLicenca + chr(10) +
               Form22.sSerie + chr(10) +
               Form22.sIniciandoEm  + chr(10) +
               Form22.sUrlDoGdb + chr(10) +
               Form22.sAtivos  + chr(10) +
               sMensagemDiasExpirar + Chr(10) +
               Form22.sHoraNoServidor
               + sVersaoNFCe
               ;
    //
  end;
  //
  Form22.RichEdit1.Left  := Form22.Image1.Left;
  Form22.RichEdit1.Top   := Form22.Image1.Top + Form22.Image1.Height + AjustaAltura(20); // Sandro Silva 2017-09-26  20;
  Form22.RichEdit1.Width := AjustaLargura(700); // Sandro Silva 2017-09-26  700;

  Form22.Button1.Top   := Form22.BoundsRect.Bottom - Form22.Button1.Height - AjustaAltura(5); // Sandro Silva 2017-09-26
  Form22.Button1.BringToFront; // Sandro Silva 2017-10-25

  //
  Form22.Label6.Visible    := False;
  Form22.Image1.Visible    := True;
  Form22.RichEdit1.Visible := True;
  Form22.Button1.Visible   := True;
  //
  Form22.Label6.Caption := Copyright;
  Form22.Button1.Visible := True;

  Timer2.Enabled := False; // Sandro Silva 2016-03-23
  Form22.ShowModal;
  if Form1.ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-03-23
    Timer2.Enabled := True;
  //
  Form22.Label6.Visible    := True;
  Form22.Image1.Visible    := True;
  Form22.RichEdit1.Visible := False;

  Form1.Panel1.BringToFront; // 2015-11-07
  //
end;

procedure TForm1.Cadastraraliquota1Click(Sender: TObject);
begin
  Form4.Show;
end;

procedure TForm1.Mensagempromocional1Click(Sender: TObject);
var
  Mais1Ini: TIniFile;
begin
  Mais1ini             := TIniFile.Create('FRENTE.INI');
  sMensagemPromocional := Mais1Ini.ReadString('Frente de caixa'  , 'Mensagem' , MensagemPromocionalDefault);
  sMensagemPromocional := Small_InputBox('Mensagem promocional','Mensagem promocional:',sMensagemPromocional);
  Mais1Ini.WriteString('Frente de caixa','Mensagem',sMensagemPromocional);
  Mais1Ini.Free;
end;

procedure TForm1.Ligardesligarhorriodevero1Click(Sender: TObject);
begin                                                           
  if Form1.sModeloECF = '01' then _ecf01_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '02' then _ecf02_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '03' then _ecf03_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '12' then _ecf12_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '14' then _ecf14_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '15' then _ecf15_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '17' then _ecf17_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '59' then _ecf59_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '65' then _ecf65_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '99' then _ecf99_LigaDesLigaVerao(True);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then _ecf04_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '05' then _ecf05_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '06' then _ecf06_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '07' then _ecf07_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '08' then _ecf08_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '09' then _ecf09_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '10' then _ecf10_LigaDesLigaVerao(True);
  if Form1.sModeloECF = '11' then _ecf11_LigaDesLigaVerao(True);
  }
end;

procedure TForm1.VersodoFirmware1Click(Sender: TObject);
begin
  //
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_VersodoFirmware(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_VersodoFirmware(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_VersodoFirmware(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_VersodoFirmware(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_VersodoFirmware(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_VersodoFirmware(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_VersodoFirmware(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_VersodoFirmware(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_VersodoFirmware(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_VersodoFirmware(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_VersodoFirmware(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_VersodoFirmware(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_VersodoFirmware(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_VersodoFirmware(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_VersodoFirmware(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_VersodoFirmware(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_VersodoFirmware(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_VersodoFirmware(True));
  }
  //
end;

procedure TForm1.NmerodeSrie1Click(Sender: TObject);
begin
  //
  SmallMsg(Form1.sNumeroDeSerieDaImpressora);
  //
end;

procedure TForm1.CGCIE1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_CGCIE(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_CGCIE(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_CGCIE(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_CGCIE(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_CGCIE(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_CGCIE(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_CGCIE(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_CGCIE(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_CGCIE(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_CGCIE(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_CGCIE(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_CGCIE(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_CGCIE(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_CGCIE(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_CGCIE(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_CGCIE(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_CGCIE(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_CGCIE(True));
  }
end;

procedure TForm1.Cancelamentos1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Cancelamentos(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Cancelamentos(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Cancelamentos(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Cancelamentos(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Cancelamentos(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Cancelamentos(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Cancelamentos(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Cancelamentos(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Cancelamentos(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Cancelamentos(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Cancelamentos(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Cancelamentos(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Cancelamentos(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Cancelamentos(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Cancelamentos(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Cancelamentos(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Cancelamentos(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Cancelamentos(True));
  }
end;


procedure TForm1.Descontos1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Descontos(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Descontos(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Descontos(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Descontos(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Descontos(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Descontos(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Descontos(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Descontos(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Descontos(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Descontos(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Descontos(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Descontos(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Descontos(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Descontos(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Descontos(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Descontos(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Descontos(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Descontos(True));
  }
end;

procedure TForm1.ContadorSeqencial1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_ContadorSeqencial(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_ContadorSeqencial(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_ContadorSeqencial(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_ContadorSeqencial(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_ContadorSeqencial(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_ContadorSeqencial(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_ContadorSeqencial(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_ContadorSeqencial(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_ContadorSeqencial(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_ContadorSeqencial(True));

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_ContadorSeqencial(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_ContadorSeqencial(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_ContadorSeqencial(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_ContadorSeqencial(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_ContadorSeqencial(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_ContadorSeqencial(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_ContadorSeqencial(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_ContadorSeqencial(True));
  }
end;

procedure TForm1.Nmdeoperaesnofiscais1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Nmdeoperaesnofiscais(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Nmdeoperaesnofiscais(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Nmdeoperaesnofiscais(True));
  }
end;

procedure TForm1.NmdeCuponscancelados1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_NmdeCuponscancelados(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_NmdeCuponscancelados(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_NmdeCuponscancelados(True));
  }
end;

procedure TForm1.NmdeRedues1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_NumeroDeReducoesZ(True));
end;

procedure TForm1.Nmdeintervenestcnicas1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_NumeroIntervencoesTecnicas(True));
end;

procedure TForm1.Nmdesubstituiesdeproprietrio1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Nmdesubstituiesdeproprietrio(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Nmdesubstituiesdeproprietrio(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Nmdesubstituiesdeproprietrio(True));
  }
end;

procedure TForm1.Clichdoproprietrio1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Clichdoproprietrio(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Clichdoproprietrio(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Clichdoproprietrio(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Clichdoproprietrio(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Clichdoproprietrio(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Clichdoproprietrio(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Clichdoproprietrio(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Clichdoproprietrio(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Clichdoproprietrio(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Clichdoproprietrio(True));

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Clichdoproprietrio(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Clichdoproprietrio(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Clichdoproprietrio(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Clichdoproprietrio(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Clichdoproprietrio(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Clichdoproprietrio(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Clichdoproprietrio(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Clichdoproprietrio(True));
  }
end;

procedure TForm1.NmdoCaixa1Click(Sender: TObject);
begin
  SmallMsg(Form1.sCaixa);
end;

procedure TForm1.Nmdaloja1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Nmdaloja(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Nmdaloja(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Nmdaloja(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Nmdaloja(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Nmdaloja(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Nmdaloja(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Nmdaloja(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Nmdaloja(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Nmdaloja(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Nmdaloja(True));

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Nmdaloja(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Nmdaloja(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Nmdaloja(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Nmdaloja(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Nmdaloja(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Nmdaloja(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Nmdaloja(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Nmdaloja(True));
  }
end;

procedure TForm1.Moeda1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Moeda(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Moeda(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Moeda(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Moeda(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Moeda(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Moeda(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Moeda(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Moeda(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Moeda(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Moeda(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Moeda(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Moeda(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Moeda(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Moeda(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Moeda(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Moeda(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Moeda(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Moeda(True));
  }
end;

procedure TForm1.Dataehoradaimpressora1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_DataeHoraDaImpressora(True));
end;

procedure TForm1.Datadaultimareduo1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Datadaultimareduo(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Datadaultimareduo(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Datadaultimareduo(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Datadaultimareduo(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Datadaultimareduo(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Datadaultimareduo(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Datadaultimareduo(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Datadaultimareduo(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Datadaultimareduo(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Datadaultimareduo(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Datadaultimareduo(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Datadaultimareduo(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Datadaultimareduo(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Datadaultimareduo(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Datadaultimareduo(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Datadaultimareduo(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Datadaultimareduo(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Datadaultimareduo(True));
  }
end;

procedure TForm1.Datadomovimento1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '01' then SmallMsg(_ecf01_Datadomovimento(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_Datadomovimento(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_Datadomovimento(True));
  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_Datadomovimento(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_Datadomovimento(True));
  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_Datadomovimento(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_Datadomovimento(True));
  if Form1.sModeloECF = '59' then SmallMsg(_ecf59_Datadomovimento(True));
  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_Datadomovimento(True));
  if Form1.sModeloECF = '99' then SmallMsg(_ecf99_Datadomovimento(True));
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_Datadomovimento(True));
  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_Datadomovimento(True));
  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_Datadomovimento(True));
  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_Datadomovimento(True));
  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_Datadomovimento(True));
  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_Datadomovimento(True));
  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_Datadomovimento(True));
  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_Datadomovimento(True));
  }
end;

procedure TForm1.Tipodaimpressora1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_TipoDaImpressora(True));
end;

procedure TForm1.Leiturapordata1Click(Sender: TObject);
begin
  //2022-03-29
  PafEcfLeituraMfCompletaPorData;
end;

procedure TForm1.Leituraporintervaloderedues1Click(Sender: TObject);
begin
  PafEcfLeituraMfCompletaPorIntervalodeReducoes; // 2022-03-29
end;

procedure TForm1.ibDataSet27BeforeDelete(DataSet: TDataSet);
begin
  if ibDataSet4.Active then
  begin
    if AllTrim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> '' then
    begin
      //
      ibDAtaSet4.Close;
      ibDataSet4.SelectSQL.Clear;
      ibDataSet4.SelectSQL.Add('select * from ESTOQUE where DESCRICAO='+QuotedStr(Alltrim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString))+' and coalesce(ATIVO,0)=0');
      ibDAtaSet4.Open;
      //
      if Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = ibDataSet4.FieldByName('DESCRICAO').AsString then
      begin
        // ------------------------------ //
        // Altera a quantidade no estoque //
        // ------------------------------ //
        if (ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // serviços não atera a quantidade
        begin
          try
            ibDataSet4.Edit;  // Quando apaga
            ibDataSet4.FieldByName('QTD_ATUAL').AsFloat    := ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat; // Quando apaga
            ibDataSet4.Post;
          except end;
        end;
      end;
      //
    end;
  end;
  //
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_HASH_ALTERACA,-1) from rdb$database');
    ibDataset99.Open;
    HasHs('ALTERACA', True);

    //ShowMessage('Teste 01 18914'); // Sandro Silva 2017-11-06

  except end;
  //
end;

procedure TForm1.ibDataSet27QUANTIDADESetText(Sender: TField;
  const Text: String);
begin
  {                                  }
  { Não permite quantidade negativa  }
  {                                  }
  if ibDataSet4.FieldByName('DESCRICAO').AsString <> Edit1.Text then
  begin
    ibDAtaSet4.Close;
    ibDataSet4.SelectSQL.Clear;
    ibDataSet4.SelectSQL.Add('select * from ESTOQUE where DESCRICAO='+QuotedStr(Alltrim(Edit1.Text))+' and coalesce(ATIVO,0)=0 ');
    ibDAtaSet4.Open;
  end;
  //
  if (Alltrim(ibDataSet4.FieldByName('DESCRICAO').AsString) = AllTrim(Edit1.Text)) and (AllTrim(ibDataSet4.FieldByName('DESCRICAO').AsString)<>'') then
  begin
    if Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat < 0 then
    begin
      Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat := 0
    end
    else
    begin
      if Form1.ConfNegat = 'Não' then
      begin
        if (ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // serviços não atera a quantidade
        begin
          if (StrToFloat(Text) > (ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + QtdCanceladaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString) - QtdVendaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString))) and (Form1.ConfNegat = 'Não') then // Sandro Silva 2018-10-24 if StrToFloat(Text) > (ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + QtdCanceladaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString) - QtdVendaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString)) then
          begin
            //
            // Verifica se é produto composto
            //
            Form1.IBQuery3.Close;
            Form1.IBQuery3.SQL.Clear;
            Form1.IBQuery3.SQL.Add('select * from COMPOSTO where CODIGO='+QuotedStr(ibDataSet4.FieldByName('CODIGO').AsString)+' ');
            Form1.IBQuery3.Open;
            //
            if Form1.ibDataSet4.FieldByName('CODIGO').AsString <> Form1.IBQuery3.FieldByName('CODIGO').AsString then
            begin
              AlertaSonoro;

              SmallMsg('Não é possível efetuar a venda, só tem ' + ibDataSet4.FieldByName('QTD_ATUAL').AsString + ' ' + ibDataSet4.FieldByName('MEDIDA').AsString +  ' no estoque. Erro 5427');

              Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat := ibDataSet4.FieldByName('QTD_ATUAL').AsFloat;
              if (Form1.ClienteSmallMobile.sVendaImportando = '') then
                Edit1.SetFocus;
            end
            else
              Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat := StrToFloat(Text);
          end
          else
            Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat := StrToFloat(Text);
        end;
      end
      else
        Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat := StrToFloat(Text);
    end;
  end;
  //
end;

procedure TForm1.DBGrid2KeyPress(Sender: TObject; var Key: Char);
begin
  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
  begin
    if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
    end else
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Entre com EAN 13, Código ou Descrição');
    end;
  end
  else
  begin
    if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
    end else
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição');
    end;
  end;
end;

procedure TForm1.DBGrid2KeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  //
  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
  begin
    if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
    end else
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Entre com EAN 13, Código ou Descrição');
    end;
  end
  else
  begin
    if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
    end else
    begin
      Display(ibDataSet4.FieldByName('DESCRICAO').AsString,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição');
    end;
  end;
  //
  Form1.Label_11.Caption := Right(Replicate(' ',8)+'0,00',8);
  if ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01'))
    and (Consumo = False)
  then
  begin
    Label_11.Caption := Right('          '+Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsString,10);
    Label_12.Caption := Format('%10.2n',[Form1.ibDataSet27.FieldByname('TOTAL').AsFloat]);
  end;
  //
  if (Key = VK_ESCAPE) or (Key = VK_RETURN) then
    Form1.DBGrid2DblClick(Sender);

  // 2015-09-16 MostraFoto(True);
  if ((Form1.iMesaAberta = 0) and (Consumo))
    or (Consumo = False) then // 2015-09-16
    MostraFoto(True)
  else
    MostraFoto(False);
  Form1.Repaint;
  //
end;

procedure TForm1.PopupMenu1Popup(Sender: TObject);
var
  Mais1ini : TIniFile;
  iItem: Integer;
begin
  Screen.Cursor := crHourGlass; // Sandro Silva 2019-09-12 ER 02.06 UnoChapeco
  //
  x1024x768.Visible := False;
  //
  Form1.IdentificarCredenciadoraPoS1.Visible     := False; // Sandro Silva 2018-11-20
  EnviaremailcomXMLePDFacadavenda1.Visible       := ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65')); // Ficha 4736 Sandro Silva 2019-08-02
  ValorLimiteTotalNFCeEstabelecidoSefaz1.Visible := (Form1.sModeloECF = '65'); // Sandro Silva 2021-07-12

  {Sandro Silva 2023-05-30 inicio}
  if ValidaRecursos.PermiteRecursoParaSerial = False then
  begin
    Form1.MovimentoDia1.Enabled   := False;
    Form1.NFCenoperodo1.Enabled   := False;
    Form1.Vendaspor1.Enabled      := False;
    Form1.BalanaAutonoma1.Enabled := False;

    Form1.bBalancaAutonoma := False;
    Form1.BalanaAutonoma1.Checked := Form1.bBalancaAutonoma;
  end;
  {Sandro Silva 2023-05-30 fim}

  if Form1.sModeloECF = '12' then
  begin
    CortaPapel1.Visible := True;
  end else
  begin
    CortaPapel1.Visible := False;
  end;
  //
  if Form1.sUF = 'DF'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) then
  begin
    CreditosDF.Visible := True;
  end else
  begin
    CreditosDF.Visible := False;
  end;
  //

  if (Form1.bStatusECF = False) or (Form1.bStatusFISCAL = False) then
  begin
    if (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // NFC-e não precisa consultar o status do serviço quando abre menu. Fica lento se servidor não estiver respondendo e ainda não entrou em contingência Sandro Silva 2019-08-14
    begin
      Form22.Label6.Caption := 'Detectando porta de comunicação...' ;
      try
        Form1.PDV_Inicializa(sPorta);
      except
      end;
    end;
  end;

  Notafiscaldevendaaconsumidormodelo021.Enabled := False;

  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then// Sandro Silva 2018-11-20  if (Form1.sModeloECF <> '59') or (Form1.sModeloECF <> '65') then // Sandro Silva 2016-06-07
  begin
    Notafiscaldevendaaconsumidormodelo021.Enabled := True;
  end;

  Selecionarcertificadodigital2.Visible := ((Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99'));

  //
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') then
  begin

    Form1.IdentificarCredenciadoraPoS1.Visible := True; // Sandro Silva 2018-11-20

    if (Form1.sModeloECF = '59') then
    begin
      EnviarDANFCEeXMLcompactado1.Caption := 'Envio do Extrato CF-e e XML compactados'; // Sandro Silva 2018-07-03 'Envio do Extrato CF-e-SAT e XML compactados';
    end;
    if (Form1.sModeloECF = '65') then
      EnviarDANFCEeXMLcompactado1.Caption := 'Envio do DANFCE e XML compactados';
  end;

  CNAEdispensadoatransmissodosarquivosdoEstoque1.Visible := False; // Sandro Silva 2018-11-14
  InformarindIntermedNFCe1.Visible                       := (Form1.sModeloECF = '65'); // Sandro Silva 2021-03-05
  // Sandro Silva 2021-09-03 GerarxPagparaMeioPagamento99Outros1.Visible            := (Form1.sModeloECF = '65'); // Sandro Silva 2021-08-17
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') then
  begin
    Confernciademesa1.Caption      := 'Conferência de '+sMesaOuConta + '...';
    ransfernciademesa1.Caption     := 'Transferência de '+sMesaOuConta + '...';
    ransfernciaentremesas1.Caption := 'Transferências entre '+sMesasOuContas + '...';
    MesasAbertas1.Caption          := sMesasOuContas+' abertas...';

    ransfernciasentremesas1.Caption := 'Transferências entre ' + sMesasOuContas + '...';
    Mesasabertas2.Caption           := sMesasOuContas + ' abertas...';

    Ligardesligarhorriodevero1.Visible := False;
    Gaveta1.Visible := False;

    ransmitirContingncia2.Enabled := (NFCeemContingncia1.Checked = False) and (Form1.UsaIntegradorFiscal() = False); // Sandro Silva 2019-10-16 (NFCeemContingncia1.Checked = False);
    NmerodoCredencimentodoPAFECF1.Visible := False; // Sandro Silva 2016-09-02

    BalanaAutonoma1.Visible := True;
    Produtolanadonapesagemautonoma1.Visible  := True;
    Mesainicialparapesagensautonoma1.Visible := True;

  end
  else
  if (Form1.sModeloECF = '99')then
  begin
    Confernciademesa1.Caption      := 'Conferência de '+sMesaOuConta + '...';
    ransfernciademesa1.Caption     := 'Transferência de '+sMesaOuConta + '...';
    ransfernciaentremesas1.Caption := 'Transferências entre '+sMesasOuContas + '...';
    MesasAbertas1.Caption          := sMesasOuContas+' abertas...';

    ransfernciasentremesas1.Caption := 'Transferências entre ' + sMesasOuContas + '...';
    Mesasabertas2.Caption           := sMesasOuContas + ' abertas...';

    Ligardesligarhorriodevero1.Visible    := False;
    Gaveta1.Visible                       := False;
    ransmitirContingncia2.Visible         := False;
    NmerodoCredencimentodoPAFECF1.Visible := False; // Sandro Silva 2016-09-02

    BalanaAutonoma1.Visible                  := True;
    Produtolanadonapesagemautonoma1.Visible  := True;
    Mesainicialparapesagensautonoma1.Visible := True;
  end
  else
  begin
    Confernciademesa1.Caption             := 'Conferência de '+sMesaOuConta;
    ransfernciademesa1.Caption            := 'Transferência de '+sMesaOuConta;
    ransfernciaentremesas1.Caption        := 'Transf. '+sMesasOuContas;
    MesasAbertas1.Caption                 := sMesasOuContas+' abertas';
    NmerodoCredencimentodoPAFECF1.Caption := 'Número de Credencimento do PAF-ECF na SEFAZ/' + Copy(Form1.sUF, 1, 2) + '...';

    if Copy(Form1.sConcomitante,1,2) = 'OS' then
    begin
      Confernciademesa1.Caption    := 'Conferência de '+sMesaOuConta + ' OS';
      MesasAbertas1.Caption        := sMesasOuContas+' OS abertas';
    end;

    ransfernciasentremesas1.Caption := 'Transf. ' + sMesasOuContas;
    Mesasabertas2.Caption           := sMesasOuContas + ' Abertas';

    if AnsiUpperCase(ibDataSet13.FieldByName('ESTADO').AsString) = 'SC' then
      CNAEdispensadoatransmissodosarquivosdoEstoque1.Visible := True;

    BalanaAutonoma1.Visible                  := False;
    Produtolanadonapesagemautonoma1.Visible  := False;
    Mesainicialparapesagensautonoma1.Visible := False;
  end;

  //
  // Mesa ou cupom
  //
  if ((Copy(Form1.sConcomitante,1,12) <> 'CONCOMITANTE')) and ((Copy(Form1.sConcomitante,1,3) <> 'DAV')) then
  begin
    //                  ]
    Form1.Confernciademesa1.Visible      := True;
    Form1.ransfernciademesa1.Visible     := True;
    Form1.N13.Visible                    := True;
    Form1.ransfernciaentremesas1.Visible := True;
    Form1.MesasAbertas1.Visible          := True;
    Form1.N15.Visible                    := True;
    Form1.Quantas1.Visible               := True;
    Form1.empo1.Visible                  := True;
    //
    Form1.ransfernciasentremesas1.Visible := True;
    Form1.Mesasabertas2.Visible           := True;
    //
  end else
  begin
    //
    Form1.Confernciademesa1.Visible      := False;
    Form1.ransfernciademesa1.Visible     := False;
    Form1.N13.Visible                    := False;
    Form1.ransfernciaentremesas1.Visible := False;
    Form1.MesasAbertas1.Visible          := False;
    Form1.N15.Visible                    := False;
    Form1.Quantas1.Visible               := False;
    Form1.empo1.Visible                  := False;
    //
    Form1.ransfernciasentremesas1.Visible := False;
    Form1.Mesasabertas2.Visible           := False;
    //
  end;
  //
  if Copy(Form1.sConcomitante,1,2) = 'OS' then
  begin
    Form1.ransfernciademesa1.Visible      := False;
    Form1.ransfernciaentremesas1.Visible  := False;
    Form1.ransfernciasentremesas1.Visible := False;
    Form1.Mesasabertas2.Visible           := False;
  end;
  //
  if (Copy(Form1.sConcomitante,1,3) = 'DAV')
    or (Form1.sModeloECF = '65')// Sandro Silva 2020-12-11  or ((Form1.sModeloECF = '65') and (PAFNFCe = False)) // Sandro Silva 2020-07-01 or ((Form1.sModeloECF = '65') and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE'))
    or (Form1.sModeloECF = '59')
    or (Form1.sModeloECF = '99') then
  begin
    DocumentoAuxiliardeVendaDAVOramento1.Visible   := True;
    Imprimiroramento1.Visible                      := True;
    DAVemitidos1.Visible                           := True;
    if Form1.sModeloECF = '59' then
      VersodoleiautedoCFeSAT1.Visible := True;

    {Sandro Silva 2023-05-30 inicio}
    if ValidaRecursos.PermiteRecursoParaSerial = False then
      DocumentoAuxiliardeVendaDAVOramento1.Enabled := False;
    {Sandro Silva 2023-05-30 fim}
    
  end else
  begin
    DocumentoAuxiliardeVendaDAVOramento1.Visible   := False;
    Imprimiroramento1.Visible                      := False;
    DAVemitidos1.Visible                           := False;
  end;
  //
  if Form1.bStatusECF then
  begin
    if Form1.sModeloECF = '01' then Ligardesligarhorriodevero1.Checked := _ecf01_RetornaVerao(True);
    if Form1.sModeloECF = '02' then Ligardesligarhorriodevero1.Checked := _ecf02_RetornaVerao(True);
    if Form1.sModeloECF = '03' then Ligardesligarhorriodevero1.Checked := _ecf03_RetornaVerao(True);
    if Form1.sModeloECF = '12' then Ligardesligarhorriodevero1.Checked := _ecf12_RetornaVerao(True);
    if Form1.sModeloECF = '14' then Ligardesligarhorriodevero1.Checked := _ecf14_RetornaVerao(True);
    if Form1.sModeloECF = '15' then Ligardesligarhorriodevero1.Checked := _ecf15_RetornaVerao(True);
    if Form1.sModeloECF = '17' then Ligardesligarhorriodevero1.Checked := _ecf17_RetornaVerao(True);// Ok 2015-08-24
    if Form1.sModeloECF = '59' then Ligardesligarhorriodevero1.Checked := _ecf59_RetornaVerao(True);
    if Form1.sModeloECF = '65' then Ligardesligarhorriodevero1.Checked := _ecf65_RetornaVerao(True);
    if Form1.sModeloECF = '99' then Ligardesligarhorriodevero1.Checked := _ecf99_RetornaVerao(True);
    {Sandro Silva 2021-07-22 inicio
    if Form1.sModeloECF = '04' then Ligardesligarhorriodevero1.Checked := _ecf04_RetornaVerao(True);
    if Form1.sModeloECF = '05' then Ligardesligarhorriodevero1.Checked := _ecf05_RetornaVerao(True);
    if Form1.sModeloECF = '06' then Ligardesligarhorriodevero1.Checked := _ecf06_RetornaVerao(True);
    if Form1.sModeloECF = '07' then Ligardesligarhorriodevero1.Checked := _ecf07_RetornaVerao(True);
    if Form1.sModeloECF = '08' then Ligardesligarhorriodevero1.Checked := _ecf08_RetornaVerao(True);
    if Form1.sModeloECF = '09' then Ligardesligarhorriodevero1.Checked := _ecf09_RetornaVerao(True);
    if Form1.sModeloECF = '10' then Ligardesligarhorriodevero1.Checked := _ecf10_RetornaVerao(True);
    if Form1.sModeloECF = '11' then Ligardesligarhorriodevero1.Checked := _ecf11_RetornaVerao(True);
    }
  end;
  //
  Mais1ini  := TIniFile.Create('FRENTE.INI');
  if Mais1Ini.ReadString('Frente de caixa','Trunca','1')                  = '0'   then runcamento1.Checked              := False else runcamento1.Checked := True;
  if Mais1Ini.ReadString('Frente de caixa','Gaveta','0')                  = '0'   then Gaveta1.Checked                  := False else Gaveta1.Checked := True;
  if Mais1Ini.ReadString('Frente de caixa','Status Gaveta','0')           = '0'   then Inverterstatusdagaveta1.Checked  := False else Inverterstatusdagaveta1.Checked := True;
  if Mais1Ini.ReadString('Frente de caixa','Balança','Não')               = 'Não' then Balana1.Checked                  := False else Balana1.Checked := True;
  if Mais1Ini.ReadString('Frente de caixa','TEM TEF','Sim')               = 'Sim' then EF1.Checked                      := True else EF1.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','Corta papel','Sim')           = 'Sim' then CortaPapel1.Checked              := True else CortaPapel1.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','CRLF','Sim')                  = 'Sim' then CRLF2.Checked                    := True else CRLF2.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','Teclado gertec','Não')        = 'Sim' then TecladoGERTEC1.Checked           := True else TecladoGERTEC1.Checked     := False;
  if Mais1Ini.ReadString('Frente de caixa','Controle de cheque','Não')    = 'Sim' then Controledecheque1.Checked        := True else Controledecheque1.Checked  := False;
  if Mais1Ini.ReadString('Frente de caixa','Identifica Consumidor','Não') = 'Sim' then Identificaconsumidor1.Checked    := True else Identificaconsumidor1.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','SDU','Não')                   = 'Sim' then Solicitarsenhadeusurio1.Checked  := True else Solicitarsenhadeusurio1.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','Promissória','Não')           = 'Sim' then Notapromissria1.Checked          := True else Notapromissria1.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','Créditos DF','Não')           = 'Sim' then CreditosDF.Checked               := True else CreditosDF.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','Abre com o leitor','Não')     = 'Sim' then Abrecupomcomleitor1.Checked      := True else Abrecupomcomleitor1.Checked := False;
  if Mais1Ini.ReadString('Frente de caixa','Aviso','Não')                 = 'Sim' then AvisosonorodeProdutonoCadastrdado1.Checked   := True else AvisosonorodeProdutonoCadastrdado1.Checked := False;
  //
  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then // Sandro Silva 2016-06-07
  begin
    Form1.sIdentificaPOS := Mais1ini.ReadString(SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, 'Não');
    Form1.IdentificarCredenciadoraPoS1.Checked := (Form1.sIdentificaPOS = 'Sim'); // Sandro Silva 2016-11-22
    Form1.HorriodeVero1.Checked                := Form1.bHorarioDeVerao; // Sandro Silva 2019-02-27

    Form1.GerarxPagparaMeioPagamento99Outros1.Checked := LerParametroIni(FRENTE_INI, SECAO_65, 'xPag', 'Sim') = 'Sim';// Sandro Silva 2021-09-02 Form1.GerarxPagparaMeioPagamento99Outros1.Checked := LerParametroIni(FRENTE_INI, SECAO_65, 'xPag', 'Não') = 'Sim';// Sandro Silva 2021-08-26

    if Form1.sModeloECF_Reserva = '59' then
    begin
      Form1.SATInicializaoAlternativa1.Checked  := Trim(LerParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_METODO_CHAMADA_DLL_ALTERNATIVO, 'Não')) = 'Sim';
      Form1.Nfcetimeout1.Visible          := False; // Sandro Silva 2017-02-02
    end;

    if Mais1Ini.ReadString('NFCE','Imprimir DANFCE','Sim')                 = 'Sim'  then ImprimirDANFCE1.Checked := True else  ImprimirDANFCE1.Checked := False;
    if (Form1.sModeloECF_Reserva = '59') then
      VisualizarDANFCE1.Checked := (Mais1Ini.ReadString(SECAO_59, 'Visualizar Extrato','Não') = 'Sim')
    else
      VisualizarDANFCE1.Checked := (Mais1Ini.ReadString('NFCE','Visualizar DANFCE','Não') = 'Sim');

    if Mais1Ini.ReadString('NFCE','DANFCE detalhado','Sim')                = 'Sim'  then Form1.DANFCEdetalhado1.Checked := True else Form1.DANFCEdetalhado1.Checked := False;
    //
    Form1.sVersaoLayoutNFCe := Mais1ini.ReadString('NFCE', 'Versão do Layout', '4.00'); // Sandro Silva 2018-12-03 '3.10'  // Sandro Silva 2017-10-27
    // Sandro Silva 2021-09-01 Form1.N3101.Checked := False;
    Form1.N4001.Checked := True;
  end;
  //
  //
  //
  if Form1.bStatusRede then
    Quantas1.Enabled := True
  else
    Quantas1.Enabled := False;

  //
  Mais1Ini.Free;
  //
  if ImportarvendasdoSmallMobile1.Checked then
    HabilitarOpcoesMonitor(True)
  else
    HabilitarOpcoesMonitor(False);

  IniciarcomWindows1.Checked := (LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_INICIAR_COM_WINDOWS, 'Não') = 'Sim');

  if Form1.Label1.Caption = 'Off line' then
  begin
    Form1.Confernciademesa1.Enabled      := False;
    Form1.ransfernciademesa1.Enabled     := False;
    Form1.MesasAbertas1.Enabled          := False;
    Form1.ransfernciaentremesas1.Enabled := False;
    Form1.empo1.Enabled                  := False;
  end;

  AvanodePapelnoFinaldeImpressoSAT1.Visible := False;
  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
  begin
    Inverterstatusdagaveta1.Visible           := False;
    CortaPapel1.Visible                       := False;
    CRLF2.Visible                             := False;
    Ligardesligarhorriodevero1.Visible        := False;
    if (Form1.sModeloECF_Reserva = '59') then
      AvanodePapelnoFinaldeImpressoSAT1.Visible := True;
  end;

  if Form1.bBalancaAutonoma then
  begin

    // deixa disponíveis apenas as opções do menu pertinentes a balança sem operador

    Form1.NFCe1.Visible := False;
    for iItem := 0 to PopupMenu1.Items.Count - 1 do
    begin
      if PopupMenu1.Items[iItem].Name = Configuraesgerais1.Name then
      begin
        Break;
      end
      else
        PopupMenu1.Items[iItem].Visible := False;
    end;

    for iItem := 0 to Configuraesgerais1.Count - 1 do
    begin
      if Configuraesgerais1.Items[iItem].Name = Balana1.Name then
      begin
        Break;
      end
      else
        Configuraesgerais1.Items[iItem].Visible := False;
    end;

    for iItem := Configuraesgerais1.Count - 1 downto 0 do
    begin
      if Configuraesgerais1.Items[iItem].Name = N28.Name then
      begin
        Break;
      end
      else
        Configuraesgerais1.Items[iItem].Visible := False;
    end;

    Quantas1.Visible             := True;
    Mensagempromocional1.Visible := True;
  end;

  // Em São Paulo não é permitido emitir NFC-e em contingência, servidor rejeita
  if (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'SP') and (Form1.sModeloECF_Reserva = '65') then
    NFCeemContingncia1.Enabled := False;

  Form1.MeiosdePagto1.Visible := NFCe1.Visible; // Ficha 4734 Depois de abrir uma mesa NFCe1.Visible fica False

  if PAFNFCe then
  begin
    ImportarvendasdoSmallMobile1.Visible := False;
    RegistromanualdeNFmodelo11.Visible   := True; // Emissão de NFe pelo frente PAFNFC-e
    MesasAbertas1.Visible                := False;
  end;

  Form1.SmartPOSElginPay1.Enabled := PosElginPay.PermiteUsarPOS; // Sandro Silva 2022-02-11
  Form1.FunesAdministrativasPosElginPay1.Enabled := SmartPOSElginPay1.Enabled; // Sandro Silva 2022-02-11
  if Form1.sTef <> 'Sim' then
    SmartPOSElginPay1.Checked := (PosElginPay.Configuracao.Ativo = 'Sim'); // Sandro Silva 2022-02-14

  Screen.Cursor := crDefault; // Sandro Silva 2019-09-12 ER 02.06 UnoChapeco
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  //SmallMsg('Teste 01 Início Close');
  if (Form1.ClienteSmallMobile.sVendaImportando <> '') then
    Abort;
  //
  if not Form1.bFechaTudo then
  begin
    //
    if not bSairDoPrograma then
    begin
      SmallMsg('Este não é o procedimento normal para sair do programa!');
      Abort;
    end;
    //
    CommitaTudo(True); // Fecha o programa
    //
    //
  end;
  //
  Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
  //
  if Form1.sModeloECF = '01' then _ecf01_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '02' then _ecf02_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '03' then _ecf03_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '12' then _ecf12_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '14' then _ecf14_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '15' then _ecf15_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '17' then _ecf17_FechaPortaDeComunicacao(True);// Ok 2015-08-24
  if Form1.sModeloECF = '59' then _ecf59_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '65' then _ecf65_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '99' then _ecf99_FechaPortaDeComunicacao(True);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then _ecf04_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '05' then _ecf05_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '06' then _ecf06_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '07' then _ecf07_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '08' then _ecf08_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '09' then _ecf09_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '10' then _ecf10_FechaPortaDeComunicacao(True);
  if Form1.sModeloECF = '11' then _ecf11_FechaPortaDeComunicacao(True);
  }
  //
//  Resolucao(1024,768);
  Screen.Cursor             := crDefault;    // Cursor de Aguardo
  //

  Shell_NotifyIcon(NIM_DELETE, @NotifyIconData);

  if ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-06-10
    Winexec('TASKKILL /F /IM "mobile.exe"' , SW_HIDE ); // 2015-12-01

  //SmallMsg('Teste 01 Fim Close');

  if Form1.bBalancaAutonoma then
    FecharAplicacao('pesado.exe');

  ClienteSmallMobile.Free; // Sandro Silva 2022-08-04

//  RecursosLicenca.Free;
end;

procedure TForm1.ibDataSet25RECEBERChange(Sender: TField);
begin
  // ------------------------------------------------------- //
  // Quando encontrar o caracter + o o desconto é percentual //
  // ------------------------------------------------------- //
  if (Pos('+',Form2.SMALL_DBEdit5.Text) <> 0) and (bChave = False) then
  begin
    bChave := True;
    Form1.ibDataSet25.FieldByName('RECEBER').AsFloat := Form1.fTotal +
    (Form1.fTotal * StrToFloat(StrTran(Form2.SMALL_DBEdit5.Text,'+','')) / 100);
  end;
  //
end;


procedure TForm1.ibDataSet25PAGARChange(Sender: TField);
// Rotina desenvolvida por Ronei
// Rotina complexa controlada pela varíavel bFlag2 [True não executa validações de valores; False executa]
// Calcula troco
// Valida quais formas permitem troco
// Atualiza a diferença para dinheiro
begin
  ///////////////////////////////////////
  // SEFAZ - MANAUS                    //
  // Renildes                          //
  // Não pode aceitar valor negativo   //
  ///////////////////////////////////////
  if Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat < 0 then
  begin
    Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      < 0 then
  begin
    Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat < 0 then
  begin
    Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat < 0 then
  begin
    Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  if Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    < 0 then
  begin
    Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    SmallMsg('Valor inválido.');
    Abort;
  end;
  //
  if not bFlag2 then
  begin
    //
    bFlag2 := True; // Form1.ibDataSet25PAGARChange(
    //
    if Form1.ibDataSet25.FieldByName('PAGAR').AsFloat  > 0 then
      Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0;

    //
    // a prazo
    //
    if Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)) then
    begin
      Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));
      Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0;
      Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // dinheiro
      Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    //
    // CARTAO NAO PODE DAR TROCO
    //
    if Form1.ibDataSet25.FieldByName('PAGAR').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)) then
    begin
      Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));
      Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;

    {Sandro Silva 2021-09-16 inicio}
    // Essa anotação também está na rotina que gera XML NFC-e
    // Formas extras NÃO devem ser ajustadas como feito com Dinheiro e cheque.
    // Pode ser vale refeição, sai dinheiro do caixa e fica uma conta para receber da operadora. Mesma situação do cartão de débito/crédito
    // Emitente tira "dinheiro vivo" do caixa para ficar com uma dívida a receber
    if (Form1.ibDataSet25.FieldByName('VALOR01').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 1
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      //Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    if (Form1.ibDataSet25.FieldByName('VALOR02').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 2
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    if (Form1.ibDataSet25.FieldByName('VALOR03').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 3
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    if (Form1.ibDataSet25.FieldByName('VALOR04').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 4
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    if (Form1.ibDataSet25.FieldByName('VALOR05').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 5
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    if (Form1.ibDataSet25.FieldByName('VALOR06').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 6
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    // Sandro Silva 2021-12-23 if (Form1.ibDataSet25.FieldByName('VALOR07').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 7
    if (StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('VALOR07').AsFloat)) > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 7
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    if (Form1.ibDataSet25.FieldByName('VALOR08').AsFloat > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) // Extra 8
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
    end;

    if Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat = StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)) then // Sandro Silva 2021-09-17 if Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat = Form1.ibDataSet25.FieldByName('RECEBER').AsFloat then
    begin
      Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0;

      Form1.ibDataSet25.FieldByName('ACUMULADO3').Asfloat := 0;///aqui
    end;

    if ((
    StrToFloat(FormatFloat('0.00',
        Form1.ibDataSet25.FieldByName('PAGAR').AsFloat
         + Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat
         + Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR07').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR08').AsFloat)
         ))
      > StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)))
    then
    begin
      //Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0; // Cartão
      //Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0; // Prazo
      //Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // Cheque
      //Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0; // Dinheiro
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
    end;
    {Sandro Silva 2021-09-16 fim}

    //
    // FERNANDA pediu para tirar o bloco abaixo na homologação remota do TEF 2 0 1 3
    //
    if (Form1.ibDataSet25.FieldByName('PAGAR').AsFloat <> 0) and (Form1.ibDataSet25.FieldByName('PAGAR').AsFloat < StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) then
    begin
      Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat  := StrToFloat(FormatFloat('0.00', StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)) - Form1.ibDataSet25.FieldByName('PAGAR').AsFloat)); // dinheiro // Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat - Form1.ibDataSet25.FieldByName('PAGAR').AsFloat; // dinheiro
      Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat  := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat)); // 2015-07-30 Eliminar problema de dízima
      Form1.ibDataSet25.FieldByName('ACUMULADO3').ReadOnly := False;
      Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat  := 0;
      Form1.ibDataSet25.FieldByName('ACUMULADO3').ReadOnly := True;
    end;
    //
    if (Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat > 0) then
      Form1.ibDataSet25.FieldByName('PAGAR').AsFloat := 0;      // Cartao = 0
    if (Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      > 0) then
      Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0; // cheque = 0
    //
    // Sobrou dinheiro
    //

    //
    // FERNANDA pediu para tirar o bloco abaixo na homologação remota do TEF  2 0 1 3
    //
    if ((  StrToFloat(FormatFloat('0.00',
           Form1.ibDataSet25.FieldByName('PAGAR').AsFloat
         + Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat
         + Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR07').AsFloat
         + Form1.ibDataSet25.FieldByName('VALOR08').AsFloat))
         )
    >= StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat))) and (Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat > 0) then
    begin
      //
      Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat     := 0; // dinheiro
      bFlag2 := False; // Form1.ibDataSet25PAGARChange(
      //
    end;

    // ----- //
    // Troco //
    // ----- //
    Form1.ibDataSet25.FieldByName('ACUMULADO3').ReadOnly := False;
    //
    Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat  := StrToFloat(FormatFloat('0.00',
                                                       Form1.ibDataSet25.FieldByName('PAGAR').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR07').AsFloat
                                                     + Form1.ibDataSet25.FieldByName('VALOR08').AsFloat
                                                     - Form1.ibDataSet25.FieldByName('RECEBER').AsFloat
                                                     ));
    Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat  :=  StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat));  // 2015-07-30 Eliminar problema de dízima

    //
    // Cartão Nao Pode dar Troco
    //

    //
    // FERNANDA pediu para tirar o bloco abaixo na homologação remota do TEF  2 0 1 3
    //
    if (Form1.ibDataSet25.FieldByName('PAGAR').AsFloat <> 0) and (Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat <> 0) then
    begin
      //
      if Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat < Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat then
      begin
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat - Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat))// Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat - Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat
      end else
      begin
        Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)); // Sandro Silva 2016-09-05  Form1.ibDataSet25.FieldByName('RECEBER').AsFloat;
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0;
      end;
      //
      Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
      //
      bFlag2 := False; // Form1.ibDataSet25PAGARChange(
      //
    end;
    //
    // Prazo Nao Pode dar Troco
    //
    if (Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat <> 0) and (Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat <> 0) then
    begin
      //
      if Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat < Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat then
      begin
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat - Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat))
      end else
      begin
        Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat));
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := 0;
      end;
      //
      Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := 0;
      Form1.ibDataSet25.FieldByName('VALOR01').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR02').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR03').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR04').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR05').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR06').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR07').AsFloat    := 0;
      Form1.ibDataSet25.FieldByName('VALOR08').AsFloat    := 0;
      //
      bFlag2 := False; // Form1.ibDataSet25PAGARChange(
      //
    end;
    {Sandro Silva 2021-09-17 inicio}
    //
    // Formas extras não geram troco
    //
    if StrToFloat(FormatFloat('0.00',
        Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR07').AsFloat
      + Form1.ibDataSet25.FieldByName('VALOR08').AsFloat)) > 0.00 then
    begin
      if Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat > 0 then
      begin
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat - Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat;
        Form1.ibDataSet25.FieldByName('ACUMULADO3').Asfloat := 0;
      end;
    end;
    {Sandro Silva 2021-09-17 fim}
    //
    // Não aceita troco negativo
    //
    if Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat < 0 then
    begin
      //
      // O que falta em dinheiro
      //
      Form1.ibDataSet25.FieldByName('ACUMULADO3').Asfloat := 0;
      //
      if StrToFloat(FormatFloat('0.00',
          Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat
        + Form1.ibDataSet25.FieldByName('PAGAR').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR07').AsFloat
        + Form1.ibDataSet25.FieldByName('VALOR08').AsFloat
        + Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat)) < StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('RECEBER').AsFloat)) then
         Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := StrToFloat(FormatFloat('0.00',
                                        Form1.ibDataSet25.FieldByName('RECEBER').AsFloat
                                      - Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat
                                      - Form1.ibDataSet25.FieldByName('PAGAR').AsFloat
                                      - Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR01').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR02').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR03').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR04').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR05').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR06').AsFloat
                                      - Form1.ibDataSet25.FieldByName('VALOR07').AsFloat // 2021-12-23
                                      - Form1.ibDataSet25.FieldByName('VALOR08').AsFloat
                                      ))
                                      ; // Se for menor a diferença em dinheiro

        {Sandro Silva 2016-09-05 inicio}
        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := StrToFloat(FormatFloat('0.00', Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat));
        {Sandro Silva 2016-09-05 final}
    end;
    //
    Form2.Label10.Caption := 'Troco';
    Form2.Label30.Caption := Format('%9.2n',[Abs(Form1.ibDataSet25.FieldByName('ACUMULADO3').AsFloat)]);
    //
    Form1.ibDataSet25.FieldByName('ACUMULADO3').ReadOnly := True;
    //
    bFlag2 := False; // Form1.ibDataSet25PAGARChange(
    //
  end;
  //
end;

procedure TForm1.DBGrid2Enter(Sender: TObject);
begin
  //
  ibDataSet4.EnableControls;
  //
  // 2015-08-10 if Pos('*',AllTrim(Edit1.Text)) <> 0 then
  if (Pos('*',AllTrim(Edit1.Text)) <> 0) and (Copy(AllTrim(Edit1.Text), 1, 1) <> '*') then
    sQuantidade := Copy(AllTrim(Edit1.Text),1,Pos('*',AllTrim(AllTrim(Edit1.Text)))-1)+'*'
  else
    sQuantidade := '';
  if ((Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99')) and (PAFNFCE = False) then // Sandro Silva 2020-12-07  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
  begin
    if Pos('$',AllTrim(Edit1.Text)) <> 0 then
    begin
      sValor      := Copy(AllTrim(Edit1.Text),1,Pos('$',AllTrim(AllTrim(Edit1.Text)))-1)+'$';
      sQuantidade := StringReplace(sQuantidade, sValor, '', [rfReplaceAll]);
    end
    else
      sValor      := '';
    sValor := StringReplace(sValor, sQuantidade, '', [rfReplaceAll]);
  end;
  //
  Form1.Label8.Caption  := 'Quantidade em estoque';
  Form1.Label10.Caption := '';
  Label_13.Caption      := '';
  //
end;

procedure TForm1.DBGrid2Exit(Sender: TObject);
begin
  Edit1.Text := sValor + sQuantidade + Edit1.Text;
  Form1.Label8.Caption  := 'Quantidade';
  Form1.Label10.Caption := 'Total cupom R$';
  Label_11.Caption := Right('          '+FloatToStr(0),11);
  if ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01'))
    or (Consumo = False) // 2015-09-16
  then
    Label_11.Caption := Right('          '+FloatToStr(fQuantidadeVendida),11);
  if ((Form1.iMesaAberta > 0) and (Form1.sModeloECF = '01')) then
    Label10.Caption := 'Total da ' + Form1.sMesaOuConta + ' R$';
end;

procedure TForm1.Grandetotal1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_GrandeTotal(True));
end;

procedure TForm1.Relatriodetributao1Click(Sender: TObject);
var
  F : TextFile;
  sCodigo, sSituacaoTributaria, sAliquota : String;
  dQtdAtual: Double; // 2015-09-12
  sDescricao: String;
begin
  CommitaTudo(True); // Relatriodetributao1Click // 2015-09-12
  //
  AssignFile(F,'Tabela de Mercadorias e Serviços.HTM');  // Direciona o arquivo F
  Rewrite(F);                           // Abre para gravação
  //
  Writeln(F,'<html><head><title>'+AllTrim(ibDataSet13.FieldByName('NOME').AsString) + ' - Tabela de Mercadorias e Serviços</title></head>');
  WriteLn(F,'<body bgcolor="#FFFFFF" vlink="#FF0000" leftmargin="0"><center>');
  WriteLn(F,'<img src="logotip.jpg" alt="'+AllTrim(ibDataSet13.FieldByName('NOME').AsString)+'">');
  WriteLn(F,'<br><font size=3 color=#000000><b>'+AllTrim(ibDataSet13.FieldByName('NOME').AsString)+'</b></font>');
  WriteLn(F,'<br><font face="verdana" size=4 color=#000000><b>TABELA DE MERCADORIAS E SERVIÇOS</b></font>');
  WriteLn(F,'<br></center>');              // Linha em branco
  WriteLn(F,'<br>');           // Linha em branco
  WriteLn(F,'<center>');
  WriteLn(F,'<table border=1 style="border-collapse:Collapse" bordercolor=#COCOCO cellspacing=0 cellpadding=4>');
  //
  WriteLn(F,' <tr  bgcolor=#E6E8FA align=left>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>CÓDIGO GTIN</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>CEST</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>NCM/SH</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>DESCRIÇÃO DA MERCADORIA OU SERVIÇO</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>UN</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>PREÇO</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>ST</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>IAT</font></th>');
  WriteLn(F,'  <th nowrap><font face="verdana" size=1>IPPT</font></th>');
  if PAFNFCe = False then // Sandro Silva 2020-12-07
  begin
    WriteLn(F,'  <th nowrap><font face="verdana" size=1>ALÍQUOTA</font></th>');
    WriteLn(F,'  <th nowrap><font face="verdana" size=1>QTD ATUAL</font></th>');
  end;
  WriteLn(F,' </tr>');
  //
  ibDAtaSet4.Close;
  ibDataSet4.SelectSQL.Clear;
  ibDataSet4.SelectSQL.Add('select * from ESTOQUE where coalesce(ATIVO,0)=0 order by CODIGO ');
  ibDAtaSet4.Open;
  //
  ibDataSet4.First;
  while not ibDataSet4.EOF do
  begin
    //
    if not (ibDataSet4ATIVO.AsString='1') then
    begin
      //
      dQtdAtual := ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + QtdCanceladaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString) - QtdVendaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString);
      if dQtdAtual < 0.00 then
        dQtdAtual := 0;
      if dQtdAtual >= 0 then
      begin
        //
        sAliquota := '';
        if PAFNFCe = False then
        begin
          if AllTrim(ibDataSet4.FieldByName('ST').AsString) <> '' then // Se o ST não estiver em branco   //
          begin                                    // Procurar na tabela de ICM para  //
            ibDataSet14.First;                         // saber qual a aliquota associada //
            while not ibDataSet14.EOF do
            begin
              if ibDataSet14.FieldByName('ST').AsString = ibDataSet4.FieldByName('ST').AsString then  // Pode ocorrer um erro    //
              begin                                           // se o estado do emitente //
                try                                             // Não estiver cadastrado  //
                  if ibDataSet14.FieldByName('ISS').AsFloat > 0 then
                  begin
                    sAliquota := StrZero(ibDataSet14.FieldByName('ISS').AsFloat * 100,4,0);
                    sSituacaoTributaria := 'S';
                  end else
                  begin
                    sAliquota := StrZero( (ibDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100),4,0);  // Sandro Silva 2021-01-15  sAliquota := StrZero( (ibDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100) / 100 * ibDataSet14.FieldByName('BASE').AsFloat,4,0);
                    sSituacaoTributaria := 'T';
                  end;
                except sAliquota  := '' end;
              end;
              ibDataSet14.Next;
            end;
          end else sSituacaoTributaria := 'T';
          //
          if sAliquota = '' then // Se o sAliquota continuar em branco é porque não estava cadastrado //
          begin            // na tabela de ICM ou estava em branco                        //
            ibDataSet14.First;
            while not ibDataSet14.EOF do  // Procura pela operação padrão venda À vista ou //
            begin                     // venda a prazo 512 ou 612 ou 5102 ou 6102      //
              if (AllTrim(ibDataSet14.FieldByName('CFOP').AsString) = '5102') or (AllTrim(ibDataSet14.FieldByName('CFOP').AsString) = '6102') then
              begin
                try
                  sAliquota := StrZero( (ibDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100) ,4,0); // Sandro Silva 2021-01-15 sAliquota := StrZero( (ibDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100) / 100 * ibDataSet14.FieldByName('BASE').AsFloat ,4,0);
                except sAliquota  := '' end;
              end;
              ibDataSet14.Next;
            end;
          end;
          //
          if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'I' then
            sSituacaoTributaria := 'I'
          else
            if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'F' then
              sSituacaoTributaria := 'F'
            else
              if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'N' then
                sSituacaoTributaria := 'N';
          //
          if (sSituacaoTributaria = 'I') or (sSituacaoTributaria = 'F') or (sSituacaoTributaria = 'N') then
            sAliquota := '0000';
        end
        else
        begin
          ClassificaAliquotaSituacaoTributaria(sAliquota, sSituacaoTributaria);
        end;
        sAliquota := copy(sAliquota,1,2)+','+copy(sAliquota,3,2);
        //
        sCodigo := Right('00000000000000' + ibDataSet4.FieldByName('CODIGO').AsString, 14);

        sDescricao := AllTrim(ibDataSet4.FieldByName('DESCRICAO').AsString);
        if Trim(ibDataSet4.FieldByName('REFERENCIA').AsString) <> '' then
        begin
          sCodigo := Right('00000000000000' + ibDataSet4.FieldByName('REFERENCIA').AsString, 14);
        end;
        //
        WriteLn(F,' <tr>');
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+sCodigo+'</td>');
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+ibDataSet4.FieldByName('CEST').AsString+'</td>');
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+ibDataSet4.FieldByName('CF').AsString+'</td>');
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+sDescricao+'</td>');
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+AllTrim(ibDataSet4.FieldByName('MEDIDA').AsString)+'</td>');
        WriteLn(F,'   <td nowrap align=right><font face="verdana" size=1>'+Format('%15.2n',[ibDataSet4.FieldByName('PRECO').AsFloat])+'</td>');
        WriteLn(F,'   <td nowrap align=center><font face="verdana" size=1>'+sSituacaoTributaria+'</td>'); // Produção Própria ou de Terceiro
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+AllTrim(ibDataSet4.FieldByName('IAT').AsString)+'</td>');
        WriteLn(F,'   <td nowrap align=left><font face="verdana" size=1>'+AllTrim(ibDataSet4.FieldByName('IPPT').AsString)+'</td>');
        if PAFNFCe = False then // Sandro Silva 2020-12-07
        begin
          WriteLn(F,'   <td nowrap align=right><font face="verdana" size=1>'+sAliquota+'</td>'); // Produção Própria ou de Terceiro
          WriteLn(F,'   <td nowrap align=right><font face="verdana" size=1>'+Format('%15.2n',[dQtdAtual])+'</td>'); //O Estoque atual + cancelamento de item sem commit e - vendas sem commit
        end;
        WriteLn(F,' </tr>');
        //
      end;
    end;
    //
    ibDataSet4.Next;
    //
  end;
  //
  WriteLn(F,'</table>');
  WriteLn(F,'<br><font face="verdana" size=1>Atualizado em '+Trim(ibDataSet13.FieldByName('MUNICIPIO').AsString)+', '+Copy(DateTimeToStr(Date),1,2)+' de '
  + Trim(MesExtenso( StrToInt(Copy(DateTimeToStr(Date),4,2)))) + ' de '
  + Copy(DateTimeToStr(Date),7,4) + ' às ' + TimeToStr(Time)+'</font>');
  //
  WriteLn(F,'<br>');              // Linha em branco
  WriteLn(F,'<font face="verdana" size=1><center>Relatório gerado pelo sistema Small, <a href="http://www.smallsoft.com.br"> www.smallsoft.com.br</a><font>');
  WriteLn(F,'</center>');
  WriteLn(F,'</html>');
  CloseFile(F);                                    // Fecha o arquivo
  ShellExecute( 0, 'Open',pChar('Tabela de mercadorias e serviços.HTM'),'', '', SW_SHOW);
  //
end;

procedure TForm1.FormShow(Sender: TObject);
var
  Mais1Ini: TIniFile;
  sSenhaX, sSenha : String;
  I, iSenha : Integer;
  iDiaContingencia: Integer; // Sandro Silva 2019-08-14
  dtDataUltimaRZ: TDate; // Sandro Silva 2019-08-29 ER 02.06 UnoChapeco
begin
  //SmallMsg('Teste 01 Show início');
  //LogFrente('Teste 01: Entrando FormShow');
  //

  bFechandoMesasAbertas := False;
  Form1.sReferenteNFModelo2 := '';
  TipoDeConta(True);
  //
  Form1.Repaint;
  //
  if StrToInt(sMesas) > 0 then
  begin
    Mesas(StrToInt(sMesas)); // FormShow
  end;
  //
  // Form1.Color := Form1.Image1.Picture.Bitmap.Canvas.Pixels[10,10];
  //
  Mais1ini    := TIniFile.Create('FRENTE.INI');
  //
  sBAlanca    := Mais1ini.ReadString('Frente de caixa', 'Balança','Não');

  //
  //se for 59 ou 65 ver se existe 'Forma extra 1', não existindo cria e atualiza com 'Forma extra 1' do ecf
  if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') then
  begin
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 1', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 1', Mais1Ini.ReadString('Frente de caixa','Forma extra 1',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 2', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 2', Mais1Ini.ReadString('Frente de caixa','Forma extra 2',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 3', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 3', Mais1Ini.ReadString('Frente de caixa','Forma extra 3',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 4', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 4', Mais1Ini.ReadString('Frente de caixa','Forma extra 4',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 5', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 5', Mais1Ini.ReadString('Frente de caixa','Forma extra 5',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 6', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 6', Mais1Ini.ReadString('Frente de caixa','Forma extra 6',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 7', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 7', Mais1Ini.ReadString('Frente de caixa','Forma extra 7',''));
    if Mais1Ini.ReadString(SECAO_65,'Forma extra 8', 'XXX') = 'XXX' then
      Mais1Ini.WriteString(SECAO_65,'Forma extra 8', Mais1Ini.ReadString('Frente de caixa','Forma extra 8',''));
  end
  else
  begin
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 1','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 1','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 2','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 2','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 3','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 3','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 4','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 4','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 5','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 5','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 6','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 6','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 7','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 7','');
    if Mais1Ini.ReadString('Frente de caixa','Forma extra 8','') = '' then Mais1Ini.WriteString('Frente de caixa','Forma extra 8','');
  end;
  //
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 1','') = '' then Mais1ini.WriteString('Frente de caixa', 'Imprimir identificador 1','Não');
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 2','') = '' then Mais1ini.WriteString('Frente de caixa', 'Imprimir identificador 2','Não');
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 3','') = '' then Mais1ini.WriteString('Frente de caixa', 'Imprimir identificador 3','Não');
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 4','') = '' then Mais1ini.WriteString('Frente de caixa', 'Imprimir identificador 4','Não');
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 5','') = '' then Mais1ini.WriteString('Frente de caixa', 'Imprimir identificador 5','Não');
  //
  //
  // Labels
  //
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 1','Não') <> 'Não' then bImp1 := True else bImp1 := False;
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 2','Não') <> 'Não' then bImp2 := True else bImp2 := False;
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 3','Não') <> 'Não' then bImp3 := True else bImp3 := False;
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 4','Não') <> 'Não' then bImp4 := True else bImp4 := False;
  if Mais1ini.ReadString('Frente de caixa', 'Imprimir identificador 5','Não') <> 'Não' then bImp5 := True else bImp5 := False;
  //
  Mais1Ini.Free;
  //
  if (Form1.ClienteSmallMobile.sVendaImportando = '') then
    Edit1.SetFocus;
  //
  if (DecimalSeparator <> ',') or (DateSeparator <> '/') then
  begin
    SmallMsgBox(Pchar('As propriedades das configurações regionais do seu sistema não estão'     + Chr(10) +
                       'de acordo com o padrão utilizado no Brasil.'                              + Chr(10) +
                       Chr(10) +
                       'Estas configurações regionais alteram o modo como números, moedas, datas' + Chr(10) +
                       'e horas são exibidos.'                                                    + Chr(10) +
                       Chr(10) +
                       'Altere estas configurações para:' + Chr(10) +
                       Chr(10) +
                       Chr(10) +
                       '                  Português (Brasileiro)' + Chr(10) +
                       Chr(10)+
                       'Verifique também o separador decimal, que deve ser "." e ' + chr(10)+
                       'o separador de data que deve ser "/".')

                       ,'Atenção',mb_Ok + MB_ICONWARNING);
    bSairdoPrograma := True;
  end;
  //
  try
    //
    Form1.Memo2.Lines.Text :=  'Total R$ 0,00';
    Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);
    //
  except end;
  //
  MostraALogo(True, False);// Sandro Silva 2018-04-26  MostraALogo(True);
  //
  if Form1.bBalancaAutonoma = False then // Sandro Silva 2019-01-23
  begin
    if (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '99') then
    begin
      if (Form1.sModeloECF_Reserva = '65') then
        Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços da NFC-e...';
      if (Form1.sModeloECF_Reserva = '59') then
      begin
        Form22.Label6.Caption := 'Aguarde! Verificando a disponibilidade dos serviços do ' + _ecf59_Tipodaimpressora + '...';
      end;
      if (Form1.sModeloECF_Reserva = '99') then
        Form22.Label6.Caption := '';

      if PAFNFCe then
        Form22.Label6.Caption := Form22.Label6.Caption + #13 + MSG_ALERTA_MENU_FISCAL_INACESSIVEL; // Sandro Silva 2021-07-28 Form22.Label6.Caption := Form22.Label6.Caption + ' ' + MSG_ALERTA_MENU_FISCAL_INACESSIVEL;

      Form22.Label6.Repaint;
    end else
    begin
      Form22.Label6.Caption := 'Validando ECF...';
      Form22.Label6.Repaint;
    end;

  end;
  //

  if Form1.bBalancaAutonoma then
  begin

    //ShowMessage('Teste 01 20757'); // Sandro Silva 2019-01-23

    Form1.lbOrientacaoPesagem.Caption := 'Coloque o prato na balança...'; // Sandro Silva 2019-01-31  Form1.lbOrientacaoPesagem.Caption := '';
    Form1.Panel1000.Visible          := True;
    Form1.Panel1000.Top              := Form1.Panel1.Top + Form1.Label13.Top;
    Form1.Panel1000.Left             := Form1.Panel1.Left + AjustaLargura(5);
    Form1.Panel1000.Width            := Form1.Panel1.Width - AjustaLargura(10);
    Form1.Panel1000.Height           := Form1.Label_CopyRight.Top - Form1.Label13.BoundsRect.Bottom;
    Form1.Panel1000.Color            := Form1.Panel1.Color;
    Form1.Panel1000.BevelOuter       := bvNone;
    Form1.Panel1000.ParentBackground := False;
    Form1.Panel1000.Caption          := '';
    Form1.Panel1000.BringToFront;
    Form1.Panel1000.Repaint;

    Form1.Image13.Picture    := Form1.Image2.Picture;
    Form1.Image13.BoundsRect := Form1.Image2.BoundsRect;
    Form1.Image13.Left       := (Form1.Panel1000.Width - Form1.Image13.Width) div 2;
    Form1.Image13.Top        := AjustaAltura(40);

    Form1.lbOrientacaoPesagem.AutoSize := False;
    Form1.lbOrientacaoPesagem.Align    := alNone;
    Form1.lbOrientacaoPesagem.Left     := 0;
    Form1.lbOrientacaoPesagem.Top      := Form1.Panel1000.BoundsRect.Bottom - (Form1.lbOrientacaoPesagem.Height * 4);
    Form1.lbOrientacaoPesagem.Width    := Form1.Panel1000.Width;
    Form1.lbOrientacaoPesagem.Repaint;

    Form1.Label13.Visible := False;

  end;

  if TestaTudo(True) then // Form Show
  begin

    //SmallMsg('Teste 01 16883');

    //
    if not bSAirDoPrograma then
    begin
      //
      bAberto := False;
      //
      if Form1.bStatusFiscal then
      begin
        if bGerarXmlReducaoRecuperada then // Sandro Silva 2019-09-09 ER 02.06 UnoChapeco
        begin
          bGerarXmlReducaoRecuperada := False; // Sandro Silva 2019-09-09 ER 02.06 UnoChapeco
          if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // Sandro Silva 2019-08-30 ER 02.06 UnoChapeco
          begin

            Form1.ibDataset88.Close;
            Form1.ibDataset88.SelectSQL.Clear;
            Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' order by DATA desc');
            Form1.ibDataset88.Open;
            dtDataUltimaRZ := Form1.ibDataset88.FieldByName('DATA').AsDateTime;

            GravaUltimaReducao(False); // Form1.FormShow()

            // recuperou os dados da última RZ
            // Gera xml
            Form1.ibDataset88.Close;
            Form1.ibDataset88.SelectSQL.Clear;
            Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora)+' order by DATA desc');
            Form1.ibDataset88.Open;
            if dtDataUltimaRZ <> Form1.ibDataset88.FieldByName('DATA').AsDateTime then
            begin

              dtDataUltimaRZ := Form1.ibDataset88.FieldByName('DATA').AsDateTime; // dtDataUltimaRZ recebe a data da última RZ

              Commitatudo(False); // Form1.FormShow();

              Form1.BlocoXReducaoZ1(Form1.sNumeroDeSerieDaImpressora, FormatDateTime('dd/mm/yyyy', dtDataUltimaRZ)); // EmitirReducaoZ()
              //bMsgTransmissaoRZPendente := True;
            end;
          end;
        end; // if bGerarXmlReducaoRecuperada then // Sandro Silva 2019-09-09 ER 02.06 UnoChapeco

      end;
      //LogFrente('Teste 01: Vai checar cupom aberto ');
      //
      bAberto := PDV_CupomAberto;

      //LogFrente('Teste 01: Checou aberto');

      if bAberto then
      begin
        //
        if not TestaTudo(True) then // Reabre o cupom
        begin
          Abort;
        end;

        if (Form1.ClienteSmallMobile.sVendaImportando = '')
          and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) then
        begin
          bSystray := False;
          Form1.Restaurar1Click(Sender);
        end;

        //
        bPagamento := False;
        //
        bPagamento := Form1.PDV_FaltaPagamento(True);

        ////////////////////////////
        // Cupom já estava aberto //
        ////////////////////////////
        bCupomAberto := True;
        Button2Click(Sender);
        //
        if bPagamento then
        begin
          Form1.Button18Click(Sender); // só falta o pagamento
        end else
        begin
          //
          if (Form1.ClienteSmallMobile.sVendaImportando = '') then
          begin
            if Form1.Edit1.CanFocus then
            begin
              Form1.Edit1.SetFocus;
              Form1.Edit1.SelectAll;
            end;
          end;
        end;
        //
      end;
    end;

    if (sModeloECF <> '59') and (sModeloECF <> '65') and (sModeloECF <> '99')
      and (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'FRENTE.EXE') then
    begin

      if Form1.bBalancaAutonoma = False then // Sandro Silva 2019-01-23
      begin
        if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then// Sandro Silva 2018-10-18  if _BlocoX.ValidaCertificadoDigital(PAnsiChar(Form1.IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual)) = False then
        begin
          Form22.Label6.Caption := 'Selecione um Certificado Digital';
          Form22.Label6.Repaint;
          Sleep(3000);
        end;

        if Form1.bStatusRede then
        begin

          Form22.Label6.Caption := 'Aguarde! Transmitindo arquivos do Bloco X que estão pendentes';
          Form22.Label6.Repaint;

          BlocoxTransmitirPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora, False);
          BlocoxTransmitirPendente1('ESTOQUE', '', False);
          BlocoxTransmitirPendente1('REDUCAO', '', False); // Sandro Silva 2018-01-24 Transmitir dos demais ECF

          Form22.Label6.Caption := 'Aguarde! Verificando pendências da transmissão do Bloco X'; // Sandro Silva 2018-11-22
          Form22.Label6.Repaint;

          BlocoXAlertarPendente1('', Form1.sNumeroDeSerieDaImpressora, True);

          //
          // Testatudo() foi executado quando iniciado.
          // Caso tenha bBlocoxEstoquePendente ou bBlocoxRZPendente forem True repete Testatudo() para conferir se BlocoxTransmitirPendente1 executado no onShow transmitiu as pendências
          //
          if (Copy(Form1.sPerfil,1,1) <> 'T') then // Sandro Silva 2019-06-25 ER 02.06 if (Copy(Form1.sPerfil,1,1) <> 'T') and (Copy(Form1.sPerfil,1,1) <> 'U') then // Sandro Silva 2017-11-10 Polimig
          begin
            if bBlocoxEstoquePendente or bBlocoxRZPendente then // Sandro Silva 2017-03-31
              TestaTudo(True); // Sandro Silva 2017-03-31
          end
          else
            if bBlocoxEstoquePendente then // Sandro Silva 2017-03-31
              TestaTudo(True); // Sandro Silva 2017-03-31

        end;
      end;

    end;

  end else /// TestaTudo(True) // Form Show
  begin
    if ((Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '99')) // Sandro Silva 2018-02-09  if (Form1.sModeloECF_Reserva <> '65') or (Form1.sModeloECF_Reserva <> '59') // Sandro Silva 2016-03-11
      and (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'FRENTE.EXE') then // Sandro Silva 2017-04-12
    begin
      if Form1.bStatusRede then
      begin
        BlocoxTransmitirPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora, False); // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco BlocoxTransmitirPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora);
        BlocoxTransmitirPendente1('ESTOQUE', ''); // Sandro Silva 2016-02-27
        BlocoxTransmitirPendente1('REDUCAO', '', False); // Transmitir dos demais ECF sem exibir alerta// Sandro Silva 2019-09-13 ER 02.06 UnoChapeco BlocoxTransmitirPendente1('REDUCAO', ''); // Sandro Silva 2018-01-24 Transmitir dos demais ECF

        BlocoXAlertarPendente1('', Form1.sNumeroDeSerieDaImpressora, True);

      end;

      if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(PAnsiChar(Form1.IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual)) = False then
      begin
        Form22.Label6.Caption := 'Selecione um Certificado Digital';
        Form22.Label6.Repaint;
        Sleep(3000);
      end;
    end;
    //
  end; // if TestaTudo(


  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin
    try
        if BlocoxValidarHashPasta('REDUCAO', PASTA_REDUCOES_BLOCO_X, '*.xml') = False then
        begin
          Form1.BlocoxRestaurarArquivos1('REDUCAO', PASTA_REDUCOES_BLOCO_X, Form1.sNumeroDeSerieDaImpressora);
          SalvarHashPasta('REDUCAO', PASTA_REDUCOES_BLOCO_X, '*.xml');
          ChDir(Form1.sAtual); // Sandro Silva 2018-09-18
        end;

        //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' +  TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

        if BlocoxValidarHashPasta('ESTOQUE', PASTA_ESTOQUE_BLOCO_X, '*.xml') = False then
        begin
          Form1.BlocoxRestaurarArquivos1('ESTOQUE', PASTA_ESTOQUE_BLOCO_X, '');
          SalvarHashPasta('ESTOQUE', PASTA_ESTOQUE_BLOCO_X, '*.xml');
          ChDir(Form1.sAtual); // Sandro Silva 2018-09-18
        end;

        //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' +  TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

        if BlocoxValidarHashPasta('REDUCAO', PASTA_RECIBOS_REDUCOES_BLOCO_X, '*.xml') = False then
        begin
          Form1.BlocoxRestaurarArquivos1('REDUCAO', PASTA_RECIBOS_REDUCOES_BLOCO_X, Form1.sNumeroDeSerieDaImpressora);
          SalvarHashPasta('REDUCAO', PASTA_RECIBOS_REDUCOES_BLOCO_X, '*.xml');
          ChDir(Form1.sAtual); // Sandro Silva 2018-09-18
        end;

        //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' +  TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

        if BlocoxValidarHashPasta('ESTOQUE', PASTA_RECIBOS_ESTOQUE_BLOCO_X, '*.xml') = False then
        begin
          Form1.BlocoxRestaurarArquivos1('ESTOQUE', PASTA_RECIBOS_ESTOQUE_BLOCO_X, Form1.sNumeroDeSerieDaImpressora);
          SalvarHashPasta('ESTOQUE', PASTA_RECIBOS_ESTOQUE_BLOCO_X, '*.xml');
          ChDir(Form1.sAtual); // Sandro Silva 2018-09-18
        end;
        
        //Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + ' 7328 ' +  TimeToStr(Time) + #13; // Sandro Silva 2018-10-19
        
    except
    end;
  end;
  //
  Form1.sF := ''; // Sandro Silva 2016-08-04 Precisa? Botões mostram funções

  {Sandro Silva 2021-07-09 inicio}
  if (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59') then
  begin
    if AnsiContainsText(Form1.Homologao1.Caption, 'HOMOLOGA') then
      Form1.sF := 'AMBIENTE DE HOMOLOGAÇÃO';
  end;
  {Sandro Silva 2021-07-09 fim}

  if ((Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59')) and (Form1.UsaIntegradorFiscal() = False) then // Sandro Silva 2019-10-16 if (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59') then
  begin

    if Form1.sModeloECF_Reserva = '65' then
    begin

      if Form1.bStatusECF then // Sandro Silva 2020-06-25
      begin

        Application.ProcessMessages; // Sandro Silva 2020-06-29

        if Form1.NFCeemContingncia1.Checked = False then // Sandro Silva 2020-06-25
        begin

          Form1.ContingenciaPendente.dtUltimaTransmissao := StrToDate(LerParametroIni(FRENTE_INI, SECAO_65, 'Transmissao Contingencia', DateToStr(Date - 1)));
          if Form1.ContingenciaPendente.dtUltimaTransmissao < Date then
          begin

            if (Form1.sModeloECF_Reserva = '65') then
            begin

              Form22.Label6.Caption := 'Aguarde! Analisando NFC-e...';

              if PAFNFCe then
                Form22.Label6.Caption := Form22.Label6.Caption + #13 + MSG_ALERTA_MENU_FISCAL_INACESSIVEL; // Sandro Silva 2021-07-28 Form22.Label6.Caption := Form22.Label6.Caption + ' ' + MSG_ALERTA_MENU_FISCAL_INACESSIVEL;

              Form22.Label6.Repaint;

              _ecf65_CorrigeXmlNoBanco;

            end;

          end;

          if _ecf65_VerificaContingenciaPendentedeTransmissao(Date - Form1.ContingenciaPendente.LimiteDias, Date, Form1.sCaixa) then // Verifica se tem pendências dentro do período
          begin

            if Form1.bStatusRede then
            begin

              if Form1.ContingenciaPendente.dtUltimaTransmissao < Date then
              begin

                // Seleciona as NFC-e em contingência até o dia anterior ao atual
                for iDiaContingencia := 0 to Form1.ContingenciaPendente.LimiteDias - 1 do //while Form1.ContingenciaPendente.dtUltimaTransmissao <= Date do
                begin

                  // Verifica se tem pendência no dia selecionado para exibir a mensagem
                  if _ecf65_VerificaContingenciaPendentedeTransmissao(Date - (Form1.ContingenciaPendente.LimiteDias - iDiaContingencia), Date - (Form1.ContingenciaPendente.LimiteDias - iDiaContingencia), Form1.sCaixa) then // Ficha 5567
                  begin

                    Form22.Label6.Caption := 'Aguarde! Transmitindo NFC-e em contingência emitidas em ' + FormatDateTime('dd/mm/yyyy', Date - (Form1.ContingenciaPendente.LimiteDias - iDiaContingencia));

                    if PAFNFCe then
                      Form22.Label6.Caption := Form22.Label6.Caption + #13 + MSG_ALERTA_MENU_FISCAL_INACESSIVEL; // Sandro Silva 2021-07-28 Form22.Label6.Caption := Form22.Label6.Caption + ' - ' + MSG_ALERTA_MENU_FISCAL_INACESSIVEL;

                    Form22.Label6.Repaint;

                    _ecf65_EnviarNFCeContingencia(Date - (Form1.ContingenciaPendente.LimiteDias - iDiaContingencia), '', Form1.sCaixa);

                  end;

                  Form1.ContingenciaPendente.dtUltimaTransmissao := Date - (Form1.ContingenciaPendente.LimiteDias - iDiaContingencia);

                end;

                _ecf65_VerificaContingenciaPendentedeTransmissao(Date - Form1.ContingenciaPendente.LimiteDias, Date, Form1.sCaixa);
                Sleep(50);
                SalvarConfiguracao(FRENTE_INI, SECAO_65, 'Transmissao Contingencia', FormatDateTime('dd/mm/yyyy', Date));
              end;

            end; // if Form1.bStatusRede then

          end; // if _ecf65_VerificaContingenciaPendentedeTransmissao(Date - Form1.ContingenciaPendente.LimiteDias, Date, Form1.sCaixa) then

        end; // Form1.NFCeemContingncia1.Checked

      end; //if Form1.bStatusECF // Sandro Silva 2020-06-25
      Form1.ExibeAlertaContingenciaPendente; // Sandro Silva 2019-08-14
    end; // if Form1.sModeloECF_Reserva = '65' then
  end; // if ((Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59')) and (Form1.UsaIntegradorFiscal() = False) then


  if (Form1.sModeloECF = '59') then
  begin

    if Form1.UsaIntegradorFiscal('') then
    begin

      SmallMessageBox(PChar('Atualize o Driver MFE para versão mais atual' + #13 + #13 +
        '"A Secretaria da Fazenda do Ceará (Sefaz-CE) comunica que serão desativadas ' +
        'as soluções Integrador e Validador Fiscal utilizadas no processo de emissão ' +
        'do Cupom Fiscal Eletrônico (CF-e) e da Nota Fiscal ao Consumidor Eletrônica (NFC-e). ' +
        'O objetivo é simplificar e agilizar as operações comerciais dos contribuintes."'
       ), 'Comunicado SEFAZ/Ceará', MB_ICONWARNING);

    end;

  end;


  Display(Form1.sStatusECF,Form1.sF);
  Form1.sStatusECF_RES := Form1.sStatusECF;
  //
  Screen.Cursor := crDefault; // Cursor normal
  //
  if not bAberto then
  begin
    CortaPapelNoVideo(True); // form Show TForm1.FormShow()

    if (PAFNFCe) then // Sandro Silva 2020-07-01 if (AnsiLowerCase(ExtractFileName(Application.ExeName)) = 'pafnfce.exe') then
    begin
      Application.ProcessMessages; // Sandro Silva 2016-02-29
      Application.BringToFront; // Sandro Silva 2016-02-29
    end;

  end else
  begin
    DestroiMesas(True);
  end;
  //
  Panel1.Top  := (Screen.Height - Panel1.Height) div 2;
  Panel1.Left := (Screen.Width - Panel1.Width) div 2;
  //
  if (sSenhaDeUsuario = 'Sim') and (bUsuarioLogado = False) then
  begin
    //
    iSenha := 0;
    //
    try
      //
      while iSenha < 6 do
      begin
        //
        Form15.ShowModal;

        // Sandro Silva 2022-11-04 Audita('ACESSOU','FRENTE', Form15.UsuarioPub,'ACESSOU O SISTEMA',0,0); // Ato, Modulo, Usuário, Histórico, Valor
        Audita('ACESSOU','FRENTE', Form15.UsuarioPub,'ACESSOU O SISTEMA - Caixa: ' + Form1.sCaixa + ' ' + ExtractFileName(Application.ExeName) + ' Build: ' + LimpaNumero(Form22.sBuild),0,0); // Ato, Modulo, Usuário, Histórico, Valor
        //
        //
        Senha     := Form15.SenhaPub;
        Usuario   := Form15.UsuarioPub;
        sVendedor := Usuario; // Define o usuário logado como o vendedor atual
        //
        Mais1ini := TIniFile.Create(Form1.sAtual+'\EST0QUE.DAT');
        Mais1Ini.UpdateFile;
        sSenhaX := Mais1Ini.ReadString(Usuario,'Chave','15706143431572013809150491382314104');
        Mais1Ini.Free; // Sandro Silva 2018-11-21 Memória
        //
        sSenha := '';
        // ----------------------------- //
        // Fórmula para ler a nova senha //
        // ----------------------------- //
        for I := 1 to (Length(sSenhaX) div 5) do
          sSenha := Chr((StrToInt(
                        Copy(sSenhaX,(I*5)-4,5)
                        )+((Length(sSenhaX) div 5)-I+1)*7) div 137) + sSenha;
        // ----------------------------- //
        if (AnsiUpperCase(sSenha) = AnsiUpperCase(Senha)) or (AllTrim(Senha)='') then
        begin
          iSenha := 6;
        end else
        begin
          //
          iSenha := iSenha + 1;
          //
        end;
        //
      end;
    except end;
    //
    try
      //
      if (AnsiUpperCase(sSenha) = AnsiUpperCase(Senha)) then
      begin
         // SmallMsg('Senha ok');
         bUsuarioLogado := True; // Usuário logou
      end else
      begin
        //
        Audita('SENHA','FRENTE', Form15.UsuarioPub,'SENHA INVÁLIDA: '+Senha,0,0); // Ato, Modulo, Usuário, Histórico, Valor
        SmallMsg(' '+Usuario+chr(10)+chr(10)+
                    ' Sua senha não é válida, portanto o' + chr(10)+
                    ' frente de caixa não pode ser liberado.'+ chr(10)+
                    ' Entre novamente no programa digitando'+ chr(10)+
                    ' a sua senha correta.'+ chr(10));

        Form1.bFechaTudo := True;
        Close;
        //
      end;
    except end;
  end;
  //

  if AnsiLowerCase(ExtractFileName(Application.ExeName)) = 'pafdief.exe' then
  begin
    Estoquetotal1Click(Sender);
  end;

  //LogFrente('Teste 01: Saindo FormShow');
  //SmallMsg('Teste 01 Show fim');

  Form22.Hide; // Sandro Silva 2016-07-27 Estava no onActivate, mas ficava errado

end;

procedure TForm1.Gaveta1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  Mais1ini := TIniFile.Create('FRENTE.INI');
  if Mais1Ini.ReadString('Frente de caixa','Gaveta','0') = '0'
    then Mais1Ini.WriteString('Frente de caixa','Gaveta','1') else Mais1Ini.WriteString('Frente de caixa','Gaveta','0');
  if Mais1Ini.ReadString('Frente de caixa','Gaveta','0') = '0' then Gaveta1.Checked := False else Gaveta1.Checked := True;
  Mais1Ini.Free;
  //
end;

procedure TForm1.Vias1Click(Sender: TObject);
var
  sVias : String;
  Mais1Ini : TIniFile;
begin
  //
  Mais1ini  := TIniFile.Create('FRENTE.INI');
  sVias     := Mais1Ini.ReadString('Frente de caixa','Vias do Cupom Vinculado','2');
  sVias     := Small_InputBox('Vias do cupom vinculado...','Vias do cupom vinculado...',sVias);
  if LimpaNumero(sVias) = '' then sVias := '2';
  Mais1Ini.WriteString('Frente de caixa','Vias do Cupom Vinculado',sVias);
  iVias       := Mais1Ini.ReadInteger('Frente de caixa','Vias do Cupom Vinculado',0);
  Mais1Ini.Free;
  //
end;

procedure TForm1.Button6Click(Sender: TObject);
begin
  // Desconto no item
  //
  if sLiberacao = '3' then
  begin
    if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then
    begin
      Form1.ClienteSmallMobile.LogRetornoMobile( // Sandro Silva 2022-08-08 LogRetornoMobile(
        'O PDV necessita permissão do administrador para liberar desconto');
    end
    else
    begin

      //ShowMessage('Teste 01 21246'); // Sandro Silva 2019-01-17

      Small_InputBox('Senha','Informe a senha do administrador:','');
    end;
    if Form12.Caption <> 'Liberado' then Abort;
  end;
  //
  Form6.TipoDescontoAcrescimo  := tDescProduto; // Sandro Silva 2021-08-23
  Form6.Caption                := 'Desconto';
  Form6.Label3.Visible         := False;
  Form6.SMALL_DBEdit3.Visible  := False;
  Form6.Label4.Visible         := False;
  Form6.SMALL_DBEdit4.Visible  := False;
  Form6.ShowModal;
  //
  if Form1.ibDataSet25.FieldByname('VALOR_1').AsFloat > 0 then Form1.Label_7.Caption := 'Desconto de '+AllTrim(Format('%10.2n',[Form1.ibDataSet25.FieldByname('VALOR_1').AsFloat]))+'% no próximo item.'; // Desconto %
  if Form1.ibDataSet25.FieldByname('VALOR_2').AsFloat > 0 then Form1.Label_7.Caption := 'Desconto de R$'+AllTrim(Format('%10.2n',[Form1.ibDataSet25.FieldByname('VALOR_2').AsFloat]))+' no próximo item.'; // Desconto R$
  //
end;

procedure TForm1.Formasdepagamento1Click(Sender: TObject);
begin
  FormasP.WindowState := wsMaximized;
  FormasP.Show;
end;

procedure TForm1.Bloqueioporsenha1Click(Sender: TObject);
var
  Mais1Ini: TIniFile;
begin
  //
  Small_InputBox('Senha','Informe a senha do administrador:','');
  //
  if Form12.Caption = 'Liberado' then
  begin
    Mais1ini := TIniFile.Create(Form1.sAtual+'\EST0QUE.DAT');
    if not BloqueioPorSenha1.Checked then
    begin
      bButton := Application.MessageBox('Exigir senha também para desconto?','Atenção', mb_YesNo + mb_DefButton1 + MB_ICONWARNING);
      if bButton = IDYES then
        Mais1Ini.WriteString('Frente de caixa','B17','3')
      else
        Mais1Ini.WriteString('Frente de caixa','B17','2');
      BloqueioPorSenha1.Checked := True;
    end else
    begin
      BloqueioPorSenha1.Checked := False;
      Mais1Ini.WriteString('Frente de caixa','B17','1')
    end;
    //
    sLiberacao := Mais1Ini.ReadString('Frente de caixa','B17','1');
    //
    Mais1Ini.Free;
  end;
  //
end;

procedure TForm1.RegistroFiscal1Click(Sender: TObject);
begin
  if FileExists('sintegra.exe') then
  ShellExecute( 0, 'Open', 'sintegra.exe', '', '', SW_SHOW) else
  SmallMsg('O executável sintegra.exe não foi encontrado na pasta de instalação do programa.');
end;

procedure TForm1.Balana1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','Balança','Não') = 'Não' then
  begin
    Mais1Ini.WriteString('Frente de caixa','Balança','Sim');
    ShellExecute(0, 'open', 'pesado.exe', 'C', '', sw_normal);
  end
  else
    Mais1Ini.WriteString('Frente de caixa','Balança','Não');
  //
  Form1.sBalanca := Mais1Ini.ReadString('Frente de caixa','Balança','Não');
  Mais1Ini.Free;
  //
  //
end;

procedure TForm1.ibDataset88FilterRecord(DataSet: TDataSet; var Accept: Boolean);
begin
  Accept := True;
end;

procedure TForm1.GrandetotalGT1Click(Sender: TObject);
var
  sTotalDia : String;
begin
  //
  sTotalDia := Form1.PDV_GrandeTotal(True);
  //
  SmallMsg(sTotalDia);
  //
end;

procedure TForm1.EF1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','TEM TEF','Sim') = 'Sim' then
  begin
    Mais1Ini.WriteString('Frente de caixa','TEM TEF','Não');
  end else
  begin
    Mais1Ini.WriteString('Frente de caixa','TEM TEF','Sim');
  end;
  //
  Form1.sTef := Mais1Ini.ReadString('Frente de caixa','TEM TEF','Sim');
  Mais1Ini.Free;
  //                
  {Sandro Silva 2022-02-14 inicio}
  if Form1.sTef = 'Sim' then
  begin
    Form1.SmartPOSElginPay1.Checked := False;
    Form1.PosElginPay.Desativa;
  end;

  Form1.SmartPOSElginPay1.Enabled := PosElginPay.PermiteUsarPOS; // Sandro Silva 2022-05-09
  Form1.FunesAdministrativasPosElginPay1.Enabled := SmartPOSElginPay1.Enabled; // Sandro Silva 2022-05-09

  if Form1.PosElginPay.Configuracao.Ativo = 'Sim' then
    Form1.PosElginPay.Ativa(Form1.ibDataSet13.FieldByName('CGC').AsString, AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString), Form1.sModeloECF_Reserva{, Form1.sTef = 'Sim'}); // Sandro Silva 2022-02-11
  {Sandro Silva 2022-02-14 fim}
end;

procedure TForm1.Controledecheque1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','Controle de cheque','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa','Controle de cheque','Sim')
      else Mais1Ini.WriteString('Frente de caixa','Controle de cheque','Não');
  //
  //  Form1.sBalanca := Mais1Ini.ReadString('Frente de caixa','Controle de cheque','Não');
  Mais1Ini.Free;
  //
end;

procedure TForm1.TecladoGERTEC1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','Teclado gertec','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa','Teclado gertec','Sim')
      else Mais1Ini.WriteString('Frente de caixa','Teclado gertec','Não');
  //
  Form1.sGertec := Mais1Ini.ReadString('Frente de caixa','Teclado gertec','Não');
  Mais1Ini.Free;
  //
end;

procedure TForm1.ibDataSet4NewRecord(DataSet: TDataSet);
begin
  DataSet.FieldByName('REGISTRO').AsString := 'XXXXXXXXXX';
end;

procedure TForm1.ibDataSet27BeforeInsert(DataSet: TDataSet);
begin
  //
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_ALTERACA,1) from rdb$database');
    ibDataset99.Open;

    sProximo27 := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
    //
    try
      ibDataSet99.Close;
      ibDataSet99.SelectSql.Clear;
      ibDataset99.SelectSql.Add('select gen_id(G_HASH_ALTERACA,1) from rdb$database');
      ibDataset99.Open;
      HasHs('ALTERACA', True);

      //ShowMessage('Teste 01 20834'); // Sandro Silva 2017-11-06

    except end;
    //
  except
    SmallMsg('Erro: 2 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos". . Erro: 6');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName)); // Sandro Silva 2019-07-17
  end;
  //
end;

procedure TForm1.ibDataSet1BeforeInsert(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_CAIXA,1) from rdb$database');
    ibDataset99.Open;
    sProximo := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
  except
    SmallMsg('Erro: 3 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos". . Erro: 7');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
end;

procedure TForm1.ibDataset30BeforeInsert(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_SERIE,1) from rdb$database');
    ibDataset99.Open;
    sProximo := strZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
  except Abort end;
end;

procedure TForm1.ibDataSet25BeforeInsert(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_FLUXO,1) from rdb$database');
    ibDataset99.Open;
    sProximo := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
  except
    SmallMsg('Erro: 4 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos". Erro: 8');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
end;

procedure TForm1.ibDataSet7BeforeInsert(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_RECEBER,1) from rdb$database');
    ibDataset99.Open;
    sProximo := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
  except
    SmallMsg('Erro: 5 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos".');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
end;

procedure TForm1.ibDataSet10BeforeInsert(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_GRADE,1) from rdb$database');
    ibDataset99.Open;
    sProximo := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
  except
    SmallMsg('Erro: 6 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos".. Erro: 9');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
end;

procedure TForm1.ibDataset88BeforeInsert(DataSet: TDataSet);
begin
  try
    //
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_REDUCOES,1) from rdb$database');
    ibDataset99.Open;
    sProximo := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
    //
    try
      ibDataSet99.Close;
      ibDataSet99.SelectSql.Clear;
      ibDataset99.SelectSql.Add('select gen_id(G_HASH_REDUCOES,1) from rdb$database');
      ibDataset99.Open;
      HasHs('REDUCOES', True);
    except end;
    //
  except
    SmallMsg('Erro: 7 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos".. Erro: 10');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
end;

procedure TForm1.DBGrid2DblClick(Sender: TObject);
begin
  //
  if Copy(AllTrim(Edit1.Text),1,1) <> '-' then
  begin
    Edit1.Text := ibDataSet4.FieldByName('DESCRICAO').AsString;
    if (Form1.ClienteSmallMobile.sVendaImportando = '') then
      Edit1.SetFocus;
    dbGrid2.Visible := False;
  end;
  //
end;

procedure TForm1.Edit1Change(Sender: TObject);
var
  sTexto : String;
  iColunaConsulta: Integer;
begin
  //
  if Copy(Edit1.Text,1,1) = '<' then
  begin
    if (Form1.bBalancaAutonoma = False) and (bPesou = False) then // Sandro Silva 2018-12-18  Não está usando balança autônoma e não pesou
      Label_10.Caption := 'Abrindo conta';
  end else
  begin
    //
    if not Button2.Enabled then
    begin
      //
      IbDataSet4.DisableControls;
      //
      if (Form1.bBalancaAutonoma = False) and (bPesou = False) then // Sandro Silva 2018-12-18  Não está usando balança autônoma e não pesou
      begin
        if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
        begin
          if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
          begin
            if not Button7.Enabled and (Edit1.Text <> '') then
              Display(Edit1.Text,'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
            if Length(Label_10.Caption) = 1 then
              Display(Edit1.Text,'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
          end else
          begin
            if not Button7.Enabled and (Edit1.Text <> '') then
              Display(Edit1.Text,'Entre com EAN 13, Código ou Descrição');
            if Length(Label_10.Caption) = 1 then
              Display(Edit1.Text,'Entre com EAN 13, Código ou Descrição');
          end;
        end
        else
        begin
          if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
          begin
            if not Button7.Enabled and (Edit1.Text <> '') then
              Display(Edit1.Text,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
            if Length(Label_10.Caption) = 1 then
              Display(Edit1.Text,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
          end else
          begin
            if not Button7.Enabled and (Edit1.Text <> '') then
              Display(Edit1.Text,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição');
            if Length(Label_10.Caption) = 1 then
              Display(Edit1.Text,'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição');
          end;
        end;
      end;
      //
      //
      if dbGrid2.Visible then
      begin                 //
        //
        sTexto := Edit1.Text;
        if (Pos('*',AllTrim(Edit1.Text)) <> 0) and (Copy(AllTrim(Edit1.Text), 1, 1) <> '*') then
          sTexto := AllTrim(Copy(AllTrim(AllTrim(Edit1.Text))+Replicate(' ',100),Pos('*',AllTrim(Edit1.Text))+1,100))
        else
          sTexto := AllTrim(Copy(AllTrim(AllTrim(Edit1.Text))+Replicate(' ',100),1,100));

        if (Pos('$',AllTrim(sTexto)) <> 0) and (Copy(AllTrim(sTexto), 1, 1) <> '$') then
          sTexto := AllTrim(Copy(AllTrim(AllTrim(sTexto))+Replicate(' ',100),Pos('$',AllTrim(sTexto))+1,100))
        else
          sTexto := AllTrim(Copy(AllTrim(AllTrim(sTexto))+Replicate(' ',100),1,100));
        //
        ibDataSet4.Close;
        ibDataSet4.SelectSQL.Clear;
        // Sandro Silva 2015-03-27 Pesquisa em qualquer parte da descrição quando texto digitado começar com espaço, do contrário pesquisa pelo início
        ibDataSet4.SelectSQL.Add('select * from ESTOQUE where ');
        if Form1.Pesquisaremqualquerpartedotexto1.Checked then
          ibDataSet4.SelectSQL.Add(' upper(DESCRICAO) like '+QuotedStr('%'+UpperCase(Trim(sTexto))+'%'))
        else
          ibDataSet4.SelectSQL.Add(' upper(DESCRICAO) like '+QuotedStr(UpperCase(sTexto)+'%'));
        ibDataSet4.SelectSQL.Add(' and coalesce(ATIVO,0)=0 order by upper(DESCRICAO)');
        ibDataSet4.Open;
        //
        DBGrid2.DataSource.DataSet := ibDataSet4;
        // Sandro Silva 2015-03-27 Evitar problema de exibir coluna duplicada
        DBGrid2.Columns[0].Width := DBGrid2.Width;
        for iColunaConsulta := 1 to DBGrid2.Columns.Count - 1 do
          DBGrid2.Columns[iColunaConsulta].Visible := False;
        //
      end;
      ibDataSet4.EnableControls;
    end else
    begin 
      //
      // Abre o cupom com o código de Barras 13 Dígitos
      //
      if (sAbreComOLeitor <> 'Sim') or (Form1.bStatusFISCAL=False) then
      begin
        Edit1.Text := '';
      end;
      //
    end;
  end;
  //
end;

procedure TForm1.Edit1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  iMesaAbertaRes : Integer;
  Hora, Min, Seg, cent : Word;
  bPacote, bFind: Boolean;
  sTexto : String;
  Mais1Ini : TiniFile;
  tInicio : TDateTime;
  sInsuficiente: String;
  sProdutoNaoLancado: String;
  sValorProduto: String; // Sandro Silva 2017-02-17
  sQuantidadeProduto: String; // Sandro Silva 2017-02-17
  bAchouDesconto: Boolean; // Sandro Silva 2017-06-09
  bLiberadoDesconto: Boolean; // Sandro Silva 2017-08-04
  fDescontoImportacao: Real; // Sandro Silva 2017-08-07
  bImportouOSProdutos: Boolean; // Sandro Silva 2018-05-16
  bImportouOSServicos: Boolean; // Sandro Silva 2018-05-16
  sSEQUENCIALCONTACLIENTEOS: String; // Sandro Silva 2017-12-15
  sOP, sT: String; // Sandro Silva 2018-05-14
  bPesouAutomatico: Boolean;
  sAlteracaRegistro: String;
  sMesaPesagem: String;
  dQtdEstoqueAtual: Double; // Sandro Silva 2019-05-03
  iMesaReserva: Integer; // Sandro Silva 2021-02-18
  bAtualizaOrigemImportacao: Boolean; // Sandro Silva 2021-08-17
  sSituacaoOS: String; // Sandro Silva 2021-08-19
  bTemServicoNoOrcamento: Boolean; // Sandro Silva 2021-09-13
  bTemServicoNaOS: Boolean; // Sandro Silva 2021-09-13
begin
  bPesouAutomatico := False; // Sandro Silva 2021-11-25
  {Sandro Silva 2021-06-08 inicio}
  if bFechandoCupom then
    Exit;
  {Sandro Silva 2021-06-08 fim}

  //
  // Mesa Não pode importar OS e ORCAMENTO
  //
  if not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01')) then
  begin
    //
    if ((sModeloECF = '65') or (sModeloECF = '59') or (sModeloECF = '99'))
      and (((Button2.Enabled) and (Key = VK_F11)) or ((Button2.Enabled) and (Key = VK_F12))) then
    begin
      bImportandoDAVorOS := True;
    end;

    if (Button2.Enabled) and (Key = VK_F11) then
    begin
      //
      // Abre o cupom para importar o Orçamento
      //
      if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or (sModeloECF = '65') or (sModeloECF = '59') or (sModeloECF = '99')) then // Sandro Silva 2020-12-11 if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or ((sModeloECF = '65') and (PAFNFCe = False)) or (sModeloECF = '59') or (sModeloECF = '99')) then // Sandro Silva 2020-07-01 if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or ((sModeloECF = '65') and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE')) or (sModeloECF = '59')) then
      begin
        Button2Click(Sender);
      end;
      //
    end;
    //
    if (Button2.Enabled) and (Key = VK_F12) then
    begin
      //
      // Abre o cupom para importar o Orçamento
      //
      if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or (sModeloECF = '65') or (sModeloECF = '59') or (sModeloECF = '99')) then // Sandro Silva 2020-12-11 if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or ((sModeloECF = '65') and (PAFNFCe = False)) or (sModeloECF = '59') or (sModeloECF = '99')) then // Sandro Silva 2020-07-01 if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or ((sModeloECF = '65') and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE')) or (sModeloECF = '59')) then
      begin
        Button2Click(Sender);
      end;
      //
    end;
  end;
  //
  Form1.ibDataSet4.DisableControls;
  //
  if (Key = VK_RETURN) and (Copy(Edit1.Text,1,4)='<F4>') and (not Form1.Memo1.Visible) then // Quando tem cupom aberto não abre
  begin
    //
    if Form1.bStatusRede then
    begin
      //
      Form1.iMesaAberta := StrToInt(Limpanumero('0'+StrTran(Edit1.Text,'<F4>','')));
      //
      if Form1.iMesaAberta <> 0 then
      begin
        //Evitando problema de não exibir itens lançados nas mesas por 2 terminais diferentes. Um não exibe os dados do outro na primeira abertura da mesa. Ver com Gian/Fernanda}
        Commitatudo(True); // Edit1KeyDown() abre mesa

        Form1.sModeloECF := '01';
        Button2Click(Sender);
        //
        // CONSUMO
        //
        // Form1.touch_F3Click(Sender);
        //
      end;
    end;
    //
    Edit1.Text := '';
    //
  end else
  begin
    //
    if (Button2.Enabled) and (Key = VK_RETURN) and (   (Length(LimpaNumero(Edit1.Text))=13)
                                                    or (Length(LimpaNumero(Edit1.Text))=14)
                                                    or (Length(LimpaNumero(Edit1.Text))=12)
                                                    or (Length(LimpaNumero(Edit1.Text))=8)
                                                    )  then
    begin
      //
      // Abre o cupom com o código de Barras 13 Dígitos
      //
      if sAbreComOLeitor = 'Sim' then
      begin
        Button2Click(Sender);
        Edit1KeyDown(Sender,Key,Shift);
      end else
      begin
        Edit1.Text := '';
      end;
      //
    end;
    //
    if not Button2.Enabled then
    begin
      //
      if Key = VK_DOWN then
      begin
        if dBgrid2.CanFocus then
        begin
          dBgrid2.SetFocus;
          Form1.ibDataSet4.EnableControls; // Sandro Silva 2020-11-06
          Abort;
        end;
      end;

      {Sandro Silva 2021-08-06 inicio}
      if dBgrid2.CanFocus = False then // Grid dos produtos estiver oculta permitir movimentar para cima ou para baixo a lista de produtos vendidos
      begin
        if Key = VK_DOWN then
        begin
          if touch_baixo_cupom.Visible then
            touch_baixo_cupomClick(touch_baixo_cupom);
        end;

        if Key = VK_UP then
        begin
          if touch_cima_cupom.Visible then
            touch_cima_cupomClick(touch_cima_cupom);
        end;
      end;
      {Sandro Silva 2021-08-06 fim}
      
      //
      if (Key = VK_RETURN) then
      begin
        //
        if (dBgrid2.Visible) and (Pos(UpperCase(AllTrim(Edit1.Text)),UpperCase(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString)) <> 0) then
          DBGrid2DblClick(Sender);
        //
        dBgrid2.Visible := False;
        // ---------------------------------------------------------------  J  Rodrigues
        fPreco := 0;
        fQuantidadeVendida := 1;
        //
        if ((Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99')) and (PAFNFCE = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
        begin
          if Pos('$',AllTrim(Edit1.Text)) <> 0 then
          begin
            try
              begin
                //
                Produto(Edit1.Text, sQuantidadeProduto, sValorProduto);

                fPreco := StrToFloat(StrTran(Copy(AllTrim(sValorProduto),1,
                                    Pos('$',AllTrim(AllTrim(sValorProduto)))-1),'.',','));
                if fPreco < 0 then
                  fPreco := fPreco * -1;

              end;
            except
              fPreco := 0;
              Edit1.Text := '';
            end;
          end;
        end;
        //
        if (Pos('*',AllTrim(Edit1.Text)) <> 0) and (Copy(AllTrim(Edit1.Text), 1, 1) <> '*') then
        begin
          try
            begin
              Produto(Edit1.Text, sQuantidadeProduto, sValorProduto);

              fQuantidadeVendida := StrToFloat(StrTran(Copy(AllTrim(sQuantidadeProduto),1,
                                  Pos('*',AllTrim(AllTrim(sQuantidadeProduto)))-1),'.',','));

              if fQuantidadeVendida < 0 then
                fQuantidadeVendida := fQuantidadeVendida * -1;

            end;
          except
            fQuantidadeVendida := 0;
          end;
          if fQuantidadeVendida = 0 then
          begin
            Edit1.Text := '';
            Label_10.Caption := '';
            SmallMsg('Comando inválido.');
          end;

          if Form1.bBalancaAutonoma then
          begin
            if StrToFloatDef(sPesoAutonomo, 0) > 0 then
            begin
              sPesoAutonomo := '0,000';
              bPesouAutomatico := True;
            end;
          end;

        end;

        //
        if Copy(AllTrim(Edit1.Text),1,1) = '-' then
        begin
          //
          try
            StrZero(StrToInt(AllTrim(Edit1.Text))*-1,6,0) // Elimina o caractere '-' e formata com 6 dígitos o número do item Ex. item '000001'
          except
            SmallMsg('Comando inválido.');
            Label_10.Caption := '';
            Edit1.Text := '';
            Form1.ibDataSet4.EnableControls; // Sandro Silva 2020-11-06 
            Abort;
          end;
          //
          if (sLiberacao = '2') or (sLiberacao = '3') then // Sandro Silva 2017-08-04  if sLiberacao = '3' then
          begin

            //ShowMessage('Teste 01 21951'); // Sandro Silva 2019-01-17

            Small_InputBox('Senha','Informe a senha do administrador:','');
            if Form12.Caption <> 'Liberado' then
            begin
              Edit1.Text := '';
              Form1.ibDataSet4.EnableControls; // Sandro Silva 2020-11-06
              Abort;
            end;
          end;
          //
          sTexto := Edit1.Text;
          //
          try
            begin
              //
              // Apaga do arquivo
              //
              CommitaTudo(False); // Cancelamento de item na mesa
              //
              if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
              begin
                Form1.ibDataSet27.Close;
                Form1.ibDataSet27.SelectSQL.Clear;
                Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Sandro Silva 2021-11-29 Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM');
                Form1.ibDataSet27.Open;
              end else
              begin
                Form1.ibDataSet27.Close;
                Form1.ibDataSet27.SelectSQL.Clear;
                Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))); // Sandro Silva 2021-11-29 Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where CAIXA='+QuotedStr(Form1.sCaixa)+' and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0)));
                Form1.ibDataSet27.Open;
              end;
              //
              Form1.ibDataSet27.First;
              while not Form1.ibDataSet27.Eof do
              begin
                //
                if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
                begin
                  // Cancelando item da mesa
                  if Form1.ibDataSet27.FieldByname('ITEM').AsString = StrZero(StrToInt(AllTrim(sTexto))*-1,6,0) then
                  begin
                    //
                    // Cancela Item N
                    //
                    try // Sandro Silva 2020-06-19
                      Form1.ibDataSet27.Edit;
                      Form1.ibDataSet27.FieldByname('VENDEDOR').AsString := '<cancelado>';
                      Form1.ibDataSet27.Post;
                    except
                    end;

                    //
                    CommitaTudo(False); // Cancelamento de item na mesa
                    //
                    //
                    iMesaAbertaRes := Form1.iMesaAberta;
                    Form1.Button8Click(Sender);
                    Form1.iMesaAberta := iMesaAbertaRes;
                    Form1.sModeloECF := '01';
                    //
                    bPedeDadosOs := False;
                    Button2Click(Sender); // Abre cupom/mesa
                    bPedeDadosOs := True;
                    //
                  end;
                  //
                end else
                begin
                  //
                  if (Form1.ibDataSet27.FieldByName('CAIXA').AsString=sCaixa) and (Form1.ibDataSet27.FieldByName('PEDIDO').AsString=FormataNumeroDoCupom(Form1.icupom)) and (Form1.ibDataSet27.FieldByName('ITEM').AsString = StrZero(StrToInt(AllTrim(sTexto))*-1,6,0)) then
                  begin
                    //
                    // Cancela Item N
                    //
                    if (Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = '<CANCELADO>') or (Form1.ibDataSet27.FieldByName('TIPO').AsString = 'KOLNAC') then // Sandro Silva 2019-03-26 if Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = '<CANCELADO>' then
                    begin
                      SmallMsg('Este item já foi cancelado!')
                    end
                    else
                    begin
                      Form1.Button11Click(Sender); // CalcelaItenN
                    end;
                  end;
                end;
                Form1.ibDataSet27.Next;
              end;

              CommitaTudo2(False); // Venda o iten // Sandro Silva 2016-02-18
              //
              //  Retorno do Subtotal
              //
              Form1.fTotal := PDV_SubTotal(True); // Sandro Silva 2017-07-25 final
              //
              Form1.ibDataSet27.EnableControls;
              //              Form1.ImprimeNoVideo('SUBTOTAL R$ '+AllTrim(Format('%10.2n',[fTotal])));
              //
            end;
            //
            if (Consumo = False) or ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01')) then
            begin
              Form1.Memo2.Lines.Text := 'Total R$ '+AllTrim(Format('%12.2n',[Form1.fTotal]));
              Label_13.Caption := Format('%10.2n',[Form1.fTotal]);
            end
            else
            begin
              Form1.Memo2.Lines.Text := '';
              Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);

              if (Form1.bBalancaAutonoma = False) and (bPesou = False) then // Sandro Silva 2018-12-18  Não está usando balança autônoma e não pesou
              begin
                if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
                  Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,2,0),'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia)
                else
                  Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,2,0),'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia)
              end;

            end;
            if (Form1.ClienteSmallMobile.sVendaImportando = '') then
              Edit1.SetFocus;
            //
          except
            fQuantidadeVendida := 0;
          end;
          //
          Edit1.Text := '';
          //
        end;
        // ---------------------------------------------------------------  J  Rodrigues
        bFind   := False;
        tInicio := Time;
        //
        if AllTrim(Edit1.Text) <> '' then
        begin
          //
          // Procura
          //
          Edit1.Text := StringReplace(Edit1.Text, sValorProduto, '', [rfIgnoreCase]);
          Edit1.Text := StringReplace(Edit1.Text, sQuantidadeProduto, '', [rfIgnoreCase]);

          if (Length(Alltrim(Edit1.Text))=13) and (Copy(AllTrim(Edit1.Text),1,1) <> '2') then
          begin
            //
            Form1.ibDataSet4.Close;
            Form1.ibDataSet4.SelectSQL.Clear;
            Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where REFERENCIA='+QuotedStr(Alltrim(Edit1.Text))+' and coalesce(ATIVO,0)=0');
            Form1.ibDataSet4.Open;
            if Form1.ibDataSet4.FieldByName('REFERENCIA').AsString = Edit1.Text then bFind := True else
            begin
              if Limpanumero(Edit1.Text) = Edit1.Text then
              begin

                // ShowMessage('Teste 01 22140'); // Sandro Silva 2019-01-17

                Display('<NÃO CADASTRADO>','Código de barras não cadastrado');
                Edit1.Text := '';
                Form1.ibDataSet4.Close;
                Form1.ibDataSet4.SelectSQL.Clear;
                Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr('99999')+' and coalesce(ATIVO,0)=0');
                Form1.ibDataSet4.Open;
                Form1.ibDataSet4.EnableControls;
                Abort;
              end else
              begin
                Form1.ibDataSet4.Close;
                Form1.ibDataSet4.SelectSQL.Clear;
                Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where upper(DESCRICAO) like '+QuotedStr(UpperCase(Edit1.Text)+'%')+' and coalesce(ATIVO,0)=0 order by upper(DESCRICAO)');
                Form1.ibDataSet4.Open;
              end;
            end;
            //
          end;
          //
          if not bFind then
          begin
            if (Length(LimpaNumero(Edit1.Text))<=5) and (Length(LimpaNumero(Edit1.Text))=Length(AllTrim(Edit1.Text)) ) then
            begin
              //
              Edit1.Text := StrZero(StrToIntDef(Edit1.Text, 0),5,0);// Sandro Silva 2017-06-29  Edit1.Text := StrZero(StrToInt(Edit1.Text),5,0);
              //
              Form1.ibDataSet4.Close;
              Form1.ibDataSet4.SelectSQL.Clear;
              Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(Edit1.Text))+' and coalesce(ATIVO,0)=0');
              Form1.ibDataSet4.Open;
              //
              if Form1.ibDataSet4.FieldByName('CODIGO').AsString = Edit1.Text then
              begin
                bFind := True
              end
              else
              begin
                //

                //ShowMessage('Teste 01 22181'); // Sandro Silva 2019-01-17

                Display('<NÃO CADASTRADO>','Código não cadastrado');
                Edit1.Text := '';
                //
                Form1.ibDataSet4.Close;
                Form1.ibDataSet4.SelectSQL.Clear;
                Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr('99999')+' and coalesce(ATIVO,0)=0');
                Form1.ibDataSet4.Open;
                Form1.ibDataSet4.EnableControls;
                Abort;
                //
              end;
              //
            end;
          end;
          //
          if not bFind then
          begin
            if Form1.ibDataSet4.Locate('DESCRICAO',AllTrim(Edit1.Text),[]) then
              bFind := True; // União Soldavel 11/2

            if AnsiUpperCase(AllTrim(Edit1.Text)) = AnsiUpperCase(Copy(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString,1,length(AllTrim(Edit1.Text)))) then
              bFind := True;

            if AllTrim(Edit1.Text) = Copy(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString,1,length(AllTrim(Edit1.Text))) then
              bFind := True;

          end;
          //
          if not bFind then
          begin
            //
            // Procura pelo código de barras do produto pesado //
            //
            if Copy(AllTrim(Edit1.Text),1,1) = '2' then
            begin
              //
              Form1.ibDataSet4.Close;
              Form1.ibDataSet4.SelectSQL.Clear;
              Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where REFERENCIA='+QuotedStr(Alltrim(Copy(AllTrim(Edit1.Text),1,7)))+' and coalesce(ATIVO,0)=0');
              Form1.ibDataSet4.Open;
              //
              if (Length(AllTrim(Edit1.Text)) = 13) and (Copy(AllTrim(Edit1.Text),1,1) = '2') and ((UpperCase(AllTrim(Form1.ibDataSet4.FieldByName('MEDIDA').AsString)) = 'KU') or (UpperCase(AllTrim(Form1.ibDataSet4.FieldByName('MEDIDA').AsString)) = 'KG')) then // É produto pesado //
              begin
                if Copy(AllTrim(Edit1.Text),1,7) = AllTrim(Form1.ibDataSet4.FieldByName('REFERENCIA').AsString) then
                begin
                  if sTipoEtiqueta = 'KG' then
                  begin
                    try
                      if UpperCase(AllTrim(Form1.ibDataSet4.FieldByName('MEDIDA').AsString)) = 'KU' then
                      begin
                        fQuantidadeVendida := StrToFloat(Copy(AllTrim(Edit1.Text),8,5));
                      end else
                      begin
                        fQuantidadeVendida := StrToFloat(Copy(AllTrim(Edit1.Text),8,5)) / 1000;
                      end;
                      bFind := True;
                    except bFind := False end;
                  end else
                  begin
                    try
                      fPreco := StrToFloat(Copy(AllTrim(Edit1.Text),8,5)) / 100;
                      bFind := True;
                      if fPreco <> 0 then
                      begin // Não havia sido testado produtos com a unidade de medida KG, apenas KU
                        if (UpperCase(AllTrim(Form1.ibDataSet4.FieldByName('MEDIDA').AsString)) = 'KU') or (UpperCase(AllTrim(Form1.ibDataSet4.FieldByName('MEDIDA').AsString)) = 'KG') then
                        begin
                          fQuantidadeVendida := StrToFloatDef(FormatFloat('0.0000', fPreco / Form1.ibDataSet4.FieldByName('PRECO').AsFloat), (fPreco / Form1.ibDataSet4.FieldByName('PRECO').AsFloat)); // Sandro Silva 2018-12-12 fQuantidadeVendida := fPreco / Form1.ibDataSet4.FieldByName('PRECO').AsFloat;

                          //ShowMessage('Teste 01 22222 ' + FloatToStr(fQuantidadeVendida)); // Sandro Silva 2018-12-13
                        end;
                      end;

                    except bFind := False end;
                    end;
                end;
              end;
            end; // if Copy(AllTrim(Edit1.Text),1,1) = '2' then
          end;
          //
          if not bFind then
          begin
            //
            Form1.ibDataSet4.Close;
            Form1.ibDataSet4.SelectSQL.Clear;
            Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where REFERENCIA='+QuotedStr(Alltrim(Edit1.Text))+' and coalesce(ATIVO,0)=0');
            Form1.ibDataSet4.Open;
            //
            if Form1.ibDataSet4.FieldByName('REFERENCIA').AsString = Edit1.Text then bFind := True else
            begin

              // ShowMessage('Teste 01 22276'); // Sandro Silva 2019-01-17

              Display('<NÃO CADASTRADO>','Código não cadastrado');
              Edit1.Text := '';
              Form1.ibDataSet4.EnableControls;
              Abort;
            end;
            //
          end;
          //
          {Sandro Silva 2022-12-12 Início Unochapeco}
          //
          // Unochapeco-Fernando orientou que fisco não aceita lançamento de produto pesado em mesa. Permite em Conta de Cliente
          //
          if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
          begin
            if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
            begin
              if bFind and (Pos('Mesa', Form1.sMesaOuConta) > 0) then
              begin
                if AnsiUpperCase(Form1.ibDataSet4.FieldByName('MEDIDA').AsString) = 'KG' then
                begin
                  bFind := False;
                  //Display('Produto pesado não permitido para Mesas','Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
                  ShowMessage('Produto pesado não permitido para Mesas');
                end;
              end;
            end;
          end;
          {Sandro Silva 2022-12-12 Final Unochapeco}

          if bFind then
          begin
            //
            // Encontrar uma solução para a situação:
            // - Produto for pesado e tiver estoque menor que Um e maior que Zero será exibido alerta de estoque insuficiente
            // porque sempre está considerando a quantidade a vender como sendo Um
            // A quantidade só será conhecida depois de pesagem feita
            // No futuro mover essa validação da quantidade para após a leitura da pesagem

            if ((Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + QtdCanceladaSemCommit(Form1.ibDataSet4.FieldByName('CODIGO').AsString) - QtdVendaSemCommit(Form1.ibDataSet4.FieldByName('CODIGO').AsString)) < fQuantidadeVendida) and (Form1.ConfNegat = 'Não') then
            begin
              //
              // Verifica se é produto composto
              //
              Form1.IBQuery3.Close;
              Form1.IBQuery3.SQL.Clear;
              Form1.IBQuery3.SQL.Add('select * from COMPOSTO where CODIGO='+QuotedStr(Form1.ibDataSet4.FieldByName('CODIGO').AsString)+' ');
              Form1.IBQuery3.Open;
              //
              if (Form1.ibDataSet4.FieldByName('CODIGO').AsString <> Form1.IBQuery3.FieldByName('CODIGO').AsString)
                and (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then
              begin
                if (Form1.ClienteSmallMobile.ImportandoMobile = False) then // Sandro Silva 2022-08-08 if (ImportandoMobile = False) then
                  Small_InputBox('Alerta','Estoque insuficiente:' + #13 + #13 + 'Não é possível efetuar a venda de "' +
                    Form1.ibDataSet4.FieldByName('DESCRICAO').AsString + '", tem ' +
                    FloatToStr(StrToFloat(FormatFloat('0.000000', Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + QtdCanceladaSemCommit(Form1.ibDataSet4.FieldByName('CODIGO').AsString) - QtdVendaSemCommit(Form1.ibDataSet4.FieldByName('CODIGO').AsString)))) // Sandro Silva 2019-09-23 UnoChapeco FloatToStr(Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + QtdCanceladaSemCommit(Form1.ibDataSet4.FieldByName('CODIGO').AsString) - QtdVendaSemCommit(Form1.ibDataSet4.FieldByName('CODIGO').AsString))
                   + ' ' + Form1.ibDataSet4.FieldByName('MEDIDA').AsString + ' no estoque. Erro 7450' + #13 + #13 + 'Tecle ESC ou pressione OK para vender outro item','');

                Commitatudo(False); // Não é possível efetuar a venda, só tem

                Edit1.Text := '';
                Form1.ibDataSet4.EnableControls;
                Abort;
              end;
            end;
            //
            if (Copy(Form1.ibDataSet4.FieldByName('REFERENCIA').AsString, 1, 2) = '20') and (fQuantidadeVendida = 1) and (FileExists(sAtual + '\pesado.exe')) then // Sandro Silva 2019-07-01 if (Copy(Form1.ibDataSet4.FieldByName('REFERENCIA').AsString, 1, 1) = '2') and (fQuantidadeVendida = 1) and (FileExists(sAtual + '\pesado.exe')) then
            begin
              //
              if (Copy(Edit1.Text, 1, 1) = '2') and (Length(Edit1.Text) > 11) then
              begin
                // Outros não barras interno
              end
              else
              begin
                //
                bPesouAutomatico := False; // Sandro Silva 2019-01-21
                if sBalanca = 'Sim' then
                begin
                  //
                  // Sandro Silva 2021-11-25 bPesouAutomatico := False; // Sandro Silva 2019-01-21
                  if Form1.bBalancaAutonoma = False then
                  begin
                    DeleteFile(aWinDir+'\peso.txt');
                    ShellExecute(0, 'open', 'pesado.exe', '', '', SW_NORMAL);
                    Sleep(1000);

                    //
                    while not FileExists(aWinDir+'\peso.txt') do
                    begin

                    end;
                    Sleep(1000);
                    //
                    Mais1ini  := TIniFile.Create(aWinDir+'\PESO.TXT');
                    if Mais1ini.ReadFloat('BALANCA', 'PESO', 0) > 0 then
                      fQuantidadeVendida := Mais1ini.ReadFloat('BALANCA', 'PESO', 0) * iPeso
                    else
                      fQuantidadeVendida := 0;
                    Mais1Ini.Free;

                  end;

                  //
                  if fQuantidadeVendida = 0 then
                  begin
                    bFind := False; // Qtd zerada não vende na impressora
                    //ShowMessage('Teste 01 21772');// Sandro Silva 2017-11-06
                  end;

                end;
                //
              end;
            end; // if (Copy(Form1.ibDataSet4.FieldByName('REFERENCIA').AsString, 1, 2) = '20') and (fQuantidadeVendida = 1) and (FileExists(sAtual + '\pesado.exe')) then
            //
            if Copy(UpperCase(Form1.ibDataSet4.FieldByName('MEDIDA').AsString),1,2) <> 'UN'  then
            begin
              if (Trim(sQuantidadeProduto) = '') and (Trim(sValorProduto) = '') then // Sandro Silva 2017-02-17 Se não lançou qtd com o produto. Ex.: 0,678*00001
              begin
                if fPreco <> 0 then
                begin
                  try
                    fQuantidadeVendida := StrToFloat(FormatFloat('0.0000', fPreco / Form1.ibDataSet4.FieldByName('PRECO').AsFloat)); // Sandro Silva 2018-12-13 fQuantidadeVendida := fPreco / Form1.ibDataSet4.FieldByName('PRECO').AsFloat;
                  except
                    fQuantidadeVendida := 0; // Sandro Silva 2017-11-03
                  end;
                  //ShowMessage('Teste 01 22328 ' + FloatToStr(fQuantidadeVendida)); // Sandro Silva 2018-12-13
                end;
              end;
            end;
            //
          end else
          begin
            //
            // Mesa ou cupom
            //
            if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then 
            begin

              //ShowMessage('Teste 01 22402'); // Sandro Silva 2019-01-17

              if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
              begin
                Display('<NÃO CADASTRADO>','Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
              end else
              begin
                Display('<NÃO CADASTRADO>','Entre com EAN 13, Código ou Descrição');
              end;
            end
            else
            begin

              //ShowMessage('Teste 01 22415'); // Sandro Silva 2019-01-17

              if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
              begin
                Display('<NÃO CADASTRADO>','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
              end else
              begin
                Display('<NÃO CADASTRADO>','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição');
              end;

            end;

            Edit1.Text := '';
            Form1.ibDataSet4.EnableControls;
            Abort;
            //
          end;
          //
        end;
        //
        if bFind then
        begin
          //
          bPacote := False;
          //
          while not bPacote do
          begin
            try
              //
              Form1.ibDataSet27.Append; // Novo Item
              if (Form1.iMesaAberta <> 0) then
              begin
                if bPesouAutomatico then
                begin
                  sAlteracaRegistro := Form1.ibDataSet27.FieldByName('REGISTRO').AsString;
                  sMesaPesagem      := FormataNumeroDoCupom(Form1.iMesaAberta); // Sandro Silva 2020-10-15 sMesaPesagem      := StrZero(Form1.iMesaAberta, 6, 0);
                end;
              end;

              Form1.ibDataSet27.FieldByname('PEDIDO').AsString     := FormataNumeroDoCupom(Form1.icupom); 
              //
              // Mesa ou cupom Não grava o COO
              //
              if not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01')) then
              begin
                Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom);
                Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); 
              end;

              if (Form1.sModeloECF = '59') or (Form1.sModeloECF_Reserva = '59') then
              begin
                Form1.ibDataSet27.FieldByName('COO').Clear;
                Form1.ibDataSet27.FieldByName('CCF').Clear;
              end;

              if (Form1.sModeloECF = '65') or (Form1.sModeloECF_Reserva = '65') then
              begin
                Form1.ibDataSet27.FieldByName('COO').Clear;
                Form1.ibDataSet27.FieldByName('CCF').Clear;
              end;

              if (Form1.sModeloECF = '99') or (Form1.sModeloECF_Reserva = '99') then
              begin
                Form1.ibDataSet27.FieldByName('COO').Clear;
                Form1.ibDataSet27.FieldByName('CCF').Clear;
              end;

              //
              Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
              Form1.ibDataSet27.FieldByName('DESCRICAO').AsString  := Form1.ibDataSet4.FieldByName('DESCRICAO').AsString;
              Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat  := fQuantidadeVendida; // Produto pesado
              Form1.ibDataSet27.FieldByName('MEDIDA').AsString     := Form1.ibDataSet4.FieldByName('MEDIDA').AsString;

              if (Trim(sValorProduto) <> '') then // Sandro Silva 2017-02-20  if (Trim(sQuantidadeProduto) <> '') and (Trim(sValorProduto) <> '') then // Sandro Silva 2017-02-17 Se não lançou qtd com o produto. Ex.: 0,678*00001
                Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat  := fPreco
              else
                Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat  := Form1.ibDataSet4.FieldByName('PRECO').AsFloat;

              if Trim(Form1.ibDataSet4.FieldByName('CFOP').AsString) <> '' then
                Form1.ibDataSet27.FieldByName('CFOP').AsString := Form1.ibDataSet4.FieldByName('CFOP').AsString;

              //
              if (Trim(sValorProduto) <> '') then // Sandro Silva 2017-02-20 if (Trim(sQuantidadeProduto) <> '') and (Trim(sValorProduto) <> '') then // Sandro Silva 2017-02-17 Se não lançou qtd com o produto. Ex.: 0,678*00001
              begin
                Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := StrToFloat(FormatFloat('0.00', StrToFloat(FloatToStr(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat)))); // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat     := StrToFloat(FormatFloat('0.00', StrToFloat(FloatToStr(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))));
              end
              else
              begin
                if fPreco <> 0 then
                begin
                  if (Copy(UpperCase(Form1.ibDataSet4.FieldByName('MEDIDA').AsString),1,2) <> 'UN') then
                    Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := fPreco // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat := fPreco
                  else
                    Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat := fPreco;
                end else
                begin
                  Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency   := Form1.ibDataSet4.FieldByName('PRECO').AsFloat; // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat   := Form1.ibDataSet4.FieldByName('PRECO').AsFloat;

                  if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') or (sModeloECF = '01') then
                  begin
                    Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat)); // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat     := StrToFloat(FormatFloat('0.00', Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat));

                    if (sModeloECF = '59') then // Resolver problema de arredondamento. SAT arredonda o total e o Frente está truncando
                      Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := StrToFloat(FormatFloat('0.00', StrToFloat(FloatToStr(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))));

                  end;

                end;
              end;
              //
              Edit1.Text := Form1.ibDataSet4.FieldByName('DESCRICAO').AsString;
              bPacote := True;
              //
            except
              //
              CommitaTudo2(True); // Erro na venda do iten
              //
              if Form1.Label_7.Caption <> 'Aguarde, este item está sendo usado...' then
              begin
                Form1.Label_7.Caption := 'Aguarde, este item está sendo usado...';
                Form1.Label_7.Repaint;
              end;
              //
              bPacote := False;
              //
            end;
          end;
          //

          DecodeTime((Time - tInicio), Hora, Min, Seg, cent);
          // Form1.Label13.Hint := 'FIND: '+TimeToStr(Time - tInicio)+' '+StrZero(cent,3,0)+chr(10);

          tInicio := Time;
          Form1.Button1Click(Sender); // //LogFrente('Teste 01 ButtomClick 16329');

          DecodeTime((Time - tInicio), Hora, Min, Seg, cent);
          // Form1.Label13.Hint := Form1.Label13.Hint + 'ECF: '+TimeToStr(Time - tInicio)+' '+StrZero(cent,3,0)+chr(10);

          tInicio := Time;
          //
          try
            //
            // Teste velocidade
            //
            CommitaTudo2(False); // Venda o iten
            //

            if (Form1.ClienteSmallMobile.sVendaImportando = '') then
              Edit1.SetFocus;
            //
            DecodeTime((Time - tInicio), Hora, Min, Seg, cent);
            // Form1.Label13.Hint := Form1.Label13.Hint + 'FDB: '+TimeToStr(Time - tInicio)+' '+StrZero(cent,3,0)+chr(10);

            //
          except end;

          AcertaPendenciaCancelAlteraca; // Lançando item no cupom/mesa Sandro Silva 2019-03-21

          //
          if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
          begin

            if bPesouAutomatico then
              ValidaSeMesaJaTemItens(sAlteracaRegistro, sMesaPesagem);

            //
            if StrToInt(sMesas) > 0 then
            begin
              //
              Commitatudo(False); // Mesas
              DestroiMesas(True);
              //
            end;
            //
          end;
          //
        end;
        //
      end else
      begin
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (Pos(Copy(Edit1.Text+Chr(KEY),1,1),'0123456789') = 0) and (Length(Edit1.Text+Chr(KEY))>1) and (Copy(Edit1.Text,1,1)<>'-')  then
        begin
          //
          // Mostra o BROWSE dos PRODUTOS
          //
          dBgrid2.Visible    := True;
          dbGrid2.Left       := Label13.Left;
          dbGrid2.Top        := AjustaAltura(115);
          DBGrid2.Height     := Form1.Height - DBGrid2.Top - AjustaAltura(5); // Sandro Silva 2016-08-25
          DBGrid2.BringToFront;
          //
        end else
        begin
          //
          dBgrid2.Visible := False;
          //
        end;
        //
        // Mostra o BROWSE (dbgrid com os produtos/serviços)
        //

        if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
        begin
          if (Pos('*',Edit1.Text+Chr(KEY)) <> 0) or (Pos('$',Edit1.Text+Chr(KEY)) <> 0)  then
          begin
            if (Pos(Copy(Edit1.Text+Chr(KEY),Pos('*',Edit1.Text)+1,1),'0123456789') = 0) or (Pos(Copy(Edit1.Text+Chr(KEY),Pos('$',Edit1.Text)+1,1),'0123456789') = 0) then
            begin
              dBgrid2.Visible    := True;
              dbGrid2.Left       := Label13.Left;
              dbGrid2.Top        := AjustaAltura(115);
              dbGrid2.Height     := AjustaAltura(SCREEN_HEIGHT_PADRAO - DBGrid2.Top);
              DBGrid2.BringToFront;
            end;
          end;
        end
        else
        begin
          if (Pos('*',Edit1.Text+Chr(KEY)) <> 0) then
          begin
            if (Pos(Copy(Edit1.Text+Chr(KEY),Pos('*',Edit1.Text)+1,1),'0123456789') = 0) then
            begin
              dBgrid2.Visible    := True;
              dbGrid2.Left       := Label13.Left;
              dbGrid2.Top        := AjustaAltura(115);
              dbGrid2.Height     := AjustaAltura(SCREEN_HEIGHT_PADRAO - DBGrid2.Top);
              DBGrid2.BringToFront;
            end;
          end;
        end; // if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') then
        //
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////
      end;
      //
      // Mesa não pode importar OS e ORCAMENTO
      //
      if not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01')) then
      begin
        //
        // Importar orçamento
        //
        if (Key = Vk_F11) then
        begin
          //
          if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or (sModeloECF = '65') or (sModeloECF = '59') or (sModeloECF = '99')) then // Sandro Silva 2020-12-11  if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or ((sModeloECF = '65') and (PAFNFCe = False)) or (sModeloECF = '59') or (sModeloECF = '99')) then // Sandro Silva 2020-07-01 if ((Copy(Form1.sConcomitante,1,3) = 'DAV') or ((sModeloECF = '65') and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE')) or (sModeloECF = '59')) then
          begin
            //
            Commitatudo(False); // DAV
            //
            try // Sandro Silva 2017-06-30

              if (Form1.sModeloECF = '59') or ((Form1.sModeloECF = '65') and (PAFNFCe = False)) or (Form1.sModeloECF = '99') then // Sandro Silva 2020-12-11 if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then 
                sOrcame := ImportarDaPesquisa('ORCA') // Sandro Silva 2019-07-12
              else
                sOrcame := StrZero(StrToInt('0'+Limpanumero(Small_InputBox('Importar orçamento...','Número do orçamento:',''))),10,0);
              //
              //
              try
                Form1.ibDataSet37.Close;
                Form1.ibDataSet37.SelectSql.Clear;
                Form1.ibDataSet37.SelectSQL.Add('select * from ORCAMENT where PEDIDO='+QuotedStr(sOrcame)+' and PEDIDO<>'+QuotedStr('0000000000')+' ');
                Form1.ibDataSet37.Open;
                Form1.ibDataSet37.First;

                if Form1.ibDataSet37.IsEmpty then
                begin
                  sOrcame := ''; // Sandro Silva 2017-08-04
                  SmallMsg('Nenhum orçamento encontrado');
                end;

              except
                begin
                  sOrcame := ''; // Sandro Silva 2017-08-04
                  SmallMsg('Erro 1 ao importar o orçamento');
                end;
              end;

              if sOrcame <> '' then // Sandro Silva 2017-08-04
              begin
                // Primeiro verifica se todos os produtos orçados tem estoque suficiente
                sInsuficiente := '';
                while not Form1.ibDataSet37.Eof do
                begin
                  if Trim(Form1.ibDataSet37.FieldByName('CODIGO').AsString) <> '' then // 2016-01-19 Sandro Silva Desconsiderar observações e linhas em branco
                    EstoqueSuficiente(Form1.ibDataSet37.FieldByName('CODIGO').AsString, Form1.ibDataSet37.FieldByName('DESCRICAO').AsString, Form1.ibDataSet37.FieldByName('QUANTIDADE').AsFloat, sInsuficiente);
                  Form1.ibDataSet37.Next;
                end; // while not Form1.ibDataSet37.Eof do
                Form1.ibDataSet37.First;

                if Trim(sInsuficiente) <> '' then
                begin
                  if (Form1.ClienteSmallMobile.sVendaImportando = '') then
                    Small_InputBox('Alerta','Não foi possível importar o Orçamento ' + sOrcame + ' : ' + #13 + #10 + #13 + #10 + sInsuficiente + #13 + #13 + 'Tecle ESC ou pressione OK para vender outro item','');
                end
                else
                begin 

                  {Sandro Silva 2021-08-17 inicio
                  bImportarServicoDeOsOrcamento := (Application.MessageBox(Pchar('Importar serviço deste orçamento?'
                                                    + chr(10)
                                                    + Chr(10))
                                                    ,'Atenção',mb_YesNo + mb_DefButton2 + MB_ICONWARNING) = IDYES);
                  }
                  // Ficha 5414
                  bImportarServicoDeOsOrcamento := True; // Para ECF sempre será True

                  {Sandro Silva 2021-09-13 inicio}
                  // Pesquisar se no orçamento existe serviço lançado
                  // Se existir, fazer pergunta para importar ou não
                  Form1.ibDataSet37.First;
                  bTemServicoNoOrcamento := False;
                  while not Form1.ibDataSet37.Eof do
                  begin
                    try
                      if LimpaNumero(Form1.ibDataSet37.FieldByName('CODIGO').AsString) <> '' then
                      begin

                        Form1.ibDataSet4.Close;
                        Form1.ibDataSet4.SelectSQL.Text :=
                          'select * ' +
                          'from ESTOQUE ' +
                          'where CODIGO = ' + QuotedStr(Form1.ibDataSet37.FieldByName('CODIGO').AsString);
                        Form1.ibDataSet4.Open;

                        if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString = '09') then // Não é serviço
                        begin
                          bTemServicoNoOrcamento := True;
                          Break;
                        end;
                      end;
                    except

                    end;
                    Form1.ibDataSet37.Next;
                  end;
                  Form1.ibDataSet37.First;
                  {Sandro Silva 2021-09-13 fim}

                  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Perguntar apenas se não for ECF
                  begin

                    if bTemServicoNoOrcamento then
                      bImportarServicoDeOsOrcamento := (Application.MessageBox(Pchar('Importar serviço deste orçamento?'
                                                        + chr(10)
                                                        + Chr(10))
                                                        ,'Atenção',mb_YesNo + mb_DefButton2 + MB_ICONWARNING) = IDYES);

                    {Sandro Silva 2021-09-13 fim}

                  end;
                  {Sandro Silva 2021-08-17 fim}

                  //
                  // Sandro Silva 2017-08-07 Pode ocorrer de lançar desconto no F3 ou importar OS antes de importar um Orçamento    fDesconto := 0;
                  fDescontoImportacao := 0.00; // Sandro Silva 2017-08-07
                  sProdutoNaoLancado  := ''; //2016-01-19
                  //
                  while not Form1.ibDataSet37.Eof do
                  begin
                    //
                    if UpperCase(AllTrim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString))  = 'DESCONTO' then
                    begin
                      bLiberadoDesconto := True;
                      if Form1.sLiberacao = '3' then
                      begin
                        Small_InputBox('Senha','Informe a senha do administrador para confirmar o DESCONTO:',''); // Sandro Silva 2017-06-30  Form1.Small_InputBox('Senha','Informe a senha do administrador:','');
                        bLiberadoDesconto := (Form12.Caption = 'Liberado');
                      end;
                      if bLiberadoDesconto = False then
                      begin
                        Application.MessageBox(PChar('O desconto não foi importado'), 'Atenção', MB_OK + MB_ICONWARNING);
                      end
                      else
                      begin
                       //
                        fDescontoImportacao := fDescontoImportacao + Form1.ibDataSet37.FieldByName('TOTAL').AsFloat;

                        if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
                        begin
                          bAchouDesconto := False;
                          Form1.ibDataSet27.First;
                          while Form1.ibDataSet27.Eof = False do
                          begin
                            if (Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Desconto')
                              and (Form1.ibDataSet27.FieldByName('ITEM').AsString = '') then
                            begin
                              bAchouDesconto := True;
                              Break;
                            end;
                            Form1.ibDataSet27.Next;
                          end;

                          if bAchouDesconto = False then
                          begin
                            Form1.ibDataSet27.Append; // Desconto
                            Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'BALCAO';
                            Form1.ibDataSet27.FieldByName('PEDIDO').AsString    := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 Form1.ibDataSet27.FieldByName('PEDIDO').AsString    := StrZero(Form1.icupom,6,0);  
                            Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := 'Desconto';
                            Form1.ibDataSet27.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                            Form1.ibDataSet27.FieldByName('HORA').AsString      := FormatDateTime('HH:nn:ss', Time);
                            Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := 1;
                            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := StrToFloat(FormatFloat('0.00',(fDescontoImportacao*-1))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco  // Desconto no total   Form1.ibDataSet27UNITARIO.AsFloat   := (fDescontoImportacao*-1);// Sandro Silva 2017-08-07  (fDesconto*-1);// Sandro Silva 2017-08-07  (fDesconto*-1); // Desconto no total
                            Form1.ibDataSet27.FieldByName('TOTAL').AsFloat      := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Form1.ibDataSet27TOTAL.AsFloat      := Form1.ibDataSet27QUANTIDADE.AsFloat * Form1.ibDataSet27UNITARIO.AsFloat;
                            Form1.ibDataSet27.FieldByName('CAIXA').AsString     := Form1.sCaixa;
                            if (Trim(Form1.ibDataSet37.FieldByName('CLIFOR').AsString) <> '') then
                              Form1.ibDataSet27.FieldByName('CLIFOR').AsString := Trim(Form1.ibDataSet37.FieldByName('CLIFOR').AsString);
                            if (Trim(Form1.ibDataSet37.FieldByName('VENDEDOR').AsString) <> '') then
                              Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := Trim(Form1.ibDataSet37.FieldByName('VENDEDOR').AsString);
                          end
                          else
                          begin
                            Form1.ibDataSet27.Edit; // Desconto

                            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat + (fDescontoImportacao*-1)))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco // Desconto no total Form1.ibDataSet27UNITARIO.AsFloat   := Form1.ibDataSet27UNITARIO.AsFloat + (fDescontoImportacao*-1); // Desconto no total// Sandro Silva 2017-08-07  Form1.ibDataSet27UNITARIO.AsFloat + (fDesconto*-1); // Desconto no total // Sandro Silva 2017-08-07  Form1.ibDataSet27UNITARIO.AsFloat + (fDesconto*-1); // Desconto no total

                            Form1.ibDataSet27.FieldByName('TOTAL').AsFloat      := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Form1.ibDataSet27TOTAL.AsFloat      := Form1.ibDataSet27QUANTIDADE.AsFloat * Form1.ibDataSet27UNITARIO.AsFloat;
                          end;

                          if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
                          begin // Não para NFC-e/SAT. outras validações aos campos
                            Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom);
                            Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); 
                          end;

                          Form1.ibDataSet27.Post;

                          fDesconto := Abs(Form1.ibDataSet27.FieldByName('TOTAL').AsFloat); // Valor do desconto passa ser o acumulado em ALTERACA

                          Form1.Button1Click(Sender);
                        end
                        else
                        begin /// diferente de 59 e 65

                          bAchouDesconto := False;
                          Form1.ibDataSet27.First;
                          while Form1.ibDataSet27.Eof = False do
                          begin
                            if (Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Desconto')
                              and (Form1.ibDataSet27.FieldByName('ITEM').AsString = '') then
                            begin
                              bAchouDesconto := True;
                              Break;
                            end;
                            Form1.ibDataSet27.Next;
                          end;

                          if bAchouDesconto = False then
                          begin
                            Form1.ibDataSet27.Append; // Desconto
                            Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'BALCAO';
                            Form1.ibDataSet27.FieldByName('PEDIDO').AsString    := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 Form1.ibDataSet27.FieldByName('PEDIDO').AsString    := StrZero(Form1.icupom,6,0);
                            Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := 'Desconto';
                            Form1.ibDataSet27.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                            Form1.ibDataSet27.FieldByName('HORA').AsString      := FormatDateTime('HH:nn:ss', Time);
                            Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := 1;
                            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := StrToFloat(FormatFloat('0.00',((fDescontoImportacao*-1))));// Sandro Silva 2019-09-18 ER 02.06 UnoChapeco // Desconto no total Form1.ibDataSet27UNITARIO.AsFloat   := (fDescontoImportacao*-1);// Sandro Silva 2017-08-07  (fDesconto*-1);  // Sandro Silva 2017-08-07  (fDesconto*-1); // Desconto no total
                            Form1.ibDataSet27.FieldByName('TOTAL').AsFloat      := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Form1.ibDataSet27TOTAL.AsFloat      := Form1.ibDataSet27QUANTIDADE.AsFloat * Form1.ibDataSet27UNITARIO.AsFloat;
                            Form1.ibDataSet27.FieldByName('CAIXA').AsString     := Form1.sCaixa;
                            if (Trim(Form1.ibDataSet37.FieldByName('CLIFOR').AsString) <> '') then
                              Form1.ibDataSet27.FieldByName('CLIFOR').AsString := Trim(Form1.ibDataSet37.FieldByName('CLIFOR').AsString);
                            if (Trim(Form1.ibDataSet37.FieldByName('VENDEDOR').AsString) <> '') then
                              Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := Trim(Form1.ibDataSet37.FieldByName('VENDEDOR').AsString);
                          end
                          else
                          begin
                            Form1.ibDataSet27.Edit; // Desconto
                            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat + (fDescontoImportacao*-1)))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Desconto no total Form1.ibDataSet27UNITARIO.AsFloat   := Form1.ibDataSet27UNITARIO.AsFloat + (fDescontoImportacao*-1); //  // Desconto no total// Sandro Silva 2017-08-07  Form1.ibDataSet27UNITARIO.AsFloat + (fDesconto*-1); // Desconto no total
                            Form1.ibDataSet27.FieldByName('TOTAL').AsFloat      := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Form1.ibDataSet27TOTAL.AsFloat      := Form1.ibDataSet27QUANTIDADE.AsFloat * Form1.ibDataSet27UNITARIO.AsFloat;
                          end;

                          if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
                          begin // Não para NFC-e/SAT. outras validações aos campos
                            Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-26 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                            Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); // Sandro Silva 2021-11-26 StrZero(Form1.iCCF,6,0); // StrZero(iCCF,6,0);
                          end;

                          Form1.ibDataSet27.Post;

                          fDesconto := Abs(Form1.ibDataSet27.FieldByName('TOTAL').AsFloat); // Valor do desconto passa ser o acumulado em ALTERACA

                          Form1.Button1Click(Sender);

                        end; // if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') then

                      end; // if bLiberadoDesconto = False then
                      //
                      // Fim importação do desconto
                      //      
                    end else // Não é registro com desconto
                    begin
                      // Não importar parcelas de pagamento/cartão/bandeira/frete
                      if ((Pos('<b>', Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString)) = 0) and (RightStr(Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString), 4) <> '</b>')) // Bandeira do cartão
                        and ((Pos('<c>', Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString)) = 0) and (RightStr(Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString), 4) <> '</c>')) // Venda a cartão
                        and ((Pos('<d>', Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString)) = 0) and (RightStr(Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString), 4) <> '</v>')) // Parcelas
                        and ((Pos('<f>', Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString)) = 0) and (RightStr(Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString), 4) <> '</m>')) // frete
                        and (Trim(Form1.ibDataSet37.FieldByName('CODIGO').AsString) <> '') // 2016-01-19 Sandro Silva Desconsiderar observações e linhas em branco
                      then
                      begin
                        //

                        try
                          Form1.ibDataSet4.Close;
                          Form1.ibDataSet4.SelectSQL.Clear;
                          Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(Form1.ibDataSet37.FieldByName('CODIGO').AsString))+' and coalesce(ATIVO,0)=0 ');
                          Form1.ibDataSet4.Open;
                        except
                          SmallMsg('Erro 2 ao importar o orçamento');
                        end;

                        //Ficha 5414
                        if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') // Não é serviço
                          or (bImportarServicoDeOsOrcamento) // Ou Respodeu para importar serviço
                        then
                        begin

                          //
                          if (Trim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) <> '')
                            and (Form1.ibDataSet4.FieldByName('CODIGO').AsString = Form1.ibDataSet37.FieldByName('CODIGO').AsString) then // 2016-01-19 Sandro Silva Desconsiderar observações e linhas em branco
                          begin

                            try
                              //
                              Form1.ibDataSet27.Append; // Importar ORCAMENTO
                              Form1.ibDataSet27.FieldByName('CODIGO').AsString     := Form1.ibDataSet37.FieldByName('CODIGO').AsString;// Sandro Silva 2018-10-24
                              Form1.ibDataSet27.FieldByName('MEDIDA').AsString     := Form1.ibDataSet4.FieldByName('MEDIDA').AsString; // Sandro Silva 2018-10-24
                              Form1.ibDataSet27.FieldByName('DESCRICAO').AsString  := Form1.ibDataSet37.FieldByName('DESCRICAO').AsString;
                              Form1.ibDataSet27.FieldByName('QUANTIDADE').AsString := Form1.ibDataSet37.FieldByName('QUANTIDADE').AsString;
                              //
                              if Form1.ibDataSet37.FieldByName('TOTAL').AsFloat < 0 then
                              begin
                                Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := Form1.ibDataSet37.FieldByName('TOTAL').asFloat * -1; // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsFloat     := Form1.ibDataSet37.FieldByName('TOTAL').asFloat * -1;
                              end else
                              begin
                                Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat  := Form1.ibDataSet37.FieldByName('UNITARIO').AsFloat;
                                Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := Form1.ibDataSet37.FieldByName('TOTAL').AsFloat; // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsFloat     := Form1.ibDataSet37.FieldByName('TOTAL').AsFloat;
                              end;

                              // Durante testes houve orçamentos que na tabela ORCAMENT, os campos valor unitário e total ficaram nulos e foram importados com valores zerados. Quando acontecer usar o valor atual do produto
                              if Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat = 0 then
                              begin
                                Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat  := Form1.ibDataSet4.FieldByName('PRECO').AsFloat;
                                Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat * Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat; // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsFloat     := Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat * Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat;
                              end;

                              if Trim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) = Trim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString) then
                              begin
                                if Trim(Form1.ibDataSet4.FieldByName('CFOP').AsString) <> '' then
                                  Form1.ibDataSet27.FieldByName('CFOP').AsString := Form1.ibDataSet4.FieldByName('CFOP').AsString;
                              end;
                              //
                              Form1.ibDataSet27.FieldByName('DATA').AsDateTime  := StrToDate(Form1.sDataDoCupom);
                              Form1.ibDataSet27.FieldByName('HORA').AsString    := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
                              Form1.ibDataSet27.FieldByName('TIPO').AsString    := 'BALCAO';
                              Form1.ibDataSet27.FieldByName('CAIXA').AsString   := sCaixa;
                              Form1.ibDataSet27.FieldByName('PEDIDO').AsString  := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); //StrZero(icupom,6,0);
                              Form1.ibDataSet27.FieldByName('DAV').AsString     := StrZero(StrtoInt(sOrcame),10,0);
                              Form1.ibDataSet27.FieldByName('TIPODAV').AsString := 'ORÇAMENTO';

                              if (Trim(Form1.ibDataSet37.FieldByName('CLIFOR').AsString) <> '') then
                              begin
                                Form1.ibDataSet27.FieldByName('CLIFOR').AsString := Trim(Form1.ibDataSet37.FieldByName('CLIFOR').AsString);
                              end;
                              if (Trim(Form1.ibDataSet37.FieldByName('VENDEDOR').AsString) <> '') then
                                Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := Trim(Form1.ibDataSet37.FieldByName('VENDEDOR').AsString);

                              if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
                              begin // Não para NFC-e/SAT. outras validações aos campos
                                Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                                Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); // Sandro Silva 2021-11-29 StrZero(Form1.iCCF,6,0); // StrZero(iCCF,6,0);
                              end;

                              Form1.ibDataSet27.Post;
                            except
                              SmallMsg('Erro 3 ao importar o orçamento');
                            end;
                          //
                          end; // Sandro Silva 2016-02-19
                          //
                          Form1.Button1Click(Sender); // //LogFrente('Teste 01 ButtomClick 16547');

                        end; // Validação para importar ou não serviço lançado em orçamento

                      end;// // Não importar parcelas de pagamento/cartão/bandeira/frete

                    end; // if UpperCase(AllTrim(Form1.ibDataSet37.FieldByName('DESCRICAO').AsString))  = 'DESCONTO' then
                    //
                    Form1.ibDataSet37.Next;
                    //
                  end; // while not Form1.ibDataSet37.Eof do
                  //

                  sConveniado := Form1.ibDataSet37.FieldByName('CLIFOR').AsString;
                  sVendedor   := Form1.ibDataSet37.FieldByName('VENDEDOR').AsString;

                  CommitaTudo(True); // Após importar Form1.ibDataSet37

                  // Depois de importar o orçamento atualiza o número do cupom e caixa que importou
                  Form1.ibDataSet37.Open;
                  Form1.ibDataSet37.First;
                  while Form1.ibDataSet37.Eof = False do
                  begin
                    try

                      {Sandro Silva 2021-08-17 inicio
                      Form1.ibDataSet37.Edit;
                      Form1.ibDataSet37.FieldByName('CAIXA').AsString    := Form1.sCaixa;
                      Form1.ibDataSet37.FieldByName('NUMERONF').AsString := StrZero(iCupom,6,0);
                      Form1.ibDataSet37.Post;
                      }
                      // Ficha 5414
                      // Somente seleciona estoque se escolher bImportarServicoDeOsOrcamento = False
                      bAtualizaOrigemImportacao := True;
                      if bImportarServicoDeOsOrcamento = False then
                      begin
                        Form1.ibDataSet4.Close;
                        Form1.ibDataSet4.SelectSQL.Text :=
                          'select * ' +
                          'from ESTOQUE ' +
                          'where CODIGO = ' + QuotedStr(Form1.ibDataSet37.FieldByName('CODIGO').AsString);
                        Form1.ibDataSet4.Open;

                        if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') // Não é serviço
                          or (bImportarServicoDeOsOrcamento) // Ou Respodeu para importar serviço
                        then
                          bAtualizaOrigemImportacao := True
                        else
                          bAtualizaOrigemImportacao := False;
                      end;

                      if bAtualizaOrigemImportacao then
                      begin
                        Form1.ibDataSet37.Edit;
                        Form1.ibDataSet37.FieldByName('CAIXA').AsString    := Form1.sCaixa;
                        Form1.ibDataSet37.FieldByName('NUMERONF').AsString := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(iCupom,6,0);
                        Form1.ibDataSet37.Post;
                      end;
                      {Sandro Silva 2021-08-17 fim}
                    except
                      Break;
                    end;
                    Form1.ibDataSet37.Next;
                  end;
                  CommitaTudo(True); // Após importar Form1.ibDataSet37

                  if sProdutoNaoLancado <> '' then
                    SmallMsg('Produtos não Lançados: ' + #13 + #13 + sProdutoNaoLancado);

                  //
                  Form2.Edit9.Text := sVendedor;
                  Form2.Edit9Change(Sender); // 2015-07-13

                  if Trim(sConveniado) <> '' then // Sandro Silva 2017-08-04
                  begin
                    Form2.Edit8.Text := sConveniado;

                    Form1.ibDataSet2.Close;
                    Form1.ibDataSet2.SelectSQL.Clear;
                    Form1.ibDataSet2.SelectSQL.Add('select * from CLIFOR where Upper(NOME) like '+QuotedStr(UpperCase(Form2.Edit8.Text)+'%')+' and coalesce(ATIVO,0)=0 and trim(coalesce(NOME,'''')) <> '''' order by NOME');
                    Form1.ibDataSet2.Open;

                    if CpfCgc(LimpaNumero(Form1.ibDataSet2.FieldByName('CGC').AsString)) then
                    begin
                      Form1.sCPF_CNPJ_Validado := ConverteCpfCgc(LimpaNumero(Form1.ibDataSet2.FieldByName('CGC').AsString));
                      if LimpaNumero(Form1.sCPF_CNPJ_Validado) = '' then
                        Form1.sCPF_CNPJ_Validado := '';

                      Form2.Edit2.Text := Form1.sCPF_CNPJ_Validado;
                    end;
                    if Trim(Form1.ibDataSet2.FieldByName('NOME').AsString) <> '' then
                    begin
                      Form2.Edit1.Text  := AllTrim(Form1.ibDataSet2.FieldByname('ENDERE').AsString) + ' ' + AllTrim(Form1.ibDataSet2.FieldByname('COMPLE').AsString);
                      Form2.Edit3.Text  := AllTrim(Form1.ibDataSet2.FieldByname('CIDADE').AsString) + ' - ' + AllTrim(Form1.ibDataSet2.FieldByname('CEP').AsString);
                      Form2.Edit10.Text := AllTrim(Form1.ibDataSet2.FieldByname('EMAIL').AsString);
                    end;

                  end;// if Trim(sConveniado) <> '' then // Sandro Silva 2017-08-04

                  //
                  Form1.ibDataSet37.Close;

                  if (Form1.ClienteSmallMobile.sVendaImportando = '') then
                    Edit1.SetFocus;
                end;
              end; // if sOrcame <> '' then // Sandro Silva 2017-08-04
            finally
              bImportandoDAVorOS := False;
            end;
            //
          end;
          //
        end; // if (Key = Vk_F11) then
        //
        // Importar OS
        //
        if (Key = VK_F12) then
        begin
          //
          if ((Copy(Form1.sConcomitante,1,3) = 'DAV')
            or (sModeloECF = '65') // Sandro Silva 2020-12-11  or ((sModeloECF = '65') and (PAFNFCe = False)) // Sandro Silva 2020-07-01 or ((sModeloECF = '65') and (AnsiUpperCase(ExtractFileName(Application.ExeName)) <> 'PAFNFCE.EXE'))
            or (sModeloECF = '59')
            or (sModeloECF = '99')
            ) then
          begin
            //
            Commitatudo(False); // DAV
            //
            // Importa os Itens da OS
            //
            if (Form1.sModeloECF = '59') or ((sModeloECF = '65') and (PAFNFCe = False)) or (Form1.sModeloECF = '99') then // Sandro Silva 2020-12-11 if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
              sOs :=  ImportarDaPesquisa('OS') // Sandro Silva 2019-07-12
            else
              sOs :=  StrZero(StrToIntDef(Limpanumero(Small_InputBox('Importar OS','Número da OS:','')), 0),10,0);
            //
            // OS
            //
            try
              ibDataSet99.Close;
              ibDataSet99.SelectSQL.Clear;
              ibDataSet99.SelectSQL.Add('select * from OS where NUMERO='+QuotedStr(sOs)+' ');
              ibDataSet99.Open;

              if ibDataSet99.IsEmpty then
              begin
                sOs := '';
                SmallMsg('Nenhuma OS encontrada');
              end;

            except
              begin
                sOs := '';
                SmallMsg('Erro 1 ao importar a OS');
              end;
            end;

            if sOS <> '' then
            begin

              // Ficha 5414
              bImportarServicoDeOsOrcamento := True; // Para ECF sempre será True

              {Sandro Silva 2021-09-13 inicio}

              Form1.ibDataSet35.Close;
              Form1.ibDataSet35.SelectSql.Clear;
              Form1.ibDataSet35.SelectSQL.Add('select * from ITENS003 where NUMEROOS='+QuotedStr(sOs)+' ');
              Form1.ibDataSet35.Open;
              Form1.ibDataSet35.First;

              // Verifica se tem Serviço lançado na OS
              bTemServicoNaOS := False;
              while Form1.ibDataSet35.Eof = False do
              begin

                Form1.ibDataSet4.Close;
                Form1.ibDataSet4.SelectSQL.Text :=
                  'select * ' +
                  'from ESTOQUE ' +
                  'where DESCRICAO = ' + QuotedStr(Form1.ibDataSet35.FieldByName('DESCRICAO').AsString);
                Form1.ibDataSet4.Open;

                if (Form1.ibDataSet4.FieldByName('DESCRICAO').AsString = Form1.ibDataSet35.FieldByName('DESCRICAO').AsString) and
                  (Form1.ibDataSet4.FieldByName('DESCRICAO').AsString <> '') then
                begin

                  if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString = '09') then // Não é serviço
                  begin
                    bTemServicoNaOS := True;
                    Break;
                  end;

                end;

                Form1.ibDataSet35.Next;
              end;
              Form1.ibDataSet35.First;

              ibDataSet16.Close;
              ibDataSet16.SelectSql.Clear;
              ibDataSet16.SelectSQL.Add('select * from ITENS001 where NUMEROOS='+QuotedStr(sOs)+' ');
              ibDataSet16.Open;
              ibDataSet16.First;

              // Verifica se tem Serviço lançado na OS junto com os produtos              
              while not Form1.ibDataSet16.Eof do
              begin
                try
                  if LimpaNumero(Form1.ibDataSet16.FieldByName('CODIGO').AsString) <> '' then
                  begin

                    Form1.ibDataSet4.Close;
                    Form1.ibDataSet4.SelectSQL.Text :=
                      'select * ' +
                      'from ESTOQUE ' +
                      'where CODIGO = ' + QuotedStr(Form1.ibDataSet16.FieldByName('CODIGO').AsString);
                    Form1.ibDataSet4.Open;

                    if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString = '09') then // Não é serviço
                    begin
                      bTemServicoNaOS := True;
                      Break;
                    end;
                  end;
                except

                end;
                Form1.ibDataSet16.Next;
              end;
              Form1.ibDataSet16.First;

              {Sandro Silva 2021-09-13 fim}

              if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Perguntar apenas se não for ECF
              begin

                if bTemServicoNaOS then
                  bImportarServicoDeOsOrcamento := (Application.MessageBox(Pchar('Importar serviço desta OS?'
                                                    + chr(10)
                                                    + Chr(10))
                                                    ,'Atenção',mb_YesNo + mb_DefButton2 + MB_ICONWARNING) = IDYES);


              end;
              {Sandro Silva 2021-08-17 fim}

              {Sandro Silva 2021-09-14 inicio
              ibDataSet16.Close;
              ibDataSet16.SelectSql.Clear;
              ibDataSet16.SelectSQL.Add('select * from ITENS001 where NUMEROOS='+QuotedStr(sOs)+' ');
              ibDataSet16.Open;
              }
              ibDataSet16.First;

              sInsuficiente := '';
              while not ibDataSet16.Eof do
              begin
                if Trim(ibDataSet16.FieldByName('CODIGO').AsString) <> '' then
                  EstoqueSuficiente(ibDataSet16.FieldByName('CODIGO').AsString, ibDataSet16.FieldByName('DESCRICAO').AsString, ibDataSet16.FieldByName('QUANTIDADE').AsFloat, sInsuficiente);
                ibDataSet16.Next;
              end; // while not Form1.ibDataSet37.Eof do

              if Trim(sInsuficiente) <> '' then
              begin
                sOs := ''; // Sandro Silva 2017-08-16 Para não fechar a OS selecionada
                if (Form1.ClienteSmallMobile.sVendaImportando = '') then
                  Application.MessageBox(PChar('Não foi possível importar a OS: ' + #13 + #10 + #13 + #10 + sInsuficiente), 'Atenção', MB_OK + MB_ICONWARNING);
              end
              else
              begin

                ibDataSet99.Close;
                ibDataSet99.SelectSQL.Clear;
                ibDataSet99.SelectSQL.Add('select * from OS where NUMERO='+QuotedStr(sOs)+' ');
                ibDataSet99.Open;
                //    
                //
                fDescontoImportacao := 0.00;

                bImportouOSProdutos := False; // Sandro Silva 2018-05-16
                bImportouOSServicos := False; // Sandro Silva 2018-05-16

                sSituacaoOS := ibDataSet99.FieldByName('SITUACAO').AsString; // Sandro Silva 2021-08-19

                if (ibDataSet99.FieldByName('SITUACAO').AsString = 'Aberta') or (ibDataSet99.FieldByName('SITUACAO').AsString = 'Agendada') then // Sandro Silva 2017-08-08
                begin

                  bLiberadoDesconto := True;

                  if ibDataSet99.FieldByName('DESCONTO').AsFloat > 0 then // Sandro Silva 2017-08-14
                  begin

                    if Form1.sLiberacao = '3' then
                    begin
                      Small_InputBox('Senha','Informe a senha do administrador para confirmar o DESCONTO:',''); // Sandro Silva 2017-06-30  Form1.Small_InputBox('Senha','Informe a senha do administrador:','');
                      bLiberadoDesconto := (Form12.Caption = 'Liberado');
                    end;

                    if bLiberadoDesconto = False then
                    begin
                      Application.MessageBox(PChar('O desconto não foi importado'), 'Atenção', MB_OK + MB_ICONWARNING);
                    end
                    else
                    begin
                      fDescontoImportacao := fDescontoImportacao + ibDataSet99.FieldByName('DESCONTO').AsFloat;
                    end;

                  end;
                  //
                  sConveniado := ibDataSet99.FieldByName('CLIENTE').AsString;
                  sVendedor   := ibDataSet99.FieldByName('TECNICO').AsString;

                  //
                  // Seleciona dados do clifor
                  Form2.Edit9.Text := sVendedor;
                  Form2.Edit8.Text := sConveniado;
                  //
                  ibDataSet16.Close;
                  ibDataSet16.SelectSql.Clear;
                  ibDataSet16.SelectSQL.Add('select * from ITENS001 where NUMEROOS='+QuotedStr(sOs)+' ');
                  ibDataSet16.Open;
                  ibDataSet16.First;
                  //
                  while not ibDataSet16.Eof do
                  begin
                    //
                    if (Trim(ibDataSet16.FieldByName('NUMERONF').AsString) = '') or (sSituacaoOS <> 'Fechada') then // Sandro Silva 2021-08-19 if alltrim(ibDataSet16.FieldByName('NUMERONF').AsString) = '' then // StrZero(Form1.icupom,6,0) then
                    begin
                      if (ibDataSet16.FieldByName('QUANTIDADE').AsFloat <> 0) and (ibDataSet16.FieldByName('UNITARIO').AsFloat <> 0)
                        and (Trim(ibDataSet16.FieldByName('CODIGO').AsString) <> '') then // 2016-01-22 Sandro Silva Desconsiderar observações e linhas em branco
                      begin
                        //
                        try
                          ibDataSet16.Edit;

                          Form1.ibDataSet4.Close;
                          Form1.ibDataSet4.SelectSQL.Clear;
                          Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(ibDataSet16.FieldByName('CODIGO').AsString))+' and coalesce(ATIVO,0)=0 '); // Sandro Silva 2017-08-14  Sempre localizar pelo código
                          Form1.ibDataSet4.Open;

                          // Não importar serviço lançado em itens001 se escolher bImportarServicoDeOsOrcamento = False
                          if bImportarServicoDeOsOrcamento or (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // Sandro Silva 2021-09-14
                          begin
                            //
                            Form1.ibDataSet27.Append; // Importar OS Itens
                            Form1.ibDataSet27.FieldByName('TIPO').AsString       := 'BALCAO';
                            Form1.ibDataSet27.FieldByName('DESCRICAO').AsString  := ibDataSet16.FieldByName('DESCRICAO').AsString;
                            Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat  := ibDataSet16.FieldByName('QUANTIDADE').AsFloat;
                            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat    := ibDataSet16.FieldByName('UNITARIO').AsFloat;
                            if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') then
                              Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := StrToFloat(FormatFloat('0.00', ibDataSet16.FieldByName('TOTAL').AsFloat)) // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsFloat     := StrToFloat(FormatFloat('0.00', ibDataSet16.FieldByName('TOTAL').AsFloat))
                            else
                              Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := ibDataSet16.FieldByName('TOTAL').AsFloat; // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsFloat     := ibDataSet16.FieldByName('TOTAL').AsFloat;
                            Form1.ibDataSet27.FieldByName('DATA').AsDateTime     := StrToDate(Form1.sDataDoCupom);
                            Form1.ibDataSet27.FieldByName('HORA').AsString       := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
                            Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
                            Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                            Form1.ibDataSet27.FieldByName('DAV').AsString        := StrZero(StrtoInt(sOS),10,0);
                            Form1.ibDataSet27.FieldByName('TIPODAV').AsString    := 'OS';

                            if (Trim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) <> '')
                              and (Form1.ibDataSet4.FieldByName('CODIGO').AsString = ibDataSet16.FieldByName('CODIGO').AsString) then // 2017-08-14 Sandro Silva Desconsiderar observações e linhas em branco
                            begin
                              if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // serviços não atera a quantidade
                              begin
                                if ibDataSet16.FieldByName('SINCRONIA').AsFloat > 0 then // Se campo sincronia for maior que 0 é porque o estoque foi movimentado com outro valor que deve ser retornado
                                begin
                                  try
                                    Form1.ibDataSet4.Edit; // Altera a quantidade no estoque quando importa a OS
                                    Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat  := Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + ibDataSet16.FieldByName('SINCRONIA').AsFloat; // Importa OS
                                    Form1.ibDataSet4.Post;
                                  except
                                    on E: Exception do
                                    begin
                                      //Form1.ibDataSet27.FieldByName('TIPO').AsString       := 'LOKED';
                                    end;
                                  end;
                                end; // if ibDataSet16.FieldByName('SINCRONIA').AsFloat > 0 then
                              end;
                              //
                            end;
                            //
                            ibDataSet16.FieldByName('SINCRONIA').AsFloat   := ibDataSet16.FieldByName('QUANTIDADE').AsFloat;
                            //
                            if AllTrim(ibDataSet16.FieldByName('DESCRICAO').AsString) = AllTrim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) then
                            begin
                              if Trim(Form1.ibDataSet4.FieldByName('CFOP').AsString) <> '' then
                                Form1.ibDataSet27.FieldByName('CFOP').AsString := Form1.ibDataSet4.FieldByName('CFOP').AsString;
                            end;

                            if Trim(sConveniado) <> '' then
                            begin
                              Form1.ibDataSet27.FieldByName('CLIFOR').AsString := sConveniado;
                            end;
                            if Trim(sVendedor) <> '' then
                            begin
                              Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := sVendedor
                            end;

                            if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
                            begin // Não para NFC-e/SAT. outras validações aos campos
                              Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                              Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); // Sandro Silva 2021-11-29 StrZero(Form1.iCCF,6,0); // StrZero(iCCF,6,0);
                            end;
                            //
                            try
                              ibDataSet16.Edit;
                              ibDataSet16.FieldByName('NUMERONF').AsString := FormataNumeroDoCupom(Form1.icupom)+'I'; // Sandro Silva 2021-11-29 ibDataSet16.FieldByName('NUMERONF').AsString := StrZero(Form1.icupom,6,0)+'I';
                              ibDataSet16.Post; // Sandro Silva 2019-04-03
                            except

                            end;
                            //
                            Form1.ibDataSet27.Post;
                            Form1.Button1Click(Sender); // //LogFrente('Teste 01 ButtomClick 16698');

                            bImportouOSProdutos := True; // Sandro Silva 2018-05-16  bImportouOS := True; // Sandro Silva 2017-08-14
                          end;
                          //
                        except end;
                        //
                      end;
                    end;
                    //
                    ibDataSet16.Next;
                    //
                  end;

                  //Ficha 5414
                  if (bImportarServicoDeOsOrcamento) // Respodeu para importar serviço
                  then
                  begin
                    //
                    Form1.ibDataSet35.Close;
                    Form1.ibDataSet35.SelectSql.Clear;
                    Form1.ibDataSet35.SelectSQL.Add('select * from ITENS003 where NUMEROOS='+QuotedStr(sOs)+' ');
                    Form1.ibDataSet35.Open;
                    Form1.ibDataSet35.First;
                    //
                    // Importar OS servicos
                    //
                    while not Form1.ibDataSet35.Eof do
                    begin
                      if (Trim(Form1.ibDataSet35.FieldByName('NUMERONF').AsString) = '') or (sSituacaoOS <> 'Fechada') then // Sandro Silva 2021-08-19 if alltrim(Form1.ibDataSet35.FieldByName('NUMERONF').AsString) = '' then // StrZero(Form1.icupom,6,0) then
                      begin
                        //
                        if ((Form1.ibDataSet35.FieldByName('QUANTIDADE').AsFloat <> 0) and (Form1.ibDataSet35.FieldByName('UNITARIO').AsFloat <> 0))
                          and (Trim(Form1.ibDataSet35.FieldByName('DESCRICAO').AsString) <> '') then
                        begin
                          //
                          bServico := True;

                          bISS := True; // Sandro Silva 2018-05-14

                          Form1.ibDataSet4.Close;
                          Form1.ibDataSet4.SelectSQL.Clear;
                          Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where DESCRICAO='+QuotedStr(Alltrim(Form1.ibDataSet35.FieldByName('DESCRICAO').AsString))+'  and coalesce(ATIVO,0)=0 ');
                          Form1.ibDataSet4.Open;

                          if (Trim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) = Trim(Form1.ibDataSet35.FieldByName('DESCRICAO').AsString))
                            and (Trim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) <> '') then
                          begin
                            //
                            Form1.ibDataSet27.Append; // Importar OS servicos
                            Form1.ibDataSet27.FieldByName('DESCRICAO').AsString  := Form1.ibDataSet35.FieldByName('DESCRICAO').AsString;
                            Form1.ibDataSet27.FieldByName('QUANTIDADE').AsString := Form1.ibDataSet35.FieldByName('QUANTIDADE').AsString;
                            Form1.ibDataSet27.FieldByName('UNITARIO').AsString   := Form1.ibDataSet35.FieldByName('UNITARIO').AsString;
                            if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') then
                              Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := StrToFloat(FormatFloat('0.00', Form1.ibDataSet35.FieldByName('TOTAL').AsFloat)) // Sandro Silva 2021-08-18 Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := StrToFloat(FormatFloat('0,00', Form1.ibDataSet35.FieldByName('TOTAL').AsFloat))
                            else
                              Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency  := Form1.ibDataSet35.FieldByName('TOTAL').AsFloat; // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsString   := Form1.ibDataSet35.FieldByName('TOTAL').AsString;
                            Form1.ibDataSet27.FieldByName('DATA').AsDateTime     := StrToDate(Form1.sDataDoCupom);
                            Form1.ibDataSet27.FieldByName('HORA').AsString       := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
                            Form1.ibDataSet27.FieldByName('DAV').AsString        := StrZero(StrtoInt(sOS),10,0);
                            Form1.ibDataSet27.FieldByName('TIPODAV').AsString    := 'OS';
                            //
                            Form1.ibDataSet27.FieldByName('TIPO').AsString       := 'BALCAO';
                            Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
                            Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                            Form1.ibDataSet27.FieldByName('ITEM').AsString       := StrZero(iItem+1,6,0);
                            Form1.ibDataSet27.FieldByName('ALIQUICM').AsString   := 'ISS';
                            //
                            if Trim(Form1.ibDataSet4.FieldByName('DESCRICAO').AsString) = Trim(Form1.ibDataSet35.FieldByName('DESCRICAO').AsString) then
                            begin
                              if Trim(Form1.ibDataSet4.FieldByName('CFOP').AsString) <> '' then
                                Form1.ibDataSet27.FieldByName('CFOP').AsString := Form1.ibDataSet4.FieldByName('CFOP').AsString;

                              Form1.ibDataSet27.FieldByName('CODIGO').AsString         := Form1.ibDataSet4.FieldByName('CODIGO').AsString;
                              Form1.ibDataSet27.FieldByName('CST_PIS_COFINS').AsString := Form1.ibDataSet4.FieldByName('CST_PIS_COFINS_SAIDA').AsString;
                              Form1.ibDataSet27.FieldByName('ALIQ_PIS').AsFloat        := Form1.ibDataSet4.FieldByName('ALIQ_PIS_SAIDA').AsFloat;
                              Form1.ibDataSet27.FieldByName('ALIQ_COFINS').AsFloat     := Form1.ibDataSet4.FieldByName('ALIQ_COFINS_SAIDA').AsFloat;
                            end;

                            if Trim(sConveniado) <> '' then
                            begin
                              Form1.ibDataSet27.FieldByName('CLIFOR').AsString := sConveniado;
                            end;
                            if Trim(sVendedor) <> '' then
                            begin
                              Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := sVendedor
                            end;

                            if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
                            begin // Não para NFC-e/SAT. outras validações aos campos
                              Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0);// StrZero(icupom,6,0);
                              Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); // Sandro Silva 2021-11-29 StrZero(Form1.iCCF,6,0); // StrZero(iCCF,6,0);
                            end;

                            Form1.ibDataSet27.Post;
                            //
                            Form1.Button1Click(Sender); // //LogFrente('Teste 01 ButtomClick 16769');
                            bServico := False;

                            bImportouOSServicos := True; // Sandro Silva 2018-05-16  bImportouOS := True; // Sandro Silva 2017-08-14

                            //
                            try
                              Form1.ibDataSet35.Edit;
                              Form1.ibDataSet35.FieldByName('NUMERONF').AsString := FormataNumeroDoCupom(Form1.icupom)+'I'; // Sandro Silva 2021-11-29 Form1.ibDataSet35.FieldByName('NUMERONF').AsString := StrZero(Form1.icupom,6,0)+'I';
                              Form1.ibDataSet35.Post; // Sandro Silva 2019-04-03
                            except

                            end;
                          end; //
                          //
                        end; // if ((Form1.ibDataSet35.FieldByName('QUANTIDADE').AsFloat <> 0) and (Form1.ibDataSet35.FieldByName('UNITARIO').AsFloat <> 0))
                      end;
                      //
                      Form1.ibDataSet35.Next;
                      //
                    end;
                    //
                    Form1.ibDataSet35.Close;
                  end; // Validação para importar ou não serviço lançado em orçamento

                  //
                  try
                    // Atualizar Situação e NF da OS apenas se importou produtos e serviços
                    // Se usuário escolheu não importar serviço, a OS precisa ficar aberta para poder importar os serviço para a NFS-e
                    if bImportarServicoDeOsOrcamento then
                    begin

                      if bImportouOSProdutos or bImportouOSServicos then // Sandro Silva 2017-08-14
                      begin
                        IBDataSet99.Close;
                        IBDataSet99.SelectSQL.Clear;
                        IBDataSet99.SelectSQL.Add('update OS set SITUACAO='+QuotedStr('Fechada')+' where NUMERO='+QuotedStr(sOs)+' ');
                        IBDataSet99.Open;
                      end;

                      //Quando escolher importar os serviços e produtos, sempre atualizará o número da nota fiscal na tabela OS
                      //Sandro Silva 2021-09-15 if bImportouOSServicos then
                      //begin
                        IBDataSet99.Close;
                        IBDataSet99.SelectSQL.Clear;
                        IBDataSet99.SelectSQL.Add('update OS set NF='+QuotedStr(FormataNumeroDoCupom(Form1.icupom)+'I')+' where NUMERO='+QuotedStr(sOs)+' '); // Sandro Silva 2021-11-29 IBDataSet99.SelectSQL.Add('update OS set NF='+QuotedStr(StrZero(Form1.icupom,6,0)+'I')+' where NUMERO='+QuotedStr(sOs)+' ');
                        IBDataSet99.Open;
                      //end;
                    end;
                    //
                    sOs := '';

                    //
                  except end;
                end
                else
                begin
                  sOs := ''; // Sandro Silva 2017-08-16 Para não fechar a OS selecionada
                  Application.MessageBox(PChar('OS com situação Fechada'), 'Atenção', MB_OK + MB_ICONWARNING);
                end;

                if (fDescontoImportacao <> 0) then // Sandro Silva 2017-08-07  if fDesconto <> 0 then
                begin
                  bAchouDesconto := False;
                  Form1.ibDataSet27.First;
                  while Form1.ibDataSet27.Eof = False do
                  begin
                    if (Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Desconto')
                      and (Form1.ibDataSet27.FieldByName('ITEM').AsString = '') then
                    begin
                      bAchouDesconto := True;
                      Break;
                    end;
                    Form1.ibDataSet27.Next;
                  end;

                  if bAchouDesconto = False then
                  begin
                    Form1.ibDataSet27.Append; // Desconto da OS
                    Form1.ibDataSet27.FieldByname('TIPO').AsString      := 'BALCAO';
                    Form1.ibDataSet27.FieldByname('PEDIDO').AsString    := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 Form1.ibDataSet27.FieldByname('PEDIDO').AsString    := StrZero(Form1.icupom,6,0);
                    Form1.ibDataSet27.FieldByname('DESCRICAO').AsString := 'Desconto';
                    Form1.ibDataSet27.FieldByname('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
                    Form1.ibDataSet27.FieldByname('HORA').AsString      := FormatDateTime('HH:nn:ss', Time);
                    Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat := 1;
                    Form1.ibDataSet27.FieldByname('UNITARIO').AsFloat   := StrToFloat(FormatFloat('0.00',((fDescontoImportacao*-1))));// Sandro Silva 2019-09-18 ER 02.06 UnoChapeco // Desconto no total Form1.ibDataSet27UNITARIO.AsFloat   := (fDescontoImportacao*-1); // Sandro Silva 2017-08-07  (fDesconto*-1); // Desconto no total
                    Form1.ibDataSet27.FieldByname('TOTAL').AsFloat      := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByname('UNITARIO').AsFloat))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Form1.ibDataSet27TOTAL.AsFloat      := Form1.ibDataSet27QUANTIDADE.AsFloat * Form1.ibDataSet27UNITARIO.AsFloat;
                    Form1.ibDataSet27.FieldByname('CAIXA').AsString     := Form1.sCaixa;
                    if (Trim(sConveniado) <> '') then
                      Form1.ibDataSet27.FieldByName('CLIFOR').AsString := sConveniado;
                    if (Trim(sVendedor) <> '') then
                      Form1.ibDataSet27.FieldByName('VENDEDOR').AsString := sVendedor;
                  end
                  else
                  begin
                    Form1.ibDataSet27.Edit; // Desconto
                    Form1.ibDataSet27.FieldByname('UNITARIO').AsFloat   := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByname('UNITARIO').AsFloat + (fDescontoImportacao*-1)))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco // Desconto no total Form1.ibDataSet27UNITARIO.AsFloat   := Form1.ibDataSet27UNITARIO.AsFloat + (fDescontoImportacao*-1); // Sandro Silva 2017-08-07  Form1.ibDataSet27UNITARIO.AsFloat + (fDesconto*-1); // Desconto no total
                    Form1.ibDataSet27.FieldByname('TOTAL').AsFloat      := StrToFloat(FormatFloat('0.00',(Form1.ibDataSet27.FieldByname('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByname('UNITARIO').AsFloat))); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco Form1.ibDataSet27TOTAL.AsFloat      := Form1.ibDataSet27QUANTIDADE.AsFloat * Form1.ibDataSet27UNITARIO.AsFloat;
                  end;

                  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
                  begin // Não para NFC-e/SAT. outras validações aos campos
                    Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                    Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); // Sandro Silva 2021-11-29 StrZero(Form1.iCCF,6,0); // StrZero(iCCF,6,0);
                  end;

                  Form1.ibDataSet27.Post;

                  fDesconto := Abs(Form1.ibDataSet27.FieldByname('TOTAL').AsFloat); // Valor do desconto passa ser o acumulado em ALTERACA

                end;
                //
                if (Form1.ClienteSmallMobile.sVendaImportando = '') then
                  Edit1.SetFocus;
                //
              end; // if Trim(sInsuficiente) <> '' then
            end; // if sOS <> '' then
          end;
          //
          CommitaTudo(True); // Após importar ibDataSet16

          bImportandoDAVorOS := False;

        end; // if (Key = VK_F12) then
        //
        // OS FIM
        //
      end;
    end;
    //
    Form1.ibDataSet4.EnableControls;
    //
  end;
  //
  // Mesa ou cupom
  //
  if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
  begin
    if Key = VK_ESCAPE then
      Form1.Button8Click(Sender); // Corta o papel, commita, etc e tal, fecha a tela da mesa do cupom status das mesas, zeresima

    if bPesouAutomatico then
    begin
      // Sandro Silva 2021-11-25 bPesouAutomatico := False;
      ImprimePesagemAutonoma(FormataNumeroDoCupom(Form1.icupom)); // ImprimePesagemAutonoma(StrZero(icupom,6,0));
    end;

  end else
  begin
    if Key = VK_ESCAPE then
    begin
      if dbGrid2.Visible then
      begin
         Label_10.Caption := '';
         Edit1.Text       := '';
         dbGrid2.Visible := False;
      end else
      begin
        Button7Click(Sender);
      end;
    end;
  end;
  //
  if Key = VK_F1 then
    HH(Handle, PChar(ExtractFilePath(Application.ExeName) + 'retaguarda.chm' + '>Ajuda Small'), HH_Display_Topic, Longint(PChar(sAjuda)));
  if (Key = VK_BACK) or (Key = VK_DELETE) then
    if AllTrim(Edit1.Text) = '' then
      fQuantidadeVendida := 1; // P/Resolver o problema quando digita *2 depois apaga

  if (Key = VK_BACK) then // Para evitar problema de digitar a pesquisa e apagar todo o texto. Fica mostrando a imagem do último produto com imagem exibido
    if Trim(Edit1.Text) = '' then
      MostraALogo(True, False); // Sandro Silva 2018-04-26  MostraALogo(True);

  if Key = VK_F5 then
  begin
    if (not dbGrid2.Visible) and (DBGrid1.Visible = False) then
    begin

      DeleteFile(Form1.sAtual + '\F9.TXT');
      ShellExecute( 0, 'Open','consulta.exe','', '', SW_SHOW);

      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // Sandro Silva 2018-06-25
      begin

        Sleep(100);

        while ConsultaProcesso('CONSULTA.exe') do
        begin
          Sleep(50);
        end;

        if FileExists(Form1.sAtual + '\F9.TXT') then
        begin
          // Executa o evento do botao F9
          Form1.touch_F9Click(Form1.touch_F9);
          Deletefile(Form1.sAtual + '\F9.TXT');
        end;

      end; // if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') then // Sandro Silva 2018-06-25

      Commitatudo(False); // Consulta

    end;

  end;
  //
  // Mesa ou cupom
  //
  if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
  begin
    iMesaReserva := Form1.iMesaAberta; // Sandro Silva 2021-02-18
    //
    if Key = VK_F2 then SmallMsg('Tecle <ESC> para fechar a '+sMesaOuConta+' '+Alltrim(IntToStr(Form1.iMesaAberta))+' que está aberta.');
    if Key = VK_F4 then
    begin
      if Form1.Confernciademesa1.Enabled then Form1.Confernciademesa1Click(Sender);
    end;
    //
    //Pressionou F3, F7 ou pressionou F9 e estão cupom ou mesa aberta
    if (Key = VK_F3) or (Key = VK_F7) or ((Key = VK_F9) and Form1.Memo1.Visible) then // Sandro Silva 2021-09-08 if (Key = VK_F3) or (Key = VK_F7) then
    begin
      Form1.bFechaRapidoCartao := False; // Sandro Silva 2021-09-08
      //
      if sStatusECF_RES = 'CAIXA LIVRE' then // Abre cupom
      begin
        //
        Form1.Button8Click(Sender); // Corta o papel, commita, etc e tal, fecha a tela da mesa do cupom status das mesas, zeresima
        //
        if Copy(Form1.sConcomitante,1,2) = 'OS' then
        begin
          Form1.ibQuery1.Close;
          Form1.ibQuery1.SQL.Clear;
          Form1.ibQuery1.SQL.Add('select max(SEQUENCIALCONTACLIENTEOS) as SEQUENCIALCONTACLIENTEOS from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' '); // Sandro Silva 2021-11-29 Form1.ibQuery1.SQL.Add('select max(SEQUENCIALCONTACLIENTEOS) as SEQUENCIALCONTACLIENTEOS from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' ');
          Form1.ibQuery1.Open;

          sSEQUENCIALCONTACLIENTEOS := Form1.ibQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString;// Sandro Silva 2017-12-27 Polimig  sSEQUENCIALCONTACLIENTEOS := Right(StrZero(Form1.icupom,6,0), 3) + Form1.ibQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString;
        end;

        Form1.ibQuery1.Close;
        Form1.ibQuery1.SQL.Clear;
        Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Sandro Silva 2021-11-29 Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM');
        Form1.ibQuery1.Open;

        //SmallMsg('Teste 01 1 ' + Form1.ibQuery1.SQL.Text);

        //
        if AllTrim(Form1.ibQuery1.FieldByName('CAIXA').AsString) <> '' then
        begin
          sMensagemMesaConferida := 'ECF: '+Form1.ibQuery1.FieldByName('CAIXA').AsString+' - Conferencia de '+sMesaOuConta+' - CER: '+Form1.ibQuery1.FieldByName('CCF').AsString+' COO: '+Form1.ibQuery1.FieldByName('COO').AsString;

          if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
            sMensagemMesaConferida := 'PDV: '+Form1.ibQuery1.FieldByName('CAIXA').AsString+' - Conferencia de '+sMesaOuConta;

        end else
        begin
          if Pos('OS', Form1.sConcomitante) > 0 then
          begin// OS mínimo 10 para número da conta

            sMensagemMesaConferida := sMesaOuConta+' '+ sSEQUENCIALCONTACLIENTEOS +' SEM EMISSAO DE CONFERENCIA DE '+UpperCase(sMesaOuConta);
          end
          else
          begin
            sMensagemMesaConferida := 'Consumo da '+sMesaOuConta+' '+Form1.ibQuery1.FieldByName('PEDIDO').AsString+' SEM EMISSAO DE CONFERENCIA DE '+UpperCase(sMesaOuConta);
          end;
        end;

        //
        Form1.sModeloECF := Form1.sModeloECF_Reserva;
        Form1.Button2Click(Sender); // Abre um novo cumpom
        //
        if Form1.Label_10.Caption = 'EM VENDA' then
        begin
          //

          //Form1.Button2Click(Sender) fechou a query
          //SmallMsg('Teste 01 2 ' + Form1.ibQuery1.SQL.Text + #13 + BoolToStr(Form1.ibQuery1.Active));

          {Sandro Silva 2021-02-18 inicio}
          if (AnsiContainsText(Form1.ibQuery1.SQL.Text, 'from ALTERACA') = False) or
            (Form1.ibQuery1.Active = False) then
          begin
            // Query com itens da mesa foi fechada e executado outro comando sql
            // Seleciona os dados a partir de iMesareserva
            Form1.ibQuery1.Close;
            Form1.ibQuery1.SQL.Clear;
            Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(iMesaReserva))+' order by ITEM'); // Sandro Silva 2021-12-01 Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(iMesaReserva,6,0))+' order by ITEM');
            Form1.ibQuery1.Open;
          end;
          {Sandro Silva 2021-02-18 fim}

          if Form1.ibQuery1.Active = False then
          begin

            //SmallMsg('Teste 01 3 Fechado ' + Form1.ibQuery1.SQL.Text + #13 + BoolToStr(Form1.ibQuery1.Active));

            Form1.ibQuery1.Close;
            Form1.ibQuery1.SQL.Clear;
            Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' order by ITEM'); // Sandro Silva 2021-11-29 Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.icupom,6,0))+' order by ITEM');
            Form1.ibQuery1.Open;
          end;

          Form1.ibQuery1.First;
          while not Form1.ibQuery1.Eof do
          begin
            //
            Form1.ibDataSet4.Close;
            Form1.ibDataSet4.SelectSQL.Clear;
            Form1.ibDataSet4.Selectsql.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Form1.ibQuery1.FieldByName('CODIGO').AsString)+' ');
            Form1.ibDataSet4.Open;
            //
            Form1.ibDataSet27.Close;
            Form1.ibDataSet27.SelectSQL.Clear;
            Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where REGISTRO='+QuotedStr(Form1.ibQuery1.FieldByName('REGISTRO').AsString)+' ');
            Form1.ibDataSet27.Open;
            //
            Form1.ibDataSet27.Edit;
            Form1.ibDataSet27.FieldByName('DATA').AsDateTime     := StrToDate(sDataDoCupom);
            Form1.ibDataSet27.FieldByName('HORA').AsString       := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
            Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
            Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
            if alltrim(Form1.ibDataSet27.FieldByName('COO').AsString) = '' then Form1.ibDataSet27.FieldByName('COO').AsString        := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
            Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(Form1.iCCF); // Sandro Silva 2021-11-29 StrZero(Form1.iCCF,6,0); // StrZero(iCCF,6,0);

            if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
            begin
              Form1.ibDataSet27.FieldByName('COO').AsString := '';
              Form1.ibDataSet27.FieldByName('CCF').AsString := ''
            end;
            //
            Edit1.Text := Form1.ibDataSet27.FieldByName('DESCRICAO').AsString;
            //
            Form1.Button1Click(Sender);// Vende o item // //LogFrente('Teste 01 ButtomClick 16979');
            //
            if Form1.ibDataSet27.FieldByName('VENDEDOR').AsString = '<cancelado>' then  // Item cancelado
            begin
              Edit1.Text := '-'+IntToStr(Form1.ibDataSet27.FieldByName('ITEM').AsInteger);
              Form1.Button11Click(Sender); // CalcelaItenN
              Edit1.Text := '';
            end
            else
            begin

              if Form1.ibDataSet27.FieldByName('VENDEDOR').AsString <> '' then // Seleciona o vendedor informado na mesa/conta cliente/conta cliente OS
                Form2.Edit9.Text := Form1.ibDataSet27.FieldByName('VENDEDOR').AsString;

            end;
            //
            CommitaTudo2(False); // Venda o iten
            //
            Form1.ibQuery1.Next;
            //
          end;

          // Ficha 4369
          // Verifica se algum produto ficou na mesa porque não pode ser vendido no cupom
          // Ajusta a ordem dele na mesa para evitar problema quando realizar lançamento de outros itens na mesa
          Form1.ibDataSet27.Close;
          Form1.ibDataSet27.SelectSQL.Clear;
          Form1.ibDataSet27.SelectSQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(Form1.ibQuery1.FieldByName('PEDIDO').AsString)+' order by ITEM');
          Form1.ibDataSet27.Open;
          while Form1.ibDataSet27.Eof = False do
          begin
            Form1.ibDataSet27.Edit;
            Form1.ibDataSet27.FieldByName('ITEM').AsString := StrZero(Form1.ibDataSet27.RecNo, 6, 0);
            Form1.ibDataSet27.Post;
            Form1.ibDataSet27.Next;
          end;
          CommitaTudo2(False); // Atualiza ordem itens não puderam ser lançados no cupom durante fechamento mesa
          //
          if Form1.sConcomitante = 'OS'+LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) then
          begin
            Form1.ibQuery1.Close;
            Form1.ibQuery1.SQL.Clear;
            Form1.ibQuery1.SQL.Add('delete from CONTAOS where CONTA='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+' '); // Sandro Silva 2021-11-29 Form1.ibQuery1.SQL.Add('delete from CONTAOS where CONTA='+QuotedStr(StrZero(Form1.icupom,6,0))+' ');
            Form1.ibQuery1.Open;
          end;
          //
        end else
        begin
          if Form1.sModeloEcf <> '02' then // Sandro Silva 2016-03-03
            SmallMsg('Não foi possível emitir o cupom fiscal. Verifique: Se o ECF esta conectado e autorizado; Se não existe uma redução Z pendente.')
        end;
        //
        {Sandro Silva 2021-09-08 inicio
        if (Key = VK_F7) and (bFechandoCupom = False) then
        begin
          bF12 := True;
          bFechandoCupom := True; // Sandro Silva 2016-02-10 Controlar que pressione F7 durante o fechamento do cupom e cancela a venda na impressora
        end;
        //
        Button18Click(Sender);
        }
        if (Key = VK_F9) and Form1.Memo1.Visible then
        begin
          //Pressionou F9 e está fechando venda com mesa aberta
          FechaVendaRapidaFormaPagamentoCartao;
        end
        else
        begin
          if (Key = VK_F7) and (bFechandoCupom = False) then
          begin
            bF12 := True;
            bFechandoCupom := True; // Sandro Silva 2016-02-10 Controlar que pressione F7 durante o fechamento do cupom e cancela a venda na impressora
          end;
          //
          Button18Click(Sender);
        end;
        {Sandro Silva 2021-09-08 fim}
        //
      end else
      begin
        //
        // SmallMsg(sStatusECF_RES);
        //
      end;
    end;
    //
  end else
  begin
    //
    // Mesa ou cupom
    //
    if StrToInt(sMesas) > 0 then
    begin

      if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then
      begin
        // Atualizar as mesas quando mudar de página, mostrando o que foi lançado em outros terminais
        if (sStatusECF_RES = 'CAIXA LIVRE') and (DBGrid1.CanFocus = False) then
        begin
          if (Key = VK_DOWN) or (Key = VK_UP) then
          begin
            Commitatudo(True); // Rolagem das mesas
          end;
        end;
      end;

      //
      if Key = VK_DOWN  then
      begin
        iPagina := iPagina + 1;
        if iPagina > (StrToInt(Form1.sMesas) div 16)+1 then
          iPagina := (StrToInt(sMesas) div 16)+1
        else
        begin
          Mesas(StrToInt(sMesas));
        end;
        //
        // SmallMsg(IntToStr(iPagina));
        //
      end;
      if Key = VK_UP then
      begin
        //
        iPagina := iPagina -1;
        if iPagina = 0 then
          iPagina := 1
        else
        begin
          Mesas(StrToInt(sMesas));
        end;

      end;
      //
    end;
    //
    if Key = VK_F10 then
      Button9Click(Sender);
    if Key = VK_F2 then
      if Button2.Enabled then
        Button2Click(Sender);
    if Key = VK_F3 then
      if Button18.Enabled then
        Button18Click(Sender);
    //
    if Key = VK_F4 then
    begin
      //
      if not Form1.Memo1.Visible then // Quando tem cupom aberto não abre
      begin

        if StrToInt(Form1.sMesas) <> 0 then
        begin
          //
          if Copy(Form1.sConcomitante,1,2) = 'OS' then
            Form1.iMesaAberta := StrToIntDef('0' + Small_InputComboBoxPadrao('Abrir '+sMesaOuConta,'Selecione ' + sMesaOuConta + ':', '', tiInfoComboContaClienteOS), 0)
          else
            Form1.iMesaAberta := StrToIntDef('0'+Small_InputBox('Abrir '+sMesaOuConta,'Abrir '+sMesaOuConta+' número: ',''), 0);

          if (Form1.iMesaAberta <=0) or (Form1.iMesaAberta>StrToInt(Form1.sMesas)) then
          begin
            SmallMsg(sMesaOuConta+' inválida');
          end else
          begin
            //Evitando problema de não exibir itens lançados nas mesas por 2 terminais diferentes. Um não exibe os dados do outro na primeira abertura da mesa. Ver com Gian/Fernanda}
            Commitatudo(True);  // Antes abrir mesa
            Form1.sModeloECF := '01';
            Button2Click(Sender);
          end;
          //
        end;

      end;
      //
    end;
    //
    if bFechandoCupom = False then
    begin
      if Key = VK_F6 then
      begin
        if Button4.Enabled then
        begin
          Button4Click(Sender)
        end
        else
        begin
          //Sandro Silva 2021-08-06  SmallMsg('Não é possível cancelar o último cupom.');

          {Sandro Silva 2022-01-11 inicio
          if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
          begin
            GerenciadordeNFCe1Click(GerenciadordeNFCe1);
          end
          else
            SmallMsg('Não é possível cancelar o último cupom.');
          }
          SmallMsg('Não é possível cancelar o último cupom.');
          {Sandro Silva 2022-01-11 fim}
        end;
      end;

      if Key = VK_F9 then
      begin

        {Sandro Silva 2021-09-08 inicio
        Button13Click(Sender);
        }
        if (not Form1.Memo1.Visible) then // Quando tem cupom aberto não
        begin
          Button13Click(Sender);
        end
        else
        begin
          FechaVendaRapidaFormaPagamentoCartao;
        end;
        {Sandro Silva 2021-09-08 fim}

      end;
      if Key = VK_F8 then
        if Button18.Enabled then
          Button6Click(Sender);
      //
      if Key = VK_F7 then
      begin
        if Button18.Enabled then
        begin
          bF12 := True;
          bFechandoCupom := True; // Sandro Silva 2016-02-10 Controlar que pressione F7 durante o fechamento do cupom e cancela a venda na impressora
          Button18Click(Sender);
        end;
      end;
    end;
    //
  end;
  //
  Form1.ibQuery1.Close;
  //
end;

procedure TForm1.ibDataSet27NewRecord(DataSet: TDataSet);
begin
  Form1.ibDataSet27.FieldByName('REGISTRO').AsString := sProximo27;
end;

procedure TForm1.ibDataSet7NewRecord(DataSet: TDataSet);
begin
  DataSet.FieldByName('REGISTRO').AsString := sProximo;
  Dataset.FieldByName('NUMERONF').AsString := CupomComCaixaFormatado;
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  I : Integer;
  fQuantidadeAnterior, fAntes  : Double;
  sDescricao, sOP, sT : String;
  sUnidadeDeMedida : String;
  sCodigo, sLicenca, sMessage : String;
  bVenda : boolean;
  rDesconto : Real;
  Mais1ini  : TIniFile;
  sTipoPermissao: String; // Sandro Silva 2017-06-29 Importa
  iSEQUENCIALCONTACLIENTEOS: Int64; // Sandro Silva 2017-12-15
  sCasasDecimaisUnitario: String; // Sandro Silva 2019-05-23 
begin
  //
  // Senha para desconto
  //
  sTipoPermissao := ''; // Sandro Silva 2017-06-29 Importa  
  if (sLiberacao = '3') then
  begin

    if (Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat < (ibDataSet4.FieldByName('PRECO').AsFloat - 0.001)) and
      (Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> 'Desconto') then
    begin
      //
      if Form1.ClienteSmallMobile.ImportandoMobile // Sandro Silva 2022-08-08 if (ImportandoMobile)
        and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) then
      begin
        if Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> 'Desconto' then // Sandro Silva 2016-02-19
          SmallMsg('Venda não permitida para valor unitário abaixo do preço de venda ' + #13 + #13 +
                   'Solicite ao operador do PDV para desmarcar a opção Senha de Administrador, nas configurações ' + Form1.sTipoDocumento)
        else
          SmallMsg('Desconto não permitido');
      end
      else
      begin
        if Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> 'Desconto' then // Sandro Silva 2016-02-19
        begin
          sTipoPermissao := 'PRECO<';
          Small_InputBox('Senha','Informe a senha do administrador para confirmar o VALOR UNITÁRIO abaixo do preço de venda:','');
        end;
      end;
      //
      if Form12.Caption <> 'Liberado' then
      begin
        Form1.Edit1.Text := '';// Sandro Silva 2017-06-29

        if (sTipoPermissao = 'PRECO<') or (sTipoPermissao = '<>') then
        begin
          if (Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> 'Desconto') then
          begin
            try /// Sandro Silva 2020-05-05
              Form1.ibDataSet27.Delete;
            except
            end;
          end;
          Exit // Sai do Button1Click mas continua a importação do orçamento. Abort para a importação
        end
        else
          Abort;
      end;
      //
      //
    end;
  end;
  //
  // Senha para desconto
  //
  if not (Form1.ibDataSet27.State in ([dsEdit, dsInsert])) then Form1.ibDataSet27.Edit;

  if (sModeloECF <> '59') and (sModeloECF <> '65') and (sModeloECF <> '99') and (sModeloECF <> '01') then // 2015-08-06 Somente para outros
    Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := TruncaDecimal(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat, Form1.iTrunca) // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat := TruncaDecimal(ibDataSet27QUANTIDADE.AsFloat * ibDataSet27UNITARIO.AsFloat, Form1.iTrunca)
  else
  begin
    Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := StrToFloat(FormatFloat('0.00', Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat)); // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat := StrToFloat(FormatFloat('0.00', ibDataSet27QUANTIDADE.AsFloat * ibDataSet27UNITARIO.AsFloat));
    if (sModeloECF = '59') then // Resolver problema de arredondamento. SAT arredonda o total e o Frente está truncando
    begin
      Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := StrToFloat(FormatFloat('0.00', StrToFloat(FloatToStr(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat)))); // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat := StrToFloat(FormatFloat('0.00', StrToFloat(FloatToStr(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat))));
      if indRegraSAT(ibDataSet4.FieldByName('CFOP').AsString) = 'T' then // CFOP para combustível tem valor total truncado pelo SAT
        Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency := TruncaValor(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat);
    end;
  end;

  //
  if Form1.sDataDoCupom <> DateToStr(Date) then
  begin
    //
    if not TestaTudo(True) then  // Venda de item - Quando mudou a data
    begin
      Abort;
    end;
    //
  end;
  //
  // Tolerancia de 15 minutos para  + ou -
  //
  try
    if  Abs(((StrToInt(Copy(TimeToStr(Time),1,2))*60*60) // Hora
          +(StrToInt(Copy(TimeToStr(Time),4,2))*60)    // Minuto
          +(StrToInt(Copy(TimeToStr(Time),7,2))))      // Segundo
       -(
          (StrToInt(Copy(sHoraDoCupom,11,2)))        // Segundo
        + (StrToInt(Copy(sHoraDoCupom,9,2))*60)      // Minuto * 60
        + (StrToInt(Copy(sHoraDoCupom,7,2))*60*60))) // Hora   * 60 * 60
         >= 900                                // Maior que 15 * 60 = 900
    then
    begin
      if not TestaTudo(True) then // Quando tem diferenca na hora +15 -15
      begin
       Abort;
      end;
    end;
  except SmallMsg('Entre em configurações regionais e configure a hora no formato 00:00:00') end;
  //
  rDesconto := 0;
  bVenda    := False;
  fAntes    := Form1.fTotal;
  //
  if ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01'))
    or (Consumo = False) // 2015-09-16
  then
  begin
    if Trim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> 'Desconto' then
    begin
      Label_11.Caption := Right('          '+Form1.ibDataSet27.FieldByName('QUANTIDADE').AsString,10);
      Label_12.Caption := Format('%10.2n',[Form1.ibDataSet27.FieldByName('TOTAL').AsFloat]);
    end;
  end;
  Label_13.Caption := Format('%10.2n',[Form1.fTotal]);
  //
  Form1.Repaint;
  //
  if (Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat > 0) and (Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat > 0) then // Não entrar aqui se for desconto
  begin
    //
    if not (Form1.ibDataSet27.State in ([dsEdit, dsInsert])) then Form1.ibDataSet27.Edit;
    // -------------------------------------------------------------- //
    // Impressora fiscal                                              //
    // -------------------------------------------------------------- //
    if not bServico then
    begin
      //
      bISS := False;
      //
      begin
        //
        sOP := '';
        sT  := '';
        //
        if AllTrim(ibDataSet4.FieldByName('ST').AsString) <> '' then // Se o ST não estiver em branco   //
        begin                                    // Procurar na tabela de ICM para  //
          //
          IbDataSet14.Close;                         // saber qual a aliquota associada //
          IbDataSet14.SelectSQL.Clear;
          IbDataSet14.SelectSQL.Add('select * from ICM where ST='+QuotedStr(ibDataSet4.FieldByName('ST').AsString));
          IbDataSet14.Open;
          //
          if IbDataSet14.FieldByName('ISS').AsFloat <> 0 then
          begin
            bISS := True;
            try
              // Não estiver cadastrado
              sOP  := Alltrim(StrZero( IbDataSet14.FieldByName('ISS').AsFloat*100,4,0));
              if Form1.sModeloECF = '15' then
              begin
                sT := 'Sa';// Convênio 85/01

                //ShowMessage('Teste 1 25816 ' + sT); // Sandro Silva 2018-10-10

                if AnsiContainsText(Form1.sModeloFabricante, 'T800') or AnsiContainsText(Form1.sModeloFabricante, 'T900') then
                begin  // Convênio 09/09
                  try
                    Form1.sOrdemAliquotaISS := OrdemAliquotaISSECF(True);

                    if Form1.sOrdemAliquotaISS <> '' then
                      sT := 'S' + Chr(96 + StrToInt(Form1.sOrdemAliquotaISS));

                  except
                    sT := 'Sa';
                  end;

                end; // if (AnsiContainsText(Form1.sModeloFabricante, 'T800') = False) and (AnsiContainsText(Form1.sModeloFabricante, 'T900') = False) then

              end; // if Form1.sModeloECF = '15' then
              //
            except sOP  := '' end;
          end else
          begin
            bISS := False;
            if IbDataSet14.FieldByName('ST').AsString = ibDataSet4.FieldByName('ST').AsString then  // Pode ocorrer um erro    //
            begin                                             // se o estado do emitente //
              try                                             // Não estiver cadastrado  //
                if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
                  sOP := StrZero( (IbDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100),4,0)
                else
                  sOP := StrZero( (IbDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100) / 100 * IbDataSet14.FieldByName('BASE').AsFloat ,4,0); // Sandro Silva 2019-03-06  Por que está reduzindo a alíquota conforme a base? Deveria ser o valor reduzido
              except sOP  := '' end;
            end;
          end;
          //
          //
        end;
        //
        if sOP = '' then // Se o sOP continuar em branco é porque não estava cadastrado //
        begin            // na tabela de ICM ou estava em branco                        //
          //
          IbDataSet14.Close;                         // saber qual a aliquota associada //
          IbDataSet14.SelectSQL.Clear;
          IbDataSet14.SelectSQL.Add('select * from ICM where CFOP='+QuotedStr('5102')+' or CFOP='+QuotedStr('6102')+'');
          IbDataSet14.Open;
          //
          if (AllTrim(IbDataSet14.FieldByName('CFOP').AsString) = '5102') or (AllTrim(ibDataSet14.FieldByName('CFOP').AsString) = '6102') then
          begin
            try
              if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
                sOP := StrZero( (IbDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100), 4, 0)
              else
                sOP := StrZero( (IbDataSet14.FieldByName(ibDataSet13.FieldByName('ESTADO').AsString+'_').AsFloat * 100) / 100 * IbDataSet14.FieldByName('BASE').AsFloat ,4,0); // Sandro Silva 2019-03-06  Por que está reduzindo a alíquota conforme a base? Deveria ser o valor reduzido
            except sOP  := '' end;
          end;
          //
        end;
        //
        // ---------------------------------------------------------------------- //
        // sAliquotas contem a tabela de aliquotas gravadas na impressora fiscal, //
        // uma string de 66 caracteres, sendo os dois primeiros, indicativo do    //
        // número de alíquotas cadastradas, e uma alíquota a cada 4 caracteres.   //
        // se tiver ISS esta string terá 130 caracteres de comprimento sendo que  //
        // a partir do caracter 67 são os percentuais de ISS, uma aliq. a cada 4  //
        // caracteres                                                             //
        // ---------------------------------------------------------------------- //
        for I := 1 to 16 do
        begin
          if sOP = Copy(sAliquotas,(I*4)-1,4) then
          begin
            if sT = '' then sT := StrZero(I,2,0);
          end;
        end;
        //
        if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'I' then sT := 'II';  // Isento
        if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'F' then sT := 'FF';  // Substituição tributária
        if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'N' then sT := 'NN';  // Substituição tributária

        if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') or (sModeloECF = '01') then
        begin
          if Trim(ibDataSet4.FieldByName('ST').AsString) = '' then
          begin
            if (LimpaNumero(Form1.ibDAtaset13.FieldByname('CRT').AsString) = '1') then
            begin // Simples Nacional CSOSN
              if (ibDataSet4.FieldByName('CSOSN').AsString = '300') then //I - Isento
                sT := 'II';
              if (ibDataSet4.FieldByName('CSOSN').AsString = '400') then // N - Não trib.
                sT := 'NN';
              if (ibDataSet4.FieldByName('CSOSN').AsString = '500') then // F - Substituíção
                sT := 'FF';
            end
            else
            begin // Regime Normal CST
              if (Copy(Trim(ibDataSet4.FieldByName('CST').AsString), 2, 2) = '40') then
                sT := 'II';
              if (Copy(Trim(ibDataSet4.FieldByName('CST').AsString), 2, 2) = '41') then
                sT := 'NN';
              if (Copy(Trim(ibDataSet4.FieldByName('CST').AsString), 2, 2) = '60') then
                sT := 'FF';
            end;
            sOP := Copy(sT, 1, 1);
          end;
        end;
        //
      end;
      //
      fAntes     := Form1.fTotal;
      sDescricao := ConverteAcentos(ibDataSet4.FieldByName('DESCRICAO').AsString);
      //
      sLicenca  := '99';
      //
      // Não pede número de série na mesa
      //
      if (Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'MESA') and (Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'DEKOL') then
      begin
        if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then
        begin
          // Vendas de produtos com número de série no Mobile: Posteriormente deve ser ajustado no cadastro do produto, igual ocorre com o o modo offline do PAF
          sLicenca := '';
        end
        else
        begin
          //
          // Número de Serie
          //
          if ibDataSet4.FieldByName('SERIE').Value = 1 then
          begin
            //
            sMessage := '';
            //
            Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := 0;
            //
            while AllTrim(sLicenca) <> '' do
            begin
              //
              sLicenca := AllTrim(Small_InputBox('Venda de item','Números de Série:'+Chr(10)+Chr(10)+Chr(10)+Chr(10)+Chr(10)+Chr(10)+Chr(10)+Form1.sSeriais+
                                                 chr(10)+chr(10)+'Digite o Número de Série ou <Enter> em branco para finalizar:',''));
              //
              if sLicenca <> '' then
              begin
                //
                ibDataSet30.Close;
                ibDataSet30.SelectSQL.Clear;
                ibDataSet30.Selectsql.Add('select * from SERIE where CODIGO='+QuotedStr(ibDataSet4.FieldByName('CODIGO').AsString));
                ibDataSet30.Open;
                //
                while not ibDataSet30.Eof do
                begin
                  if ibDataset30.FieldByName('SERIAL').AsString = sLicenca then
                  begin
                    //
                    if AllTrim(ibDataset30.FieldByName('NFVENDA').AsString) = '' then
                    begin
                      //
                      fQuantidadeAnterior := Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat;
                      Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := fQuantidadeAnterior + 1;

                      //
                      //
                      if fQuantidadeAnterior <> Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat then
                      begin
                        //
                        if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') or (Form1.sModeloECF = '01') then
                          Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency      := StrToFloat(FormatFloat('0.00', Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat)) // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat      := StrToFloat(FormatFloat('0.00', ibDataSet27QUANTIDADE.AsFloat * ibDataSet27UNITARIO.AsFloat))
                        else
                          Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency      := TruncaDecimal(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat, Form1.iTrunca); // Sandro Silva 2018-12-14 ibDataSet27TOTAL.AsFloat      := TruncaDecimal(ibDataSet27QUANTIDADE.AsFloat * ibDataSet27UNITARIO.AsFloat, Form1.iTrunca);

                        //
                        ibDataset30.Edit;
                        ibDataset30.FieldByName('NFVENDA').AsString  := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(iCupom,6,0);
                        //
                        try
                          ibDataset30.FieldByName('VALVENDA').AsFloat  := Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat;
                          ibDataset30.FieldByName('DATVENDA').AsFloat  := Date;
                        except end;
                        //
                        if AllTrim(Form1.sSeriais) <> '' then
                          Form1.sSeriais := Form1.sSeriais + ', ';
                        if AllTrim(Form1.sSeriais) = '' then
                          Form1.sSeriais := 'Serie: ';
                        Form1.sSeriais := Form1.sSeriais + sLicenca;

                        // Ficha 4496
                        if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then // Ficha 4496
                        begin
                          if AllTrim(Form1.ibDataSet27.FieldByName('OBS').AsString) <> '' then
                            Form1.ibDataSet27.FieldByName('OBS').AsString := Trim(Copy(Trim(Form1.ibDataSet27.FieldByName('OBS').AsString) + ', ', 1, Form1.ibDataSet27.FieldByName('OBS').Size));

                          if AllTrim(Form1.ibDataSet27.FieldByName('OBS').AsString) = '' then
                            Form1.ibDataSet27.FieldByName('OBS').AsString :=  'Serie: ';

                          Form1.ibDataSet27.FieldByName('OBS').AsString := Trim(Copy(Trim(Form1.ibDataSet27.FieldByName('OBS').AsString) + sLicenca, 1, Form1.ibDataSet27.FieldByName('OBS').Size));
                        end;

                        //
                        sLicenca  := '0CONFIRMADO0';
                        sMessage := '';
                        //
                      end else
                      begin
                        sLicenca  := '';
                        sMessage := '0NAOTEM0';
                        Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := 0;
                      end;
                      //
                    end else
                    begin
                      sMessage := 'Número de série já vendido.';
                    end;
                    //
                  end;
                  ibDataset30.Next;
                end;
              end;
              if sMessage <> '0NAOTEM0' then
              begin
                if (sMessage = 'Número de série já vendido.') then SmallMsg(sMessage) else
                  if (sLicenca <> '0CONFIRMADO0') and (sLicenca <> '') then SmallMsg('Número de série não encontrado no produto: '+Chr(10)+ibDataSet4.FieldByName('DESCRICAO').AsString);
              end;
            end;
            //
            // Número de Serie
            //
          end;
        end;
        //
        //  G R A D E      Q U A N D O     V E N D E
        //
        if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then
        begin
          // Venda de produto com grade pelo mobile: posteriormente deve ser ajustada a quantidade da grade
        end
        else
        begin
          Form1.ibDataSet10.Close;
          Form1.ibDataSet10.SelectSQL.Clear;
          Form1.ibDataSet10.Selectsql.Add('select * from GRADE where CODIGO='+QuotedStr(Form1.ibDataSet4.FieldByName('CODIGO').AsString)+' order by CODIGO, COR, TAMANHO');
          Form1.ibDataSet10.Open;
          Form1.ibDataSet10.First;
          //
          bApaga := False;
          if (ibDataSet4.FieldByName('CODIGO').AsString = ibDataSet10.FieldByName('CODIGO').AsString) and (AllTrim(ibDataSet4.FieldByName('CODIGO').AsString)<>'') then
          begin
            Form13.TipoMovimento := mgSaida; // Sandro Silva 2018-10-30
            Form13.ShowModal; // Grade Quando vende
          end;
        end;
        //
        //  G R A D E      Q U A N D O     V E N D E
        //
      end;
      //
      bVenda := True;
      //
      if AllTrim(ibDataSet4.FieldByName('MEDIDA').AsString) <> '' then
        sUnidadeDeMedida := Copy(ibDataSet4.FieldByName('MEDIDA').AsString,1,2)
      else
        sUnidadeDeMedida := 'UN';
      //
    end else
    begin
      // Serviço
      //
      Mais1ini  := TIniFile.Create('FRENTE.INI');
      ST        := Mais1Ini.ReadString('Frente de caixa', 'Ordem da aliquota de ISS', 'XX');
      //
      if ST='XX' then
      begin
        try
          ST := Small_InputBox('Frente de caixa', 'Qual a ordem da aliquota de ISS:', '5');
          Mais1Ini.WriteString('Frente de caixa', 'Ordem da aliquota de ISS', ST);
        except end;
      end;
      //
      Mais1Ini.Free;
      //
      sCodigo          := StrZero(0,13,0);
      sDescricao       := Form1.ibDataSet27.FieldByName('DESCRICAO').AsString;
      //
      sDescricao := ConverteAcentos(sDescricao);
      //
      sUnidadeDeMedida := 'UN';
      bISS             := True;
      //
    end; // Fim bServico
    //
    if AllTrim(sDescricao) <> '' then
    begin

      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      begin
        // Para atender ao convênio 25/16
        if sImprimirCEST = 'Sim' then
          sDescricao := '#' + Trim(ibDataSet4.FieldByName('CEST').AsString) + '#' + Trim(ibDataSet4.FieldByName('CF').AsString) + '#' + sDescricao;
      end;
      //
      // Alterei: Inclui mais um parametro //
      //
      /////////////////////////////////////////////////////////////////////////
      //
      //
      //
      if Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat >= Form1.ibDataSet27.FieldByName('TOTAL').AsFloat then
      begin
        Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat := 0;
      end;
      //
      //
      sUnidadeDeMedida := ConverteAcentos(sUnidadeDeMedida);
      //
      bVenda := False;
      //
      //

      //
      // Mesa ou cupom
      //
      if ((AllTrim(sT) <> '') or (Form1.sAliquotas = Replicate('0',72))) or ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01')) then
      begin
        if Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat <> 0 then
        begin
          //
          try
            if not bServico then
            begin
              if (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 13)
                or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 14)
                or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 12)
                or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 8)
              then
                sCodigo := ibDataSet4.FieldByName('REFERENCIA').AsString
              else
                sCodigo := StrZero(StrToInt(ibDataSet4.FieldByName('CODIGO').AsString),13,0);
            end
            else
              sCodigo := StrZero(0,13,0);
          except end;
          //
          if ((Form1.iMesaAberta = 0) and (Consumo))
            or (Consumo = False) then // 2015-09-16
            MostraFoto(True)
          else
            MostraFoto(False);

          if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') or (sImprimirCEST <> 'Sim') then
            sDescricao := copy(sDescricao, 1, 29)
          else
            sDescricao := Copy(sDescricao, 1, 49);  // Limite no registros do paf é 50 caracteres
          //

          if Form1.sModeloECF = '01' then
            bVenda := _ecf01_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '02' then
            bVenda := _ecf02_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '03' then
            bVenda := _ecf03_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          {Sandro Silva 2021-07-22 inicio 
          if Form1.sModeloECF = '04' then
            bVenda := _ecf04_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '05' then
            bVenda := _ecf05_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '06' then
            bVenda := _ecf06_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '07' then
            bVenda := _ecf07_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '08' then
            bVenda := _ecf08_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '09' then
            bVenda := _ecf09_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '10' then
            bVenda := _ecf10_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '11' then
            bVenda := _ecf11_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$
          }
          if Form1.sModeloECF = '12' then
          begin
            bVenda := _ecf12_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                      ST                  , // ST
               StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                          sUnidadeDeMedida,                                 // Medida
                          StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                          StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          end;

          if Form1.sModeloECF = '14' then
            bVenda := _ecf14_VendaDeItem(sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '15' then
            bVenda := _ecf15_VendaDeItem(
                                   sCodigo, // Código
                                   sDescricao, // Descricão
                                    ST                  , // ST
             StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                        sUnidadeDeMedida,                                 // Medida
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                        StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '17' then // Ok 2015-08-24
            bVenda := _ecf17_VendaDeItem(
                                         sCodigo, // Código
                                         sDescricao, // Descricão
                                         ST,         // ST
                                         FormatFloat('0.000', ibDataSet27QUANTIDADE.AsFloat), // Quantidade
                                         FormatFloat('0.00', ibDataSet27UNITARIO.AsFloat), // Unitário
                                         sUnidadeDeMedida,                                 // Medida
                                         FormatFloat('0.00', Form1.ibDataSet25VALOR_1.AsFloat),          // Desconto %
                                         FormatFloat('0.00', Form1.ibDataSet25VALOR_2.AsFloat));         // Destonco R$

          if Form1.sModeloECF = '59' then
            bVenda := _ecf59_VendaDeItem(sCodigo, // Código
                                         sDescricao, // Descricão
                                         ST,         // ST
                                         StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                                         StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                                         sUnidadeDeMedida,                                 // Medida
                                         StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                                         StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '65' then
            bVenda := _ecf65_VendaDeItem(sCodigo, // Código
                                         sDescricao, // Descricão
                                         ST,         // ST
                                         StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                                         StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                                         sUnidadeDeMedida,                                             // Medida
                                         StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                                         StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$

          if Form1.sModeloECF = '99' then
            bVenda := _ecf99_VendaDeItem(sCodigo, // Código
                                         sDescricao, // Descricão
                                         ST                  , // ST
                                         StrZero(Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat*1000,7,0), // Quantidade
                                         StrZero(Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat*100,7,0), // Unitário
                                         sUnidadeDeMedida,                                             // Medida
                                         StrZero(Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat*100,7,0),          // Desconto %
                                         StrZero(Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat*100,7,0));         // Destonco R$
          //
          ValorTotalDoDia(False);
          //
        end; // if ibDataSet27QUANTIDADE.AsFloat <> 0 then

        // --------------------- //
        //  Retorno do Subtotal  //
        // --------------------- //
        if bVenda then
        begin
          //
          // //LogFrente('Teste 01: Antes SubTotal ' + FloatToStr(fTotal));
          //
          Form1.fTotal := PDV_SubTotal(True);
          //
          // //LogFrente('Teste 01: Depois SubTotal ' + FloatToStr(fTotal));
        end;

        //
        // Grava a ALIQUICM no ALTERACA
        //
        try
          if not (Form1.ibDataSet27.State in ([dsEdit, dsInsert])) then
            Form1.ibDataSet27.Edit;
          //
          if ibDataSet14.FieldByName('BASEISS').AsFloat = 100 then
            Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'ISS'; // Isso é pra serviço cadastrado
            
          if Trim(ibDataSet4.FieldByName('TIPO_ITEM').AsString) = '09' then
          begin
            if (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') then
            begin
              Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'ISS';
            end;
          end;

          if Form1.ibDataSet27.FieldByName('ALIQUICM').AsString <> 'ISS' then // Quando importa da OS já vem com ISS
          begin
            Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := sOP;
            // Para modelo 01, 65 e 59, código acima, quando define sOP valida se é CST 040, 041 ou 060
            if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'I' then Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'I';
            if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'F' then Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'F';
            if Copy(allTrim(ibDataSet4.FieldByName('ST').AsString),1,1) = 'N' then Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'N';
          end;
          //
          try
            Form1.ibDataSet27.FieldByName('CST_ICMS').AsString       := IBDataSet4.FieldByName('CST').AsString;
            Form1.ibDataSet27.FieldByName('CST_PIS_COFINS').AsString := IBDataSet4.FieldByName('CST_PIS_COFINS_SAIDA').AsString;
            Form1.ibDataSet27.FieldByName('ALIQ_PIS').AsFloat        := IBDataSet4.FieldByName('ALIQ_PIS_SAIDA').AsFloat;
            Form1.ibDataSet27.FieldByName('ALIQ_COFINS').AsFloat     := IBDataSet4.FieldByName('ALIQ_COFINS_SAIDA').AsFloat;
            Form1.ibDataSet27.FieldByName('CODIGO').AsString         := IBDataSet4.FieldByName('CODIGO').AsString;
            if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
            begin
              Form1.ibDataSet27.FieldByName('CST_ICMS').AsString := IBDataSet4.FieldByName('CST_NFCE').AsString; // CST para emissão de NFC-e/CF-e-SAT
              if Trim(Form1.ibDataSet27.FieldByName('CST_ICMS').AsString) = '' then
                Form1.ibDataSet27.FieldByName('CST_ICMS').AsString := IBDataSet4.FieldByName('CST').AsString; // CST para emissão de NF-e

              //ShowMessage('Teste 25224 ' + Form1.ibDataSet27.FieldByName('CST_ICMS').AsString); // Sandro Silva 2019-03-08

              Form1.ibDataSet27.FieldByName('CSOSN').AsString := Trim(IBDataSet4.FieldByName('CSOSN_NFCE').AsString); // CSOSN para emissão de NFC-e/CF-e-SAT
              if Trim(Form1.ibDataSet27.FieldByName('CSOSN').AsString) = '' then
                Form1.ibDataSet27.FieldByName('CSOSN').AsString := Trim(IBDataSet4.FieldByName('CSOSN').AsString); // CSOSN para emissão de NF-e

              if (LimpaNumero(Form1.ibDAtaset13.FieldByname('CRT').AsString) = '1') then
              begin // Simples Nacional

                if (Form1.ibDataSet27.FieldByName('CSOSN').AsString = '300') then //I - Isento
                  Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'I';
                if (Form1.ibDataSet27.FieldByName('CSOSN').AsString = '400') then // N - Não trib.
                  Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'N';
                if (Form1.ibDataSet27.FieldByName('CSOSN').AsString = '500') then // F - Substituíção
                  Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'F';

              end
              else
              begin

                if (Right('000' + Trim(Form1.ibDataSet27.FieldByName('CST_ICMS').AsString), 2) = '40') then //I - Isento
                  Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'I';
                if (Right('000' + Trim(Form1.ibDataSet27.FieldByName('CST_ICMS').AsString), 2) = '41') then // N - Não trib.
                  Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'N';
                if (Right('000' + Trim(Form1.ibDataSet27.FieldByName('CST_ICMS').AsString), 2) = '60') then // F - Substituíção
                  Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := 'F';

              end;

              if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // Serviço
              begin

                if (Right('000' + Form1.ibDataSet27.FieldByName('CST_ICMS').AsString, 2) <> '40')// Sandro Silva 2019-08-29
                  and (Right('000' + Form1.ibDataSet27.FieldByName('CST_ICMS').AsString, 2) <> '41') // Sandro Silva 2019-08-29
                  and (Right('000' + Form1.ibDataSet27.FieldByName('CST_ICMS').AsString, 2) <> '60')
                  and (Form1.ibDataSet27.FieldByName('CSOSN').AsString <> '500') then
                begin
                  // Somente repassar a alíquota do ICMS configurada no ESTOQUE se o CST for diferente de 40, 41, 60 e CSOSN <> 500
                  if Form1.ibDataSet4.FieldByName('ALIQUOTA_NFCE').AsString <> '' then
                    Form1.ibDataSet27.FieldByName('ALIQUICM').AsString := LimpaNumero(FormatFloat('00.00', Form1.ibDataSet4.FieldByName('ALIQUOTA_NFCE').AsFloat));
                end;

              end;

            end;

          except
            SmallMsg('Erro ao gravar PIS/COFINS');
          end;
          //
        except end;
        //
      end else
      begin
        //
        if (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99') then
        begin
          if Pos(sOp, Form1.sAliquotas) = 0 then
          begin
            SmallMsg('A alíquota '+Copy(sOP,1,2)+','+Copy(sOP,3,2)+'% não está cadastrada na impressora fiscal,'+Chr(10)+
                        'se for realmente a alíquota certa, chame um técnico para fazer a'+chr(10)+
                        'intervenção técnica. Cod: 1098 '+chr(10)+Chr(10)+Form1.SAliquotas);
          end else
          begin
            SmallMsg('Erro de impressão. cod: 1098');
          end;
        end;
      end;
    end;
    //
    if (not bVenda) and (not bServico) then
    begin
      //////////////////////////
      // Controle de serie    //
      // Esta rotina cancela  //
      // um item na venda     //
      //////////////////////////
      if ibDataSet4.FieldByName('SERIE').Value = 1 then
      begin
        ibDataSet30.Close;
        ibDataSet30.SelectSQL.Clear;
        ibDataSet30.Selectsql.Add('select * from SERIE where CODIGO='+QuotedStr(ibDataSet4.FieldByName('CODIGO').AsString));
        ibDataSet30.Open;
        while not ibDataSet30.Eof do
        begin
          if Copy(ibDataset30.FieldByName('NFVENDA').AsString,1,6) = FormataNumeroDoCupom(Form1.icupom) then // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0) then // Sandro Silva 2021-11-29 if Copy(ibDataset30.FieldByName('NFVENDA').AsString,1,6) = StrZero(icupom,6,0) then
          begin
            Form1.sSeriais := TiraSerialDaLista(Form1.sSeriais, Trim(ibDataset30.FieldByName('SERIAL').AsString)); // Sandro Silva 2019-03-26  Form1.sSeriais := StrTran(Form1.sSeriais,AllTrim(ibDataset30.FieldByName('SERIAL').AsString)+', ','');
            try
              ibDataset30.Edit;
              ibDataset30.FieldByName('NFVENDA').AsString := '';
              ibDataset30.Post; // Sandro Silva 2019-03-26
            except
            end;
          end;
          ibDataset30.Next;
        end;
        //
        ibDataSet4.Active := False;
        try /// Sandro Silva 2020-05-05 
          Form1.ibDataSet27.Delete;
        except
        end;
        ibDataSet4.Active := True;
        //
      end;
    end;
    //
    if (fAntes <> Form1.fTotal) and bVenda then
    begin

      //
      if (Form1.sModeloECF = '01') and (Form1.iMesaAberta <> 0) then
        Form1.iItem := SequencialItemMesa(FormataNumeroDoCupom(Form1.icupom)) // Sandro Silva 2021-11-29 Form1.iItem := SequencialItemMesa(StrZero(iCupom,6,0))
      else
        Form1.iItem := iItem + 1;
      //
      if not bServico then
      begin
        //--------------------------------//
        // Grava as alterações no arquivo //
        //--------------------------------//
        if not (Form1.ibDataSet27.State in ([dsEdit, dsInsert])) then
          Form1.ibDataSet27.Edit;
        Form1.ibDataSet27.FieldByName('DATA').AsDateTime     := StrToDate(Form1.sDataDoCupom);
        Form1.ibDataSet27.FieldByName('HORA').AsString       := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
        {Sandro Silva 2022-08-29 inicio}
        if Form1.sModeloEcf = '65' then
          Form1.ibDataSet27.FieldByName('HORA').AsString       := FormatDateTime('HH:nn:ss', Time);
        {Sandro Silva 2022-08-29 fim}
        Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(iCupom,6,0);
        Form1.ibDataSet27.FieldByName('ITEM').AsString       := StrZero(iItem,6,0);
        //
        // Mesa ou balcao
        //
        if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
        begin
          Form1.ibDataSet27.FieldByName('CAIXA').AsString      := '';
        end else
        begin
          Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
        end;
        //
        Form1.ibDataSet27.FieldByName('DESCRICAO').AsString  := ibDataSet4.FieldByName('DESCRICAO').AsString;
        Form1.ibDataSet27.FieldByName('CODIGO').AsString     := ibDataSet4.FieldByName('CODIGO').AsString;
        Form1.ibDataSet27.FieldByName('REFERENCIA').AsString := sCodigo;
        Form1.ibDataSet27.FieldByName('MEDIDA').AsString     := ibDataSet4.FieldByName('MEDIDA').AsString;
        //
        Form1.Label_11.Caption := Right(Replicate(' ',8)+'0,00',8);
        if ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01'))
          or (Consumo = False)
        then
        begin
          Label_11.Caption := Right('          '+Form1.ibDataSet27.FieldByName('QUANTIDADE').AsString,10);
          Label_12.Caption := Format('%10.2n',[Form1.ibDataSet27.FieldByName('TOTAL').AsFloat]);
        end;
        Label_13.Caption := Format('%10.2n',[Form1.fTotal]);
        //
        // ------------------------------ //
        // Altera a quantidade no estoque //
        // ------------------------------ //
        if Alltrim(ibDataSet4.FieldByName('DESCRICAO').AsString) <> Alltrim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) then
        begin
          ibDAtaSet4.Close;
          ibDataSet4.SelectSQL.Clear;
          ibDataSet4.SelectSQL.Add('select * from ESTOQUE where DESCRICAO='+QuotedStr(Alltrim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString))+' and coalesce(ATIVO,0)=0 ');
          ibDAtaSet4.Open;
        end;

        if Alltrim(ibDataSet4.FieldByName('DESCRICAO').AsString) = Alltrim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) then
        begin
          if Trim(ibDataSet4.FieldByName('CFOP').AsString) <> '' then
            Form1.ibDataSet27.FieldByName('CFOP').AsString := ibDataSet4.FieldByName('CFOP').AsString;
        end;

        //
        try
          //
          if (ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // serviços não atera a quantidade
          begin
            //
            if Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'MESA' then
            begin
              //
              if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
              begin
                Form1.ibDataSet27.FieldByName('TIPO').AsString    := 'DEKOL';
                Form1.ibDataSet27.FieldByName('TIPODAV').AsString := sBonecoEscolhido;
              end else
              begin
                Form1.ibDataSet27.FieldByName('TIPO').AsString := 'LOKED';
              end;
              //
              ibDataSet4.Edit; // altera a quantidade no estoque
              ibDataSet4.FieldByName('ULT_VENDA').AsDateTime := Date;
              ibDataSet4.FieldByName('QTD_ATUAL').AsFloat    := (ibDataSet4.FieldByName('QTD_ATUAL').AsFloat - Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat); // Quando vende
              ibDataSet4.Post;
            end;
            //
          end;
          //
          // Mesa ou cupom
          //
          if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
          begin
            //
            Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'MESA';
            if sBonecoEscolhido = '' then
              sBonecoEscolhido := 'MESA';// 2015-09-21
            Form1.ibDataSet27.FieldByName('TIPODAV').AsString   := sBonecoEscolhido;
            Form1.ibDataSet27.FieldByName('CAIXA').AsString     := '';
            //
            Form1.IBQuery1.Close;
            Form1.IBQuery1.SQL.Clear;
            // COO, CAIXA DEVE PERMANECER O DA CONFERENCIA, INDEPENDENTE DE QUANDO EMITIDA
            Form1.IBQuery1.SQL.Add('update ALTERACA set TIPODAV = ' + QuotedStr(sBonecoEscolhido) + ' where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.iMesaAberta))+''); // Sandro Silva 2021-12-01 Form1.IBQuery1.SQL.Add('update ALTERACA set TIPODAV = ' + QuotedStr(sBonecoEscolhido) + ' where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.iMesaAberta,6,0))+'');
            Form1.IBQuery1.ExecSQL;
            Form1.ibQuery1.Close;

            Form1.IBQuery1.Close;
            Form1.IBQuery1.SQL.Clear;
            // COO, CAIXA DEVE PERMANECER O DA CONFERENCIA, INDEPENDENTE DE QUANDO EMITIDA
            // Conferência é da mesa não dos itens
            // Repassa o COO da conferência para os itens que são lançado após ter sido impressa
            Form1.IBQuery1.SQL.Text :=
              'select first 1 * ' +
              'from ALTERACA ' +
              'where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.iMesaAberta)); // Sandro Silva 2021-12-01 'where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.iMesaAberta,6,0));
            Form1.IBQuery1.Open;

            if Form1.IBQuery1.FieldByName('COO').AsString <> '' then
            begin
              Form1.ibDataSet27.FieldByName('CAIXA').AsString := Form1.IBQuery1.FieldByName('CAIXA').AsString;
              Form1.ibDataSet27.FieldByName('CCF').AsString   := Form1.IBQuery1.FieldByName('CCF').AsString;
              Form1.ibDataSet27.FieldByName('COO').AsString   := Form1.IBQuery1.FieldByName('COO').AsString;
            end;
            Form1.IBQuery1.Close;

            if Copy(Form1.sConcomitante,1,2) = 'OS' then
            begin
              // Identifica o sequencial atribuido a conta cliente os
              Form1.IBQuery1.Close;
              Form1.IBQuery1.SQL.Clear;
              Form1.IBQuery1.SQL.Text :=
                'select MAX(SEQUENCIALCONTACLIENTEOS) as SEQUENCIALCONTACLIENTEOS ' +
                'from ALTERACA ' +
                ' where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.iMesaAberta)); // Sandro Silva 2021-12-01 ' where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.iMesaAberta,6,0));
              Form1.ibQuery1.Open;

              if Form1.ibQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString = '' then
              begin

                iSEQUENCIALCONTACLIENTEOS := IncrementaGenerator('G_SEQUENCIALCONTACLIENTEOS', 1);

                // Quando sequencial atingir o limite deve ser reiniciado
                if iSEQUENCIALCONTACLIENTEOS > 9999999999 then
                begin
                  Form1.IBQuery1.Close;
                  Form1.IBQuery1.SQL.Clear;
                  Form1.IBQuery1.SQL.Text :=
                    'alter sequence G_SEQUENCIALCONTACLIENTEOS restart with 0';
                  Form1.ibQuery1.Open;

                  iSEQUENCIALCONTACLIENTEOS := IncrementaGenerator('G_SEQUENCIALCONTACLIENTEOS', 1);
                end;
              end
              else
                iSEQUENCIALCONTACLIENTEOS := Form1.ibQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsInteger;

              Form1.IBQuery1.Close;

              Form1.ibDataSet27.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString := Right(DupeString('0', 10) + IntToStr(iSEQUENCIALCONTACLIENTEOS), 10);


              Form1.Memo3.Lines.Strings[2] := sMesaOuConta + ' ' + Form1.ibDataSet27.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString;
            end; // if Copy(Form1.sConcomitante,1,2) = 'OS' then

            //
          end else
          begin
            Form1.ibDataSet27.FieldByName('TIPO').AsString := 'BALCAO';
          end;
          //
        except end;
        //
        Form1.ibDataSet27.Post; /// Grava dados lançados Button1Click()
        //
        //
        if (Consumo = False) or ((Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01')) then
        begin
          Form1.Memo2.Lines.Text := 'Total R$ '+AllTrim(Format('%12.2n',[Form1.fTotal]));
          Label_13.Caption       := Format('%10.2n',[Form1.fTotal]);
        end
        else
        begin
          Form1.Memo2.Lines.Text := '';
          Label_13.Caption       := Right(Replicate(' ',8)+'0,00',8);

          if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
            Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,2,0),'Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia)
          else
            Display(sMesaOuConta+' '+StrZero(Form1.iMesaAberta,2,0),'Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'+Form1.sF4Conferencia);
        end;
        //
      end
      else
      begin
        if Trim(sOS) <> '' then
        begin
          Form1.Memo2.Lines.Text := 'Total R$ '+AllTrim(Format('%12.2n',[Form1.fTotal]));
          Label_13.Caption       := Format('%10.2n',[Form1.fTotal]);
        end;
      end; // if not bServico then
      //
      if not bServico then
      begin
        if (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 13)
          or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 14)
          or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 12)
          or (Length(AllTrim(ibDataSet4.FieldByName('REFERENCIA').AsString)) = 8)
          then
          sCodigo := ibDataSet4.FieldByName('REFERENCIA').AsString
        else
          sCodigo := StrZero(StrToInt(ibDataSet4.FieldByName('CODIGO').AsString),13,0);
      end
      else
      begin
        //sCodigo := StrZero(0,13,0);
        sCodigo := StrZero(StrToIntDef(ibDataSet4.FieldByName('CODIGO').AsString, 0),13,0);
      end;
      //
      if Length(sCodigo) = 13 then
        scodigo := sCodigo+' ';
      //
      if (Consumo = False)
        or (Consumo and (Form1.iMesaAberta = 0) and (Form1.sModeloECF <> '01')) then
      begin
        sCasasDecimaisUnitario := Form1.ConfPreco;
        if (sModeloECF = '59') then
        begin // Combustível no SAT de ter unitário com 3 casas
          if (Form1.ibDataSet27.FieldByName('CFOP').AsString = '5656') or (Form1.ibDataSet27.FieldByName('CFOP').AsString = '5667') then // Combustível
            sCasasDecimaisUnitario := '3';
        end;
        ImprimeNoVideo(StrZero(iItem,3,0)+' '+sCodigo+' '+Copy(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25) +
                                         ' ' + // 2015-09-09
                                         Right('        '+AllTrim(Format('%'+IntToStr(7-StrToInt(ConfCasas))+'.'+ConfCasas+'n'
                                         ,[Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat])),11)+' '+Copy(Form1.ibDataSet27.FieldByName('MEDIDA').AsString+Replicate(' ',3),1,3)+' '+ Replicate(' ', 9) +
                                         Format('%9.'+sCasasDecimaisUnitario+'n',[Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat])
                                         +' '+Format('%9.2n',[Form1.ibDataSet27.FieldByName('TOTAL').AsFloat]));
      end
      else
      begin
        // Não exibe no vídeo os itens lançados
        // ER02.03, Requisito XLVII, item 19, letra a
        ImprimeNoVideo(StrZero(iItem,3,0)+' '+sCodigo+' '+Copy(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25) +
                                          Right('        '+AllTrim(Format('%'+IntToStr(7-StrToInt(ConfCasas))+'.'+ConfCasas+'n'
                                          ,[Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat])),11));
      end;
      //
      if Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat > 0 then
        rDesconto := (Form1.ibDataSet27.FieldByName('TOTAL').AsFloat * Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat /100);
      if Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat > 0 then
        rDesconto := Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat;
      rDesconto := StrToFloat(FormatFloat('0.00', rDesconto)); // Sandro Silva 2021-12-23
      //
      if rDesconto <> 0 then
      begin                                                                             // ------------------------------------------- //
        //
        try
          Form1.ibDataSet27.Edit;
          Form1.ibDataSet27.FieldByName('DESCONTO').AsFloat      := rDesconto * -1;
          Form1.ibDataSet27.Post;
        except end;
        //
        Form1.ibDataSet27.Append; // Desconto do Item
        Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'BALCAO';
        Form1.ibDataSet27.FieldByName('PEDIDO').AsString    := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
        Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := 'Desconto';  // Desconto no item
        Form1.ibDataSet27.FieldByName('ITEM').AsString      := StrZero(iItem,6,0);
        Form1.ibDataSet27.FieldByName('DATA').AsDateTime    := StrToDate(Form1.sDataDoCupom);
        Form1.ibDataSet27.FieldByName('HORA').AsString      := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
        {Sandro Silva 2022-09-09 inicio}
        if Form1.sModeloECF = '65' then
          Form1.ibDataSet27.FieldByName('HORA').AsString      := FormatDateTime('HH:nn:ss', Time); 
        {Sandro Silva 2022-09-09 fim}
        Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := 1;
        Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := rDesconto * -1;
        Form1.ibDataSet27.FieldByName('TOTAL').AsFloat      := rDesconto * -1;
        Form1.ibDataSet27.FieldByName('CAIXA').AsString     := sCaixa;
        Form1.ibDataSet27.FieldByName('ALIQUICM').AsString  := sOP;
        Form1.ibDataSet27.Post;

        //
        if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
        begin
          Form1.fTotal := Form1.fTotal + ibDataSet27TOTAL.AsFloat;
          Form1.Memo2.Lines.Text := 'Total R$ '+AllTrim(Format('%12.2n',[Form1.fTotal]));
          Label_13.Caption := Format('%10.2n',[Form1.fTotal]);
        end;
        //
        Commitatudo(False); // Desconto
        //
        // DESCONTO Cria um componente dinamicamente   //
        // ------------------------------------------- //
        // Inicio Cria um componente dinamicamente
        //
        //
        ImprimeNoVideo(Copy(StrZero(iItem,3,0)+' '+'Desconto'+Replicate(' ',53),1,52)+'         '+Format('%9.2n',[rDesconto*-1]));
        //
      end;
      //
      Form1.ibDataSet25.FieldByName('VALOR_1').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('VALOR_2').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('VALOR_3').AsFloat := 0;
      Form1.ibDataSet25.FieldByName('VALOR_4').AsFloat := 0;
      //
      Button18.Enabled      := True;
      Button4.Enabled       := False;
      //
    end else
    begin
      //
      if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
      begin
        if Pos(sOp, Form1.sAliquotas) = 0 then
        begin
          SmallMsg('A alíquota '+Copy(sOP,1,2)+','+Copy(sOP,3,2)+'% não está cadastrada na impressora fiscal,'+Chr(10)+
                      'se for realmente a alíquota certa, chame um técnico para fazer a'+chr(10)+
                      'intervenção técnica. Cod: 848 '+chr(10)+Chr(10)+Form1.SAliquotas);
        end else
        begin

          if Form1.sModeloECF <> '02' then // Sandro Silva 2016-03-03
            SmallMsg('Erro de impressão. cod: 848'+chr(10)+chr(13)+Form1.sAliquotas);

        end;
        //
        if (AllTrim(Form1.ibDataSet27.FieldByName('ITEM').AsString) = '') or (AllTrim(Form1.ibDataSet27.FieldByName('TIPODAV').AsString) = 'OS') then
        begin
          //
          ibDataSet4.Active := False;
          try /// Sandro Silva 2020-05-05
            Form1.ibDataSet27.Delete;
          except
          end;
          if (Form1.sOrcame = '') and (Form1.sOS = '') then // Sandro Silva 2018-10-22 Executar 2X apenas se for venda direta no cupom (não importação)
            ibDataSet27BeforeDelete(ibDataSet27); // Sandro Silva 2016-03-07 POLIMIG  Evidenciando
          ibDataSet4.Active := True;
          //
        end;
        //
      end;
      //
    end;
    //
  end;
  //
  Edit1.Text       := '';
  //
end;

procedure TForm1.SuprimentoReforodecaixa1Click(Sender: TObject);
begin
  //
  Commitatudo(True); // Sandro Silva 2017-11-08 Polimig SuprimentoReforodecaixa1Click(
  if TestaTudo(True) then // Suprimento
  begin
    // ---------------- //
    // Reforço de caixa //
    // ---------------- //
    Form1.Frame_teclado1.Led_REDE.Picture   := Form1.Frame_teclado1.Image_led_verde.Picture;
    Form1.Frame_teclado1.Led_FISCAL.Picture := Form1.Frame_teclado1.Image_led_verde.Picture;
    Form1.Frame_teclado1.Led_ECF.Picture    := Form1.Frame_teclado1.Image_led_verde.Picture;
    //
    Form1.bFlag2 := True; // Form1.SuprimentoReforodecaixa1Click(
    //
    Form3.Caption := 'Reforço de caixa';
    //Form3.Label1.Caption := 'Informe o valor do reforço de';
    Form1.ibDataSet25.Edit;
    Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := 0;
    //
    if ((Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99')) and (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then // Sandro Silva 2016-03-21
    begin
      if SenhaAdministradorOk then // Ficha 4791 Sandro Silva 2020-04-13 
      begin
        Timer2.Enabled := False;
        Form3.ShowModal;
        if Form1.ImportarvendasdoSmallMobile1.Checked then
          Timer2.Enabled := True;
      end;
    end
    else
      Form3.Show;
    //
    Form1.bFlag2    := False; // Form1.SuprimentoReforodecaixa1Click(
    Button4.Enabled := False;
    //
  end;
  //
end;

procedure TForm1.Identificaconsumidor1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','Identifica consumidor','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa','Identifica consumidor','Sim')
      else Mais1Ini.WriteString('Frente de caixa','Identifica consumidor','Não');
  //
  Form1.sIdentificaConsumidor := Mais1Ini.ReadString('Frente de caixa','Identifica consumidor','Não');
  Mais1Ini.Free;
  //
end;

procedure TForm1.ibDataSet7BeforePost(DataSet: TDataSet);
begin
  try
    ibDataSet7.FieldByName('CONTA').AsString     := sPlanoDeContas;
    ibDataSet7.FieldByName('VALOR_JURO').AsFloat := ibDataSet7.FieldByName('VALOR_DUPL').AsFloat;
  except end;
end;

procedure TForm1.Planodecontas1Click(Sender: TObject);
var
  Mais1Ini: TIniFile;
begin
  Mais1ini             := TIniFile.Create('FRENTE.INI');
  sPlanoDeContas       := Mais1Ini.ReadString('Frente de caixa'  , 'Plano de contas' ,'Receita de vendas ECF');
  sPlanoDeContas       := Small_InputBox('Plano de contas','Plano de contas:',sPlanoDeContas);
  Mais1Ini.WriteString('Frente de caixa','Plano de contas',sPlanoDeContas);
  Mais1Ini.Free;
end;

procedure TForm1.Leiturapordata2Click(Sender: TObject);
begin
  PafEcfLeituraMfSimplificadaPorData; // 2022-03-29
end;

procedure TForm1.Leituraporintervalodereduo1Click(Sender: TObject);
begin
  Form7.sMfd := '1';
  Form7.Label1.Caption := 'Informe as condições para a leitura da MFD ' +
                          'e clique  <Avançar> para continuar.';;
  //Form7.Label2.Caption:='e clique  <Avançar> para continuar.';
  Form7.DateTimePicker1.Visible := False;
  Form7.DateTimePicker2.Visible := False;
  Form7.MaskEdit1.Visible       := True;
  Form7.MaskEdit2.Visible       := True;
  Form7.CheckBox1.Visible       := False;
  Form7.Label3.Caption          := 'COO inicial:';
  Form7.Label5.Caption          := 'COO final:';
  Form7.Caption := 'Leitura da MFD por COO';
  Form7.ShowModal;
  Form1.Repaint;
end;

procedure TForm1.Leiturapordata3Click(Sender: TObject);
begin
  PafEcfLeituraMfdPorData; // Sandro Silva 2022-03-29
end;

procedure TForm1.Leituraporintervaloderedues2Click(Sender: TObject);
begin
  PafEcfLeituraMfSimplificadaPorIntervaloReducoes; //2022-03-29
end;

procedure TForm1.LeituraporfaixadeCOO1Click(Sender: TObject);
begin
  PafEcfLeituraMfdPorFaixaDeCOO; // Sandro Silva 2022-03-29
end;

procedure TForm1.LXLeituraX1Click(Sender: TObject);
begin
  PafEcfLeituraX; // Sandro Silva 2022-03-29
end;

procedure TForm1.MeiosdePagto1Click(Sender: TObject);
begin
  RelatorioMeiosDePagamento; // Sandro Silva 2022-03-29
end;

procedure TForm1.IdentificaodoPAFECF1Click(Sender: TObject);
var
  sCupomfiscalVinculado, sNumerosDESerie : String;
  //slECF: TStringList;
  bRetornoComando: Boolean;
begin
  Commitatudo(True); // Sandro Silva 2017-11-08 Polimig  IdentificaodoPAFECF1Click

  if TestaTudo(True) then // Sandro Silva 2017-11-08 Polimig Sem autorização uso do ecf
  begin
    Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
    Display('Aguarde!','');
    Form1.Repaint;
    try
      Commitatudo(True); // IdentificaodoPAFECF1Click // 2015-10-01
      //
      try
        if Form1.sModeloECF = '02' then _ecf02_ProgramaAplicativo(True);
        if Form1.sModeloECF = '03' then _ecf03_ProgramaAplicativo(True);
        if Form1.sModeloECF = '17' then _ecf17_ProgramaAplicativo(True);
      except end;
      //
      sAjuda := 'ecf_cotepe.htm#Identificação do PAF-ECF';
      //
      //

      Form1.IbDataSet99.Close;
      Form1.IbDataSet99.SelectSql.Clear;
      // 2015-07-29 Form1.IbDataSet99.SelectSQL.Add('select SERIE from REDUCOES group by SERIE');
      Form1.IbDataSet99.SelectSQL.Add('select SERIE, ENCRYPTHASH from ECFS');
      Form1.IbDataSet99.Open;
      //
      Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Minha chave secreta

      Form1.IBDataSet99.First;
      while not Form1.IBDataSet99.Eof do
      begin
        if (Form1.IBDataSet99.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(Form1.IBDataSet99.FieldByName('SERIE').AsString)))) then // Se o registro já foi violado não lista
          sNumerosDESerie := sNumerosDESerie + Form1.IBDataSet99.FieldByName('SERIE').AsString + chr(10);
        Form1.iBDataSet99.Next;
      end;

      //
      sCupomFiscalVinculado := 'IDENTIFICAÇÃO DO PAF-ECF'+ Chr(10)+
                               Chr(10)+
                               'a) Laudo: '+NUMERO_LAUDO_PAF_ECF+Chr(10)+//URB0342013'+Chr(10)+
                               chr(10)+
                               'b)IDENTIFICAÇÃO DA EMPRESA DESENVOLVEDORA'+Chr(10)+
                               'b1)CNPJ: ' + CNPJ_SOFTWARE_HOUSE_PAF +chr(10)+
                               'b2)Razão Social: Zucchetti Software e'+chr(10)+'Sistemas Ltda'+chr(10)+ // Sandro Silva 2022-12-02 Unochapeco 'b2)Razão Social: Smallsoft Tecnologia em'+chr(10)+'Informática EIRELI'+chr(10)+
                               'b3)Endereço completo: Rua Getúlio Vargas, 673'+chr(10)+
                               'CEP: 89700-019 Cidade: Concórdia UF: SC'+chr(10)+
                               'b4)Telefone: (049)3425-5800'+chr(10)+
                               'b5)Contato: Alessio Mainardi'+chr(10)+ // Sandro Silva 2022-12-02 Unochapeco 'b5)Contato: Ronei Ivo Weber'+chr(10)+
                               chr(10)+
                               'c)IDENTIFICAÇÃO DO PAF-ECF'+chr(10)+
                               'c1)Nome Comercial: Small Commerce'+chr(10)+
                               'c2)Versão: '+StrTran(Form22.sBuild,'Versão e Build: ','')+chr(10)+
                               'c3)Nome do principal executável:'+chr(10)+
                               'FRENTE.EXE '+chr(10)+
                               MD5Print(MD5File(pChar('FRENTE.EXE')))+chr(10)+
                               'c4)Nome dos demais arquivos que executam funções a que se refere a alínea a do item 1 do Requisito XI e os respectivos códigos MD-5:'+chr(10)+
                               'APF_DLL2.DLL '+chr(10)+MD5Print(MD5File(pChar('APF_DLL2.DLL')))+chr(10)+
                               'BEMAFI32.DLL '+chr(10)+MD5Print(MD5File(pChar('BEMAFI32.DLL')))+chr(10)+
                               'CONSULTA.EXE '+chr(10)+MD5Print(MD5File(pChar('CONSULTA.EXE')))+chr(10)+
                               'CONVECF.DLL '+chr(10)+MD5Print(MD5File(pChar('CONVECF.DLL')))+chr(10)+
                               'NFE.EXE '+chr(10)+MD5Print(MD5File(pChar('NFE.EXE')))+chr(10)+
                               // Sandro Silva 2022-12-02 Unochapeco 'BLOCOX.EXE '+chr(10)+MD5Print(MD5File(pChar('BLOCOX.EXE')))+chr(10)+
                               'PESADO.EXE '+chr(10)+MD5Print(MD5File(pChar('PESADO.EXE')))+chr(10)+
                               'DARUMA32.DLL '+chr(10)+MD5Print(MD5File(pChar('DARUMA32.DLL')))+chr(10)+
                               'DARUMAFRAMEWORK.DLL '+chr(10)+MD5Print(MD5File(pChar('DARUMAFRAMEWORK.DLL')))+chr(10)+
                               'DLL1EFC3.DLL '+chr(10)+MD5Print(MD5File(pChar('DLL1EFC3.DLL')))+chr(10)+
                               'DLL32PHI.DLL '+chr(10)+MD5Print(MD5File(pChar('DLL32PHI.DLL')))+chr(10)+
                               'DLLG2.DLL '+chr(10)+MD5Print(MD5File(pChar('DLLG2.DLL')))+chr(10)+
                               'FRENTE.EXE '+chr(10)+MD5Print(MD5File(pChar('FRENTE.EXE')))+chr(10)+
                               'GENERAL32.DLL '+chr(10)+MD5Print(MD5File(pChar('GENERAL32.DLL')))+chr(10)+
                               'ICASH.DLL '+chr(10)+MD5Print(MD5File(pChar('ICASH.DLL')))+chr(10)+
                               'INTERFACEEPSON.DLL '+chr(10)+MD5Print(MD5File(pChar('INTERFACEEPSON.DLL')))+chr(10)+
                               'SWECF.DLL '+chr(10)+MD5Print(MD5File(pChar('SWECF.DLL')))+chr(10)+
                               'TRDECF32.DLL '+chr(10)+MD5Print(MD5File(pChar('TRDECF32.DLL')))+chr(10)+

                               Chr(10)+
                               'c5)' +
                               'LISTA.TXT '+Form1.sMD5DaLista +chr(10)+
                               Chr(10)+
                               'c6)Versão da ER-PAF-ECF: '+VERSAO_ER_PAF_ECF+chr(10)+
                               Chr(10)+
                               'C7)Data Emissão Laudo: '+ DATA_EMISSAO_LAUDO_PAF_ECF +Chr(10)+ // Sandro Silva 2019-09-23 UnoChapeco  'C7)Data Emissão Laudo: '+ '27/12/2017'+Chr(10)+ // Sandro Silva 2017-11-07 Polimig
                               Chr(10)+
                               'd)ECFs Autorizados:'+chr(10)+
                               sNumerosDESerie;
      //
      bRetornoComando := PDV_ImpressaoNaoSujeitoaoICMS(sCupomFiscalVinculado);
      if bRetornoComando then // 2015-10-06
        Demais('RG');
      //
      Sleep(3000);
      //
      //
    finally
      Display(Form1.sStatusECF,'');
      Form1.Repaint;
      Screen.Cursor             := crDefault;    // Cursor de Aguardo
    end;
  end;
end;

procedure TForm1.Relatriogerancial1Click(Sender: TObject);
begin
  PafEcfRelatorioGerancialDavEmitido; // 2022-03-29
end;

procedure TForm1.ArquivoEletrnico1Click(Sender: TObject);
begin
  PafEcfArquivoEletronicoDavEmitido; //2022-03-29
end;

procedure TForm1.ibDataSet4AfterPost(DataSet: TDataSet);
begin
  AgendaCommit(True);
end;

procedure TForm1.ibDataSet1AfterPost(DataSet: TDataSet);
begin
  AgendaCommit(True);
end;

procedure TForm1.DadosdaltimaReduoZ1Click(Sender: TObject);
begin
//  if Form1.sModeloECF = '59' then _ecf59_     asfdsadf                   if Form1.sModeloECF = '01' then SmallMsg(_ecf01_NmdeRedues(True));
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_DadosUltimaReducaoZ(True));
//  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_NmdeRedues(True));
//  if Form1.sModeloECF = '04' then SmallMsg(_ecf04_NmdeRedues(True));
//  if Form1.sModeloECF = '05' then SmallMsg(_ecf05_NmdeRedues(True));
//  if Form1.sModeloECF = '06' then SmallMsg(_ecf06_NmdeRedues(True));
//  if Form1.sModeloECF = '07' then SmallMsg(_ecf07_NmdeRedues(True));
//  if Form1.sModeloECF = '08' then SmallMsg(_ecf08_NmdeRedues(True));
//  if Form1.sModeloECF = '09' then SmallMsg(_ecf09_NmdeRedues(True));
//  if Form1.sModeloECF = '10' then SmallMsg(_ecf10_NmdeRedues(True));
//  if Form1.sModeloECF = '11' then SmallMsg(_ecf11_NmdeRedues(True));
//  if Form1.sModeloECF = '12' then SmallMsg(_ecf12_NmdeRedues(True));
//  if Form1.sModeloECF = '65' then SmallMsg(_ecf65_NmdeRedues(True));
  if Form1.sModeloECF = '14' then SmallMsg(_ecf14_DadosUltimaReducaoZ(True));
//  if Form1.sModeloECF = '15' then SmallMsg(_ecf15_NmdeRedues(True));

end;

procedure TForm1.Abrecupomcomleitor1Click(Sender: TObject);
var
  Mais1ini : tIniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  if sAbreComOLeitor = 'Não' then
    sAbreComOLeitor := 'Sim'
  else
    sAbreComOLeitor := 'Não';
  Mais1Ini.WriteString('Frente de caixa','Abre com o leitor',sAbreComOLeitor);
  Mais1Ini.Free;
  //
end;

procedure TForm1.ibDataSet10BeforePost(DataSet: TDataSet);
begin
  AgendaCommit(True);
end;

procedure TForm1.DocumentoAuxiliardeVendaDAVOramento1Click(
  Sender: TObject);
var
  sParametro: String;
begin

  sParametro := '';

  if FileExists('orca.exe') then
    ShellExecute( 0, 'Open', 'orca.exe', PChar(sParametro), '', SW_SHOW) // Sandro Silva 2020-12-15 ShellExecute( 0, 'Open', 'orca.exe', '', '', SW_SHOW)
  else
    SmallMsg('O executável orca.exe não foi encontrado na pasta de instalação do programa.');
end;

procedure TForm1.N14Click(Sender: TObject);
begin
  HH(handle, PChar( extractFilePath(application.exeName) + 'retaguarda.chm' + '>Ajuda Small'), HH_Display_Topic, Longint(PChar(sAjuda)));
end;

procedure TForm1.LMFCLeituradeMemriaFiscalCompleta1Click(Sender: TObject);
begin
  sAjuda := 'ecf_cotepe.htm#LMFC';
end;

procedure TForm1.LMFSLeituradeMemriaFiscalSimplificada1Click(
  Sender: TObject);
begin
  sAjuda := 'ecf_cotepe.htm#LMFS';
end;

procedure TForm1.EspelhoMFD1Click(Sender: TObject);
begin
  sAjuda := 'ecf_cotepe.htm#Espelho MFD';
end;

procedure TForm1.ArqMFD1Click(Sender: TObject);
begin
  GerarArquivoMFD('MFDCOMPLETA');
end;

procedure TForm1.DAVemitidos1Click(Sender: TObject);
begin
  sAjuda := 'ecf_cotepe.htm#DAV Emitidos';
end;

procedure TForm1.PopupMenu1Change(Sender: TObject; Source: TMenuItem;
  Rebuild: Boolean);
begin
  //
  sAjuda := 'ecf_F10.htm';
  //
end;

procedure TForm1.Marcadaimpressora1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_MarcaImpressora(True));
end;

procedure TForm1.ModelodoECF1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_ModeloImpressora(True));
end;

procedure TForm1.VersodoSB1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_VersaoSBImpressora(True));
end;

procedure TForm1.DatadeinstalaodoSB1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_DataInstalacaoSB(True));
end;

procedure TForm1.HoradeinstalaodoSB1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_HOraInstalacaoSB(True));
end;

procedure TForm1.Button9Click(Sender: TObject);
begin
  //
  if (not Form1.Memo1.Visible) or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Quando tem cupom aberto não
  begin
    PopupMenu1.PopUp(Form1.touch_F10.Left, Form1.touch_F10.Top - AjustaAltura(3));// Sandro Silva 2017-07-27  PopupMenu1.PopUp(15,10);
  end;
  //
end;

procedure TForm1.PapagaioClick(Sender: TObject);
begin
  //
  if sAviso = 'Sim' then
  begin
    Form1.AlertaSonoro;
  end else
  begin
    //
    Form12.Caption := 'NÃO CADASTRADO';
    //
    while not (Form12.Caption = 'Liberado') do
    begin
      //if (Pos(TIPOMOBILE, Form1.ClienteSmallMobile.sVendaImportando) > 0) and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65')) then
      if Form1.ClienteSmallMobile.ImportandoMobile // Sandro Silva 2022-08-08 if (ImportandoMobile)
        and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) then
      begin

      end
      else
      begin

        //ShowMessage('Teste 01 27509'); // Sandro Silva 2019-01-17

        Small_InputBox('Senha','Informe a senha do administrador:','');
      end;
    end;
    //
  end;
  //
end;

procedure TForm1.AvisosonorodeProdutonoCadastrdado1Click(Sender: TObject);
var
  Mais1ini : tIniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','Aviso','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa','Aviso','Sim')
      else Mais1Ini.WriteString('Frente de caixa','Aviso','Não');
  sAviso := Mais1Ini.ReadString('Frente de caixa','Aviso','Não');
  //
  Mais1Ini.Free;
  //
end;

procedure TForm1.Inverterstatusdagaveta1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  if Mais1Ini.ReadString('Frente de caixa','Status Gaveta','0') = '0'
    then Mais1Ini.WriteString('Frente de caixa','Status Gaveta','1') else Mais1Ini.WriteString('Frente de caixa','Status Gaveta','0');
  if Mais1Ini.ReadString('Frente de caixa','Status Gaveta','0') = '0' then Inverterstatusdagaveta1.Checked := False else Inverterstatusdagaveta1.Checked := True;
  Mais1Ini.Free;
  //
end;

procedure TForm1.Timer1Timer(Sender: TObject);
var
  i:integer;
  Mais1Ini: TIniFile;
  Url, IP, Alias : String;
begin
  {Sandro Silva 2021-09-08 inicio}
  if Form1.LabelF6.Caption = 'F6'+chr(10)+'Gerenciador'+chr(10)+Form1.sTipoDocumento2 then
    Form1.touch_F6.Picture.Bitmap := Form1.touch_F11.Picture.Bitmap
  else
    Form1.touch_F6.Picture.Bitmap := Form1.touch_F5.Picture.Bitmap;
  {Sandro Silva 2021-09-08 fim}

  //
  // Desabilita os timers para não dar um commit
  //
  //
  Form1.Timer1.Enabled := False;
  //
  if Copy(TimeToStr(Time),7,2)='00' then
  begin
    //
    try
      Mesas(StrToInt(Form1.sMesas)); // Timer1
    except
      SmallMsg('Erro: 14388');
    end;
    //
  end;
  //
  if FileExists(Form1.sAtualOnLine+'\small.ini') then
  begin
    //
    // Rede Ok
    //
    if not bStatusRede then
    begin
      bStatusRede := True; // Liga o botao rede no timer
      StatusRede(True,90);
    end;
    //
    if Form1.Label1.Caption = 'Off line' then
    begin
      //
      //
      // Descarga do PDV
      //


      if FileExists(Form1.sAtualOnLine+'\small.ini') then
      begin
        //
        try
          //
          ChDir(Form1.sAtualOnLine);
          //
          Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
          Display('Aguarde a DESCARGA do PDV...','Aguarde a DESCARGA do PDV...');
          //
          Mais1Ini := TIniFile.Create(Form1.sAtualOnLine+'\small.ini');
          //
          Url      := Mais1Ini.ReadString('Firebird','Server url','');
          IP       := AllTrim(Mais1Ini.ReadString('Firebird','Server IP',''));
          Alias    := AllTrim(Mais1Ini.ReadString('Firebird','Alias',''));
          //
          if IP <> '' then
            Url := IP+':'+Url+'\small.fdb' // Sandro Silva 2019-03-15 Url := IP+':'+Url+'\small' + EXTENSAO_BANCO
          else
            Url:= Url+'\small.fdb'; // Sandro Silva 2019-03-15             Url:= Url+'\small' + EXTENSAO_BANCO;

          //
          if Alltrim(Alias) <> '' then
          begin
            Url := IP+':'+Alias;
          end;
          //
          Mais1Ini.Free;
          //
          Screen.Cursor         := crHourGlass;    // Cursor de Aguardo
          Form22.Label6.Caption := 'Aguarde a DESCARGA do PDV...';

          //
          Form1.IBDatabase2.Close;
          Form1.IBDatabase2.Params.Clear;
          Form1.IbDatabase2.DatabaseName := Url;
          Form1.IBDatabase2.Params.Add('USER_NAME=SYSDBA');
          Form1.IBDatabase2.Params.Add('PASSWORD=masterkey');
          Form1.IbDatabase2.Open;
          Form1.IBTransaction3.Active := True;
          //

          //ShowMessage('Teste 21796 ' + url); // Sandro Silva 2022-11-29 UnoChapeco
          Commitatudo2(True); // 2015-11-05 Off Line
          //ShowMessage('Teste 21798 ' + url); // Sandro Silva 2022-11-29 UnoChapeco

          CommitaTudo(True); // Off Line antes descarga

          //ShowMessage('Teste 21801 ' + url); // Sandro Silva 2022-11-29 UnoChapeco
          Form1.IBTransaction3.Rollback; // 2015-11-05

          //ShowMessage('Teste 21799 '); // Sandro Silva 2022-11-29 UnoChapeco

          //
          Descarga('ALTERACA');
          //ShowMessage('Teste 21803 '); // Sandro Silva 2022-11-29 UnoChapeco
          Descarga('CAIXA');
          //ShowMessage('Teste 21805 '); // Sandro Silva 2022-11-29 UnoChapeco
          Descarga('RECEBER');
          //ShowMessage('Teste 21807 '); // Sandro Silva 2022-11-29 UnoChapeco
          Descarga('PAGAMENT');
          //ShowMessage('Teste 21809 '); // Sandro Silva 2022-11-29 UnoChapeco
          Descarga('REDUCOES'); // 2015-11-05
          //ShowMessage('Teste 21811 '); // Sandro Silva 2022-11-29 UnoChapeco
          Descarga('DEMAIS'); // 2015-11-05
          //ShowMessage('Teste 21813 '); // Sandro Silva 2022-11-29 UnoChapeco
          Descarga('BLOCOX'); // 2016-02-22
          //ShowMessage('Teste 21813 '); // Sandro Silva 2022-11-29 UnoChapeco
          try
            Form1.IBTransaction3.Commit; // 2015-11-06
            //LogFrente('Teste 01: Commit 3'); // Sandro Silva 2022-11-29 UnoChapeco
          except
            //LogFrente('Teste 01: Erro Commit 3'); // Sandro Silva 2022-11-29 UnoChapeco
          end;

          try
            Form1.IBTransaction1.Commit;
            //LogFrente('Teste 01: Commit 1'); // Sandro Silva 2022-11-29 UnoChapeco
            //LogFrente('Teste 01: Erro Commit 1'); // Sandro Silva 2022-11-29 UnoChapeco
          except

          end;

          try
            Form1.IBTransaction2.Commit;
            //LogFrente('Teste 01: Commit 2'); // Sandro Silva 2022-11-29 UnoChapeco
            //LogFrente('Teste 01: Erro Commit 2'); // Sandro Silva 2022-11-29 UnoChapeco
          except

          end;

          HasHs('REDUCOES', True); // 2015-11-07
          HasHs('DEMAIS', True); // 2015-11-07
          Hashs('PAGAMENT', True); // 2015-11-09
          Hashs('ALTERACA', True); // 2015-11-09

          try
            Form1.IBTransaction3.Commit; // 2015-11-06
            //LogFrente('Teste 01: Commit 3'); // Sandro Silva 2022-11-29 UnoChapeco
          except
            //LogFrente('Teste 01: Erro Commit 3');
          end;

          try
            Form1.IBTransaction1.Commit;
            //LogFrente('Teste 01: Commit 1'); // Sandro Silva 2022-11-29 UnoChapeco
            //LogFrente('Teste 01: Erro Commit 1'); // Sandro Silva 2022-11-29 UnoChapeco
          except

          end;

          try
            Form1.IBTransaction2.Commit;
            //LogFrente('Teste 01: Commit 2');
            //LogFrente('Teste 01: Erro Commit 2');
          except

          end;

          AgendaCommit(True);
          //
          try
            Form1.IBDatabase2.Close;
          except
          end;
          try
            Form1.IBDatabase1.Close;
          except
          end;
          //

          while FileExists(pchar(Form1.sPastadoExecutavel+'\offline.fdb')) do
          begin
            DeleteFile(sAtual+'\offline.fdb');
          end;

          //
          if Memo2.Lines.Text <> 'Total R$ 0,00' then
          begin
            if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
              Display('EM VENDA','Entre com EAN 13, Código ou Descrição')
            else
              Display('EM VENDA','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'); // Sandro Silva 2016-03-01
          end
          else Display(Form1.sStatusECF,Form1.sF);
          //
          //
        except
          on E: Exception do
          begin
            //
            SmallMsg('Não foi possível abrir o banco de dados'+Chr(10)+
                        'para fazer a DESCARGA do PDV.'+chr(10)+
                        ''+Chr(10)+
                        '1 - Sua conecção de rede esta OK.'+Chr(10)+
                        '2 - Verifique o IP no SMALL.INI'+Chr(10)+
                        ''
                        + IfThen(LerParametroIni('FRENTE.INI', 'Frente de Caixa', 'Log PAF', 'Não') = 'Sim',
                                #13 + Form1.IBDataSet200.SelectSQL.Text
                                + #13 + url
                                + #13 + E.Message
                                , '')
                        );
            FecharAplicacao(ExtractFileName(Application.ExeName));

          end;
        end;

      end; //if FileExists(Form1.sAtualOnLine+'\small.ini') then
      //
      try Form1.IBTransaction1.Rollback; except end;
      try Form1.IBTransaction2.Rollback; except end;
      try Form1.IBDatabase1.ForceClose; except end;
      try Form1.IBTransaction3.Rollback; except end;
      try Form1.IBDatabase2.ForceClose; except end;

      //
      AbreArquivos(True);
      Commitatudo(True); // Off line depois descarga
      Commitatudo2(True); // 2015-11-11 Off line

      // Depois de descarregar e ficar on line assina os registros?

      HasHs('REDUCOES', True); // Sandro Silva 2016-02-27
      HasHs('DEMAIS', True); // Sandro Silva 2016-02-27
      Hashs('PAGAMENT', True); // Sandro Silva 2016-02-27
      Hashs('ALTERACA', True); // Sandro Silva 2016-02-27
      //
      // Reabre as mesas
      //
      try
        sMesas := sMesasOffLine;
        TipoDeconta(True);
        Mesas(StrToInt(Form1.sMesas)); // Volta do off line

        Form1.Teclas_touch(True);
        if ((Copy(Form1.sConcomitante,1,12) <> 'CONCOMITANTE')) and ((Copy(Form1.sConcomitante,1,3) <> 'DAV')) then
        begin
          // Menu gerencial
          Form1.Confernciademesa1.Visible  := True;
          Form1.ransfernciademesa1.Visible := True;
          Form1.Confernciademesa1.Enabled  := True;
          Form1.ransfernciademesa1.Enabled := True;
          Form1.empo1.Enabled              := True;

          //Menu fiscal
          Form1.ransfernciaentremesas1.Enabled := True;
          Form1.MesasAbertas1.Enabled          := True;

          Form1.Image2.Visible := False;
          Form1.Panel9.Visible := False;

        end;

      except end;
      //
    end; // if Form1.Label1.Caption = 'Off line' then
    //
  end else
  begin
    //
    // Rede NAO
    //
    if Form1.Label1.Caption = 'On line' then
    begin
      //
      StatusRede(True, 10);
      StatusECF(True, 10);
      StatusFiscal(True, 10);
      //
      // Form1.Label1.Caption := 'Off line'; Form1.Label1.Repaint;
      //
      Display('Falha na rede...','Entrando em modo off line...'); // Se trocar a mensagem do segundo parametro cuidado deve trocar também outras

      //
      bStatusRede := False; // Apaga o botão rede no timer
      StatusRede(True,90);
      //
      // SmallMsg('Teste 2: '+chr(10)+chr(10)+Form1.sAtual+chr(10)+Form1.sPastaDoExecutavel);
      //
      if (Form1.sAtual <> Form1.sPastaDoExecutavel) then
      begin
        Mais1ini  := TIniFile.Create('FRENTE.INI');
        Mais1Ini.WriteString('On line','Pasta',pchar(Form1.sAtualOnLine)); // Timer1Timer()
        Mais1ini.Free;
      end;
      //
      try
        Form1.IBTransaction1.Rollback;
      except

      end;
      try
        Form1.IBTransaction2.Rollback;
      except
      end;
      //
      with Form1 do
      begin
        for i:= 0 to ComponentCount-1 do
        begin
          if Components[i].ClassName = 'TIBQuery' then
          begin
            if TIBQuery(Components[i]).Active then
              SmallMsg('Fechando '+Components[i].Name);
          end;
        end;
      end;
      //
      try
        Form1.IBTransaction1.Rollback;
      except
      end;
      try
        Form1.IBDatabase1.ForceClose;
      except
      end;
      //
      if (Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01') then
      begin
        Form1.Button8Click(Sender); // Corta o papel, commita, etc e tal, fecha a tela da mesa do cupom status das mesas, zeresima
      end;
      //
      AbreArquivos(True);

      //
      if Memo2.Lines.Text <> 'Total R$ 0,00' then
      begin
        if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (PAFNFCe = False) then // Sandro Silva 2020-12-07 if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') or (Pos('FRENTE.EXE', AnsiUpperCase(ExtractFileName(Application.ExeName))) = 0) then
          Display('EM VENDA','Entre com EAN 13, Código ou Descrição')
        else
          Display('EM VENDA','Menu Fiscal Indisponível nesta tela. Entre com EAN 13, Código ou Descrição'); // Sandro Silva 2016-03-01
      end
      else
        Display(Form1.sStatusECF,Form1.sF);
      //
    end;
    //
  end;

  //
  // Desabilita os timers para não dar um commit
  //
  Form1.Timer1.Enabled := True;
  //
  if Form1.Label1.Caption = 'Off line' then
  begin
    Form1.touch_F4.Visible := False;
    Form1.LabelF4.Visible  := False;
  end;
end;

procedure TForm1.AtoCOTEPE09081Click(Sender: TObject);
begin
  PafEcfAtoCOTEPE0908; // Sandro Silva 2022-03-29
end;

procedure TForm1.Convnio57951Click(Sender: TObject);
begin
  PafEcfConvenio57951; // Sandro Silva 2022-03-29
end;

procedure TForm1.abndiceTcnicoProduo1Click(Sender: TObject);
begin
  CommitaTudo(True);// abndiceTcnicoProduo1Click// 2015-09-12
  Form9.ShowModal;
end;

procedure TForm1.Consultadepreos1Click(Sender: TObject);
begin

  Deletefile(Form1.sAtual + '\F9.TXT');
  ShellExecute( 0, 'Open','consulta.exe','', '', SW_SHOW);

  Sleep(100);

  while ConsultaProcesso('CONSULTA.exe') do
  begin
    Sleep(50);
  end;

  if FileExists(Form1.sAtual+'\F9.TXT') then
  begin
    // Executa o evento do botao F9
    Form1.touch_F9Click(Form1.touch_F9);
    Deletefile(Form1.sAtual+'\F9.TXT');
  end;

end;

procedure TForm1.Imprimiroramento1Click(Sender: TObject);
begin
  RelatorioImpressaoOrcamento; // Sandro Silva 2022-03-29
end;

procedure TForm1.ibDataset88BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('REDUCOES', DataSet, True);
end;

procedure TForm1.ibDataSet4BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('ESTOQUE',DataSet, True);
end;

procedure TForm1.ibDataSet27BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('ALTERACA',DataSet, True);
end;

procedure TForm1.ibDataSet37BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('ORCAMENT',DataSet, True);
end;

procedure TForm1.IBDataSet28BeforeInsert(DataSet: TDataSet);
begin
  //
  try
    //
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_PAGAMENT,1) from rdb$database');
    ibDataset99.Open;
    sProximo28 := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
    //
    try
      ibDataSet99.Close;
      ibDataSet99.SelectSql.Clear;
      ibDataset99.SelectSql.Add('select gen_id(G_HASH_PAGAMENT,1) from rdb$database');
      ibDataset99.Open;
      HasHs('PAGAMENT', True);
    except end;
    //
  except
    SmallMsg('Erro: 2 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos".. Erro: 11');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
  //
end;

procedure TForm1.IBDataSet28BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('PAGAMENT', DataSet, True);
end;

procedure TForm1.IBDataSet28NewRecord(DataSet: TDataSet);
begin
  ibDataSet28.FieldByName('REGISTRO').AsString := sProximo28;
end;

procedure TForm1.RegistromanualdeNFmodelo11Click(Sender: TObject);
var
  sIdentificaMD5Paf: String;
begin
  GetDir(0,Form1.sAtual);
//  ShellExecute( 0, 'Open', pChar(Form1.sAtual+'\NFe.exe'), pChar('URB'+Form1.sMD5DaLista + ' ' + Form1.sCaixa), '', SW_SHOW); // Não alterar 'URB' NFE.EXE usa para se configurar
  if PAFNFCe then // Sandro Silva 2020-12-08
  begin
    sIdentificaMD5Paf := 'URB' + PARAMETRO_PAFNFCE;
    ShellExecute( 0, 'Open', pChar(Form1.sAtual+'\Small Commerce.exe'), pChar(sIdentificaMD5Paf + ' ' + Form1.sCaixa), '', SW_SHOW);
  end
  else
  begin
    sIdentificaMD5Paf := 'URB' + Copy(Form1.sMD5DaLista, 1, 32);
    ShellExecute( 0, 'Open', pChar(Form1.sAtual+'\NFe.exe'), pChar(sIdentificaMD5Paf + ' ' + Form1.sCaixa), '', SW_SHOW); // Não alterar 'URB' NFE.EXE usa para se configurar
  end;
end;

procedure TForm1.MenuFiscal1Click(Sender: TObject);
begin
  //
  Form1.SaveDialog1.InitialDir := Form1.sAtual;
  //
end;

procedure TForm1.Button8Click(Sender: TObject);
begin
  //
  Screen.Cursor := crHourGlass; // Cursor de Aguardo
  //

  Form1.Label13.Visible := False; // Sandro Silva 2021-07-29

  Form1.Memo1.Visible  := False;
  Form1.Panel5.Visible := False;
  Form1.Memo2.Visible  := False;
  Form1.Memo3.Visible  := False;

  if Form1.sModeloECF = '01' then
  begin
    Form1.DBGrid2.Visible := False;
    Edit1.Clear;
  end;

  ExibeScrollCupom(Form1.Memo1.Visible); // Sandro Silva 2016-08-03

  //
  Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible := False;
  //
  MostraALogo(True, False); // Sandro Silva 2018-04-26  MostraALogo(True);
  //
  Form1.fTotal := 0;
  //
  Form1.Label10.Caption := 'Total do cupom R$';
  Form1.Label_11.Caption := Right(Replicate(' ',8)+'0,00',8);
  Form1.Label_12.Caption := Right(Replicate(' ',8)+'0,00',8);
  Form1.Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);
  //
  Memo2.Lines.Text := 'Total R$ '+allTrim(Right(Replicate(' ',8)+'0,00',8));
  Label_13.Caption := Right(Replicate(' ',8)+'0,00',8);
  //
  // 'SUBTOTAL R$ '+AllTrim(Format('%10.2n',[fTotal]));
  //
  Form1.Repaint;
  //
  if (Form1.Label_7.Caption <> 'Entrando em modo off line...') then // Caiu a rede
  begin
    CommitaTudo(True); // Fecha Mesa
    Form1.DeletaDataSet25; // Button8Click()
    Form1.ibDataSet25.Append;
  end;
  //
  // No vídeo
  //
  Form1.iMesaAberta := 0;
  CortaPapelNoVideo(True); // fecha a venda TForm1.Button8Click()

  if Trim(Form2.Edit8.Text) <> '' then
  begin
    Form2.Edit8.Text      := '';
    Form1.sConveniado     := '';
    Form1.sEnderecoClifor := ''; // Sandro Silva 2016-09-30
    sCidadeClifor         := '';
  end;

  Form2.Edit10.Text := '';

  Form2.Edit2.Text := '';
  Form2.Edit1.Text := '';
  Form2.Edit3.Text := '';

  Form2.MaskEdit1.Text := '';

  Form2.EdMarketplace.Text := ''; // Sandro Silva 2022-04-05

  //
  Screen.Cursor := crDefault; // Cursor normal
  //
  if (Form1.ClienteSmallMobile.sVendaImportando = '') then
  begin
    if Form1.Edit1.CanFocus then
      Form1.Edit1.SetFocus;
  end;
  //
  Form1.sModeloECF  := Form1.sModeloECF_Reserva;
  //
  if (Copy(Form1.sStatusECF,1,4) = 'Mesa') or (Copy(Form1.sStatusECF,1,4) = 'Cont') then
  begin
    Form1.sStatusECF := Form1.sStatusECF_RES;
  end;
  //
  if Form1.bBalancaAutonoma = False then // Sandro Silva 2018-12-18
    Display(Form1.sStatusECF,Form1.sF);
  //
  Button2.Enabled   := True;
  Button18.Enabled  := False;

  //Sandro Silva 2015-05-06 Quando fecha mesa aberta e for NFC-e ou SAT deve exibir as opções de OS e Orçamento
  if (not ((Form1.iMesaAberta <> 0) and (Form1.sModeloECF = '01'))
    and ((Copy(Form1.sConcomitante,1,3) = 'DAV'))
         or ((sModeloECF = '65'))
         or (sModeloECF = '59')
         or (sModeloECF = '99')
         ) then
  begin
    if (Form1.bStatusECF and Form1.bStatusFiscal) or (sModeloECF = '59') or (sModeloECF = '65') or (sModeloECF = '99') then
    begin
      HabilitaBotaoF11(True);
      HabilitaBotaoF12(True);
    end;
  end;
  //
end;

procedure TForm1.MesasAbertas1Click(Sender: TObject);
var
  sCupomfiscalVinculado : String;
  bSoEmTela: Boolean;
begin

  bSoEmTela := False;
  if PAFNFCe then
    bSoEmTela := (Application.MessageBox(PAnsiChar('Listar na tela?' + #13 + #13 + 'Sim: Lista na tela' + #13 + 'Não: Somente impressão'), 'Atenção', MB_YESNO + MB_ICONQUESTION) = id_yes);

  //Evitando problema de não exibir itens lançados nas mesas por 2 terminais diferentes. Um não exibe os dados do outro na primeira abertura da mesa. Ver com Gian/Fernanda}
  CommitaTudo(True); // MesasAbertas1Click

  if TestaTudo(True) then // Sandro Silva 2017-11-10 Polimig
  begin

    //
    Form1.IBQuery1.Close;
    Form1.IBQuery1.SQL.Clear;
    Form1.IBQuery1.SQL.Add('select sum(TOTAL), max(SEQUENCIALCONTACLIENTEOS) as SEQUENCIALCONTACLIENTEOS, PEDIDO from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') group by PEDIDO'); // Sandro Silva 2017-12-15  Form1.IBQuery1.SQL.Add('select sum(TOTAL), PEDIDO from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') group by PEDIDO');
    Form1.IBQuery1.Open;
    //
    if Form1.IBQuery1.Eof then
    begin
      sCupomFiscalVinculado := 'NENHUMA '+UpperCase(sMesaOuConta)+' ESTA ABERTA'+Chr(10);
    end else
    begin
      //
      if (Form1.sModeloECF = '99') or (Form1.sModeloECF_Reserva = '99') then   // Sandro Silva 2020-09-29
        sCupomFiscalVinculado := UpperCase(sMesasOuContas)+' ABERTAS'+Chr(10)
      else
        sCupomFiscalVinculado := UpperCase(sMesasOuContas)+' ABERTAS'+Chr(10)+Chr(10);

      sCupomFiscalVinculado := sCupomFiscalVinculado
        +'-----------------------------------------------'+chr(10);
      //
      Form1.IBQuery1.First;
      while not Form1.IBQuery1.Eof do
      begin
        //Menor data e hora do movimento da mesa
        Form1.IBQuery2.Close;
        Form1.IBQuery2.SQL.Text :=
         'select min(cast(DATA || '' '' || HORA as timestamp)) as DATAHORA ' + // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco 'select min(DATA) as DATA, min(HORA) as HORA ' +
         'from ALTERACA ' +
         'where (TIPO=''MESA'' or TIPO=''DEKOL'') ' +
         'and PEDIDO = ' + QuotedStr(Form1.IBQuery1.FieldByName('PEDIDO').AsString);
        Form1.IBQuery2.Open;
        Form1.IBQuery2.First;
        //
        if Copy(Form1.sConcomitante,1,2) = 'OS' then
          sCupomFiscalVinculado := sCupomFiscalVinculado + Right(Form1.IBQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString, 10) + ' DATA ' + FormatDateTime('dd/mm/yyyy', Form1.IBQuery2.FieldByName('DATAHORA').AsDateTime) + ' HORA ' + FormatDateTime('HH:nn:ss', Form1.IBQuery2.FieldByName('DATAHORA').AsDateTime) + chr(10)// Sandro Silva 2017-12-27 Polimig  sCupomFiscalVinculado := sCupomFiscalVinculado + Right(Form1.IBQuery1.FieldByName('PEDIDO').AsString, 3) + Right(Form1.IBQuery1.FieldByName('SEQUENCIALCONTACLIENTEOS').AsString, 10) + ' DATA ' + Form1.IBQuery2.FieldByName('DATA').AsString + ' HORA ' + Form1.IBQuery2.FieldByName('HORA').AsString + chr(10)
        else
          sCupomFiscalVinculado := sCupomFiscalVinculado +
            Alltrim(UpperCAse(Copy(sMesaOuConta,1,5))) + ' ' + Form1.IBQuery1.FieldByName('PEDIDO').AsString + ' DATA ' + FormatDateTime('dd/mm/yyyy', Form1.IBQuery2.FieldByName('DATAHORA').AsDateTime) + ' HORA ' + FormatDateTime('HH:nn:ss', Form1.IBQuery2.FieldByName('DATAHORA').AsDateTime) +chr(10);
        Form1.IBQuery1.Next;
      end;
      //
    end;

    if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
    begin
      sCupomFiscalVinculado := CabecalhoRelatoriosGerenciais + sCupomFiscalVinculado;
    end;

    //
    bChaveGerencialOk := PDV_ImpressaoNaoSujeitoaoICMS(ConverteAcentos(sCupomFiscalVinculado), bSoEmTela);
    //
    if bChaveGerencialOk then // 2015-10-06
      Demais('RG');

    Sleep(1000);
    //
    //
    Form1.ibQuery1.Close;
    //
  end;
end;

procedure TForm1.ransfernciaentremesas1Click(Sender: TObject);
var
  sCupomfiscalVinculado : String;
  bRetornoComando: Boolean;
begin
  //Evitando problema de não exibir itens lançados nas mesas por 2 terminais diferentes. Um não exibe os dados do outro na primeira abertura da mesa. Ver com Gian/Fernanda}
  CommitaTudo(True); // ransfernciaentremesas1Click

  //
  sCupomFiscalVinculado := 'TRANSFERENCIAS ENTRE '+AnsiUpperCase(sMesasOuContas);
  //
  Form1.IBQuery1.Close;
  Form1.IBQuery1.SQL.Clear;
  Form1.IBQuery1.SQL.Add('select sum(TOTAL), PEDIDO, DAV from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') group by PEDIDO, DAV');
  Form1.IBQuery1.Open;
  //
  Form1.IBQuery1.First;
  //
  while not Form1.IBQuery1.Eof do
  begin
    //
    if Alltrim(Form1.IBQuery1.FieldByName('DAV').AsString)<>'' then
    begin
      //
      Form1.IBQuery2.Close;
      Form1.IBQuery2.SQL.Clear;
      Form1.IBQuery2.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(Form1.IBQuery1.FieldByName('PEDIDO').AsString)+' order by ITEM');
      Form1.IBQuery2.Open;
      Form1.IBQuery2.First;
      //
      if (Form1.sModeloECF_Reserva = '99') or (Form1.sModeloECF = '99') then // Sandro Silva 2020-09-29 
        sCupomFiscalVinculado := sCupomFiscalVinculado + chr(10)
      else
        sCupomFiscalVinculado := sCupomFiscalVinculado + chr(10) + chr(10);

      sCupomFiscalVinculado := sCupomFiscalVinculado
      +'-----------------------------------------------'+chr(10)
      +sMesaOuConta+' ORIGEM '+Form1.IBQuery1.FieldByName('DAV').AsString+chr(10)
      +sMesaOuConta+' DESTINO '+Form1.IBQuery2.FieldByName('PEDIDO').AsString+chr(10)
      +'-----------------------------------------------'+chr(10)
      +'IT  DESCRICAO                 QTD     R$ UNIT  '+chr(10)
      +'--- ------------------------- ------- ---------'+chr(10);
      //
      while not Form1.IBQuery2.Eof do
      begin
        //
        if Alltrim(Form1.IBQuery2.FieldByName('DAV').AsString)=Form1.IBQuery1.FieldByName('DAV').AsString then
        begin
          //
          if Form1.IBQuery2.FieldByName('VENDEDOR').AsString <> '<cancelado>' then
          begin
            //
            sCupomFiscalVinculado := sCupomFiscalVinculado
            + Right(Form1.IBQuery2.FieldByName('ITEM').AsString,3)
            + ' ' + Copy(Form1.IBQuery2.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25)
            + ' ' + Format('%7.3n',[Form1.IBQuery2.FieldByName('QUANTIDADE').AsFloat])  /// 2015-11-16 qtd 3 casas igual ao cupom e conferência de mesa
            + ' ' + Format('%8.2n',[Form1.IBQuery2.FieldByName('UNITARIO').AsFloat]) // Sandro Silva 2018-03-26  + ' ' + Format('%9.2n',[Form1.IBQuery2.FieldByName('UNITARIO').AsFloat])
            +  Chr(10);
          end else
          begin
            sCupomFiscalVinculado := sCupomFiscalVinculado
            + Right(Form1.IBQuery2.FieldByName('ITEM').AsString,3)
            + ' ' + Copy(Form1.IBQuery2.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25)
            + ' ' + Format('%7.3n',[Form1.IBQuery2.FieldByName('QUANTIDADE').AsFloat])
            + ' <cancelado>'
            +  Chr(10);
          end;
          //
        end;
        //
        Form1.IBQuery2.Next;
        //
      end;
    end;
    //
    Form1.IBQuery1.Next;
  end;

  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  begin
    sCupomFiscalVinculado := CabecalhoRelatoriosGerenciais + sCupomFiscalVinculado;
  end;
  
  //
  // SmallMsg(sCupomFiscalVinculado);
  //
  bRetornoComando := PDV_ImpressaoNaoSujeitoaoICMS(ConverteAcentos(sCupomFiscalVinculado) );
  //
  if bRetornoComando then // 2015-10-06
    Demais('RG');
  Sleep(1000);
  //
  Form1.ibQuery1.Close;
  //
end;

procedure TForm1.Confernciademesa1Click(Sender: TObject);
begin
  //Evitando problema de não exibir itens lançados nas mesas por 2 terminais diferentes. Um não exibe os dados do outro na primeira abertura da mesa. Ver com Gian/Fernanda}
  Commitatudo(True); // Confernciademesa1Click

  if TestaTudo(True) then // Sandro Silva 2017-11-10 Polimig
  begin
    RelatorioConferenciaDeMesa;
  end;
end;

procedure TForm1.MesaDragDrop(Sender, Source: TObject; X, Y: Integer);
begin
  //Conforme a classe do objeto finaliza a operação
  if (Source.ClassType = TImage) then
  begin
    TImage(Sender).EndDrag(True);
  end;
  //
  if (Source.ClassType = TLabel) then
  begin
    TLabel(Sender).EndDrag(True);
  end;
  //
end;

procedure TForm1.MesaDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  // Se listbox, edit ou label aceita transferência
  if (Source.ClassType = TImage) then Accept := True;
  if (Source.ClassType = TLabel) then Accept := True;
end;

procedure TForm1.MesaEndDrag(Sender, Target: TObject; X, Y: Integer);
begin
  //
  if Copy(Form1.sConcomitante,1,2) <> 'OS' then
  begin
    // trata o fim de uma operacao que foi aceita
    if Target <> nil then // destino existe
    begin
      // se quem enviou é um Label ou um Image
      if (Copy(TComponent(Target).Name,1,10) = 'Label_Mesa') or (Copy(TComponent(Target).Name,1,10) = 'Image_Mesa') then
      begin
        if (Sender.ClassType = TImage) or (Sender.ClassType = TLabel) then
        begin
          if (Target.ClassType = TLabel) or (Target.ClassType = TImage) then
          begin
            //
            // SmallMsg('Destino: '+TLabel(Target).Caption +Chr(10)+ 'Origem: '+ TLabel(Sender).Caption);
            //
            if TComponent(Target).Name <> TComponent(Sender).Name then
            begin
              //
              // Só entra se for mesa diferente para evitar acinoar no duplo click
              //
              try
                try
                  //
                  Timer2.Enabled := False; // Sandro Silva 2016-03-23
                  Form1.Timer1.Enabled := False;
                  Form8.SelecionaMesas(LimpaNumero(tComponent(Sender).Name),LimpaNumero(TComponent(Target).Name));
                  Form8.ShowModal;
                  //
                  Sender.Free;
                  Target.Free;
                  //
                  Mesas(StrToInt(Form1.sMesas)); // form8.Close
                  //
                  if Form1.ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-03-23
                    Timer2.Enabled := True;
                except
                  SmallMsg('Erro: 15336');
                end;
              finally
                 Form1.Timer1.Enabled := True;
              end;
              //
            end;
          end;
        end;
      end;
      //
    end;
  end;
  //
end;

procedure TForm1.MesaMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  try
    // 2015-09-14 with Sender as TImage do iiMesa := StrToInt(LimpaNumero(Name));
    iiMesa := StrToIntDef(LimpaNumero(TComponent(Sender).Name), 0);
  except
    iiMesa := 0;
  end;
end;

procedure TForm1.MesaMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  //
  // quando pressiona botão esquerdo do mouse
  //
  if TImage(Sender).Hint <> sMesaOuConta+' fechada' then
  begin
    if Form1.iMesaAberta = 0 then // Quando tem mesa aberta não arrasta
    begin
      if not Form1.Memo1.Visible then // Quando tem cupom aberto não arrasta
      begin
        if (Button = mbLeft) then
        begin
          if (Sender.ClassType = TImage) then // Pressionou sobre um label
            TImage(Sender).BeginDrag(False); // inicia a operacao
          if (Sender.ClassType = TLabel) then // Pressionou sobre um label
            TLabel(Sender).BeginDrag(False); // inicia a operacao
        end;
      end;
    end;
  end;
end;

procedure TForm1.ransfernciademesa1Click(Sender: TObject);
var
  sMesaOrigem: String;
begin
  if TestaTudo(True) then // Sandro Silva 2017-11-10 Polimig
  begin
    //
    sMesaOrigem := Trim(Small_InputBox('Transferência de '+sMesaOuConta,'Transferir da '+sMesaOuConta+' número: ',''));
    if (sMesaOrigem <> '') and (StrToIntDef(sMesaOrigem, 0) > 0) then
    begin
      Timer2.Enabled := False;
      Form8.SelecionaMesas(sMesaOrigem,'');
      Form8.ShowModal;
      Mesas(StrToInt(Form1.sMesas)); // form8.Close
      if Form1.ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-03-23
        Timer2.Enabled := True;
    end;
    //
  end;
end;

procedure TForm1.Button11Click(Sender: TObject);
var
  //
  bCancela : boolean;
  sTexto : String;
  sItemCancelado: String; // Sandro Silva 2017-06-02
  //
begin
  //
  sTexto := Form1.Edit1.Text;
  //
  bCancela := False;
  //
  if Form1.sModeloECF = '01' then bCancela := _ecf01_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '02' then bCancela := _ecf02_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '03' then bCancela := _ecf03_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '12' then bCancela := _ecf12_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '14' then bCancela := _ecf14_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '15' then bCancela := _ecf15_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '17' then bCancela := _ecf17_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '59' then bCancela := _ecf59_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '65' then bCancela := _ecf65_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '99' then bCancela := _ecf99_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then bCancela := _ecf04_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '05' then bCancela := _ecf05_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '06' then bCancela := _ecf06_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '07' then bCancela := _ecf07_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '08' then bCancela := _ecf08_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '09' then bCancela := _ecf09_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '10' then bCancela := _ecf10_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  if Form1.sModeloECF = '11' then bCancela := _ecf11_CancelaItemN(StrZero(StrToInt(AllTrim(sTexto))*-1,4,0),Form1.ibDataSet27.FieldByName('DESCRICAO').AsString);
  }
  //
  if bCancela then
  begin
    //
    ImprimeNoVideo(StrZero(StrToInt(AllTrim(sTexto))*-1,3,0)+' Item cancelado');
    //
    // -----------------------------------------------------------------------------------
    //
    Form1.fTotal := TruncaDecimal(TruncaDecimal(Form1.fTotal, Form1.iTrunca)-TruncaDecimal(Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency, Form1.iTrunca), Form1.iTrunca); // Sandro Silva 2018-12-14 fTotal := TruncaDecimal(TruncaDecimal(fTotal, Form1.iTrunca)-TruncaDecimal(Form1.ibDataSet27TOTAL.AsFloat, Form1.iTrunca), Form1.iTrunca);
    //
    // Retorna a qtd no estoque
    //
    if AllTrim(Form1.ibDataSet27.FieldByName('DESCRICAO').AsString) <> '' then
    begin

      sItemCancelado := Form1.ibDataSet27.FieldByName('ITEM').AsString; // Sandro Silva 2017-06-02

      //
      Form1.ibDataSet4.Close;
      Form1.ibDataSet4.SelectSQL.Clear;
      Form1.ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Alltrim(Form1.ibDataSet27.FieldByName('CODIGO').AsString))+'   and coalesce(ATIVO,0)=0 ');
      Form1.ibDataSet4.Open;
      //
      if (Form1.ibDataSet27.FieldByName('CODIGO').AsString = Form1.ibDataSet4.FieldByName('CODIGO').AsString) and (Form1.ibDataSet4.FieldByName('CODIGO').AsString <> '') then
      begin
        //
        // Retorna a quantidade no estoque
        //
        if (Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO') or (Form1.ibDataSet27.FieldByName('TIPO').AsString = 'LOKED') then
        begin

          if (Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO') then
          begin
            if (Form1.ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // serviços não atera a quantidade
            begin
              try
                // Retorna a quantidade para o estoque apenas quando for produto
                Form1.ibDataSet4.Edit; // Cancelamento do item
                Form1.ibDataSet4.FieldByName('ULT_VENDA').AsDateTime := Date;
                Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat    := Form1.ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat; // REtorna a quantidade quando cancela item
                Form1.ibDataSet4.Post;
              except

                try
                  Form1.ibDataSet27.Edit;
                  Form1.ibDataSet27.FieldByName('TIPO').AsString := 'KOLNAC';
                  Form1.ibDataSet27.Post;
                  //ShowMessage('Teste 01  29940'); // Sandro Silva 2019-03-22
                except
                  GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'KOLNAC');//, '<CANCELADO>'); // Sandro Silva 2019-03-21
                  //ShowMessage('Teste 01  29943'); // Sandro Silva 2019-03-22
                  Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#27815 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03
                end;

              end;
            end;
          end;

          if Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'KOLNAC' then
          begin
            //
            try
              Form1.ibDataSet27.Edit;
              Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := '<CANCELADO>';
              //
              Form1.ibDataSet27.FieldByName('TIPO').AsString := 'CANCEL'; 
              //
              Form1.ibDataSet27.Post;
              //ShowMessage('Teste 01  29960'); // Sandro Silva 2019-03-22
              //
            except
              //
              try
                Form1.ibDataSet27.Edit;
                Form1.ibDataSet27.FieldByName('TIPO').AsString := 'KOLNAC';
                Form1.ibDataSet27.Post;
              except
                on E: Exception do
                begin
                  // Grava
                  GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'KOLNAC');//, '<CANCELADO>'); // Sandro Silva 2019-03-21
                  //ShowMessage('Teste 01  29996'); // Sandro Silva 2019-03-22
                  Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#27854 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build) + ' CAIXA' + Form1.sCaixa,0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03

                end;
              end;
              //
            end;
          end;
        end; // if (Form1.ibDataSet27TIPO.AsString = 'BALCAO') or (Form1.ibDataSet27TIPO.AsString = 'LOKED') then

      end; // if (Form1.ibDataSet27.FieldByName('CODIGO').AsString = Form1.ibDataSet4.FieldByName('CODIGO').AsString) and (Form1.ibDataSet4.FieldByName('CODIGO').AsString <> '') then

      Commitatudo2(True); // Cancelamento item durante venda Sandro Silva 2019-03-22

      Form1.ibDataSet27.First;
      while Form1.ibDataSet27.Eof = False do
      begin
        if Form1.ibDataSet27.FieldByName('ITEM').AsString = sItemCancelado then // Sandro Silva 2014-06-30 Cancelar o desconto somente se for desconto do item
          Break;
        Form1.ibDataSet27.Next;
      end;
      //
      ////////////////////////////////////////////////////////////////////////////////
      //
      //  G R A D E
      //
      ////////
      //
      //////////////////////////
      // Controle de serie    //
      // Esta rotina cancela  //
      // um item na venda     //
      //////////////////////////
      if Form1.ibDataSet4.FieldByName('SERIE').Value = 1 then
      begin
        Form1.ibDataSet30.Close;
        Form1.ibDataSet30.SelectSQL.Clear;
        Form1.ibDataSet30.Selectsql.Add('select * from SERIE where CODIGO='+QuotedStr(ibDataSet4.FieldByName('CODIGO').AsString));
        Form1.ibDataSet30.Open;
        while not ibDataSet30.Eof do
        begin
          if Copy(Form1.ibDataset30.FieldByName('NFVENDA').AsString,1,Length(FormataNumeroDoCupom(Form1.icupom))) = FormataNumeroDoCupom(Form1.icupom) then // Sandro Silva 2021-11-29 if Copy(Form1.ibDataset30.FieldByName('NFVENDA').AsString,1,6) = StrZero(icupom,6,0) then
          begin
            Form1.sSeriais := TiraSerialDaLista(Form1.sSeriais, Trim(ibDataset30.FieldByName('SERIAL').AsString)); // Sandro Silva 2019-03-26  Form1.sSeriais := StrTran(Form1.sSeriais,AllTrim(Form1.ibDataset30.FieldByName('SERIAL').AsString)+', ','');
            Form1.ibDataset30.Edit;
            //
            Form1.ibDataset30.FieldByName('NFVENDA').AsString  := '';
            //
            try
              Form1.ibDataset30.FieldByName('VALVENDA').AsString := '';
              Form1.ibDataset30.FieldByName('DATVENDA').AsString := '';
              Form1.ibDataset30.Post;
            except end;
            //
          end;
          Form1.ibDataset30.Next;
        end;
      end;
      //
      //  G R A D E      Q U A N D O     A P A G A
      //
      //
      Form1.ibDataSet10.Close;
      Form1.ibDataSet10.SelectSQL.Clear;
      Form1.ibDataSet10.SelectSQL.Add('select * from GRADE where CODIGO='+QuotedStr(Form1.ibDataSet4.FieldByName('CODIGO').AsString)+' order by CODIGO, COR, TAMANHO');
      Form1.ibDataSet10.Open;
      Form1.ibDataSet10.First;
      //
      bApaga := True;
      if (Form1.ibDataSet4.FieldByName('CODIGO').AsString = Form1.ibDataSet10.FieldByName('CODIGO').AsString)
        and (Form1.ibDataSet10.FieldByName('CODIGO').AsString <> '') then
      begin
        Form13.TipoMovimento  := mgRetorno; // Sandro Silva 2018-10-30
        Form13.Label2.Caption := 'Retorno de:';
        Form13.ShowModal; // Quando cancela o cupom
        Form13.Label2.Caption := 'Saída de: ';
      end;
      bApaga := False;
    end;
    //
    Application.ProcessMessages;
    //
    if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
    begin
      //MEI, NFC-e e SAT
      Form1.ibDataSet27.First;
      while Form1.ibDataSet27.Eof = False do
      begin

        if Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Desconto' then
        begin
          if Form1.ibDataSet27.FieldByName('ITEM').AsString = sItemCancelado then // Sandro Silva 2014-06-30 Cancelar o desconto somente se for desconto do item
          begin
            Form1.fTotal := Form1.fTotal - Form1.ibDataSet27.FieldByName('TOTAL').AsFloat;
            // Registros do PAF precisa lista o valor do desconto cancelado
            Form1.ibDataSet27.Edit;
            try
              Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := '<CANCELADO>';
              Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := 0;
              Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'CANCEL'; 
              Form1.ibDataSet27.Post;
            except
              //
              if (Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'CANCEL') then // Sandro Silva 2020-12-03 if (Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO') then
              begin
                try
                  Form1.ibDataSet27.Edit;
                  Form1.ibDataSet27.FieldByName('TIPO').AsString := 'KOLNAC';
                  Form1.ibDataSet27.Post;
                except
                  GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'KOLNAC'); // Sandro Silva 2019-03-21

                  Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#27972 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03

                end;
              end;
              //
            end;
          end;
        end;

        Form1.ibDataSet27.Next;
      end; // while Form1.ibDataSet27.Eof = False do

    end
    else
    begin
      Form1.ibDataSet27.Next;
      if Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = 'Desconto' then
      begin
        if Form1.ibDataSet27.FieldByName('ITEM').AsString <> '' then // Sandro Silva 2014-06-30 Cancelar o desconto somente se for desconto do item
        begin
          Form1.fTotal := Form1.fTotal - Form1.ibDataSet27.FieldByName('TOTAL').AsFloat;
          // Registros do PAF precisa lista o valor do desconto cancelado
          Form1.ibDataSet27.Edit;
          try
            Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := '<CANCELADO>';
            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := 0;
            Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'CANCEL'; 
            Form1.ibDataSet27.Post;
          except
            //
            if (Form1.ibDataSet27.FieldByName('TIPO').AsString <> 'CANCEL') then // Sandro Silva 2020-12-03 if (Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO') then 
            begin
              try
                Form1.ibDataSet27.Edit;
                Form1.ibDataSet27.FieldByName('TIPO').AsString := 'KOLNAC';
                Form1.ibDataSet27.Post;
              except
                GravaPendenciaAlteraca(Form1.ibDataSet27.Transaction.DefaultDatabase, Form1.bOffLine, Form1.ibDataSet27.FieldByName('CAIXA').AsString, Form1.ibDataSet27.FieldByName('PEDIDO').AsString, Form1.ibDataSet27.FieldByName('ITEM').AsString, 'KOLNAC'); // Sandro Silva 2019-03-21
                Audita('CANCELA','FRENTE' + Form1.sModeloECF, Form15.UsuarioPub, '#28010 CX ' + Form1.ibDataSet27.FieldByName('CAIXA').AsString + '-' + Form1.ibDataSet27.FieldByName('PEDIDO').AsString + '-' + Form1.ibDataSet27.FieldByName('ITEM').AsString + ', '  + ExtractFileName(Application.ExeName) + ':' + LimpaNumero(Build),0,0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2020-12-03

              end;
            end;
            //
          end;
        end;
      end;
    end;
    //
    Edit1.Text := '';
    //
  end;
  //
end;

procedure TForm1.CERContadorEspecficodeRelatrioGerencial1Click(
  Sender: TObject);
begin
  //
  if Form1.sModeloECF = '01' then;
  if Form1.sModeloECF = '02' then SmallMsg(_ecf02_CER(True));
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_CER(True));
  if Form1.sModeloECF = '04' then;
  if Form1.sModeloECF = '05' then;
  if Form1.sModeloECF = '06' then;
  if Form1.sModeloECF = '07' then;
  if Form1.sModeloECF = '08' then;
  if Form1.sModeloECF = '09' then;
  if Form1.sModeloECF = '10' then;
  if Form1.sModeloECF = '11' then;
  if Form1.sModeloECF = '12' then;
  if Form1.sModeloECF = '65' then;
  if Form1.sModeloECF = '59' then;
  if Form1.sModeloECF = '14' then;
  if Form1.sModeloECF = '15' then;
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_CER(True));
  //
end;

procedure TForm1.Estoquetotal1Click(Sender: TObject);
begin
  // 2022-03-29 Movido para uni
  RegistrosDoPafEcfEstoquetotal;
end;

procedure TForm1.Estoqueparcial1Click(Sender: TObject);
begin
// Sandro Silva 2023-02-14  RegistrosDoPafEstoqueparcial; // 2022-03-29
  EstoqueParcial;
end;

procedure TForm1.Quantas1Click(Sender: TObject);
var
  Mais1Ini : TIniFile;
  sAlerta: String;
begin
  //
  Mais1ini  := TIniFile.Create('FRENTE.INI');
  sMesas     := Mais1Ini.ReadString('Frente de caixa','Mesas','0');

  if (sMesas = '0') and (Form1.bBalancaAutonoma) then
    sMesas := '999';
  if Trim(sMesasOuContas) = '' then
    sMesasOuContas := 'mesas';

  sMesas     := Small_InputBox(sMesasOuContas,'Quantas '+sMesasOuContas,sMesas);

  sAlerta := '';
  //
  if LimpaNumero(sMesas) = '' then sMesas := '2';
  //
  if StrToInt(LimpaNumero(sMesas)) > 999 then // Sandro Silva 2019-01-25 if StrToInt(LimpaNumero(sMesas)) >= 999 then 
  begin
    SmallMsg('Máximo 999 '+sMesaOuConta);
    sMesas := '999';
  end;
  //
  Form1.IBQuery1.Close;
  Form1.IBQuery1.SQL.Clear;
  Form1.IBQuery1.SQL.Add('select max(PEDIDO) as MAIORMESA from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'')');
  Form1.IBQuery1.Open;
  //
  if StrToInt('0'+Limpanumero(Form1.IBQuery1.FieldByName('MAIORMESA').AsString)) > StrToInt(LimpaNumero(sMesas)) then
  begin
    sMesas := StrZero(Form1.IBQuery1.FieldByName('MAIORMESA').AsInteger,3,0);
    sAlerta := 'Feche a '+sMesaOuConta+' '+StrZero(Form1.IBQuery1.FieldByName('MAIORMESA').AsInteger,3,0)+', antes de diminuir as '+sMesasOuContas+'.';
  end;
  //
  Mais1Ini.WriteString('Frente de caixa','Mesas',sMesas);
  //
  Mais1Ini.Free;
  //
  // mesas(StrToInt(sMesas)); // Quantas mesas
  //
  Form1.ibQuery1.Close;
  //
  if StrToInt(sMesas) > 0 then
  begin
    Mesas(StrToInt(sMesas)); // FormShow
    Form1.Image2.Visible := False;
    Form1.Panel9.Visible := False;
  end;
  //

  if Trim(sAlerta) <> '' then
    SmallMsg(sAlerta);  
end;

procedure TForm1.Dadosdaltimareduo1Click(Sender: TObject);
begin
  SmallMsg(Form1.PDV_DadosDaUltimaReducaoZ(True));
end;

procedure TForm1.IBDataSet38BeforeInsert(DataSet: TDataSet);
begin
  //
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_DEMAIS,1) from rdb$database');
    ibDataset99.Open;
    sProximo38 := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
    //
    try
      ibDataSet99.Close;
      ibDataSet99.SelectSql.Clear;
      ibDataset99.SelectSql.Add('select gen_id(G_HASH_DEMAIS,1) from rdb$database');
      ibDataset99.Open;
      HasHs('DEMAIS', True);
    except end;
    //
  except
    SmallMsg('Erro: 2 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos".. Erro: 12');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
  end;
  //
end;

procedure TForm1.IBDataSet38BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('DEMAIS', DataSet, True);
end;

procedure TForm1.IBDataSet38NewRecord(DataSet: TDataSet);
begin
  ibDataSet38.FieldByName('REGISTRO').AsString := sProximo38;
end;

procedure TForm1.FunesadministrativasTEF1Click(Sender: TObject);
begin
  // Sandro Silva 2016-11-18
  if Form1.sTef = 'Sim' then
    FuncoesAdministrativas(True)
  else
    ShowMessage('TEF não está habilitado');
end;

procedure TForm1.CdigomodelodoECF1Click(Sender: TObject);
begin
  if Form1.sModeloECF = '03' then SmallMsg(_ecf03_CodigoModeloEcf(True));
  if Form1.sModeloECF = '17' then SmallMsg(_ecf17_CodigoModeloEcf(True));// Ok 2015-08-24  
end;

procedure TForm1.ParmetrosdeConfigurao1Click(Sender: TObject);
var
//  sPB, sDF, sDAV, sMG, sRJ, sBar, sMesa, sconta, scontaOs,
  sGerencial : String;
  bRetornoComando: Boolean;
begin
  //
  Commitatudo(True); // Sandro Silva 2017-11-08 Polimig ParmetrosdeConfigurao1Click(

  if TestaTudo(True) then // Sandro Silva 2017-11-08 Polimig Sem autorização uso do ecf
  begin

    if Form1.sPerfil = '"' then
    begin
      sGerencial  :=
                   '-----------------------------------------------'+chr(10)+
                   '           Parametros de Configuracao'+Chr(10)+
                   '-----------------------------------------------'+chr(10)+
                   'Perfil: W'+' UF: '+Copy(Form1.sUF,1,2)+chr(10);
    end else
    begin
      sGerencial  :=
                   '-----------------------------------------------'+chr(10)+
                   '           Parametros de Configuracao'+Chr(10)+
                   '-----------------------------------------------'+chr(10);
      if Copy(sPerfil, 1, 4) = '"ND"' then
      begin
        sGerencial  := sGerencial +
                   'Perfil: ND UF: '+Copy(Form1.sUF,1,2)+chr(10) // Sandro Silva 2016-03-01
      end
      else
        sGerencial  := sGerencial +
                   'Perfil: '+Copy(Form1.sPerfil,1,1)+' UF: '+Copy(Form1.sUF,1,2)+chr(10);
    end;
    //
    bRetornoComando := PDV_ImpressaoNaoSujeitoaoICMS(ConverteAcentos(sGerencial));
    //
    if bRetornoComando then //2015-10-06
      Demais('RG');

    Sleep(3000);
    //
    //
  end;
end;

procedure TForm1.Edit1Enter(Sender: TObject);
begin
  //
  dBgrid2.Visible := False;
  //
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
{
  // Assina os registros
  //
  Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
  //
  Form1.ibDataset4.Close;
  Form1.ibDataset4.SelectSQL.Clear;
  Form1.ibDataset4.SelectSQL.Add('select * from ESTOQUE');
  Form1.ibDataset4.Open;
  while not Form1.ibDataset4.Eof do
  begin
    Form1.ibDataset4.Edit;
    Form1.ibDataset4.Post;
    Form1.ibDataset4.Next;
  end;
  //
  Form1.ibDataSet27.Close;
  Form1.ibDataSet27.SelectSQL.Clear;
  Form1.ibDataSet27.SelectSQL.Add('select * from ALTERACA');
  Form1.ibDataSet27.Open;
  while not Form1.ibDataSet27.Eof do
  begin
    Form1.ibDataSet27.Edit;
    Form1.ibDataSet27.Post;
    Form1.ibDataSet27.Next;
  end;
  //
  Form1.ibDataset88.Close;
  Form1.ibDataset88.SelectSQL.Clear;
  Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES');
  Form1.ibDataset88.Open;
  while not Form1.ibDataset88.Eof do
  begin
    Form1.ibDataset88.Edit;
    Form1.ibDataset88.Post;
    Form1.ibDataset88.Next;
  end;
  //
  Form1.ibDataset38.Close;
  Form1.ibDataset38.SelectSQL.Clear;
  Form1.ibDataset38.SelectSQL.Add('select * from DEMAIS');
  Form1.ibDataset38.Open;
  while not Form1.ibDataset38.Eof do
  begin
    Form1.ibDataset38.Edit;
    Form1.ibDataset38.Post;
    Form1.ibDataset38.Next;
  end;
  //
  Form1.ibDataset28.Close;
  Form1.ibDataset28.SelectSQL.Clear;
  Form1.ibDataset28.SelectSQL.Add('select * from PAGAMENT');
  Form1.ibDataset28.Open;
  while not Form1.ibDataset28.Eof do
  begin
    Form1.ibDataset28.Edit;
    Form1.ibDataset28.Post;
    Form1.ibDataset28.Next;
  end;
  //
  Screen.Cursor             := crDefault;    // Cursor de Aguardo
  Form1.Edit1.SetFocus;
  //
}
{
  HasHs('ESTOQUE',True);
  HasHs('REDUCOES',True);
  HasHs('PAGAMENT',True);
  HasHs('ALTERACA',True);
  HasHs('DEMAIS',True);
  //
}
end;

procedure TForm1.ibDataset88BeforeDelete(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_HASH_REDUCOES,-1) from rdb$database');
    ibDataset99.Open;
    HasHs('REDUCOES', True);
  except end;
end;

procedure TForm1.IBDataSet28BeforeDelete(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_HASH_PAGAMENT,-1) from rdb$database');
    ibDataset99.Open;
    HasHs('PAGAMENT', True);
  except end;

  if UsaIntegradorFiscal() then
  begin
    ExcluirIdentificadorVFPE(DataSet.FieldByName('PEDIDO').AsString, DataSet.FieldByName('CAIXA').AsString, DataSet.FieldByName('FORMA').AsString);
  end;
end;

procedure TForm1.IBDataSet38BeforeDelete(DataSet: TDataSet);
begin
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_HASH_DEMAIS,-1) from rdb$database');
    ibDataset99.Open;
    HasHs('DEMAIS', True);
  except end;
end;

procedure TForm1.touch_F1Click(Sender: TObject);
begin
  keybd_event(VK_F1, 0, 0, 0);
  keybd_event(VK_F1, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F3Click(Sender: TObject);
begin
  keybd_event(VK_F3, 0, 0, 0);
  keybd_event(VK_F3, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.Memo1Enter(Sender: TObject);
begin
  Edit1.SetFocus;
end;

procedure TForm1.touch_F4Click(Sender: TObject);
begin
  keybd_event(VK_F4, 0, 0, 0);
  keybd_event(VK_F4, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F5Click(Sender: TObject);
begin
  keybd_event(VK_F5, 0, 0, 0);
  keybd_event(VK_F5, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F10Click(Sender: TObject);
begin
  keybd_event(VK_F10, 0, 0, 0);
  keybd_event(VK_F10, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F6Click(Sender: TObject);
begin
  keybd_event(VK_F6, 0, 0, 0);
  keybd_event(VK_F6, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F7Click(Sender: TObject);
begin
  keybd_event(VK_F7, 0, 0, 0);
  keybd_event(VK_F7, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F8Click(Sender: TObject);
begin
  keybd_event(VK_F8, 0, 0, 0);
  keybd_event(VK_F8, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F11Click(Sender: TObject);
begin
  keybd_event(VK_F11, 0, 0, 0);
  keybd_event(VK_F11, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F12Click(Sender: TObject);
begin
  keybd_event(VK_F12, 0, 0, 0);
  keybd_event(VK_F12, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_ESCClick(Sender: TObject);
begin
  keybd_event(VK_ESCAPE, 0, 0, 0);
  keybd_event(VK_ESCAPE, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_cimaClick(Sender: TObject);
begin
  keybd_event(VK_UP, 0, 0, 0);
  keybd_event(VK_UP, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_baixoClick(Sender: TObject);
begin
  keybd_event(VK_DOWN, 0, 0, 0);
  keybd_event(VK_DOWN, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.touch_F2Click(Sender: TObject);
begin
  keybd_event(VK_F2, 0, 0, 0);
  keybd_event(VK_F2, 0, KEYEVENTF_KEYUP, 0);
end;


procedure TForm1.DBGrid2DrawDataCell(Sender: TObject; const Rect: TRect;
  Field: TField; State: TGridDrawState);
var
  xRect: TRect;
  bmpWidth: Integer;
  iLeftTexto: Integer;
begin
  ShowScrollBar(DBGrid2.Handle, SB_HORZ, False); // Sandro Silva 2016-08-25

  if (gdSelected in State) then
    DBGrid2.Canvas.Brush.Color := $00F4C84D; // Azul Small

  dbGrid2.Canvas.FillRect(Rect);
  //
  //  if not (gdFocused in State) and not (gdFixed in State) and not (gdSelected in State) then
  //
  //

  MostraFoto(True);   //usar TamanhoLogoFrente para mostrar ou não a img do produto
  //

  xRect.Left   := Rect.Left + AjustaAltura(5);
  xRect.Top    := Rect.Top  + AjustaAltura(5);
  xRect.Right  := Rect.Left + AjustaAltura(5) + (Form1.Image2.Width div 4);
  xRect.Bottom := Rect.Bottom - AjustaAltura(5); // Sandro Silva 2018-04-26  xRect.Bottom := Rect.Top  + AjustaAltura(5) + (Form1.Image2.Height div 4);

  bmpWidth := xRect.Left + AjustaAltura(150); //xRect.Right - xRect.Left;

  DBGrid2.Canvas.StretchDraw(xRect, Form1.Image2.Picture.Graphic);
  DBGrid2.Canvas.Font.Size := AjustaAltura(10);

  iLeftTexto := bmpWidth + AjustaLargura(10);

  DBGrid2.Canvas.Font.Size := AjustaAltura(8);
  DBGrid2.Canvas.Font.Color := clGray;
  if AllTrim(Form1.ibDataSet4REFERENCIA.AsString) <> '' then
  begin
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top, 'GTIN');
  end else
  begin
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top, 'Código');
  end;

  DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(20), 'Produto');
  DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(40), 'Valor');
  DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(60), 'Quantidade');
  DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(80), 'CEST/NCM/SH');
  iLeftTexto := bmpWidth + AjustaLargura(90);
  DBGrid2.Canvas.Font.Size := AjustaAltura(10);
  DBGrid2.Canvas.Font.Color := clBlack;

  if AllTrim(Form1.ibDataSet4REFERENCIA.AsString) <> '' then
  begin
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top, AllTrim(Form1.ibDataSet4REFERENCIA.AsString));
  end else
  begin
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top, AllTrim(Form1.ibDataSet4CODIGO.AsString));
  end;

  DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(20), AllTrim(Form1.ibDataSet4DESCRICAO.AsString));
  DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(40), 'R$ '+AllTrim(Form1.ibDataSet4PRECO.AsString));
  if Form1.ibDataSet4QTD_ATUAL.AsFloat < 0 then
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(60), '0,00')
  else
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(60), ''+AllTrim(Form1.ibDataSet4QTD_ATUAL.AsString));
  if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then // Sandro Silva 2018-04-26 
    DBGrid2.Canvas.TextOut(iLeftTexto, Rect.Top+AjustaAltura(80), '#' + AllTrim(Form1.ibDataSet4.FieldByName('CEST').AsString) + '#' + AllTrim(Form1.ibDataSet4CF.AsString));
end;

procedure TForm1.Label10Click(Sender: TObject);
{ Venda em loop para demonstação em feiras/eventos
var
  Hora, Min, Seg, cent : Word;
  iTotal, iTotal1, iQuantidade, I, iItensdoCupom : Integer;
  tInicio : tTime;
}
begin
{
  //
  iTotal := 0;
  iTotal1 := 0;
  //
  while true do
  begin
    //
    iTotal := iTotal + 1;
    //
    Form1.Button2Click(Sender);
    iItensdoCupom := Random(10)+5;
    //
    for I  := 1 to iItensdoCupom do
    begin
      //
      iTotal1 := iTotal1 + 1;
      tInicio := time;
      Application.ProcessMessages;
      //
      ibDataSet4.Close;
      ibDataSet4.SelectSQL.Clear;
      ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(StrZero(Random(20),5,0))+' ');
      ibDataSet4.Open;
      //
      if not ibDataSet4.Eof then
      begin
        try
          //
          // ibDataSet4.Edit; // Teste de venda em loop
          // ibDataSet4.FieldByName('ULT_VENDA').AsDateTime := Date;
          // ibDataSet4.Post;
          //
          iQuantidade := Random(5);
          //
          if (ibDataSet4.FieldByName('PRECO').AsFloat > 100) or (iQuantidade = 0) then iQuantidade := 1;
          //
          Form1.ibDataSet27.Append; // Novo Item
          ibDataSet27PEDIDO.AsString     := FormataNumeroDoCupom(icupom);
          ibDataSet27CAIXA.AsString      := sCaixa;
          ibDataSet27DESCRICAO.AsString  := ibDataSet4.FieldByName('DESCRICAO').AsString;
          ibDataSet27QUANTIDADE.AsFloat  := iQuantidade; // Produto pesado
          if ibDataSet27QUANTIDADE.AsFloat = 0 then ibDataSet27QUANTIDADE.AsFloat := 1;
          ibDataSet27MEDIDA.AsString     := ibDataSet4.FieldByName('MEDIDA').AsString;
          ibDataSet27UNITARIO.AsFloat    := ibDataSet4.FieldByName('PRECO').AsFloat;
          //
          if fPreco <> 0 then
          begin
            if (Copy(UpperCase(ibDataSet4.FieldByName('MEDIDA').AsString),1,2) <> 'UN') then ibDataSet27TOTAL.AsFloat := fPreco else ibDataSet27UNITARIO.AsFloat := fPreco;
          end else
          begin
            ibDataSet27TOTAL.AsFloat       := ibDataSet4.FieldByName('PRECO').AsFloat;
          end;
          //
          Edit1.Text := ibDataSet4.FieldByName('DESCRICAO').AsString;
          //
          Form1.Button1Click(Sender);
          CommitaTudo2(True); // Venda o iten
          //
          DecodeTime(((Time - tInicio)/2), Hora, Min, Seg, cent);
          Form1.Panel4.Caption := 'Tempo de venda de item: '+' '+StrZero(Hora,2,0)+':'+StrZero(Min,2,0)+':'+StrZero(Seg,2,0)+':'+StrZero(cent,3,0)+' Cupons emitidos: '+StrZero(iTotal,12,0)+' Itens vendidos: '+StrZero(iTotal1,12,0);
          Form1.Panel4.Repaint;
          //
          Edit1.SetFocus;
          //
        except
          //
        end;
      end;
    end;
    //
    bF12 := True;
    Button18Click(Sender);
    //
  end;
}
end;

procedure TForm1.Notafiscaldevendaaconsumidormodelo021Click(
  Sender: TObject);
begin

  Form1.ibQuery1.Close;
  Form1.ibQuery1.SQL.Clear;
  Form1.ibQuery1.SQL.Add('select count(REGISTRO) from REDUCOES');
  Form1.ibQuery1.Open;

  //SmallMsg('Teste 01 Perfil ' + Form1.sPerfil + #13 + 'Reducoes ' + IntToStr(Form1.ibQuery1.FieldByName('COUNT').AsInteger) + #13 + 'Modelo ' + Form1.sModeloECF);

  if (Form1.sModeloECF = '00') and (Trim(Form1.sPerfil) = '') and (Form1.ibQuery1.FieldByName('COUNT').AsFloat = 0) then // Sandro Silva 2020-09-23 if (Form1.sModeloECF = '99') and (Trim(Form1.sPerfil) = '') and (Form1.ibQuery1.FieldByName('COUNT').AsFloat = 0) then
  begin
    //
    Form14.ShowModal;
    Commitatudo(True); // Sandro Silva 2017-11-09 Polimig Notafiscaldevendaaconsumidormodelo021Click
  end
  else
  begin

    if (Copy(Form1.sPerfil,1,1) = 'Y') or (Copy(Form1.sPerfil,1,1) = 'Z')  then
    begin
      {Sandro Silva 2019-06-25 inicio ER 02.06 Perfis T, V e W
      Form14.ShowModal; // Abre tela diversa
      Commitatudo(True); // Sandro Silva 2017-11-09 Polimig Notafiscaldevendaaconsumidormodelo021Click
      }
    end else
    begin
      //
      sSerieReferenteNFModelo2    := Small_InputBox('NF modelo 2','Série','D');
      sSubSerieReferenteNFModelo2 := Small_InputBox('NF modelo 2','Subsérie:','000');
      sReferenteNFModelo2         := Small_InputBox('NF modelo 2','NF:','');


      IBQuery65.Close;
      IBQuery65.SQL.Text :=
        'select first 0 PEDIDO, SERIE, SUBSERIE ' +
        'from ALTERACA';
      IBQuery65.Open;

      if (Length(sSubSerieReferenteNFModelo2) > IBQuery65.FieldByName('PEDIDO').Size) then
      begin
        if Application.MessageBox(PChar('O número de caracteres da NF informada é maior que o permitido' + #13 + #13 +
                                        'Deseja continuar?'), 'Atenção!', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDNO then
        begin
          Exit;
        end;
      end;

      if (Length(sSerieReferenteNFModelo2) > IBQuery65.FieldByName('SERIE').Size) then
      begin
        if Application.MessageBox(PChar('O número de caracteres da Série informada é maior que o permitido' + #13 + #13 +
                                        'Deseja continuar?'), 'Atenção!', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDNO then
        begin
          Exit;
        end;
      end;

      if (Length(sSubSerieReferenteNFModelo2) > IBQuery65.FieldByName('SUBSERIE').Size) then
      begin
        if Application.MessageBox(PChar('O número de caracteres da Subsérie informada é maior que o permitido' + #13 + #13 +
                                        'Deseja continuar?'), 'Atenção!', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDNO then
        begin
          Exit;
        end;
      end;

      try
        IBQuery65.Close;
        IBQuery65.SQL.Text :=
          'select DATA, HORA ' +
          'from ALTERACA ' +
          'where TIPO = ''VENDA'' ' +
          ' and PEDIDO = ' + QuotedStr(RightStr('000000' + sReferenteNFModelo2, 6)) + 
          ' and SERIE = ' + QuotedStr(sSerieReferenteNFModelo2) +
          ' and coalesce(SUBSERIE, '''') = ' + QuotedStr(sSubSerieReferenteNFModelo2);
        IBQuery65.Open;
        if IBQuery65.FieldByName('DATA').AsString <> '' then
        begin
          if Application.MessageBox(PChar('Nota Fiscal Modelo 02 já lançada em ' + FormatDateTime('dd/mm/yyyy', IBQuery65.FieldByName('DATA').AsDateTime) + ' ' + IBQuery65.FieldByName('HORA').AsString + #13 +
                                          'Série: ' + sSerieReferenteNFModelo2  + #13 +
                                          'Subsérie: ' + sSubSerieReferenteNFModelo2 + #13 +
                                          'Número: ' + RightStr('000000' + sReferenteNFModelo2, 6) + #13 + #13 +
                                          'Deseja continuar?'), 'Atenção! Nota Fiscal duplicada', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDNO then
          begin
            Exit;
          end;
        end;

        keybd_event(VK_F2, 0, 0, 0);
        keybd_event(VK_F2, 0, KEYEVENTF_KEYUP, 0);

      except

      end;
      //
    end;
  end;
end;

procedure TForm1.Notapromissria1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa' , 'Promissória','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa' , 'Promissória','Sim')
      else Mais1Ini.WriteString('Frente de caixa' , 'Promissória','Não');
  //
  Form1.sPromissoria := Mais1Ini.ReadString('Frente de caixa' , 'Promissória','Não');
  //
  Mais1Ini.Free;
  //
end;

procedure TForm1.Frame_teclado1touch_backspaceClick(Sender: TObject);
begin
  Frame_teclado1.touch_backspaceClick(Sender);

end;

procedure TForm1.CreditosDFClick(
  Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa' , 'Créditos DF','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa' , 'Créditos DF','Sim')
      else Mais1Ini.WriteString('Frente de caixa' , 'Créditos DF','Não');
  //
  Form1.sCreditosDF := Mais1Ini.ReadString('Frente de caixa' , 'Créditos DF','Não');
  //
  Mais1Ini.Free;
  //
end;

procedure TForm1.Alterarlogotipo1Click(Sender: TObject);
begin
  //
  GetDir(0,Form1.sAtual);
  //
  // SmallMsg(Form1.sAtual+chr(10)+Form1.sAtualOnLine);
  //
  if FileExists(Form1.sAtualOnLine+'\logofrente.bmp') then
    Image2.Picture.LoadFromFile(Form1.sAtualOnLine+'\logofrente.bmp');
  if not FileExists(Form1.sAtualOnLine+'\logofrente.bmp') then
     Image2.Picture.SaveToFile(Form1.sAtualOnLine+'\logofrente.bmp');

  ShellExecute( 0, 'Open','pbrush.exe', PChar('"'+Form1.sAtualOnLine+'\logofrente.bmp"'), '', SW_SHOW);

  SmallMsg('Tecle <enter> para que a nova imagem seja exibida.');
  //
  Form1.Image2.Picture.LoadFromFile(Form1.sAtualOnLine+'\logofrente.bmp');
  Form1.Image3.Picture.LoadFromFile(Form1.sAtualOnLine+'\logofrente.bmp');
  //
  ChDir(Form1.sAtual); // Sandro Silva 2017-03-31

  if TamanhoLogoFrente > TAMANHO_REFERENCIA_ARQUIVO_LOGOTIPO then // Acima de 300 KB
    Application.MessageBox(PAnsiChar('Reduza o tamanho do logotipo' + #13 + #13 + 'O tamanho do logotipo selecionado poderá deixar o sistema lento'), 'Alerta', MB_OK + MB_ICONWARNING);

end;

procedure TForm1.Selecionarcertificadodigital1Click(Sender: TObject);
var
  Mais1Ini : tIniFile;
begin
  Mais1ini := TIniFile.Create('FRENTE.INI'); // Sandro Silva 2016-03-05 POLIMIG
  if Form1.sModeloECF = '65' then
  begin
    //
    if frmSelectCertificate <> nil then // Sandro Silva 2018-12-03
    begin
      frmSelectCertificate.ModeloECF := Form1.sModeloECF; // Sandro Silva 2016-02-12

      Form1.spdNFCe1.ListarCertificados(frmSelectCertificate.lbList.Items);

      //
      frmSelectCertificate.ModeloECF := Form1.sModeloECF; // Sandro Silva 2016-02-12
      frmSelectCertificate.ShowModal;
      //

      Mais1Ini.UpdateFile; // Sandro Silva 2019-02-25
      if Mais1Ini.ReadString('NFCE','Certificado','XXX') <> 'XXX' then
        Form1.spdNFCe1.NomeCertificado.Text             := Mais1Ini.ReadString('NFCE','Certificado','');
      //Mais1ini.Free;
      //
      if AllTrim(Form1.spdNFCe1.NomeCertificado.Text) = '' then
      begin
        Application.ProcessMessages;
        Application.BringToFront;

        //
        SmallMsgBox(
                    pChar(
                    Chr(10)
                    +chr(10)+'1 - Verifique se o seu certificado está instalado'
                    +chr(10)+'2 - Verifique se o seu certificado está selecionado'
                    +chr(10)+'3 - Seu certificado pode estar vencido'
                    +chr(10)+'4 - Seu certificado pode ser inválido'
                    + chr(10)
                    +chr(10)+'Certificados recomendados' // Sandro Silva 2022-12-02 Unochapeco +chr(10)+'Certificados recomendados pela Smallsoft®'
                    +chr(10)+''
                    +chr(10)+'1. Certificados SERASA'
                    +chr(10)+'    * A1'
                    +chr(10)+'    * SmartCard'
                    +chr(10)+'    * E-CNPJ'
                    +chr(10)+'2. Certificados Certisign A1 e A3'
                    +chr(10)+'3. Certificados dos Correios A1 e A3'
                    +chr(10)+'4. Certificados A3 PRONOVA ACOS5'
                    +chr(10)
                    +chr(10)
                    +'OBS: Não ligue para o suporte técnico da Zucchetti® por este motivo.'), // Sandro Silva 2022-12-02 Unochapeco +'OBS: Não ligue para o suporte técnico da Smallsoft® por este motivo.'),
                    'Atenção',mb_Ok + MB_ICONWARNING);
        Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
          Form1.ClienteSmallMobile.sLogRetornoMobile);
        //
        //
      end;
      //
      ConfiguraNFCE(True); // Form1.Selecionarcertificadodigital1Click()
      TestaTudo(True); // Selecionarcertificadodigital1Click

    end;
  end
  else if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // Sandro Silva 2016-03-05 POLIMIG
  begin

    BlocoXSelecionaCertificadoDigital;

    if _BlocoX.ValidaCertificadoDigital(PAnsiChar(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString))) = False then // Sandro Silva 2018-10-13 if _BlocoX.ValidaCertificadoDigital(PAnsiChar(Form1.IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual)) = False then
    begin
      MensagemAlertaCertificado;
    end;

  end;

  Mais1ini.Free;
  //
end;

procedure TForm1.ImprimirDANFCE1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if ImprimirDANFCE1.Checked then
  begin
    Mais1Ini.WriteString('NFCE','Imprimir DANFCE','Não');
    ImprimirDANFCE1.Checked := False;
  end else
  begin
    Mais1Ini.WriteString('NFCE','Imprimir DANFCE','Sim');
    ImprimirDANFCE1.Checked := True;
  end;
  //
  Mais1ini.Free;
  //
end;

procedure TForm1.VisualizarDANFCE1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if VisualizarDANFCE1.Checked then
  begin
    if (Form1.sModeloECF_Reserva = '59') then
      Mais1Ini.WriteString(SECAO_59,'Visualizar Extrato','Não')
    else
      Mais1Ini.WriteString('NFCE','Visualizar DANFCE','Não');
    VisualizarDANFCE1.Checked := False;
  end else
  begin
    if (Form1.sModeloECF_Reserva = '59') then
      Mais1Ini.WriteString(SECAO_59,'Visualizar Extrato','Sim')
    else
      Mais1Ini.WriteString('NFCE','Visualizar DANFCE','Sim');
    VisualizarDANFCE1.Checked := True;
  end;
  //
  Mais1ini.Free;
  //
end;

procedure TForm1.IBDataSet150BeforeInsert(DataSet: TDataSet);
begin
  // Próximo NFCE.REGISTRO
  try
    ibDataSet99.Close;
    ibDataSet99.SelectSql.Clear;
    ibDataset99.SelectSql.Add('select gen_id(G_NFCE,1) from rdb$database');
    ibDataset99.Open;

    sProximo150 := StrZero(StrToInt64(ibDataSet99.FieldByName('GEN_ID').AsString),10,0);
    ibDataset99.Close;
    try
      ibDataSet99.Close;
      ibDataSet99.SelectSql.Clear;
      ibDataset99.SelectSql.Add('select gen_id(G_HASH_NFCE,1) from rdb$database');
      ibDataset99.Open;
      HasHs('NFCE', True);

      //ShowMessage('Teste 01 20834'); // Sandro Silva 2017-11-06

    except end;
    //
  except
    //
    SmallMsg('Erro: 150 - Entre no programa de retaguarda e clique na opção "Ajustar arquivos". . Erro: 13');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
    Form1.DestroyWindowHandle;
    Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
    FecharAplicacao(ExtractFileName(Application.ExeName));
    //
  end;
  //
end;

procedure TForm1.IBDataSet150NewRecord(DataSet: TDataSet);
begin
  ibDataSet150.FieldByName('REGISTRO').AsString := sProximo150;

end;

procedure TForm1.GerenciadordeNFCe1Click(Sender: TObject);
begin
  if PAFNFCe then
  begin
    pnlMenuFiscalPAFNFCeInacessivel.Alignment := taCenter;
    pnlMenuFiscalPAFNFCeInacessivel.Parent    := Form1.DateTimePicker1.Parent;
    pnlMenuFiscalPAFNFCeInacessivel.Caption   := MSG_ALERTA_MENU_FISCAL_INACESSIVEL;
    pnlMenuFiscalPAFNFCeInacessivel.Top       := Form1.DateTimePicker1.Top;
    pnlMenuFiscalPAFNFCeInacessivel.Left      := Panel8.Left - pnlMenuFiscalPAFNFCeInacessivel.Width - AjustaLargura(5); // Form1.DateTimePicker1.BoundsRect.Right + AjustaLargura(5);

    pnlMenuFiscalPAFNFCeInacessivel.Visible   := True;
    pnlMenuFiscalPAFNFCeInacessivel.BringToFront;
    pnlMenuFiscalPAFNFCeInacessivel.Repaint;
  end;
  //                                                                           
  Form1.DateTimePicker1.Date := Date;
  //
  //
  //  Form1.dbGrid1.Align              := AlTop;
  //

  // Executando na resolução do notebook do Ronei, quando acessa o gerenciador de venda fica aparecendo a imagem de fundo e o label com texto "Descrição"
  Form1.Image1.Visible  := False; // Sandro Silva 2021-07-13
  // Sandro Silva 2021-07-29 Form1.Label13.Visible := False; // Sandro Silva 2021-07-13

  Form1.DateTimePicker1.Visible := True;
  //
  Form1.DBGrid1.Top     := 0 + Form1.DateTimePicker1.Height;// Sandro Silva 2021-11-03 + AjustaAltura(1); // Sandro Silva 2021-09-14 Form1.DBGrid1.Top     := 0 + Form1.DateTimePicker1.Height
  Form1.DBGrid1.Left    := 0;
  Form1.DBGrid1.Height  := Panel1.Height - Form1.DateTimePicker1.Height - AjustaAltura(1); // Sandro Silva 2021-09-14 Form1.DBGrid1.Height  := Panel1.Height - Form1.DateTimePicker1.Height;
  Form1.DBGrid1.Width   := Panel1.Width;
  Form1.DBGrid1.Visible := True;
  Form1.DBGrid1.BringToFront; // Sandro Silva 2016-09-09

  Form1.dbGrid1.DataSource.DataSet := Form1.ibDataSet150; // Sandro Silva 2016-08-12

  Form1.ibDataset150.Close;
  Form1.ibDataset150.SelectSql.Clear;
  Form1.ibDataset150.SelectSQL.Add('select * from NFCE where DATA='+QuotedStr(DateToStrInvertida(Form1.DateTimePicker1.Date))+' order by NUMERONF ');
  Form1.ibDataset150.Open;

  //
  Form1.ibDataset150.Last;

  //
  Form1.Panel6.Width   := Form1.touch_ESC2.Width; // Sandro Silva 2017-04-25
  Form1.Panel6.Height  := Form1.touch_ESC2.Height; // Sandro Silva 2017-04-25
  Form1.Panel6.Top     := AjustaAltura(5); // Sandro Silva 2021-07-12 Form1.Panel6.Top     := 5; // Sandro Silva 2017-04-25  2;
  Form1.Panel6.Left    := Panel1.Width - Form1.Panel6.Width - AjustaLargura(10); // Sandro Silva 2021-07-12 Form1.Panel6.Left    := Panel1.Width - Form1.Panel6.Width - 10;
  //
  Form1.Panel6.Visible := True;
  //
  Form1.Panel7.Width   := Form1.touch_PesquisaNFCe.Width;
  Form1.Panel7.Height  := Form1.touch_PesquisaNFCe.Height;
  Form1.Panel7.Top     := Form1.Panel6.Top;
  Form1.Panel7.Left    := Form1.Panel6.Left - Form1.Panel7.Width - AjustaLargura(10); // Sandro Silva 2021-07-12 Form1.Panel7.Left    := Form1.Panel6.Left - Form1.Panel7.Width - 10;
  Form1.Panel7.Visible := True;

  Form1.Panel8.Width   := Form1.touch_OpcoesNFCe.Width;
  Form1.Panel8.Height  := Form1.touch_OpcoesNFCe.Height;
  Form1.Panel8.Top     := Form1.Panel6.Top;
  Form1.Panel8.Left    := Form1.Panel7.Left - Form1.Panel8.Width - AjustaLargura(10); // Sandro Silva 2021-07-12 Form1.Panel8.Left    := Form1.Panel7.Left - Form1.Panel8.Width - 10;
  Form1.Panel8.Visible := True;
  //
  //Sandro Silva 2015-04-09 Grid com as NFC-e recebe foco para evitar problema de teclar ESC e fechar toda aplicação
  if Form1.DBGrid1.CanFocus then
    Form1.DBGrid1.SetFocus;
  //
end;

procedure TForm1.DBGrid1KeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  //
  if Key = VK_ESCAPE then
  begin
    //
    Form1.ibDataset150.Close;
    {Sandro Silva 2021-07-13 inicio
    Form1.dbGrid1.Visible         := False;
    Form1.DateTimePicker1.Visible := False;
    Form1.pnlMenuFiscalPAFNFCeInacessivel.Visible := False; // Sandro Silva 2020-12-16
    Form1.Edit1.Text := '';
    Form1.Edit1.SetFocus;
    Form1.Panel6.Visible := False;
    Form1.Panel7.Visible := False; // Sandro Silva 2017-12-13
    Form1.Panel8.Visible := False; // Sandro Silva 2017-12-13
    }
    OcultaGerenciadorVendas;
    Form1.Edit1.Text := '';
    Form1.Edit1.SetFocus;
    {Sandro Silva 2021-07-13 fim}
    //
  end;
  //

  // Pesquisa com Ctrl+F
  if (Shift = [ssCtrl]) and (Key in [70, 102]) then // Ctrl+F ou Ctrl + f
  begin
    touch_PesquisaNFCeClick(Sender);
  end;

end;

procedure TForm1.NFCeemContingncia1Click(Sender: TObject);
  function TrocaFrente(sNovoModeloDocumento: String;
    bEstaEmContingencia: Boolean): Boolean;
  begin
    Result := False;
    if (Trim(LerParametroIni('FRENTE.INI', SECAO_59, _59_CHAVE_CAMINHO_DLL, '')) <> '')
      and (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'SP')
      then
    begin
      GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Modelo do ECF', sNovoModeloDocumento);
      if bEstaEmContingencia = False then
      begin
        SmallMsgBox(PChar('Iniciando modo contingência' + #13 +
                          'A partir deste momento serão emitidos documentos fiscal ' + sTipoDocumento), 'Atenção', MB_ICONWARNING + MB_OK);// Sandro Silva 2018-08-01

        if sNovoModeloDocumento = '59' then
        begin
          if LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') <> '' then
          begin
            if NFCE then
            begin
              GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'SAT');
              GravarParametroIni('FRENTE.INI', 'Contingencia', 'Tipo Documento Online', 'NFCE');
              GravarParametroIni('FRENTE.INI', 'Contingencia', 'Caixa Online', Form1.sCaixa);
            end;
            GetDir(0,Form1.sAtual);
            FecharAplicacao(Application.ExeName);

            ShellExecute( 0, 'Open', pChar(Form1.sAtual + ExtractFileName(Application.ExeName)), '', '', SW_SHOW);

          end
          else
          begin
          {Sandro Silva 2021-05-20 fim}
            GetDir(0,Form1.sAtual);
            ShellExecute( 0, 'Open', pChar(Form1.sAtual+'\cfesat.exe'), '', '', SW_SHOW);
          end;
        end;

      end
      else
      begin
        {Sandro Silva 2021-05-20 inicio}
        if LerParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', '') <> '' then
        begin

          if LerParametroIni('FRENTE.INI', 'Contingencia', 'Caixa Online', '') <> '' then
          begin
            if (Pos('nfce.exe',AnsiLowerCase(Application.ExeName))<>0) or (NFCe) or (PAFNFCE) then // Sandro Silva 2021-03-19 if Pos('nfce.exe',AnsiLowerCase(Application.ExeName))<>0 then
              Form1.sModeloECF   := '65';

            if (Pos(NOME_APLICATIVO_59, AnsiLowerCase(Application.ExeName))<>0) or (SAT) or (MFE) then // Sandro Silva 2021-03-19 if Pos(NOME_APLICATIVO_59, AnsiLowerCase(Application.ExeName))<>0 then
              Form1.sModeloECF   := '59';

            Form1.sCaixa := LerParametroIni('FRENTE.INI', 'Contingencia', 'Caixa Online', '');
            GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Caixa', Form1.sCaixa);
            GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', LerParametroIni('FRENTE.INI', 'Contingencia', 'Tipo Documento Online', ''));

            GravarParametroIni('FRENTE.INI', 'Frente de caixa', 'Tipo Documento', 'SAT');
            GravarParametroIni('FRENTE.INI', 'Contingencia', 'Tipo Documento Online', '');
            GravarParametroIni('FRENTE.INI', 'Contingencia', 'Caixa Online', '');

          end;

          GetDir(0,Form1.sAtual);
          FecharAplicacao(Application.ExeName);

          ShellExecute( 0, 'Open', pChar(Form1.sAtual + ExtractFileName(Application.ExeName)), '', '', SW_SHOW);

        end
        else
        begin
        {Sandro Silva 2021-05-20 fim}
          SmallMsgBox(PChar('Finalizando modo contingência'), 'Atenção', MB_ICONWARNING + MB_OK);
        end;
      end;

      Result := True;
    end;
  end;
begin
  if Form1.UsaIntegradorFiscal() = False then // Sandro Silva 2019-10-16
  begin

    if NFCeemContingncia1.Checked = False then
    begin
      {Sandro Silva 2021-12-27 inicio 
      //Sandro Silva 2021-07-09 inicio _ecf65_ConsultarStatusServico(False); // Consulta Status. False para não exibir alerta    Form1.NFCeemContingncia1Click(
      // Sandro Silva 2021-07-09 Ficha 5390 Ronei autorizou mudar a forma como a contingência é ativa para emitentes de MG
      if ((AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'AM') and (LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) = '07426598000124'))
        or (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'MG') then
      begin

        Application.MessageBox(PChar('Orientação da SEFAZ:' + #10 +
                                     '"A utilização de contingência off-line deve se restringir às ' + #10 +
                                     'situações de efetiva impossibilidade de autorização da NFC-e ' + #10 +
                                     'em  tempo  real"') , 'Atenção', MB_ICONINFORMATION + MB_OK);

        Form1.bStatusECF := False; // Desliga botão ECF
        StatusECF(Form1.bStatusECF, 10);
      end
      else
      begin
        _ecf65_ConsultarStatusServico(False); // Consulta Status. False para não exibir alerta    Form1.NFCeemContingncia1Click(
      end;
      }
      Application.MessageBox(PChar('Orientação da SEFAZ:' + #10 +
                                   '"A utilização de contingência off-line deve se restringir às ' + #10 +
                                   'situações de efetiva impossibilidade de autorização da NFC-e ' + #10 +
                                   'em  tempo  real"') , 'Atenção', MB_ICONINFORMATION + MB_OK);

      Form1.bStatusECF := False; // Desliga botão ECF
      StatusECF(Form1.bStatusECF, 10);
      {Sandro Silva 2021-12-27 fim}

      if TrocaFrente('59', NFCeemContingncia1.Checked) then
        Exit;
        
    end;

    //
    if NFCeemContingncia1.Checked then
    begin

      try
        Audita('EMISSAO','FRENTE', '', 'Usuário desativou contingência ' + ExtractFileName(Application.ExeName) + ' ' + LimpaNumero(Form22.sBuild),0,0); // Ato, Modulo, Usuário, Histórico, Valor
      except

      end;

      TrocaFrente('65', NFCeemContingncia1.Checked);
      NFCeemContingncia1.Checked := False;
      Form1.Display(Form1.Frame_teclado1.Led_ECF.Hint, Form1.sF); // Sandro Silva 2017-09-20

    end else
    begin
      //
      //    Mais1Ini.WriteString('NFCE','contingencia','Sim');
      //
      if Form1.bStatusECF then
      begin
        Form1.NFCeemContingncia1.Checked := False;
        Application.MessageBox('Não é possível entrar em modo de contingência, o serviço está em operação.', 'Atenção', MB_ICONINFORMATION + MB_OK);
      end;
      //
      if (Form1.bStatusECF = False) and (Form1.UsaIntegradorFiscal() = False) then // Sandro Silva 2019-10-16 if Form1.bStatusECF = False then
      begin
        sMotivoContingencia := Trim(Small_InputBox('Motivo da contingência', 'Motivo da contingência: (mínimo 15 carateres)', sMotivoContingencia)); // Sandro Silva 2021-06-15 sMotivoContingencia := Small_InputBox('Motivo da contingência', 'Motivo da contingência: (mínimo 15 carateres)', sMotivoContingencia);
        //
        // Sandro Silva 2016-05-04 Não permitir entrar em contingência se não informar motivo  if true then
        if (Trim(sMotivoContingencia) <> '') and (Length(Trim(sMotivoContingencia)) > 15) then
        begin

          try
            Audita('EMISSAO','FRENTE', '', 'Usuário ativou contingência ' + ExtractFileName(Application.ExeName) + ' ' + LimpaNumero(Form22.sBuild),0,0); // Ato, Modulo, Usuário, Histórico, Valor
          except

          end;

          Application.MessageBox(PChar('Entrando em modo de contingência.'+chr(10)+chr(10)+
                                       'Lembre-se de transmitir as notas quando voltar o serviço.'), 'Modo de Contingência Ativado', MB_ICONWARNING + MB_OK);
          NFCeemContingncia1.Checked := True;

          //
          // FormShow já faz TestaTudo(True);  // NFCeemContingncia1Click
          //
          Form1.FormShow(Sender); // NFCeemContingncia1Click()
          //
          Form1.sStatusECF := 'OPERANDO EM CONTINGÊNCIA';
          Form1.Display(Form1.sStatusECF,Form1.sF);
        end
        else
        begin
          if Application.MessageBox(PChar('Motivo incorreto' + #13 +
                                          '"' + sMotivoContingencia + '"' + #13 + #13 +
                                          'O motivo deve conter ao menos 15 caracteres' + #13 + #13 +
                                          'Deseja repetir o procedimento?'
                                          ), 'Atenção', MB_ICONWARNING + MB_YESNO) = id_yes then
            NFCeemContingncia1Click(Sender);
        end;
      end; // if NFCeemContingncia1.Checked then
      //
    end;
  end; // if Form1.UsaIntegradorFiscal() = False then // Sandro Silva 2019-10-16
end;

procedure TForm1.DANFCEdetalhado1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if DANFCEdetalhado1.Checked then
  begin
    Mais1Ini.WriteString('NFCE','DANFCE detalhado','Não');
    DANFCEdetalhado1.Checked := False;
  end else
  begin
    Mais1Ini.WriteString('NFCE','DANFCE detalhado','Sim');
    DANFCEdetalhado1.Checked := True;
  end;
  //
  Mais1ini.Free;
  //
end;

procedure TForm1.ConfigurarlogotipodoDANFE1Click(Sender: TObject);
begin
  //
  Form1.Alterarlogotipo1Click(Sender);
  //
end;

procedure TForm1.DBGrid1DrawDataCell(Sender: TObject; const Rect: TRect;
  Field: TField; State: TGridDrawState);
var
  sFieldValue: String;
  iLarguraTexto: Integer;
  R: TRect;
begin

  Form1.DBGrid1.Canvas.Font.Size  := Form1.LabelESC2.Font.Size;//Form1.DBGrid1.Canvas.Font.Size;// AjustaAltura(10); // Sandro Silva 2017-09-15
  Form1.DBGrid1.Canvas.Font.Name  := Form1.LabelESC2.Font.Name; // Sandro Silva 2017-09-15
  Form1.DBGrid1.Canvas.Font.Style := []; // Sandro Silva 2017-09-15

  if Form1.ibDataSet150.FieldByName('MODELO').AsString = '99' then
  begin

    Form1.DBGrid1.Canvas.Font.Color  := COR_AZUL; // Sandro Silva 2021-08-17 $00EAB231; // Azul
    if Form1.ibDataSet150.FieldByName('STATUS').AsString <> VENDA_MEI_FINALIZADA then
      Form1.DBGrid1.Canvas.Font.Color  := clRed;

    if Form1.ibDataSet150.FieldByName('STATUS').AsString = VENDA_MEI_CANCELADA then
      Form1.DBGrid1.Canvas.Font.Color  := clSilver;     

  end
  else
  begin

    if (((Pos('<nfeProc',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)
         and (Pos('<protNFe',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0))
     or ((Pos('infCFe',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and
         (Pos('Id="CFe',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and
         (Pos('versaoSB=',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0))
     or (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Autorizad')) // Sandro Silva 2021-11-03
     or (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Emitido com sucesso')) // Sandro Silva 2021-11-03
     )
     and (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Rejeicao') = False) // Sandro Silva 2021-11-03
     then
      Form1.DBGrid1.Canvas.Font.Color  := COR_AZUL // Sandro Silva 2021-08-17 $00EAB231 // Azul
    else
      Form1.DBGrid1.Canvas.Font.Color  := clRed;

  end; 

  R := Rect;
  Form1.DBGrid1.Canvas.FillRect(Rect);

  if (gdFocused in State)
    and (Application.Active) // Para evitar que fique a celula do grid toda em branco quando trocar de aplicação
  then
  begin
    Form1.DBGrid1.Canvas.Font.Color := clWhite;
  end
  else
  begin
    Form1.DBGrid1.Canvas.Font.Color  := COR_AZUL; // Sandro Silva 2021-08-17 $00EAB231; // Azul // Sandro Silva 2017-09-29

    if Form1.ibDataSet150.FieldByName('MODELO').AsString = '99' then
    begin

      if Form1.ibDataSet150.FieldByName('STATUS').AsString <> VENDA_MEI_FINALIZADA then
        Form1.DBGrid1.Canvas.Font.Color  := clRed;

      if Form1.ibDataSet150.FieldByName('STATUS').AsString = VENDA_MEI_CANCELADA then
        Form1.DBGrid1.Canvas.Font.Color  := clSilver;

    end
    else
    begin

      if (((Pos('<nfeProc',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)
           and (Pos('<protNFe',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0))
       or ((Pos('infCFe',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and
           (Pos('Id="CFe',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and
           (Pos('versaoSB=',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0))
       or (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Autorizad')) // Sandro Silva 2021-11-03
       or (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Emitido com sucesso')) // Sandro Silva 2021-11-03
       )
       and (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Rejeicao') = False) // Sandro Silva 2021-11-03
       then
         Form1.DBGrid1.Canvas.Font.Color  := COR_AZUL // Sandro Silva 2021-08-17 $00EAB231 // Azul
      else
        Form1.DBGrid1.Canvas.Font.Color  := clRed; // Sandro Silva 2017-09-29

      if ((Pos('<xEvento>Cancelamento</xEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) or (Pos('<descEvento>Cancelamento',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0))
       or (_ecf65_UsoDenegado(Form1.ibDataSet150.FieldByName('NFEXML').AsString)) // Sandro Silva 2020-05-14
       or (Pos('chCanc=',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) then
        Form1.DBGrid1.Canvas.Font.Color  := clSilver;
    end;

  end;

  sFieldValue := Field.AsString;
  if AnsiUpperCase(Field.FieldName) = 'STATUS' then
  begin
    iLarguraTexto := (Rect.Right - (Rect.Left + AjustaLargura(2))) div Form1.DBGrid1.Canvas.TextWidth('Z');
    sFieldValue := Copy(Field.AsString, 1, iLarguraTexto);
  end
  else if AnsiUpperCase(Field.FieldName) = 'NFEXML' then
  begin
    iLarguraTexto := (Rect.Right - (Rect.Left + AjustaLargura(2))) div Form1.DBGrid1.Canvas.TextWidth('Z');
    // Ficou o texto na cor preta iLarguraTexto := DBGrid1.Columns[Field.Index].Width div iLarguraTexto;
    sFieldValue := Field.AsString;
    while AnsiContainsText(sFieldValue, '  ') do
      sFieldValue := StringReplace(sFieldValue, '  ', ' ', [rfReplaceAll]);
    sFieldValue := StringReplace(sFieldValue, #10, ' ', [rfReplaceAll]);
    sFieldValue := StringReplace(sFieldValue, #13, ' ', [rfReplaceAll]);
    sFieldValue := Copy(sFieldValue, 1, iLarguraTexto);
  end;

  R.Left   := Rect.Right - AjustaLargura(20); // Sandro Silva 2017-10-18
  R.Bottom := Rect.Bottom;// - AjustaAltura(2); // Sandro Silva 2017-10-18 Rect.Top + AjustaAltura(40); // Sandro Silva 2017-10-18

  if (Field.FieldName = 'STATUS') then
  begin
    if Form1.ibDataSet150.FieldByName('NUMERONF').AsString <> '' then
    begin
      if (Form1.sModeloECF = '99') or (Form1.sModeloECF_Reserva = '99') then
      begin
      
      end
      else
      begin
        // Sandro Silva 2021-10-01 if (Pos('<xEvento>Cancelamento</xEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) or (Pos('<descEvento>Cancelamento</descEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)
        if (Pos('<xEvento>Cancelamento</xEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) or (Pos('<descEvento>Cancelamento',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)
            or (Pos('chCanc=',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)
            or (_ecf65_UsoDenegado(Form1.ibDataSet150.FieldByName('NFEXML').AsString))
          then
        begin
          Form1.DBGrid1.Canvas.StretchDraw(R, Form1.Image5.Picture.Graphic); // Cancelado // Sandro Silva 2017-10-18  Form1.DBGrid1.Canvas.StretchDraw(Rect,Form1.Image5.Picture.Graphic); // Cancelado
        end else if (AnsiContainsText(sFieldValue, 'Autoriza')) or (AnsiContainsText(sFieldValue, 'Emitido com sucesso')) then
        begin
          if (Copy(xmlNodeValue(Form1.ibDataSet150.FieldByName('NFEXML').AsString, '//infNFe/@versao'), 1, 1) = '4') or (Copy(Form1.ibDataSet150.FieldByName('NFEID').AsString, 21, 2) = '59') then // Sandro Silva 2018-11-01  if Copy(xmlNodeValue(Form1.ibDataSet150NFEXML.AsString, '//infNFe/@versao'), 1, 1) = '4' then // Sandro Silva 2018-03-06
            Form1.DBGrid1.Canvas.StretchDraw(R, Form1.Image99.Picture.Graphic)
          else
            Form1.DBGrid1.Canvas.StretchDraw(R, Form1.Image9.Picture.Graphic); // Autorizado // Sandro Silva 2017-10-18 Form1.DBGrid1.Canvas.StretchDraw(Rect,Form1.Image9.Picture.Graphic); // Autorizado
        end else
        begin
          if (Copy(xmlNodeValue(Form1.ibDataSet150.FieldByName('NFEXML').AsString, '//infNFe/@versao'), 1, 1) = '4') or (Copy(Form1.ibDataSet150.FieldByName('NFEID').AsString, 21, 2) = '59') then // Sandro Silva 2018-11-01 if Copy(xmlNodeValue(Form1.ibDataSet150NFEXML.AsString, '//infNFe/@versao'), 1, 1) = '4' then // Sandro Silva 2018-03-06
            Form1.DBGrid1.Canvas.StretchDraw(R, Form1.Image88.Picture.Graphic)
          else
            Form1.DBGrid1.Canvas.StretchDraw(R, Form1.Image8.Picture.Graphic);// Pendente // Sandro Silva 2017-10-18  Form1.DBGrid1.Canvas.StretchDraw(Rect,Form1.Image8.Picture.Graphic);// Pendente
        end;
      end;
    end;
  end;

  if (Field.FieldName = 'TOTAL') then
  begin
    if Field.AsString <> '' then
      sFieldValue := FormatFloat('0.00', Field.AsFloat);
  end;

  R.Top    := R.Top + AjustaAltura(2);
  if (Field.FieldName <> 'TOTAL') then // Sandro Silva 2018-12-05
  begin
    R.Left   := Rect.Left + AjustaLargura(2); // Sandro Silva 2017-10-18  R.Left + AjustaLargura(2);
  end
  else
  begin
    R.Left := Rect.Right - (Form1.DBGrid1.Canvas.TextWidth(sFieldValue) + AjustaLargura(2));
  end;
  R.Bottom := Rect.Bottom - AjustaAltura(2); // Sandro Silva 2017-10-18 Rect.Top + AjustaAltura(40); // Sandro Silva 2017-10-18

  if (Field.FieldName = 'MODELO') then
    R.Left := R.Left + ((R.Right - R.Left) - Form1.DBGrid1.Canvas.TextWidth(sFieldValue) + AjustaLargura(2)) div 2;

  Form1.DBGrid1.Canvas.TextOut(R.Left, R.Top, sFieldValue);
end;

procedure TForm1.EnviaroDANFCEporeMail1Click(Sender: TObject);
begin
  if (sModeloECF = '65') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '65') then
    begin
      Form2.Edit10.Text := Small_InputBox('e-Mail','Informe o e-Mail para enviar o DANFCE e o XML:','');
      _ecf65_Email_DANFECE(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString);
    end
    else
      SmallMsg('Este XML não pertence a uma NFC-e');
  end;

  if (sModeloECF = '59') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '59') then
    begin
      Form2.Edit10.Text := Small_InputBox('e-Mail','Informe o e-Mail para enviar o Extrato ' + sTipoDocumento + ' e o XML:','');// Sandro Silva 2018-08-01
      _ecf59_Email_DANFECE(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString)
    end
    else
      SmallMsg('Este XML não pertence a um ' + sTipoDocumento);// Sandro Silva 2018-08-01  SmallMsg('Este XML não pertence a um CF-e-SAT');
  end;
end;

procedure TForm1.VisualizaroDANFCE1Click(Sender: TObject);
begin
  if (sModeloECF = '65') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '65') then
      _ecf65_Visualiza_DANFECE(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString)
    else
      SmallMsg('Este XML não pertence a uma NFC-e');
  end;
  if (sModeloECF = '59') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '59') then
      _ecf59_Visualiza_DANFECE(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString)
    else
      SmallMsg('Este XML não pertence a um ' + sTipoDocumento);// Sandro Silva 2018-08-01  SmallMsg('Este XML não pertence a um CF-e-SAT');
  end;
  if (sModeloECF = '99') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '99') then
      _ecf99_Visualiza_Venda(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('CAIXA').AsString);
  end;

end;

procedure TForm1.ImprimeoDANFCE1Click(Sender: TObject);
var
  IBQPAGAMENT: TIBQuery;
begin
  IBQPAGAMENT := CriaIBQuery(Form1.IBDataSet150.Transaction);

  Form1.ExibePanelMensagem('Aguarde, imprimindo DANFCE...'); // Sandro Silva 2021-11-05 

  if (sModeloECF = '65') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '65') then
    begin
      IBQPAGAMENT.Close;
      IBQPAGAMENT.SQL.Text :=
        'select * ' +
        'from PAGAMENT ' +
        'where PEDIDO = ' + QuotedStr(Form1.ibDataSet150.FieldByName('NUMERONF').AsString) +
        ' and CAIXA = ' + QuotedStr(Form1.IBDataSet150.FieldByName('CAIXA').AsString) +
        ' and FORMA = ''13 Troco'' ';
      IBQPAGAMENT.Open;
      _ecf65_Imprime_DANFECE(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString);
    end
    else
      SmallMsg('Este XML não pertence a uma NFC-e');
  end;
  if (sModeloECF = '59') then
  begin
    if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '59') then
      _ecf59_Imprime_DANFECE(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString)
    else
      SmallMsg('Este XML não pertence a um ' + sTipoDocumento);// Sandro Silva 2018-08-01  SmallMsg('Este XML não pertence a um CF-e-SAT');
  end;

  if (Form1.sModeloECF = '99') then
  begin
    _ecf99_ImprimeVenda(nil, Form1.ibDataSet150.Transaction, Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('CAIXA').AsString, '', '', '', '');
  end;

  Form1.OcultaPanelMensagem; // Sandro Silva 2021-11-05
    
  Display(Form1.sStatusECF,Form1.sF); // Sandro Silva 2021-11-05

  FreeAndNil(IBQPAGAMENT);
end;

procedure TForm1.VisualizaroXMLdaNFCe1Click(Sender: TObject);
var
  F : TextFile;
  sXML : String;
begin
  //
  try
    //
    sXML := Form1.ibDataSet150.FieldByName('NFEXML').AsString;
    Clipboard.SetTextBuf(pchar(sXML));
    //
    while FileExists(pChar(sAtual+'\tempo.tmp')) do DeleteFile(pChar(sAtual+'\tempo.tmp'));
    while FileExists(pChar(sAtual+'\tempo.xml')) do DeleteFile(pChar(sAtual+'\tempo.xml'));
    //
    AssignFile(F,sAtual+'\tempo.tmp');
    Rewrite(F);
    WriteLn(F,sXML);
    CloseFile(F); // Fecha o arquivo
    //
    RenameFile(sAtual+'\tempo.tmp',sAtual+'\tempo.xml');
    //
    if FileExists(pchar(sAtual+'\tempo.xml')) then ShellExecute( 0, 'Open',pchar(sAtual+'\tempo.xml'),'','', SW_SHOWMAXIMIZED);
    //
  except end;
  //
end;

procedure TForm1.EnviaraNFCe1Click(Sender: TObject);
var
  Mais1ini: tIniFile;
  bTimer2EnabledOld: Boolean;
  sNumeroNFEnvio: String;
  sCaixaEnvio: String;
begin
  bTimer2EnabledOld := Timer2.Enabled;
  //
  try
    Timer2.Enabled    := False;
    if sModeloECF = '65' then
    begin

      if Form1.bStatusECF then
      begin
        //
        if (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Autorizad')) or (Pos('|' + xmlNodeValue(Form1.ibDataSet150.FieldByName('NFEXML').AsString, '//infProt/cStat') + '|', '|100|150|') > 0) then
        begin
          Application.MessageBox('NFC-e transmitida e autorizada', 'Aviso', MB_OK + MB_ICONINFORMATION);
          Exit;
        end;

        if (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Denegado')) or (_ecf65_UsoDenegado(Form1.ibDataSet150.FieldByName('NFEXML').AsString)) then
        begin
          Application.MessageBox('NFC-e com Uso Denegado', 'Aviso', MB_OK + MB_ICONINFORMATION);
          Exit;
        end;

        if (Pos('contingência',Form1.ibDataSet150.FieldByName('STATUS').AsString) <> 0) or (xmlNodeValue(Form1.ibDataSet150.FieldByName('NFEXML').AsString, '//tpEmis') = '9') then // Sandro Silva 2018-03-06  if (Pos('contingência',Form1.ibDataSet150.FieldByName('STATUS').AsString) <> 0) then
        begin

          if Form1.bStatusECF then // Sandro Silva 2020-06-25
          begin

            if Application.MessageBox(PansiChar('NFC-e em contingência com transmissão pendente' + #13 + #13 + 'Deseja transmitir a contingência agora?'), PAnsiChar('Atenção - NFC-e em Contingência'), MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION) = id_Yes then
            begin

              _ecf65_EnviarNFCeContingencia(Form1.IBDataSet150.FieldByName('DATA').AsDateTime, '', ''); //  , Form1.ibDataSet150.FieldByName('CAIXA').AsString); // Sandro Silva 2018-03-06  Form1.sCaixa);

              Form1.GerenciadordeNFCe1Click(Form1.GerenciadordeNFCe1);

            end
            else
              Exit;
          end
          else
            Exit;
        end
        else
        begin
          if Form1.sCaixa <> Form1.ibDataSet150.FieldByName('CAIXA').AsString then
          begin
            Application.MessageBox(PAnsiChar('NFC-e ' + Form1.ibDataSet150.FieldByName('NUMERONF').AsString + ' pertence ao caixa ' + Form1.ibDataSet150.FieldByName('CAIXA').AsString +
                                             #13 + #13 + 'Faça o envio pelo caixa ' + Form1.ibDataSet150.FieldByName('CAIXA').AsString), 'Atenção', MB_OK + MB_ICONWARNING);
          end
          else
          begin
            sNumeroNFEnvio := Form1.ibDataSet150.FieldByName('NUMERONF').AsString;
            sCaixaEnvio    := Form1.ibDataSet150.FieldByName('CAIXA').AsString;

            _ecf65_EnviarNFCeContingencia(Form1.IBDataSet150.FieldByName('DATA').AsDateTime, sNumeroNFEnvio, sCaixaEnvio); //  , Form1.ibDataSet150.FieldByName('CAIXA').AsString); // Sandro Silva 2018-03-06  Form1.sCaixa);

            Form1.IBDataSet150.Close;
            Form1.IBDataSet150.SelectSQL.Text :=
              'select * ' +
              'from NFCE ' +
              'where NUMERONF = ' + QuotedStr(sNumeroNFEnvio) +
              ' and CAIXA = ' + QuotedStr(sCaixaEnvio) +
              ' and MODELO = ''65'' ';
            Form1.IBDataSet150.Open;

            if AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Autorizad') = False then
            begin
              //
              Mais1ini := TIniFile.Create('FRENTE.INI');
              Mais1Ini.WriteString('NFCE','CUPOM',Form1.ibDataSet150.FieldByName('NUMERONF').AsString);
              Mais1ini.Free;
              //
              Form1.ibDataset150.Close;

              Commitatudo(True); // EnviaraNFCe1Click() As 2 transações devem estar sincronizadas caso tentar transmitir novamente logo em seguida a mesma nfce 2015-07-27

              OcultaGerenciadorVendas;
              Form1.Edit1.Text := '';
              Form1.Edit1.SetFocus;

              //
              CortaPapelNoVideo(True); // TForm1.EnviaraNFCe1Click()
              Form1.FormShow(Sender); // EnviaraNFCe1Click()
            end; // if AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Autorizad') = False then

          end; // if Form1.sCaixa <> Form1.ibDataSet150.FieldByName('CAIXA').AsString then
        end; // if (Pos('contingência',Form1.ibDataSet150.FieldByName('STATUS').AsString) <> 0) or (xmlNodeValue(Form1.ibDataSet150.FieldByName('NFEXML').AsString, '//tpEmis') = '9') then // Sandro Silva 2018-03-06  if (Pos('contingência',Form1.ibDataSet150.FieldByName('STATUS').AsString) <> 0) then

      end; // if Form1.bStatusECF then // Sandro Silva 2020-06-25
      //
      //
    end; // if sModeloECF = '65' then {Sandro Silva 2014-01-20 inicio}

    if sModeloECF = '59' then {Sandro Silva 2014-01-20 inicio}
    begin
      //
      if (Pos('contingência',Form1.ibDataSet150.FieldByName('STATUS').AsString) <> 0) then
      begin
        Form1.ibDataSet150.Edit;
        Form1.ibDataSet150.FieldByName('STATUS').AsString := '';
        Form1.ibDataSet150.FieldByName('NFEXML').AsString := '';
        Form1.ibDataSet150.Post;
      end;
      //
      Mais1ini := TIniFile.Create('FRENTE.INI');
      Mais1Ini.WriteString('NFCE','CUPOM',Form1.ibDataSet150.FieldByName('NUMERONF').AsString);
      Mais1ini.Free;
      //
      Form1.ibDataset150.Close;

      Commitatudo(True); // As 2 transações devem estar sincronizadas caso tentar transmitir novamente logo em seguida a mesma nfce 2015-07-27

      {Sandro Silva 2021-07-13 inicio
      Form1.dbGrid1.Visible         := False;
      Form1.DateTimePicker1.Visible := False;
      Form1.pnlMenuFiscalPAFNFCeInacessivel.Visible := False; // Sandro Silva 2020-12-16
      Form1.Edit1.Text := '';
      Form1.Edit1.SetFocus;
      Form1.Panel6.Visible := False;
      Form1.Panel7.Visible := False; // Sandro Silva 2017-12-13
      Form1.Panel8.Visible := False; // Sandro Silva 2017-12-13
      }
      OcultaGerenciadorVendas;
      Form1.Edit1.Text := '';
      Form1.Edit1.SetFocus;
      {Sandro Silva 2021-07-13 fim}

      //
      CortaPapelNoVideo(True); // Transmite documento TForm1.EnviaraNFCe1Click()
      Form1.FormShow(Sender); // EnviaraNFCe1Click()
      //
      //
    end;

    if sModeloECF = '99' then {Sandro Silva 2014-01-20 inicio}
    begin
      //
      if (Form1.ibDataSet150.FieldByName('MODELO').AsString = '99') and (Form1.ibDataSet150.FieldByName('STATUS').AsString = VENDA_MEI_ABERTA)  then
      begin

        //
        Mais1ini := TIniFile.Create('FRENTE.INI');
        Mais1Ini.WriteString('NFCE','CUPOM',Form1.ibDataSet150.FieldByName('NUMERONF').AsString);
        Mais1ini.Free;
        //
        Form1.ibDataset150.Close;

        Commitatudo(True); // As 2 transações devem estar sincronizadas caso tentar transmitir novamente logo em seguida a mesma nfce 2015-07-27

        {Sandro Silva 2021-07-13 inicio
        Form1.dbGrid1.Visible         := False;
        Form1.DateTimePicker1.Visible := False;
        Form1.pnlMenuFiscalPAFNFCeInacessivel.Visible := False; // Sandro Silva 2020-12-16
        Form1.Edit1.Text := '';
        Form1.Edit1.SetFocus;
        Form1.Panel6.Visible := False;
        Form1.Panel7.Visible := False; // Sandro Silva 2017-12-13
        Form1.Panel8.Visible := False; // Sandro Silva 2017-12-13
        }
        OcultaGerenciadorVendas;
        Form1.Edit1.Text := '';
        Form1.Edit1.SetFocus;
        {Sandro Silva 2021-07-13 fim}

        //
        CortaPapelNoVideo(True); // Transmite documento TForm1.EnviaraNFCe1Click()
        Form1.FormShow(Sender); // EnviaraNFCe1Click()
        touch_ESCClick(Sender);
        //
        //
      end;
    end;

  finally
    Timer2.Enabled := bTimer2EnabledOld;
    GerenciadordeNFCe1Click(Sender);
  end;
end;

procedure TForm1.PopupMenu2Change(Sender: TObject; Source: TMenuItem;
  Rebuild: Boolean);
begin
  if (Form1.sModeloECF = '99') or (Form1.sModeloECF_Reserva = '99') then
  begin

    EnviaroDANFCEporeMail1.Visible  := False;
    Verificaresquemaschema1.Visible := False;
    VisualizaroXMLdaNFCe1.Visible   := False;
    VisualizaroXMLdaNFCe1.Visible   := False;

    VisualizaroDANFCE1.Visible      := True;
    EnviaraNFCe1.Visible            := True;

    EnviaraNFCe1.Enabled            := (Form1.IBDataSet150.FieldByName('STATUS').AsString = VENDA_MEI_ABERTA);

    VisualizaroDANFCE1.Enabled      := (Form1.IBDataSet150.FieldByName('STATUS').AsString <> '');
    ImprimeoDANFCE1.Enabled         := (Form1.IBDataSet150.FieldByName('STATUS').AsString <> '');;
    CancelaraNFCe1.Enabled          := (Form1.IBDataSet150.FieldByName('STATUS').AsString <> VENDA_MEI_CANCELADA) and (Form1.IBDataSet150.FieldByName('STATUS').AsString <> '');

    VisualizaroDANFCE1.Caption := 'Visualizar venda...';
    EnviaraNFCe1.Caption       := 'Abrir...';
    ImprimeoDANFCE1.Caption    := 'Imprimir...';
    CancelaraNFCe1.Caption     := 'Cancelar...';
  end
  else
  begin

    EnviarchaveconsultapeloWhatsApp1.Visible := (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65');

    EnviarchaveconsultapeloWhatsApp1.Enabled := (AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'com sucesso') or AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Autorizad'));

    Verificaresquemaschema1.Visible := Form1.sModeloECF = '65';

    ConsultaChaveNFCe1.Enabled := ((Form1.IBDataSet150.FieldByName('NFEID').AsString <> '') or (AnsiContainsText(Form1.ibDataSet150.FieldByName('NFEXML').AsString, 'Id="NFe') and AnsiContainsText(Form1.ibDataSet150.FieldByName('STATUS').AsString, 'Duplicidade'))); // Sandro Silva 2019-12-04
    //
    if (Form1.ibDataSet150.FieldByName('REGISTRO').AsString <> '')
      and (_ecf65_UsoDenegado(Form1.ibDataSet150.FieldByName('NFEXML').AsString) = False) // Sandro Silva 2020-05-14
    then
    begin
      if ((Pos('<nfeProc', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) or ((Pos('<mod>65</mod>', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and (Pos(NFCE_EMITIDA_EM_CONTINGENCIA, Form1.ibDataSet150.FieldByName('STATUS').AsString)<> 0))) // NFCe
         or ((Pos('infCFe', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and
             (Pos('Id="CFe', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and
             (Pos('versaoSB=', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0))
        then
      begin
        EnviaroDANFCEporeMail1.Enabled := True;
        VisualizaroDANFCE1.Enabled     := True;// Sandro Silva 2018-08-03
        ImprimeoDANFCE1.Enabled        := True;
        if ((Pos('<mod>65</mod>', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) and (Pos(NFCE_EMITIDA_EM_CONTINGENCIA, Form1.ibDataSet150.FieldByName('STATUS').AsString)<> 0)) then
          CancelaraNFCe1.Enabled         := False
        else
          CancelaraNFCe1.Enabled         := True;
        EnviaraNFCe1.Enabled           := False;
      end else
      begin
        // Sandro Silva 2021-10-01 if ((Pos('<xEvento>Cancelamento</xEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) or (Pos('<descEvento>Cancelamento</descEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)) // NFCe
        if ((Pos('<xEvento>Cancelamento</xEvento>',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) or (Pos('<descEvento>Cancelamento',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0)) // NFCe
          or (Pos('chCanc=', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) // SAT-CFe
         then
        begin
          CancelaraNFCe1.Enabled         := False;
          EnviaroDANFCEporeMail1.Enabled := False;
          VisualizaroDANFCE1.Enabled     := False;
          if (Pos('chCanc=', Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0) then
            ImprimeoDANFCE1.Enabled        := True
          else
            ImprimeoDANFCE1.Enabled        := False;
          EnviaraNFCe1.Enabled           := False;
        end else
        begin
          CancelaraNFCe1.Enabled         := False;
          EnviaroDANFCEporeMail1.Enabled := False;
          VisualizaroDANFCE1.Enabled     := False;
          ImprimeoDANFCE1.Enabled        := False;
          EnviaraNFCe1.Enabled           := True;
        end;
      end;
      Verificaresquemaschema1.Enabled := True;
      VisualizaroXMLdaNFCe1.Enabled   := True;
    end
    else
    begin
      CancelaraNFCe1.Enabled          := False;
      EnviaroDANFCEporeMail1.Enabled  := False;
      VisualizaroDANFCE1.Enabled      := False;
      ImprimeoDANFCE1.Enabled         := False;
      EnviaraNFCe1.Enabled            := False;
      Verificaresquemaschema1.Enabled := False;
      VisualizaroXMLdaNFCe1.Enabled   := False;
      if _ecf65_UsoDenegado(Form1.ibDataSet150.FieldByName('NFEXML').AsString) then
        VisualizaroXMLdaNFCe1.Enabled := True;
    end;
    ransmitirContingncia1.Visible := Form1.sModeloECF = '65';

    Form1.RecuperarXMLdaNFCe1.Visible := Form1.sModeloECF = '65';
  end;

end;

procedure TForm1.DBGrid1DblClick(Sender: TObject);
var
  IBQDADOS: TIBQuery;
  sCaixaOld: String;
  sNumeroNFOld: String;
  sNumeroNFNew: String;
  sCaixaNew: String;
  sCOO: String;
  sCCF: String;
  dtDataOld: TDate;
  sRegistroOld: String;
  sTIPODAV: String;
  sDAV: String;
  bTimer2EnabledOld: Boolean;
  iRowsAffected: Integer; // Sandro Silva 2017-09-14
begin
  //// Comentar essas linhas e descomentas as de baixo

  if DBGrid1.DataSource.DataSet.FieldByName('NUMERONF').AsString = '' then
    Exit; // Double Click com grade vazia gera bug

  bTimer2EnabledOld := Timer2.Enabled;
  try
    Screen.Cursor := crHourGlass;

    Timer2.Enabled := False;
    //
    if (
        ((Pos('<nfeProc',Form1.ibDataSet150.FieldByName('NFEXML').AsString) = 0)) // nfce
        and
        (((Pos('Id="CFe', DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString) = 0)
           and (Pos('versaoSB=', DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString) = 0))) // cfesat
        )
      and (Pos('STATUS', DBGrid1.SelectedField.Name) <> 0) then
    begin
      //
      if (DBGrid1.DataSource.DataSet.FieldByName('CAIXA').AsString <> Form1.sCaixa)
        or (DBGrid1.DataSource.DataSet.FieldByName('MODELO').AsString = '59') then
      begin

        IBQDADOS := CriaIBQuery(Form1.ibQuery65.Transaction);
        try
          sCaixaOld    := DBGrid1.DataSource.DataSet.FieldByName('CAIXA').AsString;
          sNumeroNFOld := DBGrid1.DataSource.DataSet.FieldByName('NUMERONF').AsString;
          dtDataOld    := DBGrid1.DataSource.DataSet.FieldByName('DATA').AsDateTime;
          sRegistroOld := DBGrid1.DataSource.DataSet.FieldByName('REGISTRO').AsString;
          sCOO         := sNumeroNFOld;
          sCCF         := sNumeroNFOld;

          sNumeroNFNew := sNumeroNFOld;
          sCaixaNew    := sCaixaOld; // Sandro Silva 2018-03-06

          if Form1.sModeloECF = '65' then
          begin

            if sCCF <> '' then
            begin

              try
                Form1.ibDataSet27.Close;
                Form1.ibDataSet27.SelectSQL.Text :=
                  'select * '+
                  'from ALTERACA ' +
                  'where CAIXA = ' + QuotedStr(sCaixaOld) +
                  ' and PEDIDO = ' + QuotedStr(sNumeroNFOld) + // vendas do SAT/NFC-e terão campos ALTERACA.COO e ALTERACA.CCF preenchidos somente após a autorização
                  ' and (DATA between  ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtDataOld - 1)) + ' and ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtDataOld + 1)) + ')'; // Itens da mesma data da NFC-e ou 1 dia a menos
                Form1.ibDataSet27.Open;
                while Form1.ibDataSet27.Eof = False do
                begin
                  Form1.ibDataSet27.Edit;
                  Form1.ibDataSet27.FieldByName('CCF').Clear; // CCF preenchido indica que foi transmitido e autorizado
                  Form1.ibDataSet27.Post;
                  Form1.ibDataSet27.Next;
                end;

              except
              end;

            end;

            sCOO         := ''; //sNumeroNFNew;
            sCCF         := ''; //sNumeroNFNew;

            IBQDADOS.Close;

          end;

          if Form1.sModeloECF = '59' then
          begin
            sCaixaNew    := Form1.sCaixa;
            // Sandro Silva 2021-12-01 sNumeroNFNew := StrZero(IncrementaGenerator(_59_PREFIXO_GENERATOR_CAIXA_SAT + Form1.sCaixa, 1),6,0); // Sandro Silva 2021-03-05 sNumeroNFNew := StrZero(IncrementaGenerator('G_NUMEROCFESAT_' + Form1.sCaixa, 1),6,0);
            sNumeroNFNew := FormataNumeroDoCupom(IncrementaGenerator(_59_PREFIXO_GENERATOR_CAIXA_SAT + Form1.sCaixa, 1));
            sCOO         := '';
            sCCF         := '';

            IBQDADOS.Close;
          end;

          iRowsAffected := 0;
          try

            Form1.ibDataSet27.Close;
            Form1.ibDataSet27.SelectSQL.Text :=
              'select * ' +
              'from ALTERACA ' +
              ' where CAIXA = ' + QuotedStr(sCaixaOld) +
              ' and PEDIDO = ' + QuotedStr(sNumeroNFOld) +
              ' and CCF is null'; // vendas do SAT/NFC-e terão campos ALTERACA.COO e ALTERACA.CCF preenchidos somente após a autorização
            Form1.ibDataSet27.Open;
            while Form1.ibDataSet27.Eof = False do
            begin
              Form1.ibDataSet27.Edit;
              Form1.ibDataSet27.FieldByName('CAIXA').AsString  := sCaixaNew; // Sandro Silva 2018-03-06  ' CAIXA = ' + QuotedStr(Form1.sCaixa) +
              Form1.ibDataSet27.FieldByName('PEDIDO').AsString := sNumeroNFNew;
              Form1.ibDataSet27.Post;
              Form1.ibDataSet27.Next;
            end;

            iRowsAffected := Form1.ibDataSet27.RecordCount;

          except
          end;

          if Form1.sModeloECF = '65' then // Só faz para NFCE. Para o SAT é atualizado abaixo usando .Post
          begin
            try
              IBQDADOS.Close;
              IBQDADOS.SQL.Text :=
                'update NFCE set ' +
                'CAIXA = ' + QuotedStr(sCaixaNew) + // Sandro Silva 2018-03-06  'CAIXA = ' + QuotedStr(Form1.sCaixa) +
                ', NUMERONF = ' + QuotedStr(sNumeroNFNew) +
                ', MODELO = ' + QuotedStr(Form1.sModeloECF) +
                ' where REGISTRO = ' + QuotedStr(sRegistroOld);
              IBQDADOS.ExecSQL;
            except
            end;
          end;

          if iRowsAffected > 0 then
          begin
            //Atualiza ORCAMENT e OS
            IBQDADOS.Close;
            IBQDADOS.SQL.Text :=
              'select first 1 DAV, TIPODAV, PEDIDO, CAIXA ' +
              'from ALTERACA ' +
              ' where CAIXA = ' + QuotedStr(sCaixaNew) +// Sandro Silva 2018-03-06   ' where CAIXA = ' + QuotedStr(Form1.sCaixa) +
              ' and PEDIDO = ' + QuotedStr(sNumeroNFNew) +
              //' and DATA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtDataOld));
              ' and CCF is null'; // vendas do SAT/NFC-e terão campos ALTERACA.COO e ALTERACA.CCF preenchidos somente após a autorização
            IBQDADOS.Open;

            sTIPODAV := IBQDADOS.FieldByName('TIPODAV').AsString;
            sDAV     := IBQDADOS.FieldByName('DAV').AsString;

            AtualizaDetalhe(Form1.IBQuery65.Transaction, sTIPODAV, sDAV, sCaixaOld, sCaixaNew, sNumeroNFNew, '');// Sandro Silva 2018-03-06  AtualizaDetalhe(Form1.IBQuery65.Transaction, sTIPODAV, sDAV, sCaixaOld, Form1.sCaixa, sNumeroNFNew, '');

            Commitatudo(True);// Salva para que as 2 transaction vejam dados

            IBQDADOS.Close;
            IBQDADOS.SQL.Text :=
              'select first 1 VENDEDOR ' +
              'from ALTERACA ' +
              'where PEDIDO = ' + QuotedStr(sNumeroNFNew) +
              ' and CAIXA = ' + QuotedStr(sCaixaNew) +// Sandro Silva 2018-03-06  ' and CAIXA = ' + QuotedStr(Form1.sCaixa) +
              //' and DATA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtDataOld)) +
              ' and CCF is null' + // vendas do SAT/NFC-e terão campos ALTERACA.COO e ALTERACA.CCF preenchidos somente após a autorização
              ' and TIPO <> ''CANCEL'' ' +
              ' and TIPO <> ''KOLNAC'' ' + // Sandro Silva 2019-03-26 Quando em Dead Lock, regsitro fica com TIPO=KOLNAC. Altera para "CANCEL" quando estiver destravado
              ' and DESCRICAO <> ''Acréscimo'' ' +
              ' and DESCRICAO <> ''Desconto'' ' +
              ' and DESCRICAO <> ''<CANCELADO>'' ' +
              ' and VENDEDOR <> ''<cancelado>'' ';
            IBQDADOS.Open;

            if IBQDADOS.FieldByName('VENDEDOR').AsString <> '' then
            begin
              Form2.Edit9.Text := IBQDADOS.FieldByName('VENDEDOR').AsString;
              Form2.Edit9Change(Sender);
              if (Form1.ibDataSet99.FieldByName('NOME').AsString <> IBQDADOS.FieldByName('VENDEDOR').AsString) then
              begin
                Form2.Edit9.Text := Form1.sVendedor;
              end
              else
              begin
                Form1.sVendedor  := Form1.ibDataSet99.FieldByName('NOME').AsString;
              end;
            end;

          end; // if iRowsAffected >= 0 then

          Form1.ibDataSet150.Open;
          Form1.ibDataSet150.Locate('REGISTRO', sRegistroOld, []);

          if Form1.sModeloECF = '59' then
          begin
            if (Form1.ibDataSet150.FieldByName('CAIXA').AsString = sCaixaOld)
              and (Form1.ibDataSet150.FieldByName('NUMERONF').AsString = sNumeroNFOld)
              and (Form1.ibDataSet150.FieldByName('MODELO').AsString = Form1.sModeloECF) then
            begin
              // Atualiza o número do pedido para o próximo número do caixa que foram salvos os dados do pedido nas outras tabelas (NFCE, ALTERACA, OS)
              Form1.ibDataSet150.Edit;
              Form1.ibDataSet150.FieldByName('CAIXA').AsString    := sCaixaNew;
              Form1.ibDataSet150.FieldByName('NUMERONF').AsString := sNumeroNFNew;
              Form1.ibDataSet150.Post;
            end;
          end;

        except

        end;
        FreeAndNil(IBQDADOS);
      end;
      {Sandro Silva 2017-09-14 final}

      {Sandro Silva 2022-11-04 inicio}
      try
        Audita('EMISSAO', 'FRENTE', Form15.UsuarioPub, 'Transmissão duplo click NF:' + Form1.ibDataSet150.FieldByName('NUMERONF').AsString + ' CX: ' + Form1.ibDataSet150.FieldByName('CAIXA').AsString + ' ' + ExtractFileName(Application.ExeName) + ' Build: ' + LimpaNumero(Form22.sBuild), 0, 0); // Ato, Modulo, Usuário, Histórico, Valor // Sandro Silva 2019-03-06
      except

      end;
      {Sandro Silva 2022-11-04 fim}

      Form1.EnviaraNFCe1Click(Sender);// Transmitindo NFC-e com duplo click no gerenciador
      //
    end else
    begin
      //
      PopupMenu2.Popup(Mouse.CursorPos.x, Mouse.CursorPos.y);
      //
    end;
  finally
    Timer2.Enabled := bTimer2EnabledOld;
    Screen.Cursor := crDefault;
  end;
  //
end;

procedure TForm1.CancelaraNFCe1Click(Sender: TObject);
var
  sSqlOld: String;// Armazena o sql para após a operação mostrar os mesmos dados selecionados
  iCupomOld: Integer; // Sandro Silva 2017-09-21
  sCaixaOld: String; // Sandro Silva 2017-09-21
begin
  sSqlOld := Form1.ibDataset150.SelectSQL.Text;
  //
  iCupomOld := Form1.icupom;
  try
    // NFC-e e SAT permitem cancelar qualquer cupom dentro do tempo limite
    // Se fechar e abrir o frente para cancelar ibDataSet27 vai estar aberto com o cupom = '0000000';
    // Form1.icupom será 0 e Form1.sCaixa pode ser diferente daquele que está cancelando
    Button4.Enabled := False; // Desabilita o cancelamento do último cupom
    sCaixaOld := Form1.sCaixa;
    //ShowMessage('Teste 01 34635 ' + Form1.ibDataSet27.SelectSQL.Text);

    Form1.iCupom := StrToInt(Form1.IBDataSet150.FieldByName('NUMERONF').AsString);
    Form1.sCaixa := Right('000' + Form1.IBDataSet150.FieldByName('CAIXA').AsString, 3);

    Form1.ibDataset150.DisableControls; // Sandro Silva 2017-09-29

    Form1.Button4Click(Sender);
    //
    Form1.ibDataset150.Close;
    Form1.ibDataset150.SelectSql.Clear;
    Form1.ibDataset150.SelectSQL.Add(sSqlOld);
    Form1.ibDataset150.Open;
    //
    Form1.ibDataset150.Last;
  finally
    Form1.iCupom := iCupomOld;
    Form1.sCaixa := sCaixaOld;
    Form1.ibDataSet27.Close;
    Form1.ibDataSet27.SelectSQL.Text :=
      'select * ' +
      'from ALTERACA ' +
      'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
      ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)); // Sandro Silva 2021-11-29 ' and PEDIDO = ' + QuotedStr(StrZero(Form1.icupom, 6, 0));
    Form1.ibDataSet27.Open;
    Form1.ibDataset150.EnableControls; // Sandro Silva 2017-09-29
  end;
  //
end;

procedure TForm1.ConfigurarDANFCE1Click(Sender: TObject);
begin
  //
  Form1.ibDataset150.Close;
  Form1.ibDataset150.SelectSql.Clear;
  Form1.ibDataset150.SelectSQL.Add('select * from NFCE order by NUMERONF');
  Form1.ibDataset150.Open;
  //
  while (not Form1.IBDataSet150.eof) and (Pos('<nfeProc', Form1.ibDataSet150.FieldByName('NFEXML').AsString) = 0) do
  begin
    Form1.IBDataSet150.Next;
  end;
  //
  if Pos('<nfeProc',Form1.ibDataSet150.FieldByName('NFEXML').AsString) <> 0 then
  begin
    Form1.spdNFCe1.EditarModeloDanfce(Form1.ibDataSet150.FieldByName('NUMERONF').AsString, Form1.ibDataSet150.FieldByName('NFEXML').AsString, _ecf65_ArquivoRTM);
  end;
  //
end;

procedure TForm1.IDTokenNFCE1Click(Sender: TObject);
var
  //Mais1Ini : TiniFile;
  scIdToken: String;
begin
  //
  if sModeloECF = '65' then
  begin
    //
    ConfiguraNFCE(True); //Form1.IDTokenNFCE1Click()
    scIdToken := Trim(Small_InputBox('ID do CSC (Código de Seguranca do Contribuinte)','Informe ID do CSC (Código de Seguranca do Contribuinte)',Form1.spdNFCe1.DanfceSettings.IdTokenNFCe));

    if LimpaNumero(scIdToken) <> scIdToken then
    begin
      Application.MessageBox('O "ID do CSC" deve conter apenas números' + #13 +
                             'O preenchimento incorreto impedirá a emissão de NFC-e' + #13 + 'Essa configuração não será salva', 'Atenção', MB_ICONWARNING + MB_OK);
    end
    else
    begin
      scIdToken := RightStr('000000' + LimpaNumero(scIdToken), 6); // LeiauteNFe_v3.10.xsd: Schema cIdToken=[0-9]{6} numérico com 6 dígitos

      Form1.spdNFCe1.DanfceSettings.IdTokenNFCe := scIdToken;
      //
      {Sandro Silva 2022-05-02 inicio
      Mais1ini := TIniFile.Create('FRENTE.INI');
      Mais1Ini.WriteString('NFCE','ID Token NFCE', scIdToken);
      Mais1Ini.Free;
      }
      _ecf65_GravaIdCSC(scIdToken);
      {Sandro Silva 2022-05-02 fim}
    end;
    //
  end;
  if sModeloECF = '59' then
  begin
    ConfiguraNFCE(True); // Form1.IDTokenNFCE1Click()
    _59.CodigoAtivacao := Small_InputBox('Código de ativação','Informe o código de ativação do S@T-CFe:',_59.CodigoAtivacao);
    //
    GravarParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_CODIGO_ATIVACAO, _59.CodigoAtivacao);
    //
  end;
end;

procedure TForm1.NmerodoTokenNFCE1Click(Sender: TObject);
//var
//  Mais1Ini : TiniFile;
begin
  //
  ConfiguraNFCE(True); // Form1.NmerodoTokenNFCE1Click()
  Form1.spdNFCe1.DanfceSettings.TokenNFCe := Small_InputBox('Número do CSC (Código de Seguranca do Contribuinte)','Informe o número do CSC (Código de Seguranca do Contribuinte)',Form1.spdNFCe1.DanfceSettings.TokenNFCe);
  //
  {Sandro Silva 2022-05-02 inicio
  Mais1ini := TIniFile.Create('FRENTE.INI');
  Mais1Ini.WriteString('NFCE','Número do Token NFCE',Form1.spdNFCe1.DanfceSettings.TokenNFCe);
  Mais1Ini.Free;
  }
  _ecf65_GravaCSC(Form1.spdNFCe1.DanfceSettings.TokenNFCe);
  {Sandro Silva 2022-05-02 fim}
  //
end;

procedure TForm1.Atualizarprogramapelainternet1Click(Sender: TObject);
begin
  Chdir(Form1.sAtual); // Sandro Silva 2017-04-03 
  //
  if FileExists('smallcon.exe') then
    ShellExecute( 0, 'Open', 'smallcon.exe', PChar('nfce' + Copy(Build, 1, 4) + '.sma '), '', SW_SHOW)
  else
  begin
    // 2016-01-12 SmallMsg('Opção disponível somente para usuários da versão 2016.');
    SmallMsg('Opção disponível somente para usuários da versão ' + Copy(Build, 1, 4) + '.');
    Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
      Form1.ClienteSmallMobile.sLogRetornoMobile);
  end;
  Form1.DestroyWindowHandle;
  Application.Terminate;
  //
  Winexec('TASKKILL /F /IM frente.exe' , SW_HIDE ); Winexec('TASKKILL /F /IM nfce.exe' , SW_HIDE );
  FecharAplicacao(ExtractFileName(Application.ExeName));
  //
end;

procedure TForm1.InutilizaodeNFCes1Click(Sender: TObject);
//var
//  sID, sRetorno, aAno, aModelo, aSerie, aIni, aFim, txtJustificativa: string;
begin
  _ecf65_InutilizacaoNFCe;
end;

procedure TForm1.N110Click(Sender: TObject);
begin
  //
  with Sender as TMenuItem do
  begin
    //
    // SmallMsg(Caption);
    //
    try //2015-09-28
      Commitatudo(True); // N110Click troca boneco mesa 2015-09-29 Primeiro commita

      Form1.IBQuery1.Close;
      Form1.IBQuery1.SQL.Clear;
      Form1.IBQuery1.SQL.Add('update ALTERACA set TIPODAV='+QuotedStr(LimpaNumero(Caption))+' where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.iiMesa))+' '); // Sandro Silva 2021-12-01 Form1.IBQuery1.SQL.Add('update ALTERACA set TIPODAV='+QuotedStr(LimpaNumero(Caption))+' where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(Form1.iiMesa,6,0))+' ');
      //
      // SmallMsg(Form1.IBQuery1.SQL.Text);
      //
      Form1.IBQuery1.ExecSQL;
    except

    end;
    Form1.IBQuery1.Close;
    Commitatudo(True); // 2015-09-16 depois trocar boneco
  end;
  //
  Mesas(StrToInt(Form1.sMesas)); // Corta Papel
  //
end;

procedure TForm1.Solicitarsenhadeusurio1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Small_InputBox('Senha','Informe a senha do administrador:','');
  //
  if Form12.Caption = 'Liberado' then
  begin
    //
    Mais1ini := TIniFile.Create('FRENTE.INI');
    //
    if Mais1Ini.ReadString('Frente de caixa','SDU','Não') = 'Não'
      then Mais1Ini.WriteString('Frente de caixa','SDU','Sim')
        else Mais1Ini.WriteString('Frente de caixa','SDU','Não');
    //
    // Sandro Silva 2021-07-30 Form1.sIdentificaConsumidor := Mais1Ini.ReadString('Frente de caixa','SDU','Não');
    Form1.sSenhaDeUsuario := Mais1Ini.ReadString('Frente de caixa','SDU','Não');
    Mais1Ini.Free;
    //
  end;
  //
end;

procedure TForm1.empo1Click(Sender: TObject);
var
  Mais1Ini: TIniFile;
begin
  Mais1ini             := TIniFile.Create('FRENTE.INI');
  iMinutosSoneca       := StrToInt('0'+Limpanumero(Small_InputBox('Minutos alerta sem consumo','Informe o tempo em minutos para alerta sem consumo',IntToStr(iMinutosSoneca))));
  if iMinutosSoneca = 0 then iMinutosSoneca := 30;
  Mais1Ini.WriteInteger('Frente de caixa','Soneca',iMinutosSoneca);
  Mais1Ini.Free;
end;

procedure TForm1.CortaPapel1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','Corta papel','Não') = 'Não'
    then Mais1Ini.WriteString('Frente de caixa','Corta papel','Sim')
      else Mais1Ini.WriteString('Frente de caixa','Corta papel','Não');
  Form1.sCortapapel := Mais1Ini.ReadString('Frente de caixa','Corta papel','Não');
  //
  Mais1Ini.Free;
  //
end;

procedure TForm1.CRLF2Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadString('Frente de caixa','CRLF','Sim') = 'Não' then
    Mais1Ini.WriteString('Frente de caixa','CRLF','Sim')
  else
    Mais1Ini.WriteString('Frente de caixa','CRLF','Não');
  Form1.sCRLF := Mais1Ini.ReadString('Frente de caixa','CRLF','Sim');
  //
  Mais1Ini.Free;
  //
end;

procedure TForm1.DateTimePicker1Change(Sender: TObject);
begin
  Form1.ibDataset150.Close;
  Form1.ibDataset150.SelectSql.Clear;
  Form1.ibDataset150.SelectSQL.Add('select * from NFCE where DATA='+QuotedStr(DateToStrInvertida(Form1.DateTimePicker1.Date))+'order by NUMERONF ');
  Form1.ibDataset150.Open;
end;

procedure TForm1.runcamento1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if Mais1Ini.ReadInteger('Frente de caixa' , 'Trunca',1) = 1 then
  begin
    Mais1Ini.WriteInteger('Frente de caixa', 'Trunca',0);
  end else
  begin
    Mais1Ini.WriteInteger('Frente de caixa', 'Trunca',1);
  end;
  //
  Form1.iTrunca := Mais1Ini.ReadInteger('Frente de caixa' , 'Trunca',0);
  Mais1Ini.Free;
  //
end;

procedure TForm1.Homologao1Click(Sender: TObject);
begin
  //
  Small_InputBox('Senha','Informe a senha do administrador:','');
  //
  if Form12.Caption = 'Liberado' then
  begin

    if sModeloECF = '59' then
    begin
      if AnsiUpperCase(LerParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_AMBIENTE, _59_AMBIENTE_HOMOLOGACAO)) = AnsiUpperCase(_59_AMBIENTE_HOMOLOGACAO) then
      begin
        GravarParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_AMBIENTE, _59_AMBIENTE_PRODUCAO);
      end
      else
      begin
        GravarParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_AMBIENTE, _59_AMBIENTE_HOMOLOGACAO);
      end;
      _59.Ambiente := AnsiUpperCase(LerParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_AMBIENTE, _59_AMBIENTE_HOMOLOGACAO));
      Homologao1.Caption := _59.Ambiente;
    end;

    if sModeloECF = '65' then
    begin
      //a := AnsiUpperCase(LerParametroIni('Frente.ini', SECAO_65, _65_AMBIENTE, _65_AMBIENTE_HOMOLOGACAO));
      if AnsiUpperCase(LerParametroIni('Frente.ini', SECAO_65, _65_AMBIENTE, _65_AMBIENTE_HOMOLOGACAO)) = AnsiUpperCase(_65_AMBIENTE_HOMOLOGACAO) then
      begin
        GravarParametroIni('Frente.ini', SECAO_65, _65_AMBIENTE, _65_AMBIENTE_PRODUCAO);
      end
      else
      begin
        GravarParametroIni('Frente.ini', SECAO_65, _65_AMBIENTE, _65_AMBIENTE_HOMOLOGACAO);
      end;
      Homologao1.Caption := AnsiUpperCase(LerParametroIni('Frente.ini', SECAO_65, _65_AMBIENTE, _65_AMBIENTE_HOMOLOGACAO));
    end;

    SmallMsg('Ambiente de '+Homologao1.Caption+' configurado');
  end;
  //
  sF := '';
  Display(Form1.sStatusECF,Form1.sF);
  if AnsiContainsText(Form1.Homologao1.Caption, 'HOMOLOGA') then
    sF := 'AMBIENTE DE HOMOLOGAÇÃO';
  Display(Form1.sStatusECF,Form1.sF);
end;

procedure TForm1.DateTimePicker1Click(Sender: TObject);
begin
  Keybd_Event(VK_MENU,0,0,0);
  Keybd_Event(VK_DOWN,0,0,0);
  Keybd_Event(VK_DOWN,0,KEYEVENTF_KEYUP,0);
  Keybd_Event(VK_MENU,0,KEYEVENTF_KEYUP,0);
end;

procedure TForm1.Timer2Timer(Sender: TObject);
var
  sTLista,sTSessions : TStringList;
  sContatos : String;
  sCnpj,sDirAtual:String;
  iRegistro, I,J : Integer;
  ArqIniMobile : TIniFile;
  sTipoItem: String; // Tipo do item sendo importado. Produto, parcela, cartão
  bCartao: Boolean; // Forma de pagamento é cartão

  iParcela: Integer;
  dTotalParcelas: Double;
  sBandeiraCartao: String;
  sEmailOld: String;
  sVendedorOld: String;
  sIdentificaConsumidorOld: String;
  sInsuficiente: String;
  dtDataHoraMobile: TDateTime;
  sArquivoLendo: String;
  sIdentificaPOSOld: String; // Sandro Silva 2017-01-13
//  iFormaExtra: Integer;
//  iniFormas: TIniFile;

  function IniStrToFloat(sDescricao: String): Double; // Obtem o valor do produto ou valor da parcela
  var
    siTemUnitario: String;
  begin
    siTemUnitario := sDescricao;

    if Pos('<', siTemUnitario) > 0 then
    begin // Extraindo valor da parcela que está formatada com tags
      siTemUnitario := StringReplace(siTemUnitario, Copy(siTemUnitario, 1, Pos('<v>', siTemUnitario) + 2), '', [rfReplaceAll]);
      siTemUnitario := Copy(siTemUnitario, 1, Pos('<', siTemUnitario) - 1);
    end;

    siTemUnitario := StringReplace(siTemUnitario,',','', [rfReplaceAll]); // Elimina vírgula
    siTemUnitario := StringReplace(siTemUnitario,'.',',', [rfReplaceAll]); // Troca ponto por vírgula
    Result := StrToFloatDef(siTemUnitario, 0);
  end;
  function DataParcela(sDescricao: String): TDate;
  begin
    Result := StrToDateDef(Copy(sDescricao, 12, 2) + '/' + Copy(sDescricao, 9, 2) + '/' + Copy(sDescricao, 4, 4), Date);
  end;
  procedure DeletaArquivos(sAtual: String; sExtensao: String);
  var
    S: TSearchREc;
    I: Integer;
  begin
    //
    I := FindFirst( pChar(sAtual + '\' + Trim(sExtensao)), faAnyFile, S);
    //
    while I = 0 do
    begin
      try
        DeleteFile(pChar(sAtual + '\' + S.Name));
      except

      end;
      I := FindNext(S);
    end;
    //
    FindClose(S);
    //
  end;

begin
  //
  // Pega o Diretório Atual
  //
  if (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '99')
    or (PAFNFCe) // Sandro Silva 2020-07-01 or (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'PAFNFCE.EXE') // Sandro Silva 2016-02-29
    or (AnsiContainsText(Form1.sStatusECF, 'sem servi'))
    then
    Exit;

  Timer2.Enabled := False;
  // Definindo Timer2.Enabled := False não está funcionando. Continua entrando no timer Não consegui identificar o porque
  // Retira o evento onTimer para garantir
  Timer2.OnTimer := nil;

  sVendedorOld := Form1.sVendedor; // Vendedor que está logado ou o último a fazer venda não mobile
  sIdentificaConsumidorOld := sIdentificaConsumidor;

  Form1.sIdentificaConsumidor := 'Não';

  try // 2015-05-27

    if (Form1.ClienteSmallMobile.sVendaImportando <> '') then // Sandro Silva 2015-05-27 Controlar quando está importando do mobile
      Exit; // Não iniciar nova importação enquando já estiver importando

    if ImportarvendasdoSmallMobile1.Checked then
    begin

      // Small Commerce, NFCE e CFESAT fecham o mobile quando são finalizados
      // Sempre tenta abrir
      AbrirMonitorMobile;

      //Não usar buga objetos criados em execução sHintSysTray := GetHintSysTrayIcone;

      //Não usar buga objetos criados em execução SetHintSysTrayIcone(sHintSysTray + #10 + 'Importando dados Small Mobile');

      //
      //Sandro Silva 2015-06-03 if sStatusECF_RES = 'CAIXA LIVRE' then
      if (sStatusECF_RES = 'CAIXA LIVRE') and (DBGrid1.CanFocus = False) then
      begin
        //
        if not Memo1.Visible then
        begin
          //
          sTLista := TStringList.Create();
          sTSessions := TStringList.Create();
          try
            //
            GetDir(0,sDirAtual);
            //
            // Cria a String List e limpa
            //
            sTLista.Clear;
            sTSessions.Clear;
            //
            // Cnpj do Emitente somente os números
            //
            sCnpj:= LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString);
            //
            // Conecta ao FTP
            //
            Form1.LbBlowfish1.GenerateKey(sPasta);
            //

            // Importação de clientes
            // 2015-11-30 Até versão 2015 DownloadMobile(sCNPJ, '*.cli', sTLista); // Sandro Silva 2014-08-15 Baixa os arquivos
            // Clientes cadastrados ou atualizados pelo mobile
            // Sandro Silva 2022-08-08 DownloadMobile(
            Form1.ClienteSmallMobile.DownloadMobile('*.cli', sTLista); // Sandro Silva 2014-08-15 Baixa os arquivos
            for I := 0 to sTLista.Count -1 do
            begin

              Screen.Cursor := crHourGlass;                   // Cursor de Aguardo

              ExibePanelMensagem('Aguarde... Importação Clientes Mobile'); // Sandro Silva 2016-05-06

              Commitatudo(True);

              //
              Application.ProcessMessages;

              ArqIniMobile := TIniFile.Create(sTLista[I]); // Sandro Silva 2014-08-15

              try
                // Sandro Silva 2022-08-08 Form1.LogMobile(
                Form1.ClienteSmallMobile.LogClienteMobile(
                  'Processando-' + ExtractFileName(sTLista[I]));
                //
                // Salva o cliente
                //
                IBQuery1.Close;
                IBQuery1.SQL.Clear;
                IBQuery1.SQL.Add('Select CGC,CONTATOS, EMAIL from CLIFOR where CGC='+QuotedStr( FormataCpfCgc(ArqIniMobile.ReadString('CLIENTE','CGC',''))));
                IBQuery1.Open;
                sEmailOld := IBQuery1.FieldByName('EMAIL').AsString;
                //
                if (IBQuery1.FieldByName('CGC').AsString = FormataCpfCgc(ArqIniMobile.ReadString('CLIENTE','CGC','')) )then
                begin
                  //
                  sContatos := IBQuery1.FieldByName('CONTATOS').AsString; ///COPIA O CONTEUDO DOS CONTATOS ATUAIS
                  //
                  Application.ProcessMessages;
                  //
                  IBQuery1.Close;
                  IBQuery1.SQL.Clear;
                  IBQuery1.SQL.Add('Update CLIFOR set '
                  +'NOME=:NOME'
                  +',IE=:IE'
                  +',CEP=:CEP'
                  +',COMPLE=:COMPLE'
                  +',ENDERE=:ENDERE'
                  +',CIDADE=:CIDADE'
                  +',ESTADO=:ESTADO'
                  +',FONE=:FONE'
                  +',CONTATOS=:CONTATOS'
                  +',EMAIL=:EMAIL'
                  +' where CGC='+QuotedStr( FormataCpfCgc(ArqIniMobile.ReadString('CLIENTE','CGC',''))));
                  //
                  //      +' where CGC='+QuotedStr( FormataCpfCgc(ArqIniMobile.ReadString('CLIENTE','CGC','')) ) );
                  //
                  IBQuery1.Prepare;
                  IBQuery1.ParamByName('CONTATOS').AsString := sContatos+CHR(13)+'-------------------- '+CHR(13)+'Cadastro alterado no Small Mobile pelo vendedor '+ArqIniMobile.ReadString('CLIENTE','VENDEDOR','')+' no dia '+ArqIniMobile.ReadString('CLIENTE','DATA','')+' as '+ArqIniMobile.ReadString('CLIENTE','HORA','');
                  //
                end else
                begin
                  //
                  // Não foi encontrado um CGC igual então cadastro NOVO
                  //
                  Application.ProcessMessages;
                  //
                  // Generator
                  //
                  IBQuery1.Close;
                  IBQuery1.SQL.Text := 'select gen_id(G_CLIFOR,1) from rdb$database';
                  IBQuery1.Open;
                  iRegistro := StrToIntDef(IBQuery1.FieldByName('GEN_ID').AsString, 0);
                  IBQuery1.Close;

                  //
                  IBQuery1.Close;
                  IBQuery1.SQL.Clear;
                  IBQuery1.SQL.Add('insert into CLIFOR ('
                  +'NOME'
                  +',CGC'
                  +',IE'
                  +',CEP'
                  +',COMPLE'
                  +',ENDERE'
                  +',CIDADE'
                  +',ESTADO'
                  +',FONE'
                  +',EMAIL'
                  +',CONTATOS'
                  +',CADASTRO'
                  +',REGISTRO'
                  +') values ('
                  +':NOME'
                  +',:CGC'
                  +',:IE'
                  +',:CEP'
                  +',:COMPLE'
                  +',:ENDERE'
                  +',:CIDADE'
                  +',:ESTADO'
                  +',:FONE'
                  +',:EMAIL'
                  +',:CONTATOS'
                  +',:CADASTRO'
                  +',:REGISTRO'
                  +')'
                  );
                  //
                  IBQuery1.Prepare;
                  //
                  IBQuery1.ParamByName('REGISTRO').AsString := StrZero(iRegistro,10,0);
                  IBQuery1.ParamByName('CGC').AsString      := FormataCpfCgc(ArqIniMobile.ReadString('CLIENTE','CGC',''));
                  IBQuery1.ParamByName('CADASTRO').AsString := ArqIniMobile.ReadString('CLIENTE','DATA','');
                  IBQuery1.ParamByName('CONTATOS').AsString := CHR(13)+'-------------------- '+CHR(13)+'Cadastro feito pelo Small Mobile pelo vendedor '+ArqIniMobile.ReadString('CLIENTE','VENDEDOR','')+' no dia '+ArqIniMobile.ReadString('CLIENTE','DATA','')+' as '+ArqIniMobile.ReadString('CLIENTE','HORA','');
                  //
                end;
                //
                IBQuery1.ParamByName('NOME').AsString     := ArqIniMobile.ReadString('CLIENTE','NOME','');
                IBQuery1.ParamByName('IE').AsString       := ArqIniMobile.ReadString('CLIENTE','IE','');
                IBQuery1.ParamByName('CEP').AsString      := FormataCEP(ArqIniMobile.ReadString('CLIENTE','CEP',''));
                IBQuery1.ParamByName('COMPLE').AsString   := ArqIniMobile.ReadString('CLIENTE','COMPLE','');
                IBQuery1.ParamByName('ENDERE').AsString   := ArqIniMobile.ReadString('CLIENTE','ENDERE','');
                IBQuery1.ParamByName('ESTADO').AsString   := ArqIniMobile.ReadString('CLIENTE','ESTADO','');
                IBQuery1.ParamByName('CIDADE').AsString   := ArqIniMobile.ReadString('CLIENTE','CIDADE','');
                IBQuery1.ParamByName('FONE').AsString     := FORMATA_TELEFONE(ArqIniMobile.ReadString('CLIENTE','FONE',''));
                if ArqIniMobile.ReadString('CLIENTE','EMAIL','') <> '' then
                  IBQuery1.ParamByName('EMAIL').AsString    := ArqIniMobile.ReadString('CLIENTE','EMAIL','')
                else
                  IBQuery1.ParamByName('EMAIL').AsString    := sEmailOld;
                //
                try
                  ibQuery1.ExecSQL;
                  // Sandro Silva 2022-08-08 Form1.LogMobile(
                  Form1.ClienteSmallMobile.LogClienteMobile(
                    'Concluído-' + ExtractFileName(sTLista[I]));
                except
                  on E: Exception do
                  begin
                    // Sandro Silva 2022-08-08 Form1.LogMobile(
                    Form1.ClienteSmallMobile.LogClienteMobile(
                      'Falha-' + ExtractFileName(sTLista[I]) + ' ' + E.Message);
                  end;
                end;
                //
              except

              end;

              FreeAndNil(ArqIniMobile);// Sandro Silva 2016-06-15  ArqIniMobile.Free; ///Limpa variavel do INI
              //
              // terminado apaga o arquivo local e do download
              //
              DeleteFile(pChar(sTLista[I])); // Apaga local
              //
            end;

            // Sandro Silva 2016-04-11 Só commitar se tiver arquivos para importar  Commitatudo(True); // Timer2Timer MOBILE 2015-10-16

            //
            // Importar vendas mobile
            //
            // Sandro Silva 2022-08-08 DownloadMobile(
            Form1.ClienteSmallMobile.DownloadMobile('*.nfc', sTLista); //Sandro Silva 2014-08-15 Baixa os arquivos

            // Commitar se existir arquivos para importar. Evitar out of memory
            if sTLista.Count > 0 then
            begin
              Commitatudo(True); // Timer2Timer MOBILE 2015-10-16
            end;

            //
            // Repassa todos os arquivos .ini
            //

            // DeletaArquivos(Form1.sAtual + '\mobile\download\', '*.leu');
            DeletaArquivos(Form1.sAtual + '\mobile\download\', '*.cx' + Form1.sCaixa);

            // Armazena a configura para identificar usando POS e define como "Não". Rotina de importação mobile trata como "Sim" sempre
            // Desativar configuração. Rotina de importação mobile trata como "Sim" sempre
            sIdentificaPOSOld := Form1.sIdentificaPOS;
            Form1.sIdentificaPOS := 'Não';

            //iniFormas := TIniFile.Create(FRENTE_INI);

            for I := 0 to sTLista.Count -1 do
            begin

              Screen.Cursor := crHourGlass;                   // Cursor de Aguardo

              try
                sArquivoLendo := ExtractFilePath(sTLista[I]) + StringReplace(ExtractFileName(sTLista[I]), ExtractFileExt(sTLista[I]), '.cx' + Form1.sCaixa, [rfReplaceAll]);
                //ShowMessage(sArquivoLendo);
                // Sandro Silva 2022-08-08 Form1.LogMobile(
                Form1.ClienteSmallMobile.LogClienteMobile(
                  'Processando-' + sTLista[I]);

                RenameFile(PChar(sTLista[I]), pChar(sArquivoLendo));
                if FileExists(pChar(sArquivoLendo)) then
                begin

                  ArqIniMobile := TIniFile.Create(sArquivoLendo); //Sandro Silva 2014-08-15 abre

                  sTSessions.Clear;
                  ArqIniMobile.ReadSections(sTSessions); //conta o número de itens

                  dtDataHoraMobile := StrToDateDef(ArqIniMobile.ReadString(sTSessions[0],'DATA',''), Date -1) + StrToTimeDef(ArqIniMobile.ReadString(sTSessions[0],'HORA',''), Time - 1);

                  if (MinutesBetween(Now, FileDateToDateTime(FileAge(sArquivoLendo))) > 10)
                    or (HoursBetween(Now, dtDataHoraMobile) > 3) then
                  begin // Não processar arquivos baixados a mais de 10 minutos
                    DeleteFile(pChar(sArquivoLendo));
                  end
                  else
                  begin

                    try
                      sFormaPag := FORMA_PAGAMENTO_A_VISTA; // 2015-06-24
                    except
                    end;

                    Form1.ClienteSmallMobile.sLogRetornoMobile := '';

                    //
                    Form1.Button2Click(Sender); // Abre o Cupom

                    ExibePanelMensagem('Aguarde... Importação Vendas Mobile'); // Sandro Silva 2016-05-06

                    Form1.sCPF_CNPJ_Validado := '';
                    Form2.Edit2.Clear;
                    Form2.Edit8.Clear;
                    Form2.Edit10.Clear;

                    CommitaTudo(True); // Timer2Timer  Seleciona os dados referente ao novo cupom aberto. Estava apagando as parcelas da venda anterior

                    Form1.DeletaDataSet25;
                    Form1.ibDataSet25.Append;

                    Application.ProcessMessages;

                    //Form1.ClienteSmallMobile.sVendaImportando := '';
                    if sArquivoLendo <> '' then
                    begin
                      Form1.ClienteSmallMobile.sVendaImportando := TIPOMOBILE + StringReplace(ExtractFileName(sTLista[I]), ExtractFileExt(sTLista[I]), '',[rfReplaceAll]);
                    end;

                    //
                    // le os itens da VENDA
                    //
                    bCartao            := False;
                    sBandeiraCartao    := '';
                    iParcela           := 0;
                    dTotalParcelas     := 0;
                    Form1.sParcelas    := '';
                    Form1.sTransaca    := '';
                    Form1.sAutoriza    := ''; // Sandro Silva 2018-07-03

                    for J := 0 to sTSessions.Count-1 do
                    begin
                      //
                      // Vende direto
                      //

                      sTipoItem := UpperCase(ConverteAcentos(ArqIniMobile.ReadString(sTSessions[J],'TIPO','')));

                      if (sTipoItem) = ClienteSmallMobile.TipoItemVendaNFCeProduto then //ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO','') =
                      begin
                        // Produtos

                        ibDataSet4.Close;
                        ibDataSet4.SelectSQL.Clear;
                        ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO='+QuotedStr(ArqIniMobile.ReadString(sTSessions[J],'CODIGO',''))+' ');
                        ibDataSet4.Open;
                        //
                        ibDataSet2.Close;
                        ibDataSet2.SelectSQL.Clear;
                        ibDataSet2.SelectSQL.Add('select * from CLIFOR where CGC='+QuotedStr(FormataCpfCgc(ArqIniMobile.ReadString(sTSessions[J],'CNPJ','')))+' ');
                        ibDataSet2.Open;
                        //
                        if not ibDataSet4.Eof then
                        begin

                          EstoqueSuficiente(ibDataSet4.FieldByName('CODIGO').AsString, ibDataSet4.FieldByName('DESCRICAO').AsString, IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'QUANTIDADE','')), sInsuficiente);

                          //
                          try
                            Form1.ibDataSet27.Append; // Novo Item
                            Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := FormataNumeroDoCupom(Form1.icupom); // Sandro Silva 2021-11-29 StrZero(Form1.icupom,6,0); // StrZero(icupom,6,0);
                            Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
                            Form1.ibDataSet27.FieldByName('DESCRICAO').AsString  := ibDataSet4.FieldByName('DESCRICAO').AsString;
                            Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat  := IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'QUANTIDADE',''));
                            Form1.ibDataSet27.FieldByName('MEDIDA').AsString     := ibDataSet4.FieldByName('MEDIDA').AsString;
                            Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat    := IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'UNITARIO',''));
                            Form1.ibDataSet27.FieldByName('TOTAL').AsCurrency    := Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat; // Sandro Silva 2018-12-14 Form1.ibDataSet27.FieldByName('TOTAL').AsFloat       := Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat * Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat;
                            Form1.ibDataSet27.FieldByName('CLIFOR').AsString     := ibDataSet2.FieldByName('NOME').AsString;    // Nome
                            if (LimpaNumero(FormataCpfCgc(LimpaNumero(ArqIniMobile.ReadString(sTSessions[J],'CNPJ','')))) <> '') then
                              Form1.ibDataSet27.FieldByName('CNPJ').AsString := FormataCpfCgc(LimpaNumero(ArqIniMobile.ReadString(sTSessions[J],'CNPJ',''))); // 2015-07-27 ibDataSet2.FieldByName('CGC').AsString;    // CNPJ // Sandro Silva 2015-07-06
                            Form1.ibDataSet27.FieldByName('VENDEDOR').AsString   := AllTrim(ArqIniMobile.ReadString(sTSessions[J],'VENDEDOR',''));  // Vendedor

                            if Trim(ibDataSet4.FieldByName('CFOP').AsString) <> '' then
                              Form1.ibDataSet27.FieldByName('CFOP').AsString := ibDataSet4.FieldByName('CFOP').AsString;

                            Form1.ibDataSet27.FieldByName('CCF').Clear;
                            Form1.ibDataSet27.FieldByName('COO').Clear;

                            //
                            Edit1.Text := ibDataSet4.FieldByName('DESCRICAO').AsString;

                            Form2.Edit10.Text := AllTrim(ArqIniMobile.ReadString(sTSessions[J],'EMAIL','')); // Sandro Silva 2015-06-08

                            Form1.sConveniado := ibDataSet2.FieldByName('NOME').AsString;
                            if ValidaCPFCNPJ(ibDataSet2.FieldByName('CGC').AsString) then // Sandro Silva 2018-10-25 if LimpaNumero(ibDataSet2.FieldByName('CGC').AsString) <> '' then
                            begin
                              Form1.sCPF_CNPJ_Validado := ibDataSet2.FieldByName('CGC').AsString;
                            end
                            else
                            begin
                              if ValidaCPFCNPJ(FormataCpfCgc(LimpaNumero(ArqIniMobile.ReadString(sTSessions[J],'CNPJ','')))) then // Sandro Silva 2018-10-25 if (LimpaNumero(FormataCpfCgc(LimpaNumero(ArqIniMobile.ReadString(sTSessions[J],'CNPJ','')))) <> '') then
                                Form1.sCPF_CNPJ_Validado := FormataCpfCgc(LimpaNumero(ArqIniMobile.ReadString(sTSessions[J],'CNPJ','')));
                            end;

                            if ValidaCPFCNPJ(Form1.sCPF_CNPJ_Validado) then // Sandro Silva 2018-10-25 if LimpaNumero(Form1.sCPF_CNPJ_Validado) <> '' then
                              Form2.Edit2.Text := FormataCpfCgc(LimpaNumero(Form1.sCPF_CNPJ_Validado));

                            if LimpaNumero(Form1.sCPF_CNPJ_Validado) = '' then
                            begin
                              Form1.sCPF_CNPJ_Validado := '';
                              Form2.Edit2.Text := '';
                            end;

                            Form2.Edit8.Text := Form1.ibDataSet2.FieldByName('NOME').AsString;
                            Form2.Edit9.Text := Form1.ibDataSet27.FieldByName('VENDEDOR').AsString;
                            Form2.Edit9Change(Sender); // 2015-07-13

                            //
                            Form1.Button1Click(Sender);
                            CommitaTudo2(True); // Timer2Timer Venda o iten
                            //
                            if (Form1.ClienteSmallMobile.sVendaImportando = '') then
                            begin
                              if Edit1.CanFocus then
                                Edit1.SetFocus;
                            end;
                            //
                          except end;
                          //
                        end;
                        //
                      end; // if (sTipoItem) = 'Produto' THEN //ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO','') =

                      if (sTipoItem = ClienteSmallMobile.TipoItemVendaNFCeCheque) then
                      begin
                        bCartao := False;
                        sFormaPag := FORMA_PAGAMENTO_CHEQUE;
                        dTotalParcelas := IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'TOTAL',''));
                      end;

                      if (sTipoItem = ClienteSmallMobile.TipoItemVendaNFCeCartao) then
                      begin
                        bCartao := True;
                        sFormaPag := FORMA_PAGAMENTO_CARTAO; // 2015-06-24
                        Form1.sTransaca := ArqIniMobile.ReadString(sTSessions[J],'NUMERO AUTORIZACAO','');
                        //
                      end;

                      if (sTipoItem = ClienteSmallMobile.TipoItemVendaNFCeBandeira) then
                      begin
                        if Copy(ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO',''), 1, 3) = '<b>' then
                        begin
                          sBandeiraCartao := ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO','');
                          sBandeiraCartao := StringReplace(sBandeiraCartao, '<b>', '', [rfReplaceAll]);
                          sBandeiraCartao := StringReplace(sBandeiraCartao, '</b>', '', [rfReplaceAll]);
                        end;
                      end;

                      if (sTipoItem = ClienteSmallMobile.TipoItemVendaNFCeParcela) then
                      begin
                        Inc(iParcela); // Sandro Silva 2017-01-16

                        if (bCartao = False) then
                        begin
                          // Lança as parcelas boletos
                          //if (bCartao = False) then // Sandro Silva 2017-01-13
                          //  sFormaPag := FORMA_PAGAMENTO_BOLETO; // 2015-06-24
                          sFormaPag := FORMA_PAGAMENTO_BOLETO; // Sandro Silva 2018-02-23

                          ibDataSet2.Close;
                          ibDataSet2.SelectSQL.Clear;
                          ibDataSet2.SelectSQL.Add('select * from CLIFOR where CGC='+QuotedStr(FormataCpfCgc(ArqIniMobile.ReadString(sTSessions[J],'CNPJ','')))+' ');
                          ibDataSet2.Open;

                          Form1.ibDataSet7.Append;
                          Form1.ibDataSet7.FieldByName('DOCUMENTO').AsString    := FormataReceberDocumento(iParcela);
                          Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat    := StrToFloat(Format('%8.2f',[IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO',''))]));
                          Form1.ibDataSet7.FieldByName('VENCIMENTO').AsDateTime := DataParcela(ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO',''));
                          Form1.ibDataSet7.FieldByName('EMISSAO').AsDateTime    := StrToDate(Form1.sDataDoCupom); // Sandro Silva 2016-03-23  StrToDate(ArqIniMobile.ReadString(sTSessions[J],'DATA',''));
                          Form1.ibDataSet7.FieldByName('VALOR_RECE').AsFloat    := 0;
                          Form1.ibDataSet7.FieldByName('VALOR_JURO').AsFloat    := 0;
                          Form1.ibDataSet7.FieldByName('NOME').AsString         := ibDataSet2.FieldByName('NOME').AsString;
                          Form1.ibDataSet7.FieldByName('HISTORICO').Value       := 'Venda caixa: ' + Form1.sCaixa + ' Cupom: ' + FormataNumeroDoCupom(Form1.iCupom);
                          Form1.ibDataSet7.FieldByName('CONTA').AsString        := sPlanoDeContas;
                          Form1.ibDataSet7.Post;

                          dTotalParcelas := dTotalParcelas + Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat; // 2015-07-03
                          //
                        end
                        else
                        begin
                          // Parcelas da forma de Cartão salvas em Button18Click();
                          dTotalParcelas := StrToFloat(Format('%8.2f',[IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'DESCRICAO',''))])); // 2015-07-03
                        end;

                        CommitaTudo(True); // Timer2Timer  Venda o iten

                      end; // if (sTipoItem = 'PARCELA') then

                      if (sTipoItem = ClienteSmallMobile.TipoItemVendaNFCePagamentoFormaExtra) then
                      begin
                        bCartao := False;
                        sFormaPag := RetornaValorDaTagNoCampo('c', ArqIniMobile.ReadString(sTSessions[J], 'DESCRICAO', '<c>Outros</c>'));// DESCRICAO=<c>PIX</c>;
                        dTotalParcelas := IniStrToFloat(ArqIniMobile.ReadString(sTSessions[J],'TOTAL',''));
                        //
                      end;

                    end; // for J := 0 to sTSessions.Count-1 do

                    if Trim(sInsuficiente) <> '' then
                    begin
                      sInsuficiente := 'Estoque insuficiente' + #13 + #13 + sInsuficiente;
                      Form1.ClienteSmallMobile.LogRetornoMobile( // Sandro Silva 2022-08-08 LogRetornoMobile(
                        sInsuficiente);
                    end;

                    if (dTotalParcelas > 0) and (sFormaPag = FORMA_PAGAMENTO_BOLETO) then
                    begin
                      try
                        Form1.ibDataSet25.Edit;
                        Form1.ibDataSet25.FieldByName('RECEBER').AsFloat    := dTotalParcelas;
                        Form1.ibDataSet25.FieldByName('ACUMULADO2').AsFloat := dTotalParcelas; // 2015-06-29
                        Form1.ibDataSet25.FieldByName('DIFERENCA_').AsFloat := dTotalParcelas;
                        Form1.ibDataSet25.Post;
                      except
                        on E: Exception do
                        begin
                          ShowMessage(E.Message);
                        end;
                      end;
                    end;

                    if (sFormaPag = FORMA_PAGAMENTO_CARTAO) then
                    begin

                      if sBandeiraCartao <> '' then
                      begin
                        Form10.sNomeDoTEF := sBandeiraCartao;
                        Form1.sParcelas   := IntToStr(iParcela); // Sandro Silva 2017-01-16
                      end;

                      try
                        Form1.ibDataSet25.Edit;
                        Form1.ibDataSet25.FieldByName('RECEBER').AsFloat := dTotalParcelas;
                        Form1.ibDataSet25.FieldByName('PAGAR').AsFloat   := dTotalParcelas; //ficou zerado na sequência do button18click
                        Form1.ibDataSet25.Post;
                      except
                        on E: Exception do
                        begin
                          ShowMessage(E.Message);
                        end;
                      end;

                    end;

                    if (sFormaPag = FORMA_PAGAMENTO_CHEQUE) then
                    begin

                      try
                        Form1.ibDataSet25.Edit;
                        Form1.ibDataSet25.FieldByName('ACUMULADO1').AsFloat := dTotalParcelas;
                        Form1.ibDataSet25.FieldByName('PAGAR').AsFloat      := dTotalParcelas; //ficou zerado na sequência do button18click
                        Form1.ibDataSet25.Post;
                      except
                        on E: Exception do
                        begin
                          ShowMessage(E.Message);
                        end;
                      end;

                    end;

                    {Sandro Silva 2022-08-04 inicio}
                    // Implementado formas extras no smallmobile.com.br
                    if (sTipoItem = ClienteSmallMobile.TipoItemVendaNFCePagamentoFormaExtra) then
                    begin

                      ClienteSmallMobile.PagamentoComFormaExtra(sFormaPag, dTotalParcelas);

                    end;
                    {Sandro Silva 2022-08-04 fim}

                    //
                    //
                    // Terminado apaga o arquivo local baixado
                    //
                    if FileExists(pChar(sArquivoLendo)) then // Sandro Silva 2016-05-25
                      DeleteFile(pChar(sArquivoLendo));
                    //
                    bF12 := True;
                    //
                    CommitaTudo(True); // Timer2Timer  Venda o iten
                    //
                    Form1.ibQuery65.Close;
                    Form1.ibQuery65.Sql.Clear;
                    Form1.ibQuery65.SQL.Text :=
                      'select sum(TOTAL)as TOT ' +
                      'from ALTERACA ' +
                      'where PEDIDO='+QuotedStr(FormataNumeroDoCupom(Form1.icupom))+ // Sandro Silva 2021-11-29 'where PEDIDO='+QuotedStr(strZero(Form1.icupom,6,0))+
                      ' and CAIXA='+quotedStr(Form1.sCaixa)+
                      ' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' '; // Item fica em dead lock com TIPO=KOLNAC até que registro seja processado
                    Form1.ibQuery65.Open;
                    Form1.fTotal := Form1.ibQuery65.FieldByName('TOT').AsFloat;
                    //
                    Form1.Memo2.Lines.Text := 'Total R$ '+AllTrim(Format('%12.2n',[Form1.fTotal]));
                    Label_13.Caption := Format('%10.2n',[Form1.fTotal]);
                    Form1.Memo2.Repaint;
                    //
                    //
                    if Form1.sConveniado <> '' then
                    begin
                      Form2.Edit8Change(Form2.Edit8);
                      Form2.SMALL_DBEdit8Exit(Form2.SMALL_DBEdit8);
                    end;

                    if Form1.ClienteSmallMobile.sLogRetornoMobile = '' then
                      Button18Click(Sender);  // Fecha o cupom
                    //

                    if Form1.ClienteSmallMobile.sLogRetornoMobile <> '' then
                    begin

                      Form1.ClienteSmallMobile.LogRetornoMobile( // Sandro Silva 2022-08-08 LogRetornoMobile(
                        #13 + 'Venda Cancelada');

                      if Form1.sModeloECF = '65' then
                      begin
                      // Verifica e se não foi incrementado o generator da venda volta numeração
                        if StrToIntDef(IncGenerator(Form1.IBDataSet150.Database, 'G_NUMERONFCE', 0), 0) = Form1.icupom then
                          IncGenerator(Form1.IBDataSet150.Database, 'G_NUMERONFCE', -1);
                      end;

                      Form1.ibDataSet27.First;
                      while Form1.ibDataSet27.Eof = False do
                      begin
                        try  // Sandro Silva 2020-05-05
                          Form1.ibDataSet27.Delete;
                        except
                          Sleep(5000);
                        end;
                      end;

                      Form1.ibDataSet28.First;
                      while Form1.ibDataSet28.Eof = False do
                        Form1.ibDataSet28.Delete;

                      Form1.ibDataSet7.First;
                      while Form1.ibDataSet7.Eof = False do
                        Form1.ibDataSet7.Delete;

                      Form1.ibDataSet25.First;
                      Form1.DeletaDataSet25;

                      Form1.IBDataSet150.Close;
                      Form1.IBDataSet150.SelectSQL.Text :=
                        'select * ' +
                        'from NFCE ' +
                        'where NUMERONF = ' + QuotedStr(FormataNumeroDoCupom(Form1.iCupom)) +
                        ' and CAIXA = ' + QuotedStr(Form1.sCaixa) +
                        ' and MODELO = ' + QuotedStr(Form1.sModeloECF);
                      Form1.IBDataSet150.Open;

                      while Form1.IBDataSet150.Eof = False do
                        Form1.IBDataSet150.Delete;

                      Form1.ClienteSmallMobile.EnviarLogParaMobile( // Sandro Silva 2022-08-08 EnviarLogParaMobile(
                        Form1.ClienteSmallMobile.sLogRetornoMobile);

                      GravarParametroIni(FRENTE_INI, 'NFCE', 'CUPOM', FormataNumeroDoCupom(0)); // Sandro Silva 2021-12-02 GravarParametroIni(FRENTE_INI, 'NFCE', 'CUPOM', '000000');

                      Button8Click(Button8);

                    end;

                    // No final limpa os campos
                    Form1.sCPF_CNPJ_Validado := '';
                    Form2.Edit2.Clear;
                    Form2.Edit8.Clear;
                    Form2.Edit10.Clear;

                    Form1.sVendedor  := sVendedorOld;  // Define novamente o vendedor que está logado ou o último a fazer venda não mobile
                    Form2.Edit9.Text := sVendedorOld;  // Define novamente o vendedor que está logado ou o último a fazer venda não mobile
                    Form2.Edit9Change(Sender); // 2015-07-13

                    // Sandro Silva 2022-08-08 Form1.LogMobile(
                    Form1.ClienteSmallMobile.LogClienteMobile(
                      'Concluído-' + sTLista[I]);

                  end;// Arquivos baixados a mais de 10 minutos
                end; // if FileExists(pChar(sArquivoLendo)) then
              except
                on E: Exception do
                begin
                  // Sandro Silva 2022-08-08 Form1.LogMobile(
                  Form1.ClienteSmallMobile.LogClienteMobile(
                    'Falha-' + E.Message);
                  if Form1.ClienteSmallMobile.sLogRetornoMobile = '' then
                  begin
                    //EnviarLogParaMobile('Falha no envio do comprovante da venda' + #13 + 'Entre em contato com o opedador do PDV');
                    //ShowMessage('Teste 01' + E.Message);
                  end;
                end;
              end;

              FreeAndNil(ArqIniMobile);// Sandro Silva 2016-06-15  ArqIniMobile.Free; // Sandro Silva 2016-05-25

              DeleteFile(pChar(sArquivoLendo));

            end; // for I := 0 to sTLista.Count -1 do

            //iniFormas.Free;

            // Restaura a configura do início da importação
            Form1.sIdentificaPOS := sIdentificaPOSOld; // Sandro Silva 2017-01-22

            //
            // The End Importar VENDA
            //

            // Upload dados
            // 2015-11-30 Até versão 2015 DownloadMobile(sCNPJ, 'sincroniza.mob', sTLista); // Sandro Silva 2014-08-15 Baixa os arquivos

            // Pedido de sincronização
            // Sandro Silva 2022-08-08 DownloadMobile(
            Form1.ClienteSmallMobile.DownloadMobile('*.mob', sTLista); // Sandro Silva 2014-08-15 Baixa os arquivos
            for I := 0 to sTLista.Count -1 do
            begin

              Screen.Cursor := crHourGlass;                   // Cursor de Aguardo

              ExibePanelMensagem('Aguarde... Sincronizando Cadastros Mobile', True); // Sandro Silva 2022-08-19 ExibePanelMensagem('Aguarde... Sincronizando Cadastros Mobile'); // Sandro Silva 2016-05-06

              DeleteFile(pChar(sTLista[I])); // Sandro Silva 2016-06-08 Deleta o arquivo para não ser lido por outro executável

              //
              Application.ProcessMessages;
              if i = 0 then // Sandro Silva 2016-05-23  Processar apenas o primeiro arquivo do tipo .mob
              begin
                CommitaTudo(True); // Timer2Timer Venda o iten
                try
                  // Sandro Silva 2022-08-08 Form1.LogMobile(
                  Form1.ClienteSmallMobile.LogClienteMobile(
                    'Processando-' + sTLista[I]);
                  // Sandro Silva 2022-08-08 Sincronizar;
                  Form1.ClienteSmallMobile.Sincronizar;
                except

                end;
                // Sandro Silva 2022-08-08 Form1.LogMobile(
                Form1.ClienteSmallMobile.LogClienteMobile(
                  'Concluído-' + sTLista[I]);
              end;
              // Sandro Silva 2016-06-08  DeleteFile(pChar(sTLista[I]));
            end;
            //
            // Fim da sincronização
            //
          except
            on E: Exception do
            begin

            end;
          end;
          if sTLista <> nil then
            sTLista.Free;
          if sTSessions <> nil then
            sTSessions.Free;
        end;
      end;
    end;
    //
  finally
    //Não usar buga objetos criados em execução if sHintSysTray <> '' then
    //Não usar buga objetos criados em execução   SetHintSysTrayIcone(sHintSysTray);

    Form1.ClienteSmallMobile.sVendaImportando := '';

    sIdentificaConsumidor := sIdentificaConsumidorOld;

    Timer2.OnTimer := Timer2Timer;
    Timer2.Enabled := True;

    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible := False; // Sandro Silva 2016-05-06

    Form1.Display(Form1.sStatusECF,Form1.sF); // Sandro Silva 2022-08-19

    Screen.Cursor := crDefault;
  end;
  //
end;

procedure TForm1.ImportarvendasdoSmallMobile1Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  //
  Mais1ini := TIniFile.Create('FRENTE.INI');
  //
  if ImportarvendasdoSmallMobile1.Checked then
  begin
    Mais1Ini.WriteString('NFCE','MOBILE','Não');
    ImportarvendasdoSmallMobile1.Checked := False;
    Form1.Timer2.Enabled := False; // 2015-05-27
    Winexec('TASKKILL /F /IM "mobile.exe"' , SW_HIDE);
  end else
  begin
    ImportarvendasdoSmallMobile1.Checked := True;
    Mais1Ini.WriteString('NFCE','MOBILE','Sim');
    if (Form1.ClienteSmallMobile.sVendaImportando = '') then// 2015-05-27
      Form1.Timer2.Enabled := True;
    HabilitarOpcoesMonitor(True);
    AbrirMonitorMobile;
  end;
  //
  Mais1ini.Free;
  //
end;

procedure TForm1.Button10Click(Sender: TObject);
var
  I : Integer;
  IBQREDUCOES: TIBQuery;
  iMesaFechando: Integer;
  iNumeroCupom: Integer;
  iCCFCupom: Integer;
  aMesa: Array of Integer; // Sandro Silva 2018-04-10
  iMesas: Integer; // Sandro Silva 2018-04-10
  function DeveFecharMesa(dtAberta: TDate; dtExecutando: TDate;
    bAposReducaoZ: Boolean): Boolean;

    // Ideia alternativa: Se a RZ não estiver pendente e data movimento >= data mesa: não fecha
    // Se a RZ estiver pendente e data do movimento >= data da mesa: não fecha

  begin
    Result := False;
    dtAberta     := Int(dtAberta);
    dtExecutando := Int(dtExecutando);

    if bAposReducaoZ = False then
    begin // Fazendo a RZ na mesma data da data do movimento do ECF
      if DaysBetween(dtExecutando, dtAberta) >= 1 then // Fernando orientou que pode fechar somente a partir de 2 dias da aberta da mesa Sandro Silva 2019-09-04 ER 02.06 UnoChapeco if DaysBetween(dtExecutando, dtAberta) >= 1 then
        Result := True;
    end
    else
    begin
      if dtExecutando <> dtAberta then
      begin
        if DaysBetween(IncDay(dtExecutando, - 1), dtAberta) >= 1 then
          Result := True;
      end;
    end;

  end;
begin
  // Fecha mesa na Redução Z
  //
  if (Copy(Form1.sConcomitante,1,4) = 'MESA')
    or (Copy(Form1.sConcomitante,1,5) = 'CONTA') then
  begin
    // Não fechar conta os, somente mesas e conta de cliente
    //

    Commitatudo(True); // Button10Click fecha mesas na redução 2015-10-15

    IBQREDUCOES := CriaIBQuery(Form1.IBQuery6.Transaction);

    try
      // Passando de 1 à 999 fica lenta a rotina de fechar mesas abertas quando ALTERACA com muitos registros. Testado com banco +2 milhoes de registros demora 5 segundos cada mesa (5*999)
      // Selecionar as mesas abertas e salvar no array
      // depois segue a rotina apenas nas mesas do array
      Form1.IBQuery6.Close;
      Form1.IBQuery6.SQL.Clear;
      Form1.IBQuery6.SQL.Add('select distinct PEDIDO from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') order by PEDIDO');
      Form1.IBQuery6.Open;

      while Form1.IBQuery6.Eof = False do
      begin
        if Form1.IBQuery6.FieldByName('PEDIDO').AsString <> '' then
        begin
          SetLength(aMesa, Length(aMesa) + 1);
          aMesa[High(aMesa)] := StrToIntDef(Form1.IBQuery6.FieldByName('PEDIDO').AsString, 0);
        end;
        Form1.IBQuery6.Next;
      end;

      for iMesas := 1 to Length(aMesa) do // Sandro Silva 2018-04-10  for I := 1 to 999 do
      begin

        I := aMesa[iMesas-1];

        //
        Form1.IBQuery6.Close;
        Form1.IBQuery6.SQL.Clear;
        Form1.IBQuery6.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+ FormataNumeroDoCupom(I) +' order by DATA, HORA'); // Sandro Silva 2021-12-01 Form1.IBQuery6.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+ StrZero(I,6,0) +' order by DATA, HORA');
        Form1.IBQuery6.Open;
        Form1.IBQuery6.First;
        //
        if AllTrim(Form1.IBQuery6.FieldByName('DATA').AsString) <> '' then
        begin
          //
          Form1.sHoraMovimento := Form1.IBQuery6.FieldByName('HORA').AsString;
          Form1.sDataMovimento := Form1.IBQuery6.FieldByName('DATA').AsString;
          //
            if DeveFecharMesa(Form1.IBQuery6.FieldByName('DATA').AsDateTime, Date, bFechandoMesasAposReducaoZ)
            then
            begin
              //
              if AllTrim(Form1.IBquery6.FieldByName('PEDIDO').AsString) <> '' then
              begin
                //
                Form1.Button2Click(Sender);

                if PDV_CupomAberto then
                begin

                  iNumeroCupom := Form1.icupom;
                  iCCFCupom    := Form1.iCCF;
                  //
                  iMesaFechando := StrToInt(Form1.IBquery6.FieldByName('PEDIDO').AsString);
                  //
                  Form1.ibQuery1.Close;
                  Form1.ibQuery1.SQL.Clear;
                  Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(iMesaFechando))+' order by ITEM'); // Sandro Silva 2021-12-01 Form1.ibQuery1.SQL.Add('select * from ALTERACA where (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(iMesaFechando,6,0))+' order by ITEM');
                  Form1.ibQuery1.Open;
                  //
                  //
                  if AllTrim(Form1.ibQuery1.FieldByName('CAIXA').AsString) <> '' then
                  begin
                    sMensagemMesaConferida := 'ECF: '+Form1.ibQuery1.FieldByName('CAIXA').AsString+' - Conferencia de '+sMesaOuConta+' - CER: '+Form1.ibQuery1.FieldByName('CCF').AsString+' COO: '+Form1.ibQuery1.FieldByName('COO').AsString;
                  end else
                  begin
                    sMensagemMesaConferida := 'Consumo da '+sMesaOuConta+' '+Form1.ibQuery1.FieldByName('PEDIDO').AsString+' SEM EMISSAO DE CONFERENCIA DE '+UpperCase(sMesaOuConta);
                  end;
                  //
                  //                SmallMsg(sMensagemMesaConferida);
                  while not Form1.ibQuery6.Eof do
                  begin
                    //
                    Form1.ibDataSet4.Close;
                    Form1.ibDataSet4.SelectSQL.Clear;
                    Form1.ibDataSet4.Selectsql.Add('select * from ESTOQUE where CODIGO='+QuotedStr(Form1.ibQuery6.FieldByName('CODIGO').AsString)+' ');
                    Form1.ibDataSet4.Open;
                    //
                    Form1.ibDataSet27.Close;
                    Form1.ibDataSet27.SelectSQL.Clear;
                    Form1.ibDataSet27.Selectsql.Add('select * from ALTERACA where REGISTRO='+QuotedStr(Form1.ibQuery6.FieldByName('REGISTRO').AsString)+' ');
                    Form1.ibDataSet27.Open;
                    //
                    Form1.ibDataSet27.Edit;
                    Form1.ibDataSet27.FieldByName('DATA').AsDateTime     := Date;
                    Form1.ibDataSet27.FieldByName('HORA').AsString       := Copy(sHoraDoCupom,7,2)+':'+Copy(sHoraDoCupom,9,2)+':'+Copy(sHoraDoCupom,11,2);
                    Form1.ibDataSet27.FieldByName('CAIXA').AsString      := sCaixa;
                    Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := FormataNumeroDoCupom(iNumeroCupom); // Sandro Silva 2021-12-01 Form1.ibDataSet27.FieldByName('PEDIDO').AsString     := StrZero(iNumeroCupom,6,0);
                    if alltrim(Form1.ibDataSet27.FieldByName('COO').AsString) = '' then
                      Form1.ibDataSet27.FieldByName('COO').AsString      := FormataNumeroDoCupom(iNumeroCupom); // Sandro Silva 2021-12-01 Form1.ibDataSet27.FieldByName('COO').AsString      := StrZero(iNumeroCupom,6,0);
                    Form1.ibDataSet27.FieldByName('CCF').AsString        := FormataNumeroDoCupom(iCCFCupom); // Sandro Silva 2021-12-01 Form1.ibDataSet27.FieldByName('CCF').AsString        := StrZero(iCCFCupom,6,0);
                    Form1.ibDataSet27.FieldByName('TIPO').AsString       := 'LOKED';
                    //
                    Edit1.Text := Form1.ibDataSet27.FieldByName('DESCRICAO').AsString;
                    //
                    Form1.Button1Click(Sender);
                    //
                    if Form1.ibDataSet27.FieldByName('VENDEDOR').AsString = '<cancelado>' then
                    begin
                      Edit1.Text := '-'+IntToStr(Form1.ibDataSet27.FieldByName('ITEM').AsInteger);
                      Form1.Button11Click(Sender); // CalcelaItenN
                      Edit1.Text := '';
                    end;
                    //
                    CommitaTudo2(False); // Venda o iten
                    //
                    Form1.ibQuery6.Next;
                    //
                  end;
                  //
                  bF12 := True;
                  //
                  Button18Click(Sender);
                  //
                end; // if PDV_CupomAberto then
              end
              else
              begin
                Break; // Não abriu cupom, sai da impressão
              end; // if AllTrim(Form1.IBquery6.FieldByName('PEDIDO').AsString) <> '' then
            end;
          end;
        // 2015-09-16 end;
        //
      end; // for I := 1 to 999 do
    except end;
    FreeAndNil(IBQREDUCOES);
  end;
  //
  bFechandoMesasAbertas := False;
  //
end;

procedure TForm1.ArqMF1Click(Sender: TObject);
begin
  GerarArquivoMF('MFCOMPLETA');
end;

procedure TForm1.CartesdecreditoedebitoPOS1Click(Sender: TObject);
begin
  Timer2.Enabled := False; // Sandro Silva 2016-03-23
  Form10.Panel1.Visible := True;
  Form10.TipoForm := tfPOS; // Sandro Silva 2017-05-18
  Form10.ShowModal;
  Form10.Panel1.Visible := False;

  if Form1.UsaIntegradorFiscal then
  begin
    // Configura as Adquirentes de para transação com cartão
    Form1.AdquirentesPOS1.Click;
  end;

  if Form1.ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-03-23
    Timer2.Enabled := True;
end;

procedure TForm1.Button5Click(Sender: TObject);
begin
  // testar estoque do dia
  Form1.sNumeroDeSerieDaImpressora := 'BE091210100011209288';
  bData := False;
  Form1.Estoquetotal1Click(Sender);
  bData := True;     

end;

procedure TForm1.ConcomitanteClick(Sender: TObject);
begin
  GeraArquivoCriptografado('CONCOMITANTE');
end;

procedure TForm1.Mesas1Click(Sender: TObject);
begin
  GeraArquivoCriptografado('MESA');
end;

procedure TForm1.Contadecliente1Click(Sender: TObject);
begin
  GeraArquivoCriptografado('CONTA');
end;

procedure TForm1.ContadeclienteOS1Click(Sender: TObject);
begin
  GeraArquivoCriptografado('OS');
end;

procedure TForm1.Verificaresquemaschema1Click(Sender: TObject);
begin
  Clipboard.SetTextBuf(pchar(Form1.ibDataSet150.FieldByName('NFEXML').AsString));
  ShellExecute( 0, 'Open',pChar('http://www.sefaz.rs.gov.br/NFE/NFE-VAL.aspx'),'','', SW_SHOWMAXIMIZED);
end;

procedure TForm1.ExportarXMLparacontabilidade1Click(Sender: TObject);
var
  sEmail : string;
  Mais1Ini : tIniFile;
  // Sandro Silva 2021-04-28 SearchRec: tSearchREC;
  // Sandro Silva 2021-04-28 Encontrou : Integer;
  // Sandro Silva 2021-04-28 bTemCFeSAT: Boolean;
  sAssuntoEmail: String;
  sBodyEmail: String;
  sFileZIP: String;
  bEnviar: Boolean;
  function TamanhoArquivo(Arquivo: string): Integer;
  begin
    with TFileStream.Create(Arquivo, fmOpenRead or fmShareExclusive) do
    try
      Result := Size;
    finally
     Free;
    end;
  end;
begin
  //
  // Form só para pedir o período e o e-mail do contador.
  //
  Mais1ini := TIniFile.Create(Form1.sAtual+'\nfce.ini');
  sEmail   := Alltrim(Mais1Ini.ReadString('XML','e-mail contabilidade',''));
  Form7.DateTimePicker1.Date    := StrToDate(Mais1Ini.ReadString('XML','Periodo Inicial',DateToStr(DATE-30)));
  Form7.DateTimePicker2.Date    := StrToDate(Mais1Ini.ReadString('XML','Periodo Final',DateToStr(DATE)));
  //
  Form7.Label1.Caption          := 'Informe o período para exportar o XML ' +
                                   'e clique  <Avançar> para continuar.';
  //Form7.Label2.Caption          :='e clique  <Avançar> para continuar.';
  Form7.CheckBox2.Caption       := 'Não enviar por e-mail';
  Form7.CheckBox2.Visible       := True; // Sandro Silva 2017-02-09
  Form7.DateTimePicker1.Visible := True;
  Form7.DateTimePicker2.Visible := True;
  Form7.MaskEdit1.Visible       := False;
  Form7.MaskEdit2.Visible       := False;
  Form7.Label3.Caption          := 'Data inicial:';
  Form7.Label5.Caption          := 'Data final:';
  Form7.Caption                 := 'Exportar o XML';
  Timer2.Enabled := False; // Sandro Silva 2016-03-23
  try
    Form7.ShowModal;

    if Form7.ModalResult <> mrOk then
      Exit;
    //
    if (Form7.CheckBox2.Checked) then
      sEmail := ''
    else
      sEmail := Small_InputBox('e-mail da contabilidade','Informe um e-mail válido para enviar o XML para contabilidade:',sEmail);
    //
    Mais1Ini.WriteString('XML','e-mail contabilidade',AllTrim(sEmail));
    Mais1Ini.WriteString('XML','Periodo Inicial',DateToStr(Form7.DateTimePicker1.Date));
    Mais1Ini.WriteString('XML','Periodo Final',DateToStr(Form7.DateTimePicker2.Date));
    Mais1ini.Free;
    //
    if Form7.DateTimePicker1.Date <> StrToDate('01/01/1998') then
    begin
      //

      Form1.ExibePanelMensagem('Aguarde... Exportando XML');

      DistribuicaoDFe(Form7.DateTimePicker1.Date, Form7.DateTimePicker2.Date, Form1.sAtual + '\CONTABIL', Form1.IBDataSet150.Transaction);

      ChDir(Form1.sAtual); // Windows voltar para a pasta do executável Sandro Silva 2018-03-12

      // Sem validar se existem xml no diretório causa erro no szip.exe}
      if FileExists(Form1.sAtual + '\CONTABIL\*.xml') then
      begin

        if FileExists('szip.exe') then
        begin
          // Se existir o arquivo .zip ele deve ser deletado antes. Está compactando os novos arquivos com os que já estão no .zip
          sFileZIP := Alltrim(Form1.sAtual + '\CONTABIL\'+ LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) + '_'+StrTRan(DateToStr(date),'/','_')+'_nfce.zip');

          if FileExists(sFileZIP) then
            DeleteFile(PChar(sFileZIP));

          ShellExecute( 0, 'Open','szip.exe',pChar('backup "'+Alltrim(Form1.sAtual + '\CONTABIL\*.xml')+'" "'+ sFileZIP + '"'), '', SW_SHOWMAXIMIZED);

          //
          while ConsultaProcesso('szip.exe') do
          begin
            Application.ProcessMessages;
            sleep(100);
          end;
          //
          while not FileExists(pChar(sFileZIP)) do
          begin
            sleep(100);
          end;

          if ValidaEmail(sEmail) then
          begin
            //

            if (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'CE') or (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'SP') then // Sandro Silva 2021-04-28 if bTemCFeSAT then
            begin
              sAssuntoEmail := 'NFC-e´s (Notas Fiscais Consumidor Eletrônicas) e CF-e (Cupom Fiscal Eletrônico)'; // Sandro Silva 2018-08-01
              sBodyEmail    := 'Segue em anexo arquivo zipado com as NFC-e´s e CF-e de emitidos pela empresa ' // Sandro Silva 2018-08-01
            end
            else
            begin
              sAssuntoEmail := 'NFC-e´s (Notas Fiscais Consumidor Eletrônicas)';
              sBodyEmail    := 'Segue em anexo arquivo zipado com as NFC-e´s de saída da empresa ';
            end;

            bEnviar := True;
            if TamanhoArquivo(sFileZIP) > 10485760 then
            begin
              if SmallMsgBox(PChar('O tamanho do arquivo ultrapassou 10MB' + #13 + #13 +
                                   //'Pode ser que o e-mail não seja enviado' + #13 +
                                   'Seu servidor de e-mail poderá bloquear o envio' + #13 +
                                   'Selecione períodos menores para evitar bloqueio do envio' + #13 + #13 +
                                   'Deseja enviar o arquivo atual?'), 'Atenção', MB_ICONWARNING + MB_YESNO) = idNo then
              begin
                bEnviar := False;
              end;
            end;
            if bEnviar then
            begin
              _ecf65_EnviarEMail('',sEmail,'',sAssuntoEmail,
                PChar(sBodyEmail+AllTrim(Form1.ibDataSet13.FieldByName('NOME').AsString)+'.'
                +' Período de '+DateToStr(Form7.DateTimePicker1.Date)+' até '+DateToStr(Form7.DateTimePicker2.Date)+'.')
                ,PChar(sFileZIP)
                ,False);
            end;
          end;
          if (Form7.CheckBox2.Checked) then
          begin
            if FileExists(PChar(sFileZIP)) then
            begin
              Application.MessageBox(Pchar('Arquivos exportados para:' + #13 + #13 + sFileZIP), PAnsiChar(Form7.Caption), MB_OK + MB_ICONINFORMATION);
              //WinExec(PAnsiChar('%windir%\explorer.exe "' + ExtractFilePath(sFileZIP) + '"'), SW_NORMAL);
              ShellExecute(Application.Handle, PChar('open'), PChar('explorer.exe'), PChar(ExtractFilePath(sFileZIP)), nil, SW_NORMAL);
            end;
          end;

        end
        else
        begin
          Application.MessageBox(PChar('Utilitário de compatação não encontrado SZIP.EXE' + #13 + #13 +
                            'A exportação não foi concluída'), 'Atenção', MB_ICONWARNING + MB_OK);
        end;

      end
      else
      begin
        Application.MessageBox(PChar('Nenhum XML encontrado para ser enviado' + #13 + #13 +
                          'Verifique se no período informado existem vendas realizadas'), 'Atenção', MB_ICONWARNING + MB_OK);
      end;

    end;
    //
  finally
    Form7.CheckBox2.Caption       := 'Ato cotepe 17/04';
    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible  := False;
    if Form1.ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-03-23
      Timer2.Enabled := True;
  end;
end;

procedure TForm1.Fusohorario1Click(Sender: TObject);
begin
  DefineFusoHorario('FRENTE.INI','NFCE','Fuso',Form1.ibDataSet13.FieldByName('ESTADO').AsString, '', Form1.bHorarioDeVerao); // Sandro Silva 2019-02-27 DefineFusoHorario('FRENTE.INI','NFCE','Fuso',Form1.ibDataSet13.FieldByName('ESTADO').AsString, '', HorriodeVero1.Checked);
end;

procedure TForm1.ConsultarStatusdoServio1Click(Sender: TObject);
begin
  if (Form1.sModeloECF = '65') then
  begin
    Form1.ExibePanelMensagem('Aguarde, consultando status do serviço');
    _ecf65_ConsultarStatusServico; // Form1.ConsultarStatusdoServio1Click(
    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible  := False;

    if Form1.bStatusECF then
    begin

      if Form1.NFCeemContingncia1.Checked then
      begin

        Form1.NFCeemContingncia1.Checked := False;
        SmallMsg('Saindo da contingência');

      end;
      
    end;

    if Form1.iCupom = 0 then
    begin
      if Form1.bStatusECF then
      begin
        if _ecf65_CupomAberto(True) then
        begin
          FormShow(Sender); // ConsultarStatusdoServio1Click()
        end;
      end;
    end;
  end;
  if (Form1.sModeloECF = '59') then
  begin
    Form1.ExibePanelMensagem('Aguarde, consultando status do ' + _ecf59_Tipodaimpressora);

    _ecf59_ConsultaSat(True, True);
    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible := False;
  end;
end;

procedure TForm1.ConsultaStatusOperacionaldoSAT1Click(Sender: TObject);
begin
  if (Form1.sModeloECF = '59') then
  begin
    _ecf59_ConsultaStatusOperacional;
  end;
end;

procedure TForm1.AtualizaBase(IBDATABASE: TIBDatabase);
//Sandro Silva 2015-04-23 Ronei Orientou a atualizar estrutura da base para o frente por aqui e não no Small Commerce
var
  AtualizaDB: TAtualizaBase;
begin

  AtualizaDB := TAtualizaBase.Create(Application);

  AtualizaDB.IBDATABASE   := Form1.IBDatabase1;
  AtualizaDB.IBDataSet150 := Form1.IBDataSet150;
  AtualizaDB.sModeloECF_Reserva := Form1.sModeloECF_Reserva;
  AtualizaDB.Atualizar;

  FreeAndNil(AtualizaDB);

end;

procedure TForm1.IBDatabase2AfterConnect(Sender: TObject);
begin
  AtualizaBase(IBDatabase2);
end;

procedure TForm1.IBDatabase1AfterConnect(Sender: TObject);
begin
  AtualizaBase(IBDatabase1);
end;

procedure TForm1.HabilitaBotaoF11(bHabilitar: Boolean);
begin
  Form1.touch_F11.Visible := bHabilitar;
  Form1.touch_F11.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
  if ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) and (PAFNFCe = False) then // Sandro Silva 2020-12-07   if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Sandro Silva 2016-03-10
    Form1.touch_F11.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);

  Form1.touch_F11.Top     := AjustaAltura(684-60-13); // Sandro Silva 2016-08-18 AjustaAltura(684-60-15);
  //
  Form1.LabelF11.Visible    := bHabilitar;
  Form1.LabelF11.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 400);
  if ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) and (PAFNFCe = False) then // Sandro Silva 2020-12-07   if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Sandro Silva 2016-03-10
    Form1.LabelF11.Left       := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500);
  Form1.LabelF11.Top        := AjustaAltura(690 -60-20);// Sandro Silva 2016-08-18  AjustaAltura(689 -60-20);
  Form1.LabelF11.Caption    := 'F11'+chr(10)+'Importa'+chr(10)+'Orçamento';
  Form1.LabelF11.Width      := AjustaLargura(90);
  Form1.LabelF11.Font.Color := clBlack;
end;

procedure TForm1.HabilitaBotaoF12(bHabilitar: Boolean);
begin
  Form1.touch_F12.Visible := bHabilitar;
  Form1.touch_F12.Left    := AjustaLargura(MARGEM_ESQUERDA_OBJ + 500); // Sandro Silva 2016-03-02 600;

  if ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) and (PAFNFCe = False) then // Sandro Silva 2020-12-07   if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Sandro Silva 2016-03-10
    Form1.touch_F12.Left    :=  AjustaLargura(MARGEM_ESQUERDA_OBJ + 600); // Sandro Silva 2016-03-02 600;

  Form1.touch_F12.Top     := AjustaAltura(684-60-13); // Sandro Silva 2016-08-18 AjustaAltura(684-60-15);
  //
  Form1.LabelF12.Visible    := bHabilitar;
  Form1.LabelF12.Left       :=  AjustaLargura(MARGEM_ESQUERDA_OBJ + 500); // Sandro Silva 2016-03-02 600;
  if ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) and (PAFNFCe = False) then // Sandro Silva 2020-12-07   if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then // Sandro Silva 2016-03-10
    Form1.LabelF12.Left       :=  AjustaLargura(MARGEM_ESQUERDA_OBJ + 600); // Sandro Silva 2016-03-02 600;
  Form1.LabelF12.Top        := AjustaAltura(690 -60-20);// Sandro Silva 2016-08-18  AjustaAltura(689 - 60-20);
  Form1.LabelF12.Caption    := 'F12'+chr(10)+'Importa'+chr(10)+'OS';
  Form1.LabelF12.Width      :=  AjustaLargura(90);
  Form1.LabelF12.Font.Color := clBlack;
end;

procedure TForm1.WndProc(var Msg: TMessage);
// Sandro Silva 2015-05-25 Exibe popupmenu quando executando minimizado na bandeja do windows
var
  p: TPoint;
begin
  if bMonitorMobile then
  begin
    case Msg.Msg of
      WM_USER + 1:
        case Msg.lParam of
          WM_RBUTTONDOWN:
            begin
              SetForegroundWindow(Handle);
              GetCursorPos(p);
              PopupMenu4.Popup(p.x,p.y);
              PostMessage(Handle, WM_NULL, 0, 0);
            end;
          WM_LBUTTONDBLCLK:
            begin
              Restaurar1.Click;
            end;
        end;
    end;
  end;
  inherited;
end;

procedure TForm1.CriaIcone; // Sandro Silva 2015-05-25
begin
  NotifyIconData.Wnd              := Self.Handle;
  NotifyIconData.uID              := 0;
  NotifyIconData.uCallbackMessage := WM_TRAYICON;
  NotifyIconData.uFlags           := NIF_ICON or NIF_TIP or NIF_MESSAGE;
  NotifyIconData.hIcon            := Application.Icon.Handle;
  if sModeloECF = '59' then
    NotifyIconData.szTip          := 'Emissor de CF-e'; // Sandro Silva 2018-08-01
  if sModeloECF = '65' then
    NotifyIconData.szTip          := 'Emissor de NFC-e';
  if sModeloECF = '99' then
    NotifyIconData.szTip          := 'MEI';

  Shell_NotifyIcon(NIM_ADD, @NotifyIconData);
  Application.ShowMainForm := False;
end;

procedure TForm1.DestroyIcone; // Sandro Silva 2015-05-25
begin
  NotifyIconData.Wnd    := Self.Handle;
  NotifyIconData.uID    := 0;
  NotifyIconData.uFlags := 0;
  Shell_NotifyIcon(NIM_DELETE, @NotifyIconData);
end;

procedure TForm1.WMSysCommand(var Msg: TWMSysCommand); // Sandro Silva 2015-05-25
begin
  case (Msg.CmdType) of
    SC_MINIMIZE: {isso daqui faz com que ao você minimizar a tela ele faça com que o programa em vez de ser minimizado normalmente ele irá para o Tray}
      begin
        Self.Visible := False;
        CriaIcone;
      end;
    SC_MAXIMIZE: {isso daqui faz com que ao você maximizar a tela ele não maximize ela mas sim deixá-la como está tornando-a apenas visível}
      begin
        Self.Visible := True;
      end;
      else
      begin
        inherited;
      end;
  end;
end;

procedure TForm1.WMTrayIcon(var Msg: TMessage); // Sandro Silva 2015-05-25
var
  Pt: TPoint;
begin
  if (Msg.LParam = WM_RBUTTONDOWN) then
  begin
    // faz com que ao você clicar com o botão direito do mouse no ícone do seu programa que está no Tray
    // ele faça aparecer um PopupMenu, que nada mais é do que aqueles pequenos retângulos verticais que
    // aparecem quando você clica com o botão direito, por exemplo, num espaço vazio da sua área de trabalho,
    // onde aparecem várias opções.
    GetCursorPos(Pt);
    PopupMenu4.Popup(Pt.X, Pt.Y);
    PopupMenu4.AutoPopup := False;
  end
  else
  begin
    if (Msg.LParam = WM_LBUTTONDOWN) then
    begin
      // isso daqui deixa seu formulário invisível e envia seu programa para o Tray ao clicar com o
      // botão esquerdo do mouse duas vezes sobre o ícone do seu programa que está no Tray.
      // Para que, em vez de ter que clicar duas vezes, clicar apenas uma vez (isso eu também não encontrei na Internet)
      // você deverá mudar onde está escrito WM_LBUTTONDBLCLK para WM_LBUTTONDOWN.
      //Self.Visible := True;

      CortaPapelNoVideo(True);  // TForm1.WMTrayIcon

      DestroyIcone;
      Form1.Visible := True;
      bSystray      := False;
      Application.BringToFront;
      if (Form1.ClienteSmallMobile.sVendaImportando = '') then
      begin
        if Edit1.CanFocus then
          Edit1.SetFocus;
      end;
    end;
  end;
end;

procedure TForm1.Restaurar1Click(Sender: TObject);
begin
  CortaPapelNoVideo(True); // TForm1.Resaturar1Click
  Show;
end;

procedure TForm1.Minimizarnabandeja1Click(Sender: TObject);
begin
  if (bAberto = False) or (Form1.ClienteSmallMobile.sVendaImportando = '') then
  begin
    bSystray := True;
    FormPaint(Sender);
  end;
end;

procedure TForm1.Iniciarminimizado1Click(Sender: TObject);
begin
  if Iniciarminimizado1.Checked then
  begin
    Iniciarminimizado1.Checked := False;
    GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_INICIAR_MINIMIZADO, 'Não');
  end
  else
  begin
    Iniciarminimizado1.Checked := True;
    GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_INICIAR_MINIMIZADO, 'Sim');
  end;
end;

procedure TForm1.SetIconSysTrayIcone(FileIcon: String);
var
  Icon: TIcon;
begin
  if FileExists(FileIcon) = False then
    Exit;
    
  Icon := TIcon.Create;
  Icon.LoadFromFile(FileIcon);
  NotifyIconData.Wnd              := Form1.Handle;
  NotifyIconData.uID              := 0;
  NotifyIconData.uCallbackMessage := WM_TRAYICON;
  NotifyIconData.uFlags           := NIF_ICON;
  NotifyIconData.hIcon            := Icon.Handle;
  Shell_NotifyIcon(NIM_MODIFY, @NotifyIconData);
  Icon.Free;
end;

function TForm1.GetIconHandleSysTrayIcone: THandle;
begin
  NotifyIconData.Wnd    := Form1.Handle;
  NotifyIconData.uID    := 0;
  NotifyIconData.uFlags := NIF_ICON;
  Result := NotifyIconData.hIcon;
end;

procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  //SmallMsg('Teste 01 Início Close query');
  Timer2.Enabled := False;
end;

procedure TForm1.IBDataSet150AfterOpen(DataSet: TDataSet);
begin
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then // Sandro Silva 2020-09-28 if Form1.sModeloECF = '59' then
  begin
    if Form1.IBDataSet150.FindField('NFEIDSUBSTITUTO') <> nil then
      Form1.IBDataSet150NFEIDSUBSTITUTO.Visible := False;
  end;

  if Form1.IBDataSet150.FindField('ENCRYPTHASH') <> nil then
  begin
    Form1.IBDataSet150.FieldByName('ENCRYPTHASH').Visible := False;
  end;

  if DBGrid1.Visible then
    AjustaLarguraDBGrid(DBGrid1); // Sandro Silva 2016-08-12

end;

procedure TForm1.HabilitarOpcoesMonitor(bHabilitar: Boolean);
begin
  //Habilitar apenas se estiver diponível opção para importar mobile
  if bHabilitar and (Form1.ImportarvendasdoSmallMobile1.Visible = False) then
    Exit;
  bMonitorMobile := bHabilitar;
  Minimizarnabandeja1.Visible := bHabilitar;
  N10.Visible                 := Minimizarnabandeja1.Visible;
  Iniciarminimizado1.Visible  := Minimizarnabandeja1.Visible;
  IniciarcomWindows1.Visible  := Iniciarminimizado1.Visible;
end;

procedure TForm1.IniciarcomWindows1Click(Sender: TObject);
begin
  if IniciarcomWindows1.Checked = False then
  begin
    CriarAtalhoNoIniciar(Application.ExeName, ExtractFileName(Application.ExeName));
    GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_INICIAR_COM_WINDOWS, 'Sim');
  end
  else
  begin
    ApagarAtalhoIniciar(ExtractFileName(Application.ExeName));
    GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_INICIAR_COM_WINDOWS, 'Não');
  end;
end;

procedure TForm1.IBDataSet150AfterScroll(DataSet: TDataSet);
begin
  Application.HintColor     := clInfoBk;
  Application.HintPause     := 500;
  Application.HintHidePause := Application.HintPause * 5;

  DBGrid1.ShowHint := True;
  DBGrid1.Hint     := '';

  if DBGrid1.Visible then
  begin

    if DataSet.FieldByName('MODELO').AsString = '99' then
    begin
      if DataSet.FieldByName('STATUS').AsString <> VENDA_MEI_FINALIZADA then
      begin
        Application.HintColor     := clRed;
        Application.HintHidePause := Application.HintPause * 10;

        DBGrid1.ShowHint := True;
        DBGrid1.Hint     := DataSet.FieldByName('STATUS').AsString;
      end;
    end
    else
    begin
      if ((DataSet.FieldByName('STATUS').AsString <> '') and (DataSet.FieldByName('NFEID').AsString = ''))
        or ((DataSet.FieldByName('MODELO').AsString = '65') and (AnsiContainsText(DataSet.FieldByName('STATUS').AsString, 'Autori') = False) and (AnsiContainsText(DataSet.FieldByName('STATUS').AsString, 'conting') = False) and (AnsiContainsText(DataSet.FieldByName('STATUS').AsString, 'Cancel') = False)  ) then
      begin
        Application.HintColor     := clRed;
        Application.HintHidePause := Application.HintPause * 10;

        DBGrid1.ShowHint := True;
        DBGrid1.Hint     := DataSet.FieldByName('STATUS').AsString;
      end;
    end;

  end;
end;

procedure TForm1.DBGrid1Exit(Sender: TObject);
begin
  Application.HintColor     := clInfoBk;
  Application.HintPause     := 500;
  Application.HintHidePause := Application.HintPause * 5;
end;

procedure TForm1.VendasIdentificadaspeloCPFCNPJ1Click(Sender: TObject);
var
  F : TextFile;
  iZ: Integer;
  bGerando: Boolean;
  dtGeracao: TDate;
  hrGeracao: TTime;
  sDtInicial: String;
  sDtFinal: String;
begin
  CommitaTudo(True);// VendasIdentificadaspeloCPFCNPJ1Click 2015-09-12
  bGerando := False;
  try
    Form7.bVendaCPF := True;
    Form7.Caption := 'Vendas Identificadas pelo CPF/CNPJ';// Sandro Silva 2016-08-19
    Form7.ShowModal;
    if Form7.ModalResult = mrOK then
    begin

      Screen.Cursor             := crHourGlass;    // Cursor de Aguardo

      dtGeracao := Date;
      hrGeracao := Time;

      Form1.SaveDialog1.FileName := Form1.sPAstaDoExecutavel+'\VENDAS_IDENTIFICADAS_PELO_CPF_CNPJ.TXT';
      Form1.SaveDialog1.FilterIndex := 1;

      DeleteFile(SaveDialog1.FileName);
      AssignFile(F, SaveDialog1.FileName);
      Rewrite(F);                           // Abre para gravação

      bGerando := True;

      Form1.ibQuery5.Close;
      Form1.ibQuery5.SQL.Text :=
        'select replace(replace(replace(A1.CNPJ, ''.'', ''''), ''-'', ''''), ''/'', '''') as CNPJ, sum(coalesce(A1.TOTAL, 0)) as TOTAL, min(A1.DATA) as DATAI, max(A1.DATA) as DATAF ' +
        'from ALTERACA A1 ' +
        'where coalesce(A1.CNPJ, '''') <> '''' ' +
        ' and A1.CNPJ <> ''..-'' ' +
        ' and A1.CNPJ <> ''.../-'' ' +
        ' and A1.TIPO = ''BALCAO'' ';
      if LimpaNumero(Form7.edCPFCNPJ.Text) <> '' then
        Form1.ibQuery5.SQL.Add(' and A1.CNPJ = ' + QuotedStr(FormataCpfCgc(LimpaNumero(Form7.edCPFCNPJ.Text))));
      Form1.ibQuery5.SQL.Add(
        ' and A1.DATA between ' + QuotedStr(FormatDateTime('yyyy-mm-dd', StrToDate('01/' + FormatDateTime('mm/yyyy', Form7.DateTimePicker3.Date)))) + ' and ' + QuotedStr(FormatDateTime('yyyy-mm-dd', StrToDate(IntToStr(DaysInAMonth(YearOf(Form7.DateTimePicker3.Date), MonthOf(Form7.DateTimePicker3.Date))) + '/' + FormatDateTime('mm/yyyy', Form7.DateTimePicker3.Date)))) +
        ' group by replace(replace(replace(A1.CNPJ, ''.'', ''''), ''-'', ''''), ''/'', '''') ' +
        'order by DATAI ');
      Form1.ibQuery5.Open;

      {Sandro Silva 2022-12-12 Início Unochapeco}
      sDtInicial := FormatDateTime('yyyymm', Form7.DateTimePicker3.Date) + '01';
      sDtFinal   := FormatDateTime('yyyymm', Form7.DateTimePicker3.Date) + IntToStr(DaysInAMonth(YearOf(Form7.DateTimePicker3.Date), MonthOf(Form7.DateTimePicker3.Date)));
      {Sandro Silva 2022-12-12 Final Unochapeco}

      Writeln(F,  'Z1' +                                                          // Tipo Z1
                  right('00000000000000' + LimpaNumero(ibDataSet13.FieldByName('CGC').AsString), 14) + // CNPJ
                  Copy(LimpaNumero(ibDataSet13.FieldByName('IE').AsString) + Replicate(' ', 14), 1, 14) + // Incrição Estadual
                  Copy(LimpaNumero(ibDataSet13.FieldByName('IM').AsString) + Replicate(' ', 14), 1, 14) + // Incrição Municipal
                  Copy(AnsiUpperCase(ibDataSet13.FieldByName('NOME').AsString) + Replicate(' ', 50), 1, 50) // Razão social
                  );

      Writeln(F,  'Z2' +                                                          // Tipo Z2
                  Right('00000000000000' + LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF), 14) + // CNPJ da Desenvolvedora
                  Copy(LimpaNumero(IE_SOFTWARE_HOUSE_PAF) + Replicate(' ', 14), 1, 14) + // Instrição Estadual da Desenvolvedora
                  Copy(IM_SOFTWARE_HOUSE_PAF + Replicate(' ', 14), 1, 14) + // Inscrição Municipal da Desenvolvedora
                  // 2015-09-08 Copy('SMALLSOFT TECNOLOGIA EM INFORMATICA EIRELI' + Replicate(' ', 50), 1, 50) // Razão social da Desenvolvedora
                  Copy(AnsiUpperCase(Form1.sRazaoSocialSmallsoft) + Replicate(' ', 50), 1, 50) // Razão social da Desenvolvedora
                  );

      if PAFNFCe then
      begin
        Writeln(F,  'Z3' +                                                          // Tipo Z3
                    Copy('SMALL COMMERCE' + Replicate(' ', 50), 1, 50) + // Nome do PAF-ECF
                    Copy(LimpaNumero(StrTran(Form22.sBuild,'Versão e Build: ','')) + Replicate(' ', 10), 1, 10) // Versão do PAF-ECF
                    );
      end
      else
      begin
        Writeln(F,  'Z3' +                                                          // Tipo Z3
                    Copy(StringReplace(NUMERO_LAUDO_PAF_ECF, 'Rn', '', [rfReplaceAll]) + Replicate(' ', 10), 1, 10) + // Laudo do PAF-ECF
                    Copy('SMALL COMMERCE' + Replicate(' ', 50), 1, 50) + // Nome do PAF-ECF
                    Copy(StrTran(Form22.sBuild,'Versão e Build: ','') + Replicate(' ', 10), 1, 10) // Versão do PAF-ECF
                    );
      end;
      iZ := 0;
      Form1.ibQuery5.DisableControls;
      Form1.ibQuery5.First;
      while Form1.ibQuery5.Eof = False do
      begin
        Inc(iZ);

        Writeln(F, 'Z4' +                                                          // Tipo Z4
                   Right('00000000000000' + LimpaNumero(Form1.ibQuery5.FieldByName('CNPJ').AsString), 14) + // CPF/CNPJ
                   Right('00000000000000' + LimpaNumero(FormatFloat('0.00', Form1.ibQuery5.FieldByName('TOTAL').AsFloat)), 14) + // Totalização Mensal
                   sDtInicial + // Data inicial da vendas ao CPF/CNPJ  // Sandro Silva 2022-12-12 Unochapeco FormatDateTime('yyyymmdd', Form1.ibQuery5.FieldByName('DATAI').AsDateTime) + // Data inicial da vendas ao CPF/CNPJ
                   sDtFinal + // Data final da vendas ao CPF/CNPJ // Sandro Silva 2022-12-12 Unochapeco FormatDateTime('yyyymmdd', Form1.ibQuery5.FieldByName('DATAF').AsDateTime) + // Data final da vendas ao CPF/CNPJ
                   FormatDateTime('yyyymmdd', dtGeracao) + // Data da geração do relatório
                   FormatDateTime('HHnnss', hrGeracao)  // hora da geração do relatório
                   );

        Form1.ibQuery5.Next;
      end;

      Writeln(F, 'Z9' +                                                          // Tipo Z9
                 Right(LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF), 14) + // CNPJ da Desenvolvedora
                 Copy(LimpaNumero(IE_SOFTWARE_HOUSE_PAF) + Replicate(' ', 14), 1, 14) + // Instrição Estadual da Desenvolvedora
                 RightStr(Replicate('0', 6) + IntToStr(iZ), 6)  // Total de registros Z4
                 );

      CloseFile(F);                                    // Fecha o arquivo
      AssinaturaDigital(pChar(SaveDialog1.FileName));
      CHDir(Form1.sAtual);

      bGerando := False;
      Screen.Cursor             := crDefault;
    end;
  finally
    if bGerando then // Falhou fechar e assinar arquivo
    begin
      CloseFile(F);                                    // Fecha o arquivo
      CHDir(Form1.sAtual);
    end;

    Form1.ibQuery5.EnableControls;
    Form7.bVendaCPF := False;
  end;
end;

procedure TForm1.ArqAC1704COO1Click(Sender: TObject);
begin
  PafEcfArquivoAC1704PorCOO; // 2022-03-29
end;

procedure TForm1.ArqAC1704Data1Click(Sender: TObject);
begin
  PafEcfArquivoAC1704PorData; // 2022-03-29
end;

procedure TForm1.NFCeNotaFiscaldeConsumidorEletrnica1Click(
  Sender: TObject);
begin
  GetDir(0,Form1.sAtual);
  ShellExecute( 0, 'Open', pChar(Form1.sAtual+'\PAFNFCE.exe'), pChar('URB'+Form1.sMD5DaLista), '', SW_SHOW);
end;

procedure TForm1.Button12Click(Sender: TObject);
//var
//  sAliquota: String;
begin
// Para cadastrar aliquotas no emulador bematech 4200 durante testes
  {
  sAliquota := InputBox('Cadastra Alíquota', 'Alíquota', sAliquota);
  if sAliquota <> '' then
    if _ecf02_ConfigAliquota(sAliquota) then
      SmallMsg(sAliquota + ' configurada')
    else
      SmallMsg(sAliquota + ' não configurada');
  }
end;

procedure TForm1.Pesquisarpeloinciodotexto1Click(Sender: TObject);
begin
  GravarParametroIni('Frente.ini', 'Frente de caixa', CHAVE_PESQUISA_CONTENDO, 'Não');
  Form1.Pesquisaremqualquerpartedotexto1.Checked := False;
  Form1.Pesquisarpeloinciodotexto1.Checked       := True;
end;

procedure TForm1.Pesquisaremqualquerpartedotexto1Click(Sender: TObject);
begin
  //Pesquisarpeloinciodotexto1Click(Sender);
  GravarParametroIni('Frente.ini', 'Frente de caixa', CHAVE_PESQUISA_CONTENDO, 'Sim');
  Form1.Pesquisaremqualquerpartedotexto1.Checked := True;
  Form1.Pesquisarpeloinciodotexto1.Checked       := False;
end;

function TForm1.SequencialItemMesa(sMesa: String): Integer;
var
  IBTITEM: TIBTransaction;
  IBQITEM: TIBQuery;
begin
  IBTITEM := CriaIBTransaction(Form1.ibDataSet27.Transaction.DefaultDatabase);
  IBQITEM := CriaIBQuery(IBTITEM);
  try
    IBQITEM.Transaction.Active := True;
    IBQITEM.Transaction.Rollback;
    IBQITEM.Close;
    IBQITEM.SQL.Text :=
      'select count(ITEM) as ITEM ' +
      'from ALTERACA ' +
      'where PEDIDO = ' + QuotedStr(sMesa) +
      ' and (TIPO=''MESA'' or TIPO=''DEKOL'') ' ;
    IBQITEM.Open;
    Result := StrToIntDef(IBQITEM.FieldByName('ITEM').AsString, 0) + 1;
  finally
    FreeAndNil(IBQITEM);
    FreeAndNil(IBTITEM);
  end;
end;

procedure TForm1.GravaECF(sNumeroSerie: String);
// Sandro Silva 2015-10-01 Grava número de série no banco
var
  IBTECFS: TIBTransaction;
  IBQECFS: TIBQuery;
begin
  // Não pode usar commitatudo aqui. GravaECF() é usada em TestaTudo() 

  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // 2015-10-07
  begin
    IBTECFS := CriaIBTransaction(Form1.ibDataSet27.Database);
    IBQECFS := CriaIBQuery(IBTECFS);
    try
      IBQECFS.Close;
      IBQECFS.SQL.Text :=
        'select SERIE ' +
        'from ECFS ' +
        'where SERIE = ' + QuotedStr(sNumeroSerie);
      IBQECFS.Open;

      if IBQECFS.FieldByName('SERIE').AsString = '' then
      begin
        IBQECFS.Close;
        IBQECFS.SQL.Text :=
          'insert into ECFS (SERIE, ENCRYPTHASH) values (:SERIE, :ENCRYPTHASH)';
        IBQECFS.ParamByName('SERIE').AsString       := sNumeroSerie;
        Form1.LbBlowfish1.GenerateKey(Form1.sPasta); // Minha chave secreta
        IBQECFS.ParamByName('ENCRYPTHASH').AsString := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sNumeroSerie)));
        try
          IBQECFS.ExecSQL;
          IBQECFS.Transaction.Commit;
        except
          IBQECFS.Transaction.Rollback;
        end;
      end;
    finally
      FreeAndNil(IBQECFS);
      FreeAndNil(IBTECFS);
    end;
    AtualizaECFSCripta;
  end;
end;

procedure TForm1.ECFAutorizados(var slECF: TStringList);
//Retorna stringlist com o número de série descifrado dos ECFs contido no cripta
var
  iniCripta : TIniFile;
  sECF: String;
  iLinha: Integer;
  sECFCripta: String; // 2015-11-04
begin
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // 2015-10-07
  begin
    slECF.Clear;

    //LogFrente('Teste 01: Lendo ECFs do cripta');

    iniCripta := TIniFile.Create(Form1.sArquivo);
    iniCripta.ReadSection(CRIPTA_SECAO_ECFS_AUTORIZADAS, slECF);

    sECF := '';
    for iLinha := 0 to slECF.Count -1 do
    begin

      Form1.LbBlowfish1.GenerateKey(Form1.sPasta);

      if Trim(iniCripta.ReadString(CRIPTA_SECAO_ECFS_AUTORIZADAS, slECF.Strings[iLinha], '')) <> '' then
      begin
        sECFCripta := iniCripta.ReadString(CRIPTA_SECAO_ECFS_AUTORIZADAS, slECF.Strings[iLinha], '');
        if sECFCripta <> '' then
        begin
          if sECF <> '' then
            sECF := sECF + #10;
          try
            sECF := sECF + Form1.LbBlowfish1.DecryptString(sECFCripta);
          except
          end;
        end;
      end;
    end;
    slECF.Text := sECF;
    iniCripta.Free;

    //LogFrente('Teste 01: ECFs do cripta lidos');
  end;
end;

function TForm1.ECFnoCripta(sNumeroSerie: String): Boolean;
var
  slECF: TStringList;
  iLinha: Integer;
begin
  Result := False;
  if sNumeroSerie <> '' then
  begin
    slECF := TStringList.Create;
    ECFAutorizados(slECF);
    for iLinha := 0 to slECF.Count -1 do
    begin
      if slECF.Strings[iLinha] = sNumeroSerie then
      begin
        Result := True;
        Break;
      end;
    end;
    FreeAndNil(slECF);
  end;
end;

procedure TForm1.AtualizaECFSCripta;
{Sandro Silva 2015-10-02 inicio
Atualiza os ECF contidos na base no cripta local
}
{
var
  IBTECFS: TIBTransaction;
  IBQECFS: TIBQuery;
  IBTECFSDELETAR: TIBTransaction;
  IBQECFSDELETAR: TIBQuery;
  IniCripta: TIniFile;
  slECF: TStringList;
  iECF: Integer;
  bAchou: Boolean;
}
begin
  (*
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') then // 2015-10-07
  begin
    IniCripta := TIniFile.Create(Form1.sArquivo);

    // Só grava no cripta se existir a seção [ECF]
    if IniCripta.SectionExists('ECF') then
    begin
      slECF     := TStringList.Create;
      IBTECFS   := CriaIBTransaction(Form1.ibDataSet27.Database);
      IBQECFS   := CriaIBQuery(IBTECFS);
      IBTECFSDELETAR := CriaIBTransaction(Form1.ibDataSet27.Database);
      IBQECFSDELETAR := CriaIBQuery(IBTECFSDELETAR);

      Form1.LbBlowfish1.GenerateKey(Form1.sPasta);

      try
        IBQECFS.Close;
        IBQECFS.SQL.Text :=
          'select SERIE, ENCRYPTHASH ' +
          'from ECFS';
        IBQECFS.Open;

        while IBQECFS.Eof = False do
        begin
          ECFAutorizados(slECF);// Retorna a lista dos ecf descifradas
          if IBQECFS.FieldByName('ENCRYPTHASH').AsString = Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(IBQECFS.FieldByName('SERIE').AsString))) then
          begin
            //Procura o ECF na lista extraida do cripta
            bAchou := False;
            for iECF := 0 to slECF.Count - 1 do
            begin
              if slECF.Strings[iECF] = IBQECFS.FieldByName('SERIE').AsString then
              begin
                bAchou := True;
                Break;
              end;
            end;
            if bAchou = False then
            begin
              // Adiciona porque não encontrou o ECF no cripta
              IniCripta.WriteString(CRIPTA_SECAO_ECFS_AUTORIZADAS, Form1.LbBlowfish1.EncryptString(AllTrim(IBQECFS.FieldByName('SERIE').AsString)), Form1.LbBlowfish1.EncryptString(AllTrim(IBQECFS.FieldByName('SERIE').AsString))); // Número série ecf
            end;
          end
          else
          begin // Hash não confere. Elimina do cripta
            EliminaECFCripta(IBQECFS.FieldByName('SERIE').AsString);
            try
              IBQECFSDELETAR.Close;
              IBQECFSDELETAR.SQL.Text :=
                'delete from ECFS where SERIE = ' + QuotedStr(IBQECFS.FieldByName('SERIE').AsString);
              IBQECFSDELETAR.ExecSQL;

              IBQECFSDELETAR.Transaction.Commit;
            except
              IBQECFSDELETAR.Transaction.Rollback;
            end;
          end;
          IBQECFS.Next;
        end; // while IBQ.Eof = False do
      finally
        FreeAndNil(IBQECFS);
        FreeAndNil(IBTECFS);
        IniCripta.Free;
      end;
    end;
    {Sandro Silva 2015-10-02 final}
  end;
  *)
end;

procedure TForm1.EliminaECFCripta(sNumeroSerie: String);
var
  iniCripta : TIniFile;
begin
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // 2015-10-07
  begin
    Form1.LbBlowfish1.GenerateKey(Form1.sPasta);
    iniCripta := TIniFile.Create(Form1.sArquivo);
    iniCripta.DeleteKey(CRIPTA_SECAO_ECFS_AUTORIZADAS, Form1.LbBlowfish1.EncryptString(AllTrim(sNumeroSerie)));
    iniCripta.Free;
  end;
end;

procedure TForm1.AtualizaECFOffLine;
{Sandro Silva 2015-10-02 inicio
Atualiza tabela ECFS do offline com o número dos ECF contidos no cripta}
var
  IBTECFS: TIBTransaction;
  IBQECFS: TIBQuery;
  IniCripta: TIniFile;
  slECF: TStringList;
  iECF: Integer;
  sECF: String;
begin
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // 2015-10-07
  begin

    //LogFrente('Teste 01: Atualizando ECFOffLine');

    try
      slECF     := TStringList.Create;
      IniCripta := TIniFile.Create(Form1.sArquivo);
      IBTECFS   := CriaIBTransaction(Form1.ibDataSet27.Database);
      IBQECFS   := CriaIBQuery(IBTECFS);

      Form1.LbBlowfish1.GenerateKey(Form1.sPasta);
      try
        iniCripta.ReadSection(CRIPTA_SECAO_ECFS_AUTORIZADAS, slECF);
        //LogFrente('Teste 01: Leu seção ' + CRIPTA_SECAO_ECFS_AUTORIZADAS);
      except
        //LogFrente('Teste 01: Não encontrou seção ' + CRIPTA_SECAO_ECFS_AUTORIZADAS);
        slECF.Clear;
      end;


      if slECF.Count <> 0 then
      begin
        // Só grava no cripta se existir a seção [ECF]
        if IniCripta.SectionExists('ECF') then
        begin

          try

            for iECF := 0 to slECF.Count - 1 do
            begin

              if slECF.Strings[iECF] <> '' then // 2015-11-04
              begin

                try
                  sECF := Form1.LbBlowfish1.DecryptString(slECF.Strings[iECF]);
                except
                  //LogFrente('Teste 01: Erro Form1.sPasta "' + Form1.sPasta + '"');
                  //LogFrente('Teste 01: Erro descifrar ' + slECF.Strings[iECF]);
                  sECF := '';
                end;

                if sECF <> '' then
                begin
                  IBQECFS.Close;
                  IBQECFS.SQL.Text :=
                    'select SERIE, ENCRYPTHASH ' +
                    'from ECFS ' +
                    'where SERIE = ' + QuotedStr(sECF);
                  IBQECFS.Open;

                  if IBQECFS.FieldByName('SERIE').AsString = '' then
                  begin
                    IBQECFS.Close;
                    IBQECFS.SQL.Text :=
                      'insert into ECFS (SERIE, ENCRYPTHASH) values (:SERIE, :ENCRYPTHASH)';
                    IBQECFS.ParamByName('SERIE').AsString := sECF;
                    IBQECFS.ParamByName('ENCRYPTHASH').AsString := Form1.LbBlowfish1.EncryptString(MD5Print(MD5String(sECF)));
                    try
                      IBQECFS.ExecSQL;
                      IBQECFS.Transaction.Commit;
                    except
                      IBQECFS.Transaction.Rollback;
                    end;
                  end;
                end;
              end; // if slECF.Strings[iECF] <> '' then // 2015-11-04
            end; // for iECF := 0 to slECF.Count - 1 do
          finally
            // Sandro Silva 2018-11-21  FreeAndNil(slECF);
            IniCripta.Free;
            FreeAndNil(IBQECFS);
            FreeAndNil(IBTECFS);
          end;
        end;
      end; // if slECF.Count <> 0 then
      //LogFrente('Teste 01: ECFOffLine atualizados');
    except
      //on E: Exception do
        //LogFrente('Teste 01: AtualizaECFOffLine, erro ' + E.Message);
    end;
    FreeAndNil(slECF); // Sandro Silva 2018-11-21 Memória 
  end;
end;

procedure TForm1.EmitirReducaoZ(Sender: TObject);
var
  bMsgTransmissaoRZPendente: Boolean; // Sandro Silva 2016-07-11
  iTentativa: Integer; // Sandro Silva 2017-06-19
  sDataUltimaRZ: String; // Sandro Silva 2017-06-19
begin
  bMsgTransmissaoRZPendente := False; // Sandro Silva 2016-07-11
  try
  
    //
    //  if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(True);   // Disable Keyboard & mouse
    //
    // Mesa ou cupom
    //
    // SmallMsg('Teste A');

    bChaveGerencialOk := False;
    try
      if StrToInt(sMesas) > 0 then
      begin
        Screen.Cursor             := crHourGlass;    // Cursor de Aguardo

        Form1.Button10Click(Sender); // Sandro Silva 2017-11-09 Polimig Primeiro fecha as mesas se conseguir, depois imprime as mesas abertas


        //if Application.MessageBox('teste 01 Fechamento de abertas ok?', 'Atenção', MB_YESNO + MB_ICONQUESTION) = idno then
        //    FecharAplicacao(ExtractFileName(Application.ExeName));

        Form1.MesasAbertas1Click(Sender); // Lista as mesas abertas antes da RZ

        Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
        if bChaveGerencialOk then
        begin
          bFechandoMesasAposReducaoZ := False; // 2015-10-16
          Form1.Button10Click(Sender); // Fecha as mesas abertas a mais de 2 dias antes da RZ
        end
        else
          bFechandoMesasAposReducaoZ := True; // Sandro Silva 2017-11-10 Polimig ;

        Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
      end;
    except
      Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
    end;
    //

    //if Application.MessageBox('teste 01 Fechamento de abertas e relatorio ok?', 'Atenção', MB_YESNO + MB_ICONQUESTION) = idno then
    //    FecharAplicacao(ExtractFileName(Application.ExeName));

    Display('Aguarde... Emitindo a Redução Z', 'Aguarde...'); // Sandro Silva 2016-03-02
    //SmallMsg('Teste B');

    try
      if Form1.sModeloECF = '01' then _ecf01_ReducaoZ(True);
      if Form1.sModeloECF = '02' then _ecf02_ReducaoZ(True);
      if Form1.sModeloECF = '03' then _ecf03_ReducaoZ(True);
      if Form1.sModeloECF = '12' then _ecf12_ReducaoZ(True);
      if Form1.sModeloECF = '14' then _ecf14_ReducaoZ(True);
      if Form1.sModeloECF = '15' then _ecf15_ReducaoZ(True);
      if Form1.sModeloECF = '17' then _ecf17_ReducaoZ(True); // Ok 2015-08-24
      if Form1.sModeloECF = '59' then _ecf59_ReducaoZ(True);
      if Form1.sModeloECF = '65' then _ecf65_ReducaoZ(True);
      if Form1.sModeloECF = '99' then _ecf99_ReducaoZ(True);
      {Sandro Silva 2021-07-22 inicio
      if Form1.sModeloECF = '04' then _ecf04_ReducaoZ(True);
      if Form1.sModeloECF = '05' then _ecf05_ReducaoZ(True);
      if Form1.sModeloECF = '06' then _ecf06_ReducaoZ(True);
      if Form1.sModeloECF = '07' then _ecf07_ReducaoZ(True);
      if Form1.sModeloECF = '08' then _ecf08_ReducaoZ(True);
      if Form1.sModeloECF = '09' then _ecf09_ReducaoZ(True);
      if Form1.sModeloECF = '10' then _ecf10_ReducaoZ(True);
      if Form1.sModeloECF = '11' then _ecf11_ReducaoZ(True);
      }
    except
    
    end;
    //

    try
      Form1.ibDataset88.Close;
      Form1.ibDataset88.SelectSQL.Clear;
      Form1.ibDataset88.SelectSQL.Add('select first 1 * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora) + ' order by DATA desc');
      Form1.ibDataset88.Open;
      sDataUltimaRZ := Form1.ibDataset88.FieldByName('DATA').AsString; // Data da última RZ gravada no banco
    except
    end;

    Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
    Sleep(10000);
    //
    try
      Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
      //Demais('RZ'); // 2015-09-18
      // 2015-11-11 Bematech demora o retorno da redução GravaUltimaReducao(True);
      //ShowMessage('Teste 01 Vai salvar dados da Z');
      iTentativa := 0;
      while GravaUltimaReducao(True) = False do
      begin // Aguarda redução ser concluída pelo ECF
        Inc(iTentativa);
        Sleep(10000);
        if iTentativa >= 3 then
          Break;
      end;
    except end;
    //

    //SmallMsg('Teste D');

    try
      commitatudo(True); // Redução Z
    except end;

    try
      Form1.ibDataset88.Close;
      Form1.ibDataset88.SelectSQL.Clear;
      Form1.ibDataset88.SelectSQL.Add('select first 1 * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora) + ' order by DATA desc');
      Form1.ibDataset88.Open;
      if sDataUltimaRZ <> Form1.ibDataset88.FieldByName('DATA').AsString then // Data da última RZ gravada no banco
      begin

        Demais('RZ'); // 2015-09-18

        try
          Commitatudo(True); // DEMAIS-RZ
        except end;

        try
          Form1.ibDataset88.Close;
          Form1.ibDataset88.SelectSQL.Clear;
          Form1.ibDataset88.SelectSQL.Add('select first 1 * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora) + ' order by DATA desc');
          Form1.ibDataset88.Open;

          // Gera XML do Bloco X para Redução Z
          Form1.BlocoXReducaoZ1(Form1.sNumeroDeSerieDaImpressora, ''); // EmitirReducaoZ()
          bMsgTransmissaoRZPendente := True;

        except
        end;

        //SmallMsg('Teste E');
        //
        //
        //      if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
        //

        EstoqueDoDia(True);

        if Form1.sModeloECF = '15' then
        begin
          // Para abrir jornanda precisa de leitura X
          if _ecf15_Abrir_Jornada then
          begin

          end;
        end;

        //SmallMsg('Teste F');

        //
        // Se não imprimimiu é porque a redução Z estava pendente
        // então imprime depois da Z
        //
        if (not bChaveGerencialOk) or (bFechandoMesasAposReducaoZ) then
        begin
          try
            if StrToInt(sMesas) > 0 then
            begin
              //

              // Primeiro fecha as mesas abertas pra depois emitir mesas abertas
              Form1.Button10Click(Sender); // Fecha mesas na RZ  // Sandro Silva 2017-11-10 Polimig

              Screen.Cursor          := crHourGlass;    // Cursor de Aguardo
              Form1.MesasAbertas1Click(Sender); // Lista as mesas abertas após a RZ
              Screen.Cursor          := crHourGlass;    // Cursor de Aguardo
              bFechandoMesasAposReducaoZ := True; // 2015-10-16
              //
            end;
          except
            SmallMsg('Erro ao emitir relatório de ' + sMesasOuContas + ' abertas após a redução Z.');
          end;
        end;
        //
        try
          //
          // Gravar os dados no arquivo
          //
          // Form7.DateTimePicker1.Date := Date;
          // Form7.DateTimePicker2.Date := Date;
          //
          // A data vem lá do gravareducao
          //
          try
            Application.BringToFront; // 2015-11-11
          except
          end;

          bData := False;
          Form1.Estoquetotal1Click(Sender);
          //  Form1.MovimentoporECF1Click(Sender);
          bData := True;
          //
        except

        end;

        if bMsgTransmissaoRZPendente then
        begin // Depois de realizar todas as tarefas exibe mensagem de alerta referente as RZ não transmitidas
          BlocoxTransmitirPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora); // Sandro Silva 2017-03-21
          BlocoXAlertarPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora, True); // Sandro Silva 2017-11-09 Polimig
        end;

        {Sandro Silva 2022-12-06 Início Unochapeco
        ///
        /// Fernando-Unochapeco orientou que pode ser gerado manualmente o estoque anual
        ///
        BlocoXEstoque1(StrToDate('01' + FormatDateTime('/mm/yyyy', IncMonth(Date, -1))),
                      StrToDate(IntToStr(DaysInAMonth(YearOf(IncMonth(Date, -1)), MonthOf(IncMonth(Date, -1)))) + FormatDateTime('/mm/yyyy', IncMonth(Date, -1))), '');
        }
        BlocoxTransmitirPendente1('ESTOQUE', ''); // Sandro Silva 2016-02-27
        BlocoXAlertarPendente1('ESTOQUE', '', True); // Sandro Silva 2019-09-23 UnoChapeco
        {Sandro Silva 2017-03-21 final}

      end;
    except
    end;
  finally
    //
    //
    //      if FunctionDetect('USER32.DLL','BlockInput',@xBlockInput) then xBlockInput(False);  // Enable  Keyboard & mouse
    //
  end;

end;

function TForm1.SQLSelectDadosRequisitoXXIV: String;
begin
  Result := 'select first 1 CONTADORZ as CRZ, ALIQUOTA16 as CRO, cast(TOTALF as numeric(18, 2)) as VENDABRUTA ' +
            'from REDUCOES ' +
            'where SERIE = ' + QuotedStr(Form1.sNumeroDeSerieDaImpressora) +
            ' and coalesce(CONTADORZ, ''0000'') <> ''0000'' ' +
            ' and coalesce(ALIQUOTA16, 0) > 0 ' +
            ' order by CONTADORZ desc';
end;

procedure TForm1.EstoqueSuficiente(sCodigo: String; sDescricao: String; dQtd: Double; var sMensagem: String);
var
  dQtdCanceladaSemCommit: Double;
  dQtdVendaSemCommit: Double;
begin
  // Primeiro verifica se todos os produtos orçados tem estoque suficiente
  if ((Pos('<b>', Trim(sDescricao)) = 0) and (RightStr(Trim(sDescricao), 4) <> '</b>')) // Bandeira do cartão
    and ((Pos('<c>', Trim(sDescricao)) = 0) and (RightStr(Trim(sDescricao), 4) <> '</c>')) // Venda a cartão
    and ((Pos('<d>', Trim(sDescricao)) = 0) and (RightStr(Trim(sDescricao), 4) <> '</v>')) // Parcelas
    and ((Pos('<f>', Trim(sDescricao)) = 0) and (RightStr(Trim(sDescricao), 4) <> '</m>')) // frete
    and (AnsiUpperCase(Trim(sDescricao)) <> 'DESCONTO') // Descontos
  then
  begin
    //
    try
      ibDataSet4.Close;
      ibDataSet4.SelectSQL.Clear;
      ibDataSet4.SelectSQL.Add('select * from ESTOQUE where CODIGO = ' + QuotedStr(Alltrim(sCodigo)) + ' and coalesce(ATIVO, 0) = 0 ');
      ibDataSet4.Open;
      if (Trim(ibDataSet4.FieldByName('DESCRICAO').AsString) = '') or (Trim(sDescricao) <> Trim(ibDataSet4.FieldByName('DESCRICAO').AsString)) then
      begin
        if Trim(sMensagem) <> '' then
          sMensagem := sMensagem + #13 + #10;
        sMensagem := 'Produto Não encontrado no estoque: ' + Trim(sCodigo) + '-' + Trim(sDescricao);
      end
      else
      begin
        if (Trim(ibDataSet4.FieldByName('DESCRICAO').AsString) <> '') and (ibDataSet4.FieldByName('CODIGO').AsString = sCodigo) then // 2016-01-19 Sandro Silva Desconsiderar observações e linhas em branco
        begin
          Form1.IBQuery3.Close;
          Form1.IBQuery3.SQL.Clear;
          Form1.IBQuery3.SQL.Add('select * from COMPOSTO where CODIGO = ' + QuotedStr(ibDataSet4.FieldByName('CODIGO').AsString)+' ');
          Form1.IBQuery3.Open;
          //
          if (ibDataSet4.FieldByName('TIPO_ITEM').AsString <> '09') then // 2016-01-19 Sandro Silva serviços não altera a quantidade
          begin
            dQtdCanceladaSemCommit := QtdCanceladaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString);
            dQtdVendaSemCommit     := QtdVendaSemCommit(ibDataSet4.FieldByName('CODIGO').AsString);
            if (dQtd > (ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + dQtdCanceladaSemCommit - dQtdVendaSemCommit)) and (Form1.ConfNegat = 'Não') then // Sandro Silva 2018-10-24 if dQtd > (ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + dQtdCanceladaSemCommit - dQtdVendaSemCommit) then
            begin
              if Form1.ibDataSet4.FieldByName('CODIGO').AsString <> Form1.IBQuery3.FieldByName('CODIGO').AsString then
              begin
                if Trim(sMensagem) <> '' then
                  sMensagem := sMensagem + #13 + #10;
                sMensagem := sCodigo + ' - ' + sDescricao + ': Estoque atual (' +
                  FloatToStr(StrToFloat(FormatFloat('0.000000', (ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + dQtdCanceladaSemCommit - dQtdVendaSemCommit)))) + // Sandro Silva 2019-09-23 UnoChapeco FloatToStr((ibDataSet4.FieldByName('QTD_ATUAL').AsFloat + dQtdCanceladaSemCommit - dQtdVendaSemCommit)) +
                  '), lançado (' + FloatToStr(dQtd) + ')'; // Sugestão de mensagem do Gian
              end;
            end;
          end;
        end;

      end;
    except
      sMensagem := 'Erro ao checar estoque';
    end;
  end;
end;

procedure TForm1.ExcluiRZDuplicada(IBTransaction: TIBTransaction);
// 2015-11-04 Exclui as reduçoes Z duplicadas, descarregadas pelo OFFLINE
// Transaction tem o database que está conectado
var
  IBQDUPLICADA: TIBQuery;
  IBQREDUCAOZ: TIBQuery;
  IBQHASH: TIBQuery;
  IBDSREDUCOES: TIBDataSet;
  iCRZDuplicado: Integer;
begin
  IBQDUPLICADA := CriaIBQuery(IBTransaction);
  IBQREDUCAOZ  := CriaIBQuery(IBTransaction);
  IBQHASH      := CriaIBQuery(IBTransaction);

  IBDSREDUCOES := TIBDataSet.Create(Application);
  IBDSREDUCOES.Database        := IBTransaction.DefaultDatabase;
  IBDSREDUCOES.Transaction     := IBTransaction;
  IBDSREDUCOES.BufferChunks    := 100; // Sandro Silva 2020-06-16  1000;
  IBDSREDUCOES.CachedUpdates   := False;
  IBDSREDUCOES.DeleteSQL.Text  := Form1.ibDataset88.DeleteSQL.Text;
  IBDSREDUCOES.InsertSQL.Text  := Form1.ibDataset88.InsertSQL.Text;
  IBDSREDUCOES.ModifySQL.Text  := Form1.ibDataset88.ModifySQL.Text;
  IBDSREDUCOES.RefreshSQL.Text := Form1.ibDataset88.RefreshSQL.Text;

  try
    try
      IBQDUPLICADA.Close;
      IBQDUPLICADA.SQL.Text :=
        'select coalesce(CONTADORZ, '''') as CONTADORZ, SERIE, count(coalesce(CONTADORZ, '''')) as DUPLICADOS ' +
        'from REDUCOES ' +
        'where coalesce(SMALL, ''59'') <> ''59'' and coalesce(SMALL, ''65'') <> ''65'' and coalesce(SMALL, ''99'') <> ''99'' ' + // Sandro Silva 2021-08-11  'where coalesce(SMALL, ''59'') <> ''59'' and coalesce(SMALL, ''65'') <> ''65'' ' +
        'group by coalesce(CONTADORZ, ''''), SERIE ' +
        'having count(coalesce(CONTADORZ, '''')) > 1 ' +
        'order by SERIE, CONTADORZ';
      IBQDUPLICADA.Open;

      while IBQDUPLICADA.Eof = False do
      begin
        //selecionar as reducoes com contadorz repetido
        IBQREDUCAOZ.Close;
        IBQREDUCAOZ.SQL.Text :=
          'select REGISTRO ' +
          'from REDUCOES ' +
          'where CONTADORZ = ' + QuotedStr(IBQDUPLICADA.FieldByName('CONTADORZ').AsString) +
          ' and SERIE = ' + QuotedStr(IBQDUPLICADA.FieldByName('SERIE').AsString) +
          ' order by REGISTRO';
        IBQREDUCAOZ.Open;
        IBQREDUCAOZ.First;

        iCRZDuplicado := StrToIntDef(IBQDUPLICADA.FieldByName('DUPLICADOS').AsString, 0);

        IBQREDUCAOZ.First;
        while IBQREDUCAOZ.Eof = False do
        begin
          if IBQREDUCAOZ.RecNo < iCRZDuplicado then
          begin
            //deletar menos o último
            try

              IBDSREDUCOES.Close;
              IBDSREDUCOES.SelectSQL.Text :=
                'select * ' +
                'from REDUCOES ' +
                'where REGISTRO = ' + QuotedStr(IBQREDUCAOZ.FieldByName('REGISTRO').AsString);
              IBDSREDUCOES.Open;

              IBDSREDUCOES.Delete;

              // Decrementa HASH de REDUCOES
              IBQHASH.Close;
              IBQHASH.SQL.Clear;
              IBQHASH.SQL.Add('select gen_id(G_HASH_REDUCOES, -1) from rdb$database');
              IBQHASH.Open;

              HasHs('REDUCOES', True);
            except
            end;

          end;
          IBQREDUCAOZ.Next;
        end;

        // Após excluir duplicados atualiza REDUCOES.CUPOMI e REDUCOES.TOTALI, da última RZ, com os valores da RZ anterior
        // e REDUCOES.REGISTRO com próximo incremento de G_REDUCOES

        IBQREDUCAOZ.Close;
        IBQREDUCAOZ.SQL.Text :=
          'select CUPOMF, TOTALF ' +
          'from REDUCOES ' +
          'where CONTADORZ = ' + QuotedStr(FormatFloat('0000', StrToIntDef(IBQDUPLICADA.FieldByName('CONTADORZ').AsString, 0) - 1)) +
          ' and SERIE = ' + QuotedStr(IBQDUPLICADA.FieldByName('SERIE').AsString);
        IBQREDUCAOZ.Open;

        try
          IBDSREDUCOES.Close;
          IBDSREDUCOES.SelectSQL.Text :=
            'select first 1 * ' +
            'from REDUCOES ' +
            'where CONTADORZ = ' + QuotedStr(IBQDUPLICADA.FieldByName('CONTADORZ').AsString) +
            ' and SERIE = ' + QuotedStr(IBQDUPLICADA.FieldByName('SERIE').AsString) +
            ' order by REGISTRO desc';
          IBDSREDUCOES.Open;

          if IBDSREDUCOES.FieldByName('REGISTRO').AsString <> '' then // 2015-11-09
          begin
            IBDSREDUCOES.Edit;
            IBDSREDUCOES.FieldByName('CUPOMI').AsString := IBQREDUCAOZ.FieldByName('CUPOMF').AsString;
            IBDSREDUCOES.FieldByName('TOTALI').AsString := IBQREDUCAOZ.FieldByName('TOTALF').AsString;
            AssinaRegistro('REDUCOES', IBDSREDUCOES, True);
            IBDSREDUCOES.Post;
            //LogFrente('Teste 01 Atualizou REDUCOES.CUPOMI e TOTALI ');
          end;
        except
          on E: Exception do
          begin
            //LogFrente('Teste 01 Erro ao atualizar REDUCOES.CUPOMI e TOTALI ' + E.Message);
          end;
        end;

        IBQDUPLICADA.Next;
      end;
    except
      on E: Exception do
      begin
        //LogFrente('Teste 01: Erro Carga ONLINE de Reducoes ' + E.Message);
      end;
    end;
  finally
    FreeAndNil(IBQREDUCAOZ);
    FreeAndNil(IBQDUPLICADA);
    FreeAndNil(IBDSREDUCOES);
    FreeAndNil(IBQHASH);
  end;
end;

procedure TForm1.ExcluiDemaisDuplicado(IBTransaction: TIBTransaction);
// 2015-11-04 Exclui DEMAIS duplicados, descarregadas pelo OFFLINE
// Transaction tem o database que está conectado
var
  IBQDUPLICADA: TIBQuery;
  IBQDEMAIS: TIBQuery;
  IBQHASH: TIBQuery;
  IBDSDEMAIS: TIBDataSet;
  iDuplicado: Integer;
begin
  IBQDUPLICADA := CriaIBQuery(IBTransaction);
  IBQDEMAIS    := CriaIBQuery(IBTransaction);
  IBQHASH      := CriaIBQuery(IBTransaction);

  IBDSDEMAIS   := TIBDataSet.Create(Application);
  IBDSDEMAIS.Database        := IBTransaction.DefaultDatabase;
  IBDSDEMAIS.Transaction     := IBTransaction;
  IBDSDEMAIS.BufferChunks    := 100; // Sandro Silva 2020-06-16  1000;
  IBDSDEMAIS.CachedUpdates   := False;
  IBDSDEMAIS.DeleteSQL.Text  := Form1.ibDataset38.DeleteSQL.Text;
  IBDSDEMAIS.InsertSQL.Text  := Form1.ibDataset38.InsertSQL.Text;
  IBDSDEMAIS.ModifySQL.Text  := Form1.ibDataset38.ModifySQL.Text;
  IBDSDEMAIS.RefreshSQL.Text := Form1.ibDataset38.RefreshSQL.Text;

  try
    try
      IBQDUPLICADA.Close;
      IBQDUPLICADA.SQL.Text :=
        'select count(COO) DUPLICADOS, COO, GNF, DENOMINACAO, ECF ' +
        'from DEMAIS ' +
        'group by ECF, GNF, COO, DENOMINACAO ' +
        'having count(COO) > 1 ' +
        'order by ECF, COO';
      IBQDUPLICADA.Open;

      while IBQDUPLICADA.Eof = False do
      begin
        //selecionar as DEMAIS repetido
        IBQDEMAIS.Close;
        IBQDEMAIS.SQL.Text :=
          'select REGISTRO ' +
          'from DEMAIS ' +
          'where COO = ' + QuotedStr(IBQDUPLICADA.FieldByName('COO').AsString) +
          ' and GNF = ' + QuotedStr(IBQDUPLICADA.FieldByName('GNF').AsString) +
          ' and DENOMINACAO = ' + QuotedStr(IBQDUPLICADA.FieldByName('DENOMINACAO').AsString) +                    
          ' and ECF = ' + QuotedStr(IBQDUPLICADA.FieldByName('ECF').AsString) +
          ' order by REGISTRO';
        IBQDEMAIS.Open;
        IBQDEMAIS.First;

        iDuplicado := StrToIntDef(IBQDUPLICADA.FieldByName('DUPLICADOS').AsString, 0);

        IBQDEMAIS.First;
        while IBQDEMAIS.Eof = False do
        begin
          if IBQDEMAIS.RecNo < iDuplicado then
          begin
            //deletar menos o último
          try
            IBDSDEMAIS.Close;
            IBDSDEMAIS.SelectSQL.Text :=
              'select * ' +
              'from DEMAIS ' +
              'where REGISTRO = ' + QuotedStr(IBQDEMAIS.FieldByName('REGISTRO').AsString);
            IBDSDEMAIS.Open;
            IBDSDEMAIS.Delete;

            // Decrementa HASH de DEMAIS
            IBQHASH.Close;
            IBQHASH.SQL.Clear;
            IBQHASH.SQL.Add('select gen_id(G_HASH_DEMAIS, -1) from rdb$database');
            IBQHASH.Open;

            HasHs('DEMAIS', True);
          except
          end;

          end;
          IBQDEMAIS.Next;
        end;

        IBQDUPLICADA.Next;
      end;
    except
      on E: Exception do
      begin
        //LogFrente('Teste 01: Erro Carga ONLINE de Reducoes ' + E.Message);
      end;
    end;
  finally
    FreeAndNil(IBQDEMAIS);
    FreeAndNil(IBQDUPLICADA);
    FreeAndNil(IBDSDEMAIS);
    FreeAndNil(IBQHASH);
  end;
end;

procedure TForm1.EnviarDANFCEeXMLcompactado1Click(Sender: TObject);
begin
  if EnviarDANFCEeXMLcompactado1.Checked then
  begin
    GravarParametroIni('FRENTE.INI','NFCE','ENVIAR COMPACTADO','Não');
    EnviarDANFCEeXMLcompactado1.Checked := False;
  end else
  begin
    GravarParametroIni('FRENTE.INI','NFCE','ENVIAR COMPACTADO','Sim');
    EnviarDANFCEeXMLcompactado1.Checked := True;
  end;
end;

function TForm1.ExtrairConfiguracao(sTexto, sSigla: String;
  bLimparNumero: Boolean): String;
{Sandro Silva 2012-01-11 inicio
Extrai configuração existente no texto.
Quando existir mais de uma configuração deverão estar separadas por ponto e vírgula(;)
Inicialmente usado para configuração D101-Indicador da Natureza do Frete Contratado e
D101-Código da Base de Cálculo do Crédito}
begin
  Result := '';
  sTexto := StringReplace(sTexto, ' = ', '=', [rfReplaceAll]);
  sTexto := StringReplace(sTexto, ' =', '=', [rfReplaceAll]);
  sTexto := StringReplace(sTexto, '= ', '=', [rfReplaceAll]);

  with TStringList.Create do
  begin
    NameValueSeparator := '=';
    Delimiter          := ';';
    DelimitedText      := AnsiUpperCase(sTexto);
    Result             := Values[sSigla];
    Free;
  end;

  if bLimparNumero then
    Result := LimpaNumero(Result);
end;

function TForm1.AliquotaISSConfigura: String;
var
  sAliqISS: String;
begin
  if Form1.ibDataSet14.Active = False then
  begin
    Form1.ibDataSet14.Close;
    Form1.ibDataSet14.Selectsql.Add('select * from ICM order by CFOP');
    Form1.ibDataSet14.Open;
  end;

  sAliqISS := '0000';
  Form1.ibDataSet14.First;                         // saber qual a aliquota associada //
  while not Form1.ibDataSet14.EOF do
  begin
    //
    if Form1.ibDataSet14.FieldByName('ISS').AsFloat > 0 then
    begin
      sAliqISS := StrZero(Form1.ibDataSet14.FieldByName('ISS').AsFloat * 100,4,0);
      Break;
    end;
    //
    Form1.ibDataSet14.Next;
    //
  end;
  Result := sAliqISS;
end;

function TForm1.OrdemAliquotaISSECF(bConfigurar: Boolean): String;
var
  Mais1ini  : TIniFile;
begin
  Result := '';
  try
    Mais1ini  := TIniFile.Create('FRENTE.INI');
    Result        := Mais1Ini.ReadString('Frente de caixa', 'Ordem da aliquota de ISS', 'XX');
    //
    if bConfigurar then
    begin
      if Result='XX' then
      begin
        try
          Result := Small_InputBox('Frente de caixa', 'Qual a ordem da aliquota de ISS:', '5');
          Mais1Ini.WriteString('Frente de caixa', 'Ordem da aliquota de ISS', Result);
        except end;
      end;
    end;
    //
    Mais1Ini.Free;
  except
    Result := '';
  end;
end;

function TForm1.SecaoFrente(): String;
// Retorna a Sessao do frente que estão configuradas as formas extras
begin
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
    Result := SECAO_65
  else
    Result := 'Frente de caixa';
end;

procedure TForm1.Vendaspor1Click(Sender: TObject);
begin
  RelatorioResumoDasVendas; // Sandro Silva 2022-03-29
end;

procedure TForm1.BlocoXReducaoZ1(SerieECF: String; sDataRecricar: String);
var
  IBQBLOCOX: TIBQuery;
  IBQREDUCAO: TIBQuery;
  sSqlCondicaoDataReferencia: String; // Sandro Silva 2018-08-29  
begin
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
    //and (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'FRENTE.EXE') then // Sandro Silva 2017-04-12
  begin
    IBQBLOCOX  := CriaIBQuery(Form1.ibDataset88.Transaction);
    IBQREDUCAO := CriaIBQuery(Form1.ibDataset88.Transaction);

    sSqlCondicaoDataReferencia := '';
    if sDataRecricar <> '' then
      sSqlCondicaoDataReferencia := ' and RZ.DATA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', StrToDate(sDataRecricar)));

    try
      IBQREDUCAO.Close;
      IBQREDUCAO.SQL.Text :=
        'select first 1 RZ.PDV, RZ.DATA, RZ.TIPOECF, RZ.MARCAECF, RZ.MODELOECF, RZ.VERSAOSB, ' +
        'RZ.CONTADORZ, RZ.CUPOMF as COO, RZ.ALIQUOTA16 as CRO, ' +
        'RZ.TOTALI, RZ.TOTALF, ' +
        'RZ.CANCELAMEN, RZ.DESCONTOS, ' + // Sandro Silva 2017-12-27 Polimig
        'RZ.ALIQUOTA01, RZ.ALIQUOTA02, RZ.ALIQUOTA03, RZ.ALIQUOTA04, RZ.ALIQUOTA05, RZ.ALIQUOTA06, ' +
        'RZ.ALIQUOTA07, RZ.ALIQUOTA08, RZ.ALIQUOTA09, RZ.ALIQUOTA10, RZ.ALIQUOTA11, RZ.ALIQUOTA12, ' +
        'RZ.ALIQUOTA13, RZ.ALIQUOTA14, RZ.ALIQUOTA15, RZ.ALIQUOTA17, RZ.ALIQUOTA18, RZ.ALIQUOTA19, ' +
        'RZ.ALIQU01, RZ.ALIQU02, RZ.ALIQU03, RZ.ALIQU04, RZ.ALIQU05, RZ.ALIQU06, RZ.ALIQU07, ' +
        'RZ.ALIQU08, RZ.ALIQU09, RZ.ALIQU10, RZ.ALIQU11, RZ.ALIQU12, RZ.ALIQU13, RZ.ALIQU14, RZ.ALIQU15 ' +
        ', RZ.HORA ' +
        ', D.DATA as DATAEMISSAOREDUCAOZ, D.HORA as HORAEMISSAOREDUCAOZ ' + // Sandro Silva 2017-08-02
        'from REDUCOES RZ ' +
        'left join DEMAIS D on D.ECF = RZ.SERIE ' +
          '  and D.DENOMINACAO = ''RZ'' ' +
          ' and (cast(D.COO as integer) = (cast(RZ.CUPOMF as integer)) or (cast(D.COO as integer) = (cast(RZ.CUPOMF as integer) + 1))) ' +
        ' where RZ.SERIE = ' + QuotedStr(SerieECF) +

        sSqlCondicaoDataReferencia + // Sandro Silva 2018-08-30
        ' order by RZ.CONTADORZ desc';
      IBQREDUCAO.Open;

      if IBQREDUCAO.FieldByName('DATA').AsString <> '' then // Sandro Silva 2017-11-01
      begin

        IBQBLOCOX.Close;
        IBQBLOCOX.SQL.Text :=
          'select * ' +
          'from BLOCOX ' +
          'where DATAREFERENCIA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', IBQREDUCAO.FieldByName('DATA').AsDateTime)) +
          ' and SERIE = ' + QuotedStr(SerieECF);
        IBQBLOCOX.Open;

        if (IBQBLOCOX.FieldByName('DATAREFERENCIA').AsString = '') or (sDataRecricar <> '') then // Sandro Silva 2018-08-30 if (IBQBLOCOX.FieldByName('DATAREFERENCIA').AsString = '') then
        begin

          if sDataRecricar = '' then // Sandro Silva 2018-08-30
          begin

            if Form22.Visible then
            begin
              Form22.Label6.Caption := 'Gerando Arquivo com Informações da Redução Z do PAF-ECF REQUISITO LVIII - PAF-ECF. SEFAZ - ' + Form1.ibDataSet13.FieldByName('ESTADO').AsString; // Sandro Silva 2019-05-02 Form22.Label6.Caption := 'Gerando Arquivo com Informações da Redução Z do PAF-ECF REQUISITO LVIII - PAF-ECF';
              Form22.Label6.Repaint;
            end
            else
            begin
              Form1.ExibePanelMensagem('Gerando Arquivo com Informações da Redução Z do PAF-ECF REQUISITO LVIII - PAF-ECF. SEFAZ - ' + Form1.ibDataSet13.FieldByName('ESTADO').AsString); // Sandro Silva 2019-05-02 Form1.ExibePanelMensagem('Gerando Arquivo com Informações da Redução Z do PAF-ECF REQUISITO LVIII - PAF-ECF');
            end;

          end;

          _BlocoX.XmlReducaoZ(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual), PAnsiChar(SerieECF), PAnsiChar(IBQREDUCAO.FieldByName('DATA').AsString), True, True, True);

        end;
      end;
    finally
      FreeAndNil(IBQREDUCAO);
      FreeAndNil(IBQBLOCOX);
    end;
    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible := False;
    ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
  end;
end;

procedure TForm1.xml1Click(Sender: TObject);
begin
  //BlocoXReducaoZ('EP121510000000001682');
  //BlocoXReducaoZ(Copy(GetNumeroSerieECF, 1, 20), GetCRZECF, GetCROECF, GetCOOECF, Date, Form1.sCaixa);
  //BlocoXReducaoZ('DR0812BR000000342033');// Sandro Silva 2016-03-04 POLIMIG teste gerar arquivo apenas para Shirley conferir
  //BlocoXReducaoZ(Form1.sNumeroDeSerieDaImpressora);// Sandro Silva 2016-03-04 POLIMIG teste gerar arquivo apenas para Shirley conferir
  //BlocoXReducaoZ('BE091210100011209288');
  //BlocoXEstoque(StrToDate('01' + FormatDateTime('/mm/yyyy', IncMonth(Date, -1))),
  //              StrToDate(IntToStr(DaysInAMonth(YearOf(IncMonth(Date, -1)), MonthOf(IncMonth(Date, -1)))) + FormatDateTime('/mm/yyyy', IncMonth(Date, -1))));

  //BlocoXReducaoZ('DR101500000000000346');
  //BlocoXEstoque(StrToDate('01/02/2018'), StrToDate('28/02/2018'));
  //BlocoXEstoque(StrToDate('01/01/2018'), StrToDate('31/01/2018'));

  //BlocoxConsultarRecibo;

  Screen.Cursor := crDefault;
end;

procedure TForm1.Selecionarcertificadodigital2Click(Sender: TObject);
begin
  Selecionarcertificadodigital1Click(Sender);
end;

(*
  {Sandro Silva 2022-12-06 Início Unochapeco}
///
/// Fernando-Unochapeco orientou que pode ser gerado manualmente o estoque anual
///
procedure TForm1.BlocoXEstoque1(dtInicial: TDate; dtFinal: TDate;
  sDataRecricar: String);
//
// NÃO USAR COMMITATUDO() AQUI OU EM OUTRO PONTO DO BLOCOX
//
{
var
  IBQDEMAIS: TIBQuery;
  IBQESTOQUE: TIBQuery;
  CursorOld: TCursor;
}
begin

  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin

    if Form1.bStatusRede then
    begin

      if sDataRecricar = '' then // Sandro Silva 2018-08-31
      begin

        Form1.Display('Aguarde! Analisando REQUISITO LIX...','Aguarde... Analisando xml do estoque mensal...');
        Form1.Repaint;

        Form22.Label6.Caption := 'Aguarde... Analisando xml do estoque mensal...';
        Form22.Label6.Repaint;

      end;

      CursorOld     := Screen.Cursor;
      Screen.Cursor := crHourGlass;

      IBQDEMAIS  := CriaIBQuery(Form1.ibDataSet27.Transaction);
      IBQESTOQUE := CriaIBQuery(Form1.ibDataSet27.Transaction);

      try

        // Verifica se o xml do estoque do período já exite. Gerar apenas quando não existir.
        IBQESTOQUE.Close;
        IBQESTOQUE.SQL.Text :=
          'select * ' +
          'from BLOCOX ' +
          'where TIPO = ''ESTOQUE'' ' +
          ' and DATAREFERENCIA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtFinal)) +
          ' order by DATAHORA';
        IBQESTOQUE.Open;

        if (IBQESTOQUE.FieldByName('DATAREFERENCIA').AsString = '') or (sDataRecricar <> '') then
        begin

          IBQDEMAIS.Close;
          IBQDEMAIS.SQL.Text :=
            'select count( * ) as REDUCOES ' +
            'from DEMAIS ' +
            'where DATA = current_date ' +
            ' and DENOMINACAO = ''RZ'' ';
          IBQDEMAIS.Open;


          //2. O Arquivo com Informações do Estoque Mensal do Estabelecimento deve ser gerado até o 5º dia de movimento do mês seguinte a que se refere,
          // quando o PAF-ECF comandar a emissão do primeiro documento Redução Z do dia.
          //if (IBQDEMAIS.FieldByName('REDUCOES').AsInteger <= 1) and (DayOf(Date) <= 5) then

          // Sandro Silva 2018-06-15
          //Conforme orientação recebida do auditor fiscal Bruno Nogueira (http://bell.unochapeco.edu.br/lts/?p=3332)
          //3. Alteração da data de limite para recebimento do estoque para o dia 10. Hoje está para o dia 5.
          if ((IBQDEMAIS.FieldByName('REDUCOES').AsInteger <= 1) and (_BlocoX.PermitirGerarXmlEstoqueBlocoX) ) then // Sandro Silva 2018-08-31 if (IBQDEMAIS.FieldByName('REDUCOES').AsInteger <= 1) and (DayOf(Date) <= 10) then
          begin

            if sDataRecricar = '' then // Sandro Silva 2018-08-31
            begin

              if Form22.Visible then
              begin
                Form22.Label6.Caption := 'Gerando Arquivo com Informações do Estoque Mensal do Estabelecimento REQUISITO LIX - PAF-ECF. SEFAZ - ' + Form1.ibDataSet13.FieldByName('ESTADO').AsString; // Sandro Silva 2019-05-02 Form22.Label6.Caption := 'Gerando Arquivo com Informações do Estoque Mensal do Estabelecimento REQUISITO LIX - PAF-ECF';
                Form22.Label6.Repaint;
              end
              else
              begin
                Form1.ExibePanelMensagem('Gerando Arquivo com Informações do Estoque Mensal do Estabelecimento REQUISITO LIX - PAF-ECF. SEFAZ - ' + Form1.ibDataSet13.FieldByName('ESTADO').AsString); // Sandro Silva 2019-05-02 Form1.ExibePanelMensagem('Gerando Arquivo com Informações do Estoque Mensal do Estabelecimento REQUISITO LIX - PAF-ECF');
              end;

            end;

            //ShowMessage('46200'); // Sandro Silva 2018-09-19

            _BlocoX.XmlEstoque(IBDatabase1.DatabaseName, Form1.sAtual, FormatDateTime('dd/mm/yyyy', dtInicial), FormatDateTime('dd/mm/yyyy', dtFinal), True, True, True, (sDataRecricar <> ''));

          end;

        end; // if IBQESTOQUE.FieldByName('DATAREFERENCIA').AsString = '' then
      except

      end;

      FreeAndNil(IBQDEMAIS);
      FreeAndNil(IBQESTOQUE);

      Display(Form1.sStatusECF, Form1.sF);
      Form1.Repaint;

      Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31 Form1.Panel3.Visible := False;
      ChDir(Form1.sAtual); // Sandro Silva 2017-03-31

      Screen.Cursor := CursorOld;

    end;
  end;

end;
*)

procedure TForm1.EnvioaoFISCOESTOQUEClick(
  Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LIX - Enviando os XML','Aguarde... REQUISITO LIX - Enviando os XML do Estoque');
  Screen.Cursor := crHourGlass;

  Commitatudo(True); // Antes EnvioaoFISCOESTOQUEClick()

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.IdentificaRetornosComErroTratandoTodos(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual), PAnsiChar('ESTOQUE'));

    Form1.Display('Aguarde... REQUISITO LIX - Consultando','Aguarde... REQUISITO LIX - Consultando'); // Sandro Silva 2018-11-27
    Form1.BlocoxConsultarRecibo1;

    //ShowMessage('Teste 01 46790'); // Sandro Silva 2018-11-27

    Form1.Display('Aguarde... REQUISITO LIX - Enviando os XML','Aguarde... REQUISITO LIX - Enviando os XML do Estoque'); // Sandro Silva 2018-11-27
    BlocoxTransmitirPendente1('ESTOQUE', ''); // Sandro Silva 2017-03-21

    //ShowMessage('Teste 01 46795'); // Sandro Silva 2018-11-27

    CommitaTudo(True);// EnvioaoFISCOESTOQUEClick 2017-03-22

    //ShowMessage('Teste 01 46800'); // Sandro Silva 2018-11-27

  end;

  BlocoXAlertarPendente1('ESTOQUE', Form1.sNumeroDeSerieDaImpressora, True);// Sandro Silva 2017-11-08 Polimig  BlocoXAlertarPendente('', Form1.sNumeroDeSerieDaImpressora, True);

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;
end;

function TForm1.BlocoxTransmitirPendente1(sTipo: String; sSerieECF: String;
  bAlerta: Boolean = True): Integer;
//
// NÃO USAR COMMITATUDO() AQUI OU EM OUTRO PONTO DO BLOCOX
//
begin
  Result := 0; // Sandro Silva 2017-05-20
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
    //and (AnsiUpperCase(ExtractFileName(Application.ExeName)) = 'FRENTE.EXE') then
  begin
    if BlocoXServidorConfigurado1 then
    begin
      _BlocoX.TransmitirXmlPendente(Form1.IBDatabase1.DatabaseName, Form1.sAtual, sTipo, sSerieECF, bAlerta);
    end;

    ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
  end;
end;

function TForm1.BlocoxConsultarRecibo1: Boolean;
//
// NÃO USAR COMMITATUDO() AQUI OU EM OUTRO PONTO DO BLOCOX
//
begin
  Result := False; // Sandro Silva 2018-06-28
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin

    if BlocoXServidorConfigurado1 then
    begin

//Form1.Label_CopyRight.Hint := Form1.Label_CopyRight.Hint + TimeToStr(Time) + #13; // Sandro Silva 2018-10-19

      _BlocoX.ConsultarRecibo(PAnsiChar(Form1.IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual), '');
    end;

    ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
    Result := True; // Sandro Silva 2018-06-28
  end; // if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') then

end;

procedure TForm1.EnvioaoFISCOREDUOZClick(
  Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LVIII - Enviando os XML','Aguarde... REQUISITO LVIII - Enviando os XML das Reduções');
  Screen.Cursor := crHourGlass;
  Commitatudo(True); //Antes EnvioaoFISCOREDUOZClick()

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;
    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.IdentificaRetornosComErroTratandoTodos(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual), PAnsiChar('REDUCAO'));

    Form1.BlocoxConsultarRecibo1;

    BlocoxTransmitirPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora, False);
    BlocoxTransmitirPendente1('REDUCAO', '', False); // Sandro Silva 2018-10-11 Transmitir dos demais ECF
    Commitatudo2(True); // EnvioaoFISCOESTOQUEClick 2017-03-22
    CommitaTudo(True);// EnvioaoFISCOESTOQUEClick 2017-03-22
  end;

  BlocoXAlertarPendente1('REDUCAO', Form1.sNumeroDeSerieDaImpressora, True);// Sandro Silva 2017-11-08 Polimig  BlocoXAlertarPendente('', Form1.sNumeroDeSerieDaImpressora, True);
  //BlocoXAlertarPendente('REDUCAO', Form1.sNumeroDeSerieDaImpressora, True);

  // Se precisar na homologação ativar as linhas abaixo
  // Para desbloquear PAF se não existir pendente
  //if (bBlocoxRZPendente = False) and (bBlocoxEstoquePendente = False) then
  //  TestaTudo(True);

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;
end;

function TForm1.GetTotalMesa(iMesa: Integer): Double;
var
  IBQTOTAL: TIBQuery;
begin
  IBQTOTAL := CriaIBQuery(IBQuery1.Transaction);
  IBQTOTAL.Close;
  IBQTOTAL.SQL.Clear;
  IBQTOTAL.SQL.Add('select sum(TOTAL) as TOTAL from ALTERACA where (coalesce(VENDEDOR,''XX'')<>''<cancelado>'') and (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(iMesa))); // Sandro Silva 2021-12-01 IBQTOTAL.SQL.Add('select sum(TOTAL) as TOTAL from ALTERACA where (coalesce(VENDEDOR,''XX'')<>''<cancelado>'') and (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(iMesa,6,0)));
  IBQTOTAL.Open;

  Result := IBQTOTAL.FieldByName('TOTAL').AsFloat;

  FreeAndNil(IBQTOTAL);
end;

function TForm1.GetBonecoEscolhido(iMesa: Integer): String;
var
  IBQBONECO: TIBQuery;
begin
  IBQBONECO := CriaIBQuery(IBQuery1.Transaction);
  IBQBONECO.Close;
  IBQBONECO.SQL.Clear;
  IBQBONECO.SQL.Add('select TIPODAV from ALTERACA where TIPODAV<>'''' and (coalesce(VENDEDOR,''XX'')<>''<cancelado>'') and (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(FormataNumeroDoCupom(iMesa))); // Sandro Silva 2021-12-01 IBQBONECO.SQL.Add('select TIPODAV from ALTERACA where TIPODAV<>'''' and (coalesce(VENDEDOR,''XX'')<>''<cancelado>'') and (TIPO=''MESA'' or TIPO=''DEKOL'') and PEDIDO='+QuotedStr(StrZero(iMesa,6,0)));
  IBQBONECO.Open;
  //
  Result := IBQBONECO.FieldByName('TIPODAV').AsString;

  FreeAndNil(IBQBONECO);
end;

procedure TForm1.touch_F9Click(Sender: TObject);
begin
  keybd_event(VK_F9, 0, 0, 0);
  keybd_event(VK_F9, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.LabelF9Click(Sender: TObject);
begin
  keybd_event(VK_F9, 0, 0, 0);
  keybd_event(VK_F9, 0, KEYEVENTF_KEYUP, 0);
end;

procedure TForm1.Button13Click(Sender: TObject);
begin
  if (not Form1.Memo1.Visible) then // Quando tem cupom aberto não
  begin
    //
    if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then 
      PopupMenu5.PopUp(Form1.touch_F9.Left, Form1.touch_F9.Top - AjustaAltura(3));
    if (Form1.sModeloECF = '65') and PAFNFCe then
      ppMenuFiscalPAFNFCe.PopUp(Form1.touch_F9.Left, Form1.touch_F9.Top - Form1.touch_F9.Height - AjustaAltura(20));
    //
  end;

end;

procedure TForm1.GeraEstoqueDia(sDataEstoque: String = '');// Sandro Silva 2016-03-03;
//passar a data? Gerar Demais e validar? Descontar a quantidade do primeiro item lançado?
//commit baixou o estoque
var
  IBQDOC: TIBQuery;
  IBQESTOQUE: TIBQuery;
  dtAtual: TDate;
  F: TextFile;
  sCodigo: String;
  sMensuracao: String;
  sQtdEstoque: String; // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco
  sHash: String; // Sandro Silva 2019-09-13 ER 02.06 UnoChapeco
begin
  IBQDOC := CriaIBQuery(Form1.ibDataSet27.Transaction);
  IBQESTOQUE := CriaIBQuery(Form1.ibDataSet27.Transaction);

  dtAtual := Date;

  if sDataEstoque <> '' then
    dtAtual := StrToDate(sDataEstoque);

  try
    if Form1.bStatusRede then
    begin
      ForceDirectories(Form1.sAtualOnLine + '\estoquedia');
      //Procura se existe o estoque do dia gerado
      if FileExists(Form1.sAtualOnLine + '\estoquedia\' + FormatDateTime('yyyymmdd', dtAtual) + '.dia') = False then
      begin

        // Não tem o estoque do dia criado
        // Procura se houve impressão de algum documento nos ECFs na data atual que atualizou o estoque dia

        IBQDOC.Close;
        IBQDOC.SQL.Text :=
          'select A.DATA, A.HORA, ''ALTERACA'' ' +
          'from ALTERACA A ' +
          'where (A.TIPO = ''BALCAO'' or A.TIPO = ''CANCEL'') ' +
          ' and A.DATA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtAtual)) +
          ' union ' +
          'select D.DATA as DATA, D.HORA as HORA, ''DEMAIS  '' ' +
          'from DEMAIS D ' +
          'where D.DATA = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtAtual)) +
          ' order by 1, 2';
        IBQDOC.Open;

        while (IBQDOC.Eof = False) or (sDataEstoque <> '') do // Sandro Silva 2019-09-16 ER 02.06 UnoChapeco while IBQDOC.Eof = False do
        begin
          if (IBQDOC.FieldByName('DATA').AsString <> '') or (sDataEstoque <> '') then // Sandro Silva 2019-09-16 ER 02.06 UnoChapeco if IBQDOC.FieldByName('DATA').AsString <> '' then
          begin // Houve impressão de documento no ECF na data atual
            if FileExists(PChar(Form1.sAtualOnLine + '\estoquedia\' + FormatDateTime('yyyymmdd', dtAtual) + '.dia')) = False then // Sandro Silva 2019-09-16 ER 02.06 UnoChapeco if FileExists(PChar(Form1.sAtualOnLine + '\estoquedia\' + FormatDateTime('yyyymmdd', IBQDOC.FieldByName('DATA').AsDateTime) + '.dia')) = False then
            begin // O estoque dia é de uma data diferente da data que foi impresso o documento na data atual, atualiza o estoque atual

              ///
              AssignFile(F,Form1.sAtualOnLine + '\estoquedia\' + FormatDateTime('yyyymmdd', dtAtual) + '.dia');
              Rewrite(F); // Abre para gravação
              //
              IBQESTOQUE.Close;
              IBQESTOQUE.SQL.Clear;
              IBQESTOQUE.SQL.Add('select CODIGO, REFERENCIA, QTD_ATUAL, ATIVO from ESTOQUE where coalesce(ATIVO,0)=0 order by CODIGO'); // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco IBQESTOQUE.SQL.Add('select CODIGO, QTD_ATUAL, ATIVO from ESTOQUE where coalesce(ATIVO,0)=0 order by CODIGO');
              IBQESTOQUE.Open;
              //
              IBQESTOQUE.First;
              while not IBQESTOQUE.EOF do
              begin
                //
                if not (IBQESTOQUE.FieldByName('ATIVO').AsString='1') then
                begin
                  //
                  try
                    if IBQESTOQUE.FieldByName('QTD_ATUAL').AsFloat >= 0 then
                      sMensuracao := '+'
                    else
                      sMensuracao := '-';
                    //
                    sCodigo := Right('00000000000000' + IBQESTOQUE.FieldByName('CODIGO').AsString, 14);
                    if Trim(IBQESTOQUE.FieldByName('REFERENCIA').AsString) <> '' then
                    begin
                      sCodigo := Right('00000000000000' + Trim(IBQESTOQUE.FieldByName('REFERENCIA').AsString), 14);
                    end;
                    //
                    sQtdEstoque := RightStr(StrTran(Strzero(IBQESTOQUE.FieldByName('QTD_ATUAL').AsFloat*1000,9,0),'-','0'), 9); // últimas 10 posições conforme ER-E2 Sandro Silva 2019-09-16 ER 02.06 UnoChapeco sQtdEstoque := StrTran(Strzero(IBQESTOQUE.FieldByName('QTD_ATUAL').AsFloat*1000,9,0),'-','0');
                    sHash := AssinaRegistroE2(sCodigo + sMensuracao + sQtdEstoque);
                    Writeln(F,'['+sCodigo+']'+sMensuracao + sQtdEstoque + sHash);
                  except

                  end;
                  //
                end;
                //
                IBQESTOQUE.Next;
                //
              end;
              //
              CloseFile(F);                                    // Fecha o arquivo
              //
              IBQESTOQUE.Close;

              Break;

              //
            end;// if FileExists(Form1.sAtualOnLine + '\estoquedia\' + FormatDateTime('yyyymmdd', IBQDOC.FieldByName('DATA').AsDateTime) + '.dia') = False then

          end;// if IBQDOC.FieldByName('DATA').AsString <> '' then

          IBQDOC.Next;

          if sDataEstoque <> '' then
            Break

        end; // while (IBQDOC.Eof = False) or (sData <> '') do
      end;// if FileExists(Form1.sAtualOnLine + '\estoquedia\' + FormatDateTime('yyyymmdd', dtAtual) + '.dia') = False then
    end;// if Form1.bStatusRede then
  except
    SmallMsg('Não foi possível atualizar o estoque do dia');
  end;
  FreeAndNil(IBQDOC);
  FreeAndNil(IBQESTOQUE); // Sandro Silva 2019-06-18
end;

procedure TForm1.AvanodePapelnoFinaldeImpressoSAT1Click(Sender: TObject);
var
  sAvanco: String;
begin
  sAvanco := LerParametroIni('Frente.ini', SECAO_59, CHAVE_INI_AVANCO_PAPEL, '0');
  sAvanco := Small_InputBox('Avanço do papel','Informe o número de linhas para avanço no final da impressão do extrato do CF-e:', sAvanco);
  if (StrToIntDef(sAvanco, 0) >= 0)
    and (StrToIntDef(sAvanco, 0) <> StrToIntDef(LerParametroIni('Frente.ini', SECAO_59, CHAVE_INI_AVANCO_PAPEL, '0'), 0)) then
  begin
    SalvarConfiguracao('Frente.ini', SECAO_59, CHAVE_INI_AVANCO_PAPEL, sAvanco);
  end;
end;

procedure TForm1.MovimentoDia1Click(Sender: TObject);
begin
  RelatorioMovimentoDia; // Sandro Silva 2022-03-29
end;

procedure TForm1.ransmitirContingncia1Click(Sender: TObject);
begin
  if Form1.IBDataSet150.IsEmpty = False then
  begin

    if Form1.bStatusECF then // Sandro Silva 2020-06-25
    begin
      if Application.MessageBox(PChar('Serão transmitidas as NFC-e emitidas em contingência em ' + FormatDateTime('dd/mm/yyyy', Form1.DateTimePicker1.Date) + #13 + #13 + 
                                      'Continuar?'), 'Transmissão contingência', MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION) = idYes then
      begin
        {Sandro Silva 2021-12-08 inicio
        _ecf65_EnviarNFCeContingencia(Form1.DateTimePicker1.Date, '', '');

        // Alerta contingência não transmitida
        _ecf65_VerificaContingenciaPendentedeTransmissao(Form1.DateTimePicker1.Date - Form1.ContingenciaPendente.LimiteDias, Form1.DateTimePicker1.Date, Form1.sCaixa); // Sandro Silva 2019-08-09
        Form1.ExibeAlertaContingenciaPendente; // Sandro Silva 2019-08-14
        Form1.Display(Form1.sStatusECF, Form1.sF);
        }

        TransmiteContingenciaAutomatico(Form1.DateTimePicker1.Date, Form1.sCaixa);

        Form1.GerenciadordeNFCe1Click(Form1.GerenciadordeNFCe1);



      end;
    end
    else
    begin
      SmallMsg('NFC-e Sem serviço');
    end; // if Form1.bStatusECF then // Sandro Silva 2020-06-25
  end;
end;

procedure TForm1.ransmitircontingncia2Click(Sender: TObject);
begin
  GerenciadordeNFCe1Click(GerenciadordeNFCe1); // Abre gerenciador
  ransmitirContingncia1Click(ransmitirContingncia1); // Transmite a contingência
  touch_ESCClick(touch_ESC2);// Fechar tela do gerenciador
end;

procedure TForm1.PopupMenu2Popup(Sender: TObject);
begin
  ransmitirContingncia1.Enabled := (NFCeemContingncia1.Checked = False);
  // Em São Paulo não é permitido emitir NFC-e em contingência, servidor rejeita
  if ((AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'SP') and (Form1.sModeloECF_Reserva = '65')) then
    ransmitirContingncia1.Enabled := False; // Sandro Silva 2020-11-11 
  EnviaraNFCe1.Enabled := PDV_CupomAberto = False; // Sandro Silva 2019-07-16
  ConsultaChaveNFCe1.Visible := (Form1.sModeloECF = '65');

end;

procedure TForm1.OcultaPanelMensagem;
begin
  Form1.Panel3.Visible  := False;
  Form1.Panel3.Repaint;
end;

procedure TForm1.ExibePanelMensagem(sMensagem: String; bUsarDisplay: Boolean = False);// Sandro Silva 2016-03-03;
begin
  if bUsarDisplay then
  begin
    Display(sMensagem, sMensagem);
  end
  else
  begin
    Form1.OcultaPanelMensagem;
    Form1.Panel3.Font.Size := Form1.LabelESC2.Font.Size;
    Form1.Panel3.BorderStyle := bsNone; // Sandro Silva 2021-09-14 Form1.Panel3.BorderStyle := bsSingle;

    Form1.Panel3.Width    := AjustaLargura(500); // Sandro Silva 2017-04-04 500;
    Form1.Panel3.Height   := AjustaAltura(100); // Sandro Silva 2017-04-04 100;
    Form1.Panel3.Top      := (Form1.Panel1.Height - Form1.Panel3.Height) div 2;
    Form1.Panel3.Left     := (Form1.Panel1.Width - Form1.Panel3.Width) div 2;
    Form1.Panel3.Color    := $00AFD39D;// verde Sandro Silva 2017-09-15

    if Form1.Memo1.Visible then
    begin
      Form1.Panel3.Width := Form1.Label10.Left - Form1.Memo1.BoundsRect.Right;
      if Form1.Panel2.Visible then
        Form1.Panel3.Width := Form1.Label10.Left - Form1.Panel2.BoundsRect.Right;
      Form1.Panel3.Width := Form1.Panel3.Width - AjustaLargura(MARGEM_ESQUERDA_OBJ);
      Form1.Panel3.Left  := (Form1.Label10.Left - Form1.Panel3.Width - AjustaLargura(10));
    end;

    Form1.Panel3.Caption  := '';
    // Usando Label para quebra de linha automática
    Form1.lblMensagemAlerta.Font.Size  := LabelF1.Font.Size + 1; // Sandro Silva 2017-05-12 13;
    Form1.lblMensagemAlerta.Font.Style := [];
    Form1.lblMensagemAlerta.Caption    := sMensagem;

    Form1.Panel3.Visible  := True;
    Form1.Panel3.BringToFront;
    Form1.Panel3.Repaint;
  end;
end;

procedure SmallMsg(sMsg: String);
// Substituir ShowMessage por SmallMsg para tratar a exibição de mensagem quando importando Mobile
begin
  if Form1.ClienteSmallMobile.ImportandoMobile // Sandro Silva 2022-08-08 if (ImportandoMobile)
    and ((Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99')) then
    Form1.ClienteSmallMobile.LogRetornoMobile( // Sandro Silva 2022-08-08 LogRetornoMobile(
      sMsg)
  else
  begin
    Application.ProcessMessages; // Sandro Silva 2017-08-01
    ShowMessage(sMsg);
  end;
end;

function SmallMsgBox(const Text, Caption: PChar; Flags: Longint): Integer;
begin
  if Form1.ClienteSmallMobile.ImportandoMobile then // Sandro Silva 2022-08-08 if ImportandoMobile then
  begin
    Form1.ClienteSmallMobile.LogRetornoMobile( // Sandro Silva 2022-08-08 LogRetornoMobile(
      Text);
    Result := IDYES;
  end
  else
  begin
    Application.ProcessMessages; // Sandro Silva 2017-08-01
    Result := Application.MessageBox(Pchar(Text), Caption, Flags);
  end;
end;

procedure TForm1.DeletaDataSet25;
begin
  while not Form1.ibDataSet25.Eof do
  begin
    try
      Form1.ibDataSet25.Delete;
    except
      Form1.ibDataSet25.Next;
    end;
  end;
end;

procedure TForm1.VersoLeiauteSat0071Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, SECAO_59, _59_CHAVE_VERSAO_DADOS_ENTRADA, VDE_007); // Sandro Silva 2016-06-15 A partir de 01/06/2016 dependendo do SAT estar atualizado
  Form1.VersoLeiauteSat0071.Checked := True;
  Form1.VersoLeiauteSat0081.Checked := False;
end;

procedure TForm1.otalDirio1Click(Sender: TObject);
begin
  RelatorioTotalDiario; // Sandro Silva 2022-03-29
end;

procedure TForm1.touch_cima_cupomClick(Sender: TObject);
var
  iLinha: Integer;
begin
  if Form1.Memo1.Lines.Count > 10 then // Sandro Silva 2020-12-02 ficha 5201
  begin
    for iLinha := 0 to 10 do
      SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_LINEUP, 0);
  end
  else
    SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.touch_baixo_cupomClick(Sender: TObject);
var
  iLinha: Integer;
begin
  if Form1.Memo1.Lines.Count > 10 then // Sandro Silva 2020-12-02 ficha 5201
  begin
    for iLinha := 0 to 10 do
      SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_LINEDOWN, 0);
  end
  else
    SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.touch_cima_cupomDblClick(Sender: TObject);
begin
  SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_TOP, 0);
end;

procedure TForm1.touch_baixo_cupomDblClick(Sender: TObject);
begin
  SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_BOTTOM, 0);
end;

procedure ResizeBitmap32(imgo, imgd: TBitmap; nw, nh: Integer); var
  xini, xfi, yini, yfi, saltx, salty: single;
  x, y, px, py, tpix: integer;
  PixelColor: TColor;
  r, g, b: longint;
  P1: PChar;
  pix: integer;
begin
  //
  // Set target size
  //
  imgd.Width := nw;
  imgd.Height := nh;
  //
  imgo.PixelFormat := pf32bit;
  imgd.PixelFormat := pf32bit;
  //
  P1 := imgo.ScanLine[imgo.Height - 1];
//  P2 := imgd.ScanLine[imgd.Height - 1];
  //
  // Calcs width & height of every area of pixels of the source bitmap
  //
  saltx := imgo.Width / nw;
  salty := imgo.Height / nh;
  //
  yfi := 0;
  for y := 0 to nh - 1 do
  begin
    //
    // Set the initial and final Y coordinate of a pixel area
    //
    yini := yfi;
    yfi := yini + salty;
    if yfi >= imgo.Height then yfi := imgo.Height - 1;
    //
    xfi := 0;
    for x := 0 to nw - 1 do
    begin
      //
      // Set the inital and final X coordinate of a pixel area
      //
      xini := xfi;
      xfi := xini + saltx;
      if xfi >= imgo.Width then xfi := imgo.Width - 1;
      //
      // This loop calcs del average result color of a pixel area
      // of the imaginary grid
      //
      r := 0;
      g := 0;
      b := 0;
      tpix := 0;
      //
      for py := Round(yini) to Round(yfi) do
      begin
        for px := Round(xini) to Round(xfi) do
        begin
          Inc(tpix);
          pix := (imgo.Height - py - 1) * imgo.Width + px;
          if pix < 0 then pix := px;
          PixelColor := (PColor(P1 + pix*4)^);
          r := r + PixelColor shr 16 and $ff;
          g := g + PixelColor shr 08 and $ff;
          b := b + PixelColor shr 00 and $ff;
        end;
      end;
      //
      // Draws the result pixel
      //
      imgd.Canvas.Pixels[x, y] := rgb((r div tpix),(g div tpix),(b div tpix));
      //
    end;
  end;
end;

procedure TForm1.Image7Click(Sender: TObject);
var
  r1: tRect;
  B1, B2: TBitmap;
begin
  //
  Form1.touch_cima_cupom.Top := Form1.Label_11.Top - AjustaAltura(6);// Sandro Silva 2016-08-18
  try
    //
    if not FileExists(Form1.sAtual+'\inicial\frente\fundo_a_'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'.bmp') then
    begin
      //
      // Se a imagem nao existe crua a imagem na resolução certa
      //
      Form1.Image10.Picture.LoadFromFile(Form1.sAtual+'\inicial\frente\fundo_a_grande.bmp');
      //
      B1 := TBitmap.Create;
      B1.Assign(Form1.Image10.Picture.Graphic);
      B2 := TBitmap.Create;
      B1.PixelFormat := pf32bit;
      B2.PixelFormat := pf32bit;
      ResizeBitmap32(B1, B2, Screen.Width, Screen.Height);
      //
      Form1.Image7.Picture.Graphic := B2;
      Form1.Image7.Picture.SaveToFile(Form1.sAtual+'\inicial\frente\fundo_a_'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'.bmp');
      //
    end else
    begin
      Form1.Image7.Picture.LoadFromFile(Form1.sAtual+'\inicial\frente\fundo_a_'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'.bmp');
    end;

    //
    //  Lê as imagens Fundo principal
    //
    r1.Left    := AjustaLargura(0);
    r1.Top     := AjustaAltura(0);
    r1.Right   := AjustaLargura(1024);
    r1.Bottom  := AjustaAltura(420);
    //
    Form1.Image1.Picture  := Form1.Image7.Picture;
    Form1.Image1.AutoSize := False;
    Form1.Image1.Stretch  := False;
    //
    Form1.Image1.Width    := r1.Right - r1.Left;
    Form1.Image1.Height   := r1.Bottom - r1.Top;
    //
    Form1.Image1.Picture.Bitmap := CortarImagem(Form1.Image1.Picture.Graphic, Bounds(0,0,Form1.Image1.Width,Form1.Image1.Height));
    Form1.Image1.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.Image1.Width,Form1.Image1.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    //
    //  Lê as imagens botao verde
    //
    r1.Left    := AjustaLargura(14);
    r1.Top     := AjustaAltura(700);
    r1.Right   := AjustaLargura(14+90);
    r1.Bottom  := AjustaAltura(700+50);
    //
    Form1.touch_F1.Picture  := Form1.Image7.Picture;
    Form1.touch_F1.AutoSize := False;
    Form1.touch_F1.Stretch  := False;
    //
    Form1.touch_F1.Width    := r1.Right - r1.Left;
    Form1.touch_F1.Height   := r1.Bottom - r1.Top;
    //
    Form1.touch_F1.Picture.Bitmap := CortarImagem(Form1.touch_F1.Picture.Graphic, Bounds(0,0,Form1.touch_F1.Width,Form1.touch_F1.Height));
    Form1.touch_F1.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.touch_F1.Width,Form1.touch_F1.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    //
    //  Lê as imagens botao prata
    //
    r1.Left    := AjustaLargura(14+100);
    r1.Top     := AjustaAltura(700);
    r1.Right   := AjustaLargura(14+90+100);
    r1.Bottom  := AjustaAltura(700+50);
    //
    Form1.touch_ESC.Picture  := Form1.Image7.Picture;
    Form1.touch_ESC.AutoSize := False;
    Form1.touch_ESC.Stretch  := False;
    //
    Form1.touch_ESC.Width    := r1.Right - r1.Left;
    Form1.touch_ESC.Height   := r1.Bottom - r1.Top;
    //
    Form1.touch_ESC.Picture.Bitmap := CortarImagem(Form1.touch_ESC.Picture.Graphic, Bounds(0,0,Form1.touch_ESC.Width,Form1.touch_ESC.Height));
    Form1.touch_ESC.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.touch_ESC.Width,Form1.touch_ESC.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    //
    //  Lê as imagens botao vermelho
    //
    r1.Left    := AjustaLargura(14+200);
    r1.Top     := AjustaAltura(700);
    r1.Right   := AjustaLargura(14+90+200);
    r1.Bottom  := AjustaAltura(700+50);
    //
    Form1.touch_F10.Picture  := Form1.Image7.Picture;
    Form1.touch_F10.AutoSize := False;
    Form1.touch_F10.Stretch  := False;
    //
    Form1.touch_F10.Width    := r1.Right - r1.Left;
    Form1.touch_F10.Height   := r1.Bottom - r1.Top;
    //
    Form1.touch_F10.Picture.Bitmap := CortarImagem(Form1.touch_F10.Picture.Graphic, Bounds(0,0,Form1.touch_F10.Width,Form1.touch_F10.Height));
    Form1.touch_F10.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.touch_F10.Width,Form1.touch_F10.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    Form1.touch_F9.Picture := Form1.touch_F10.Picture; // Sandro Silva 2016-08-18
    //
    Form1.touch_F2.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F3.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F4.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F5.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F6.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F7.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F8.Picture  := Form1.touch_F1.Picture;
    Form1.touch_F12.Picture := Form1.touch_ESC.Picture;
    Form1.touch_F11.Picture := Form1.touch_ESC.Picture;

    if (Copy(Form1.sConcomitante,1,5) = 'CONTA')
      or (Copy(Form1.sConcomitante,1,2) = 'OS') then
    begin
      //
      //  Lê a imagen conta cliente verde (Mesa disponível)
      //
      r1.Left    := AjustaLargura(14);
      r1.Top     := AjustaAltura(490);
      r1.Right   := AjustaLargura(14+155);
      r1.Bottom  := AjustaAltura(490+90);
      //
      Form1.cartao.Picture  := Form1.Image7.Picture;
      Form1.cartao.AutoSize := False;
      Form1.cartao.Stretch  := False;
      //
      Form1.cartao.Width    := r1.Right - r1.Left;
      Form1.cartao.Height   := r1.Bottom - r1.Top;
      //
      Form1.cartao.Picture.Bitmap := CortarImagem(Form1.cartao.Picture.Graphic, Bounds(0,0,Form1.cartao.Width,Form1.cartao.Height));
      Form1.cartao.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.cartao.Width,Form1.cartao.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);

      //
      //  Lê a imagen conta cliente prata (Mesa ocupada)
      //
      r1.Left    := AjustaLargura(14+170);
      r1.Top     := AjustaAltura(490);
      r1.Right   := AjustaLargura(14+155+170);
      r1.Bottom  := AjustaAltura(490+90);
      //
      Form1.cartao_vinho.Picture  := Form1.Image7.Picture;
      Form1.cartao_vinho.AutoSize := False;
      Form1.cartao_vinho.Stretch  := False;
      //
      Form1.cartao_vinho.Width    := r1.Right - r1.Left;
      Form1.cartao_vinho.Height   := r1.Bottom - r1.Top;
      //
      Form1.cartao_vinho.Picture.Bitmap := CortarImagem(Form1.cartao_vinho.Picture.Graphic, Bounds(0,0,Form1.cartao_vinho.Width,Form1.cartao_vinho.Height));
      Form1.cartao_vinho.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.cartao_vinho.Width,Form1.cartao_vinho.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
      //
      //  Lê a imagen conta cliente vermelho (Mesa sem consumo) zzz sono
      //
      r1.Left    := AjustaLargura(14+170+170);
      r1.Top     := AjustaAltura(490);
      r1.Right   := AjustaLargura(14+155+170+170);
      r1.Bottom  := AjustaAltura(490+90);
      //
      Form1.cartao_sono.Picture  := Form1.Image7.Picture;
      Form1.cartao_sono.AutoSize := False;
      Form1.cartao_sono.Stretch  := False;
      //
      Form1.cartao_sono.Width    := r1.Right - r1.Left;
      Form1.cartao_sono.Height   := r1.Bottom - r1.Top;
      //
      Form1.cartao_sono.Picture.Bitmap := CortarImagem(Form1.cartao_sono.Picture.Graphic, Bounds(0,0,Form1.cartao_sono.Width,Form1.cartao_sono.Height));
      Form1.cartao_sono.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.cartao_sono.Width,Form1.cartao_sono.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    end;
    //
    //  Lê a imagen seta pra cima
    //
    r1.Left    := AjustaLargura(728);
    r1.Top     := AjustaAltura(638);
    r1.Right   := AjustaLargura(728+29);
    r1.Bottom  := AjustaAltura(638+35);
    //
    Form1.touch_cima.Picture  := Form1.Image7.Picture;
    Form1.touch_cima.AutoSize := False;
    Form1.touch_cima.Stretch  := False;
    //
    Form1.touch_cima.Width    := r1.Right - r1.Left;
    Form1.touch_cima.Height   := r1.Bottom - r1.Top;
    //
    Form1.touch_cima.Picture.Bitmap := CortarImagem(Form1.touch_cima.Picture.Graphic, Bounds(0,0,Form1.touch_cima.Width,Form1.touch_cima.Height));
    Form1.touch_cima.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.touch_cima.Width,Form1.touch_cima.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    //
    //  Lê a imagen seta pra baixo
    //
    r1.Left    := AjustaLargura(728);
    r1.Top     := AjustaAltura(723);
    r1.Right   := AjustaLargura(728+29);
    r1.Bottom  := AjustaAltura(723+36);// Sandro Silva 2016-08-26  AjustaAltura(723+35);
    //
    Form1.touch_baixo.Picture  := Form1.Image7.Picture;
    Form1.touch_baixo.AutoSize := False;
    Form1.touch_baixo.Stretch  := False;
    //
    Form1.touch_baixo.Width    := r1.Right - r1.Left;
    Form1.touch_baixo.Height   := r1.Bottom - r1.Top;
    //
    Form1.touch_baixo.Picture.Bitmap := CortarImagem(Form1.touch_baixo.Picture.Graphic, Bounds(0,0,Form1.touch_baixo.Width,Form1.touch_baixo.Height));
    Form1.touch_baixo.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.touch_baixo.Width,Form1.touch_baixo.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    //

    Form1.touch_cima_cupom.Width   := Form1.touch_cima.Width;
    Form1.touch_cima_cupom.Height  := Form1.touch_cima.Height;
    Form1.touch_baixo_cupom.Width  := Form1.touch_baixo.Width;
    Form1.touch_baixo_cupom.Height := Form1.touch_baixo.Height;

    Form1.touch_baixo_cupom.Picture := Form1.touch_baixo.Picture; // Sandro Silva 2016-08-18
    Form1.touch_cima_cupom.Picture  := Form1.touch_cima.Picture; // Sandro Silva 2016-08-18

    Form1.touch_cima_cupom.Top  := Form1.Label_11.Top; // Sandro Silva 2016-08-18
    Form1.touch_baixo_cupom.Top := Memo2.BoundsRect.Bottom - Form1.touch_baixo_cupom.Height; // Sandro Silva 2016-08-18

    // Aqui comenta
    if Copy(Form1.sConcomitante,1,4) = 'MESA' then
    begin
      //
      //  Lê a imagen mesa verde (Mesa disponível)
      //
      r1.Left    := AjustaLargura(14);
      r1.Top     := AjustaAltura(590);
      r1.Right   := AjustaLargura(14+155);
      r1.Bottom  := AjustaAltura(590+90);
      //
      Form1.mesa.Picture  := Form1.Image7.Picture;
      Form1.mesa.AutoSize := False;
      Form1.mesa.Stretch  := False;
      //
      Form1.mesa.Width    := r1.Right - r1.Left;
      Form1.mesa.Height   := r1.Bottom - r1.Top;
      //
      Form1.mesa.Picture.Bitmap := CortarImagem(Form1.mesa.Picture.Graphic, Bounds(0,0,Form1.mesa.Width,Form1.mesa.Height));
      Form1.mesa.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.mesa.Width,Form1.mesa.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
      //
      //  Lê a imagen (Mesa ocupada)
      //
      r1.Left    := AjustaLargura(14+170);
      r1.Top     := AjustaAltura(590);
      r1.Right   := AjustaLargura(14+155+170);
      r1.Bottom  := AjustaAltura(590+90);
      //
      Form1.vinho.Picture  := Form1.Image7.Picture;
      Form1.vinho.AutoSize := False;
      Form1.vinho.Stretch  := False;
      //
      Form1.vinho.Width    := r1.Right - r1.Left;
      Form1.vinho.Height   := r1.Bottom - r1.Top;
      //
      Form1.vinho.Picture.Bitmap := CortarImagem(Form1.vinho.Picture.Graphic, Bounds(0,0,Form1.vinho.Width,Form1.vinho.Height));
      Form1.vinho.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.vinho.Width,Form1.vinho.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
      //
      //  Lê a imagen mesa sem consumo, zzz, sono
      //
      r1.Left    := AjustaLargura(14+170+170);
      r1.Top     := AjustaAltura(590);
      r1.Right   := AjustaLargura(14+155+170+170);
      r1.Bottom  := AjustaAltura(590+90);
      //
      Form1.sono.Picture  := Form1.Image7.Picture;
      Form1.sono.AutoSize := False;
      Form1.sono.Stretch  := False;
      //
      Form1.sono.Width    := r1.Right - r1.Left;
      Form1.sono.Height   := r1.Bottom - r1.Top;
      //
      Form1.sono.Picture.Bitmap := CortarImagem(Form1.sono.Picture.Graphic, Bounds(0,0,Form1.sono.Width,Form1.sono.Height));
      Form1.sono.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.sono.Width,Form1.sono.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
      //
    end;
    //Termina aqui comentario mesa

    //    Form1.Mesa          := Form1.cartao;
    //    Form1.sono          := Form1.cartao_sono;
    //    Form1.vinho         := Form1.cartao_vinho;


    //
    //  Lê a imagen led rede
    //
    r1.Left    := AjustaLargura(911);
    r1.Top     := AjustaAltura(723);
    r1.Right   := AjustaLargura(911+15);
    r1.Bottom  := AjustaAltura(723+15);
    //
    Form1.Frame_teclado1.Image_led_verde.Picture  := Form1.Image7.Picture;
    Form1.Frame_teclado1.Image_led_verde.AutoSize := False;
    Form1.Frame_teclado1.Image_led_verde.Stretch  := False;

    //
    Form1.Frame_teclado1.Image_led_verde.Width    := r1.Right - r1.Left;
    Form1.Frame_teclado1.Image_led_verde.Height   := r1.Bottom - r1.Top;
    //
    Form1.Frame_teclado1.Image_led_verde.Picture.Bitmap := CortarImagem(Form1.Frame_teclado1.Image_led_verde.Picture.Graphic, Bounds(0,0,Form1.Frame_teclado1.Image_led_verde.Width,Form1.Frame_teclado1.Image_led_verde.Height));
    Form1.Frame_teclado1.Image_led_verde.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.Frame_teclado1.Image_led_verde.Width,Form1.Frame_teclado1.Image_led_verde.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);

    //
    //  Lê a imagen led vermelho
    //
    r1.Left    := AjustaLargura(971);
    r1.Top     := AjustaAltura(723);
    r1.Right   := AjustaLargura(971+15);
    r1.Bottom  := AjustaAltura(723+15);
    //
    Form1.Frame_teclado1.Image_led_vermelho.Picture  := Form1.Image7.Picture;
    Form1.Frame_teclado1.Image_led_vermelho.AutoSize := False;
    Form1.Frame_teclado1.Image_led_vermelho.Stretch  := False;
    //
    Form1.Frame_teclado1.Image_led_vermelho.Width    := r1.Right - r1.Left;
    Form1.Frame_teclado1.Image_led_vermelho.Height   := r1.Bottom - r1.Top;
    //
    Form1.Frame_teclado1.Image_led_vermelho.Picture.Bitmap := CortarImagem(Form1.Frame_teclado1.Image_led_vermelho.Picture.Graphic, Bounds(0,0,Form1.Frame_teclado1.Image_led_vermelho.Width,Form1.Frame_teclado1.Image_led_vermelho.Height));
    Form1.Frame_teclado1.Image_led_vermelho.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.Frame_teclado1.Image_led_vermelho.Width,Form1.Frame_teclado1.Image_led_vermelho.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);

    Form1.touch_ESC2.Picture     := Form1.touch_ESC.Picture;
    Form1.touch_PesquisaNFCe.Picture := Form1.touch_F1.Picture; // Sandro Silva 2017-12-13
    Form1.touch_OpcoesNFCe.Picture   := Form1.touch_F1.Picture; // Sandro Silva 2017-12-13

    //
    // Segunda imagen
    //
    //if FileExists(Form1.sAtual+'\inicial\frente\'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'\fundo2.bmp') then
    //begin
      //
      //Form1.Image7.Picture.LoadFromFile(Form1.sAtual+'\inicial\frente\'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'\fundo2.bmp');
    if not FileExists(Form1.sAtual+'\inicial\frente\fundo_b_'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'.bmp') then
    begin
      //
      Form1.Image10.Picture.LoadFromFile(Form1.sAtual+'\inicial\frente\fundo_b_grande.bmp');
      //
      B1 := TBitmap.Create;
      B1.Assign(Form1.Image10.Picture.Graphic);
      B2 := TBitmap.Create;
      B1.PixelFormat := pf32bit;
      B2.PixelFormat := pf32bit;
      ResizeBitmap32(B1, B2, Screen.Width, Screen.Height);
      //
      Form1.Image7.Picture.Graphic := B2;
      Form1.Image7.Picture.SaveToFile(Form1.sAtual+'\inicial\frente\fundo_b_'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'.bmp');
      //
    end else
    begin
      Form1.Image7.Picture.LoadFromFile(Form1.sAtual+'\inicial\frente\fundo_b_'+IntToStr(Screen.Width)+'x'+IntToStr(Screen.Height)+'.bmp');
    end;

    //
    //  Lê as imagens Fundo principal
    //
    r1.Left    := AjustaLargura(29);
    r1.Top     := AjustaAltura(458); // Sandro Silva 2016-08-18  AjustaAltura(460);
    r1.Right   := AjustaLargura(29 + 980);
    r1.Bottom  := AjustaAltura(458 + 291); // Sandro Silva 2016-08-18  AjustaAltura(460 + 290);
    //
    Form1.Frame_teclado1.Image4.Picture  := Form1.Image7.Picture;
    Form1.Frame_teclado1.Image4.AutoSize := False;
    Form1.Frame_teclado1.Image4.Stretch  := False;
    //
    Form1.Frame_teclado1.Image4.Width    := r1.Right - r1.Left;
    Form1.Frame_teclado1.Image4.Height   := r1.Bottom - r1.Top;
    //
    Form1.Frame_teclado1.Image4.Picture.Bitmap := CortarImagem(Form1.Frame_teclado1.Image4.Picture.Graphic, Bounds(0,0,Form1.Frame_teclado1.Image4.Width,Form1.Frame_teclado1.Image4.Height));
    Form1.Frame_teclado1.Image4.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form1.Frame_teclado1.Image4.Width,Form1.Frame_teclado1.Image4.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);
    //
    //
    //
    //  Lê as imagens das formas de pagamento
    //
    r1.Left    := AjustaLargura(29);
    r1.Top     := AjustaAltura(41);
    r1.Right   := AjustaLargura(30 + 980);
    r1.Bottom  := AjustaAltura(40 + 292);
    //
    if Form2 <> nil then // Sandro Silva 2017-07-11
    begin
      Form2.Image1.Picture  := Form1.Image7.Picture;
      Form2.Image1.AutoSize := False;
      Form2.Image1.Stretch  := False;
      //
      Form2.Image1.Width    := r1.Right - r1.Left;
      Form2.Image1.Height   := r1.Bottom - r1.Top;
      //
      Form2.Image1.Picture.Bitmap := Form1.CortarImagem(Form2.Image1.Picture.Graphic, Bounds(0,0,Form2.Image1.Width,Form2.Image1.Height));
      Form2.Image1.Picture.Bitmap.Canvas.CopyRect(Rect(0,0,Form2.Image1.Width,Form2.Image1.Height),Form1.Image7.Picture.Bitmap.Canvas,R1);

      Form2.touch_ESC.Picture := Form1.touch_ESC.Picture;
      Form2.touch_F1.Picture  := Form1.touch_F1.Picture;
      Form2.touch_F8.Picture  := Form1.touch_F8.Picture;
    end;

    Form1.DateTimePicker1.Top   := 0;
    Form1.DateTimePicker1.Left  := 0;
    Form1.DateTimePicker1.Width := Panel1.Width + AjustaLargura(50); // Sandro Silva 2017-08-22  50;
    //
    //
    //
    Form1.DateTimePicker1.Height     := Form1.Panel6.Height + AjustaAltura(5); // Sandro Silva 2017-08-22  5;
    //
    //
  except end;
  //
  //  Lê as imagens Seta pra cima e seta pra baixo
  //
  //
  ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
end;

procedure TForm1.NmerodoCredencimentodoPAFECF1Click(Sender: TObject);
var
  sCredenciamento: String;
  sCNPJ: String;
begin
  Form1.LbBlowfish1.GenerateKey(Form1.sPasta);
  sCredenciamento := LerParametroIni(Form1.sArquivo, INI_SECAO_ECF, INI_CHAVE_NUMERO_CREDENCIAMENTO_PAF, sCredenciamento);
  if sCredenciamento <> '' then
  begin
    try
      sCNPJ           := Copy(Form1.LbBlowfish1.DecryptString(sCredenciamento), 1, 18);
      sCredenciamento := Copy(Form1.LbBlowfish1.DecryptString(sCredenciamento), 19, Length(sCredenciamento));
      if sCNPJ <> Trim(FormataCpfCgc(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString))) then
        sCredenciamento := '';
    except
      sCredenciamento := '';
    end;
  end;
  sCredenciamento := Small_InputBox('Número de Credenciamento', 'Informe o número de credenciamento do PAF-ECF na SEFAZ/' + Copy(Form1.sUF, 1, 2), sCredenciamento);
  if sCredenciamento <> '' then
  begin
    try
      sCredenciamento := Form1.LbBlowfish1.EncryptString(Trim(FormataCpfCgc(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString))) + Trim(sCredenciamento));
    except
      sCredenciamento := '';
    end;
  end;
  SalvarConfiguracao(Form1.sArquivo, INI_SECAO_ECF, INI_CHAVE_NUMERO_CREDENCIAMENTO_PAF, sCredenciamento);
  SalvarConfiguracao('FRENTE.INI', 'Frente de Caixa', INI_CHAVE_NUMERO_CREDENCIAMENTO_PAF, sCredenciamento);
end;

procedure TForm1.ImprimirCESTNCMnocupomfiscal1Click(Sender: TObject);
begin
  if ImprimirCESTNCMnocupomfiscal1.Checked then
  begin
    GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IMPRIMIR_CEST, 'Não');
    ImprimirCESTNCMnocupomfiscal1.Checked := False;
  end
  else
  begin
    GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IMPRIMIR_CEST, 'Sim');
    ImprimirCESTNCMnocupomfiscal1.Checked := True;
  end;

  sImprimirCEST := LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IMPRIMIR_CEST, 'Não');

end;

function TForm1.GetAssinaturaHttpPost(sSerial: String; sCnpj: String;
  sFabricante: String; sSerieSAT: String): String;
// Obtem a assinatura associada para SAT e MFE
var
  Params: TIdMultipartFormDataStream;
begin
  Params := TIdMultipartFormDataStream.Create;
  Params.AddFormField('serial', Trim(sSerial));
  Params.AddFormField('cnpj', Trim(sCnpj));
  Params.AddFormField('serie', Trim(sSerieSAT));
  Params.AddFormField('fabricante', Trim(sFabricante));
  Result := HTTPPost('http://www.smallsoft.com.br/adm/assinatura-sat.php', Params);
  //Result := '<smallsoft><sat><assinaturaassociada>SGR-SAT SISTEMA DE GESTAO E RETAGUARDA DO SAT</assinaturaassociada><cnpjsh>16716114000172</cnpjsh></sat></smallsoft>';
  FreeAndNil(Params);
end;

function TForm1.HTTPPost(sUrl: String;
  Params: TIdMultipartFormDataStream): String;
{Sandro Silva 2011-07-07 inicio Acessa url e retornando resultado}
var
  IdHTTP1: TIdHTTP;
begin
  IdHTTP1 := TIdHTTP.Create(Application);
  try
    IdHTTP1.Request.CustomHeaders.Clear;
    IdHTTP1.Request.Clear;
    IdHTTP1.Request.ContentType     := 'application/x-www-form-urlencoded';
    IdHTTP1.Request.ContentEncoding := 'multipart/form-data';
    IdHTTP1.Request.UserAgent       := 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0';
    IdHTTP1.ReadTimeout             := 30000;
    Result := IdHTTP1.Post(sUrl, Params);
  except
    on E: Exception do
      begin
        Result := ''
      end;
  end;
  FreeAndNil(IdHTTP1);
end;

procedure TForm1.ExtrairLogdoSAT1Click(Sender: TObject);
begin
  _ecf59_ExtrairLog; // Sandro Silva 2016-10-07
end;

procedure TForm1.IdentificarCredenciadoraPoS1Click(Sender: TObject);
begin
  if Form1.IdentificarCredenciadoraPoS1.Checked then
    SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, 'Não')
  else
    SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, 'Sim');
  Form1.sIdentificaPOS := LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IDENTIFICAR_POS, 'Não');
  Form1.IdentificarCredenciadoraPoS1.Checked := (Form1.sIdentificaPOS = 'Sim');
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  {Sandro Silva 2023-05-30 inicio}
  // Timers habilitados causando exception ao fechar a aplicação;
  Timer1.Enabled    := False;
  Timer2.Enabled    := False;
  TimerHora.Enabled := False;
  Timer3.Enabled    := False;

  try
    if ValidaRecursos <> nil then
      ValidaRecursos.Free;
  except
  end;

  {Sandro Silva 2023-05-30 fim}

  // Erro access violation. Não descobri o que causa
  try
    if _59 <> nil then
      FreeAndNil(_59);
  except
  end;

  FreeAndNil(ContingenciaPendente); // Sandro Silva 2019-08-14

  //DadosTransacaoPOSElginPay.Free; // Sandro Silva 2022-02-10
  try
    if PosElginPay <> nil then
      PosElginPay.Free; // Sandro Silva 2022-02-11
  except
  end;


end;

procedure TForm1.SATInicializaoAlternativa1Click(Sender: TObject);
begin
  if SATInicializaoAlternativa1.Checked then
    SalvarConfiguracao(FRENTE_INI, SECAO_59, _59_CHAVE_METODO_CHAMADA_DLL_ALTERNATIVO, 'Não')
  else
    SalvarConfiguracao(FRENTE_INI, SECAO_59, _59_CHAVE_METODO_CHAMADA_DLL_ALTERNATIVO, 'Sim');
  Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
  FecharAplicacao(ExtractFileName(Application.ExeName));
end;

procedure TForm1.Nfcetimeout1Click(Sender: TObject);
var
  iTempo: Integer;
begin
  iTempo := Trunc(Form1.spdNFCe1.TimeOut / 1000);
  iTempo := StrToIntDef(LimpaNumero(Small_InputBox('Timeout', 'Informe o tempo em segundos para aguardar retorno do servidor', IntToStr(iTempo))), 0);
  if (iTempo >= 0) then
  begin
    if iTempo < 1000 then
      Form1.spdNFCe1.TimeOut := iTempo * 1000; // Converte em milisegundos para componente
    GravarParametroIni('frente.ini', 'nfce', 'Timeout', IntToStr(iTempo));
    SmallMsg('Novo timeout gravado: ' + IntToStr(iTempo) + ' segundos');
  end else
  begin
    SmallMsg('Timeout inválido');
  end;
end;

function TForm1.Produto(sTexto: String; var sQuantidade,
  sValor: String): String;
begin
  if (Pos('*',AllTrim(sTexto)) <> 0) and (Copy(AllTrim(sTexto), 1, 1) <> '*') then
    sQuantidade := Copy(AllTrim(sTexto),1,Pos('*',AllTrim(AllTrim(sTexto)))-1)+'*'
  else
    sQuantidade := '';
  if (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '99') then
  begin
    if Pos('$',AllTrim(sTexto)) <> 0 then
    begin
      sValor      := Copy(AllTrim(sTexto),1,Pos('$',AllTrim(AllTrim(sTexto)))-1)+'$';
      sQuantidade := StringReplace(sQuantidade, sValor, '', [rfReplaceAll]);
    end
    else
      sValor      := '';
    sValor := StringReplace(sValor, sQuantidade, '', [rfReplaceAll]);
  end;
  Result := StringReplace(StringReplace(sTexto, sValor, '', [rfIgnoreCase]), sQuantidade, '', [rfIgnoreCase])
end;

procedure TForm1.FormPaint(Sender: TObject);
begin
  //LogFrente('Teste 01: Entrando FormPaint');

  if bSystray then
  begin// Sandro Silva 2015-05-25
    Form1.Visible := False;
    CriaIcone;
    bSystray := False;
    Form22.Button1Click(Sender);
    Timer2.Interval := INTERVAL_FRENTE_MINIMIZADO; // 2015-06-23
    if Form1.ImportarvendasdoSmallMobile1.Checked then // Sandro Silva 2016-03-23
      Timer2.OnTimer(Sender);
  end;
  //LogFrente('Teste 01: Saindo FormPaint');
end;

procedure TForm1.SATConectarServidorSAT1Click(Sender: TObject);
begin
  if SATConectarServidorSAT1.Checked = False then
  begin
    SalvarConfiguracao(FRENTE_INI, SECAO_59, CHAVE_MODO_OPERACAO, 'Cliente');
    GravarParametroIni(FRENTE_INI, SECAO_59, CHAVE_CAMINHO_SERVIDOR, _59.CaminhoComunicacao);
    ConfigurarNmerodoCaixa1Click(Sender);
  end
  else
    SalvarConfiguracao(FRENTE_INI, SECAO_59, CHAVE_MODO_OPERACAO, '');
  Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
  FecharAplicacao(ExtractFileName(Application.ExeName));
  Sleep(10000); // Avitar aparecer tela informando que está abortando a aplicação Sandro Silva 2019-02-27
  Abort; // Sandro Silva 2019-02-27
end;

function TForm1.ConfiguraCaminhoComunicaoServidorSat: Boolean;
var
  sCaminho: String;
begin
  Result   := False;
  sCaminho := LerParametroIni(FRENTE_INI, SECAO_59, CHAVE_CAMINHO_SERVIDOR, _59.CaminhoComunicacao);
  sCaminho := Trim(Small_InputBox('Caminho de comunicação com Servidor SAT', 'Informe o caminho do diretório para comunição entre Servidor e Clientes SAT', sCaminho));
  if sCaminho <> '' then
  begin
    if DirectoryExists(sCaminho) then
    begin
      GravarParametroIni(FRENTE_INI, SECAO_59, CHAVE_CAMINHO_SERVIDOR, sCaminho);
      _59.CaminhoComunicacao := sCaminho;
      Result   := True;
    end;
  end;
end;

procedure TForm1.SATCaminhodecomunicaocomServidorSAT1Click(
  Sender: TObject);
begin
  if ConfiguraCaminhoComunicaoServidorSat then
    Application.MessageBox(PChar('Configuração salva'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION)
  else
    Application.MessageBox('Não foi possível acessar o caminho informado', 'Atenção', MB_OK + MB_ICONWARNING);
end;

procedure TForm1.ConfigurarNmerodoCaixa1Click(Sender: TObject);
var
  sCaixaOld: String;
begin
  sCaixaOld := Form1.sCaixa; // Sandro Silva 2020-06-30
  if sModeloECF = '59' then
  begin
    Form1.sCaixa := Right('00' + _ecf59_ConfiguraCaixaSAT(Form1.sCaixa), 3);
    _59.Caixa    := Form1.sCaixa;
    _ecf59_CriaSequencialCaixa(Form1.sCaixa);
  end;
  GravarParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, 'CAIXA', Form1.sCaixa);
  if sCaixaOld <> Form1.sCaixa then
    Audita('ALTEROU','FRENTE', Form15.UsuarioPub, 'ALTEROU NÚMERO DO CAIXA: ' + sCaixaOld + '->' + Form1.sCaixa,0,0); // Ato, Modulo, Usuário, Histórico, Valor
end;

procedure TForm1.NmerodoCredencimentodaImpressoraECF1Click(
  Sender: TObject);
var
  sCredenciamento: String;
  sCNPJ: String;
begin
  Form1.LbBlowfish1.GenerateKey(Form1.sPasta);
  sCredenciamento := LerParametroIni(Form1.sArquivo, INI_SECAO_ECF, INI_CHAVE_NUMERO_CREDENCIAMENTO_ECF, sCredenciamento);
  if sCredenciamento <> '' then
  begin
    try
      sCNPJ           := Copy(Form1.LbBlowfish1.DecryptString(sCredenciamento), 1, 18);
      sCredenciamento := Copy(Form1.LbBlowfish1.DecryptString(sCredenciamento), 19, Length(sCredenciamento));
      if sCNPJ <> Trim(FormataCpfCgc(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString))) then
        sCredenciamento := '';
    except
      sCredenciamento := '';
    end;
  end;
  sCredenciamento := Small_InputBox('Número de Credenciamento', 'Informe o número de credenciamento do ECF na SEFAZ/' + Copy(Form1.sUF, 1, 2), sCredenciamento);
  if sCredenciamento <> '' then
  begin
    try
      sCredenciamento := Form1.LbBlowfish1.EncryptString(Trim(FormataCpfCgc(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString))) + Trim(sCredenciamento));
    except
      sCredenciamento := '';
    end;
  end;
  SalvarConfiguracao(Form1.sArquivo, INI_SECAO_ECF, INI_CHAVE_NUMERO_CREDENCIAMENTO_ECF, sCredenciamento);
end;

function TForm1.BlocoXServidorConfigurado1: Boolean;
begin
  Result := False; // Sandro Silva 2017-05-20
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin
    try
      Result := _BlocoX.ServidorSefazConfigurado(Form1.ibDataSet13.FieldByName('ESTADO').AsString);
    except
      Result := False;
    end;
    ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
  end;
end;

function TForm1.BlocoXAlertarPendente1(sTipo: String; sSerieECF: String;
  bExibirAlerta: Boolean): String;
//
// NÃO USAR COMMITATUDO() AQUI OU EM OUTRO PONTO DO BLOCOX
//
// Sandro Silva 2017-03-30 Retorna mensagem de alerta com qtd de arquivos não transmitidos a Sefaz. Se bExibirAlerta = True exibe mensagem
var
  bXmlPendente: Boolean;
begin
  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin
    try

      if (sTipo = 'REDUCAO') or (sTipo = '') then
      begin

        if (Copy(Form1.sPerfil,1,1) = 'T') then // Sandro Silva 2019-06-25 ER 02.06 if (Copy(Form1.sPerfil,1,1) = 'T') or (Copy(Form1.sPerfil,1,1) = 'U') then // Sandro Silva 2017-11-10 Polimig
        begin
          bBlocoxRZPendente := False;
        end
        else
        begin
          bXmlPendente := _BlocoX.AlertaXmlPendente(Form1.IBDatabase1.DatabaseName, Form1.sAtual, 'REDUCAO', sSerieECF, bExibirAlerta);
          bBlocoxRZPendente := bXmlPendente;
        end;

      end;

      if (sTipo = 'ESTOQUE') or (sTipo = '') then
      begin
        bXmlPendente := _BlocoX.AlertaXmlPendente(Form1.IBDatabase1.DatabaseName, Form1.sAtual, 'ESTOQUE', sSerieECF, bExibirAlerta);
        bBlocoxEstoquePendente := bXmlPendente;
      end;

    except

    end;

  end;
  ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
end;

procedure TForm1.BlocoxRestaurarArquivos1(sTipo: String; sPasta: String;
  sSerieECF: String; bApenasUltimo: Boolean = False);
//
// NÃO USAR COMMITATUDO() AQUI OU EM OUTRO PONTO DO BLOCOX
//
begin
  //***** Não pode executar COMMITATUDO AQUI *****

  if (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then
  begin

    if ((sSerieECF <> '') and (AnsiContainsText(sTipo, 'REDUCAO')))
      or (AnsiContainsText(sTipo, 'ESTOQUE')) then
    begin
      try
        _BlocoX.RestaurarArquivosXML(PAnsiChar(Form1.IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual), PAnsiChar(sTipo), PAnsiChar(sSerieECF), bApenasUltimo);
      except
      end;
    end;
    ChDir(Form1.sAtual); // Sandro Silva 2017-03-31
  end;
end;

procedure TForm1.LimiteparaIdentificarConsumidor1Click(Sender: TObject);
begin
  Form1.sValorLimiteIdentificaConsumidor := Small_InputBox('Valor Limite para Identificar Consumidor', 'Informe o valor mínimo obrigatório para identificar o consumidor.', Form1.sValorLimiteIdentificaConsumidor);
  Form1.sValorLimiteIdentificaConsumidor := FormatFloat('0.00', StrToFloatDef(StringReplace(Form1.sValorLimiteIdentificaConsumidor, '.', '', [rfReplaceAll]), 0.00));
  SalvarConfiguracao(FRENTE_INI, SECAO_65, 'LIMITE IDENTIFICA', Form1.sValorLimiteIdentificaConsumidor);
end;

procedure TForm1.ConfiguraCaminhodeComunicaoIntegrador1Click(Sender: TObject);
begin
  if (UsaIntegradorFiscal()) then
    ConfiguraCaminhoIntegradorFiscal;
end;

procedure TForm1.CdigodeIdentificaodoEstabelecimentoJuntoaSEFAZ1Click(
  Sender: TObject);
begin
  if UsaIntegradorFiscal() then
    ConfiguraChaveAcessoValidadorFiscal;
end;

procedure TForm1.AdquirentesPOS1Click(Sender: TObject);
begin
  // Seleciona
  FCadAdquirentes.ShowModal;
end;

function TForm1.CalculaDescontoPromocional: Double; // Somente NFC-e e SAT.
var
  IBQITENSDESCONTO: TIBQuery;
  IBQITEM: TIBQuery;
  dDescontoItem: Double;
  dPercentualDesconto: Double;
  procedure ExcluirDescontoNaTela(sItem: String);
  var
    iLinha: Integer;
    iTotalLinhas: Integer;
  begin
    if StrToIntDef(sItem, 0) > 0 then
    begin
      iTotalLinhas := Form1.Memo1.Lines.Count -1;
      for iLinha := 0 to iTotalLinhas do
      begin
        if Pos((FormatFloat('000', StrToIntDef(sItem, 0)) + ' Desconto'), Form1.Memo1.Lines.Strings[iLinha]) > 0 then
        begin
          Form1.Memo1.Lines.Delete(iLinha + 1);// Primeiro Excluir o Valor
          Form1.Memo1.Lines.Delete(iLinha);    // Excluir o texto "Desconto"
          Break;
        end;
      end;
    end;
  end;
  
  procedure ExibirDescontoNaTela(sItem: String; sDescricao: String;
    sTexto: String);
  var
    iLinha: Integer;
  begin
    if StrToIntDef(sItem, 0) > 0 then
    begin
      for iLinha := 0 to Form1.Memo1.Lines.Count -2 do
      begin
        if (Copy(Form1.Memo1.Lines.Strings[iLinha], 1, 3) = sItem)
          and (AnsiContainsText(Form1.Memo1.Lines.Strings[iLinha], sDescricao)) then
        begin

          if iLinha + 2 >= (Form1.Memo1.Lines.Count -2) then
          begin // Se o item estiver na última posição do memo adiciona usando Add()
            Form1.Memo1.Lines.Insert(iLinha + 2, Copy(sTexto + Replicate(' ', 90), 46, 44)); // Primeiro Adiciona o valor do desconto
            Form1.Memo1.Lines.Insert(iLinha + 2, Copy(sTexto + Replicate(' ', 90), 1, 45));  // Adiciona texto "Desconto"
          end
          else
          begin
            Form1.Memo1.Lines.Insert(iLinha + 2, Copy(sTexto + Replicate(' ', 90), 46, 44)); // Primeiro Adiciona o valor do desconto
            Form1.Memo1.Lines.Insert(iLinha + 2, Copy(sTexto + Replicate(' ', 90), 1, 45));  // Adiciona texto "Desconto"
          end;
          Break;

        end;
      end;
      Form1.Memo1.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
    end;
  end;

  procedure ProcessaDescontoScanntech;// Sandro Silva 2021-05-28
  var
    CPS: TPromocoesScanntech;
  begin
    {Sandro Silva 2021-05-28 inicio}

    if TabelaExisteFB(IBDatabase1, 'CLUBEPROMOCOES') then
    begin

      // Submete a venda a rotina desconto do clube de promoções
      try
        CPS := TPromocoesScanntech.Create;

        CPS.IBDatabase  := Form1.IBDatabase1;
        CPS.IBDataSet27 := Form1.ibDataSet27;
        if CPS.AplicaPromocao(Form1.sCaixa, NumeroCupom) then
        begin
          // Seleciona os itens da venda que fazem parte de alguma promoção Scanntech
          IBQITEM.Close;
          IBQITEM.SQL.Text :=
            'select * from ' +
            '(select A.* ' +
            'from ALTERACA A ' +
            'join CLUBEPROMOCOESCONDIARTIGOS CPCA on CPCA.EAN = A.REFERENCIA ' +
            'where A.PEDIDO = :PEDIDO ' +
            'and A.CAIXA = :CAIXA ' +
            'and (A.TIPO = ''BALCAO'' or A.TIPO = ''LOKED'') ' +
            ' and A.DESCRICAO <> ''<CANCELADO>'' ' +
            ' union all ' +
            'select A.* ' +
            'from ALTERACA A ' +
            'join CLUBEPROMOCOESBENEFICIOS CPB on CPB.EAN = A.REFERENCIA ' +
            'where A.PEDIDO = :PEDIDO ' +
            'and A.CAIXA = :CAIXA ' +
            'and (A.TIPO = ''BALCAO'' or A.TIPO = ''LOKED'') ' +
            ' and A.DESCRICAO <> ''<CANCELADO>'') ' +
            ' order by ITEM';
          IBQITEM.ParamByName('CAIXA').AsString  := Form1.sCaixa;
          IBQITEM.ParamByName('PEDIDO').AsString := NumeroCupom;
          IBQITEM.Open;

          while IBQITEM.Eof = False do
          begin
            Form1.ibDataSet27.Close;
            Form1.ibDataSet27.SelectSQL.Text :=
              'select * ' +
              'from ALTERACA ' +
              'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
              ' and PEDIDO = ' + QuotedStr(NumeroCupom) +
              ' and (TIPO = ''BALCAO'' or TIPO = ''LOKED'') ' +
              ' and DESCRICAO <> ''<CANCELADO>'' ' +
              ' and DESCRICAO = ''Desconto'' ' +
              ' and coalesce(REFERENCIA, '''') like ' + QuotedStr(PREFIXO_DESCONTO_SCANNTECH + '%') + // Apenas os descontos atribuídos pelo clube de descontos
              ' and ITEM = ' + QuotedStr(IBQITEM.FieldByName('ITEM').AsString);
            Form1.ibDataSet27.Open;

            dDescontoItem := StrToFloatDef(FormatFloat('0.00', Abs(Form1.ibDataSet27.FieldByName('TOTAL').AsFloat)), 0); // Calcula o desconto promocional

            Form1.ibDataSet27.First;
            while Form1.ibDataSet27.Eof = False do
            begin
              // achar a linha do desconto do item e excluir

              if (Form1.ibDataSet27.FieldByName('TOTAL').AsFloat <> IBQITEM.FieldByName('DESCONTO').AsFloat) // valor no campo TOTAL da linha do desconto é diferente do valor no campo DESCOTO da linha do produto
                or (dDescontoItem > 0) // Tem desconto promocional
              then
              begin
                // Excluir os descontos que foram atribuídos pela promoção
                // Não excluir os descontos que foram atribuídos direto para o item

                ExcluirDescontoNaTela(IBQITEM.FieldByName('ITEM').AsString);

              end;

              Form1.ibDataSet27.Next;

            end;

            if dDescontoItem > 0 then
            begin
              // achar linha do item e adicionar o desconto
              ExibirDescontoNaTela(StrZero(IBQITEM.FieldByName('ITEM').AsInteger,3,0),
                                   Copy(IBQITEM.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25),
                                   Copy(StrZero(IBQITEM.FieldByName('ITEM').AsInteger,3,0)+' '+'Desconto'+Replicate(' ',53),1,52)+'         '+Format('%9.2n',[dDescontoItem*-1]));
            end;

            IBQITEM.Next;
          end;

        end;

        FreeAndNil(CPS);

      except

      end;

    end; // if TabelaExisteFB(IBDatabase1, 'CLUBEPROMOCOES') then
    {Sandro Silva 2021-05-28 fim}

  end;
begin
  //
  // Para ECF fica complicado controlar quando lançar mais itens do mesmo código e atribuir o desconto aos produtos já impressos no ECF.
  // Controlar para Excluir todos os itens e lançar novamente ()
  //
  Result := 0.00;
  if (Form1.sModeloECF_Reserva = '65') or (Form1.sModeloECF_Reserva = '59') or (Form1.sModeloECF_Reserva = '99') then
  begin
    try
      IBQITENSDESCONTO := CriaIBQuery(Form1.ibDataSet27.Transaction);
      IBQITEM          := CriaIBQuery(Form1.ibDataSet27.Transaction);

      Form1.Memo1.Visible  := False;
      Form1.Panel5.Visible := False;
      Form1.Memo2.Visible  := False;
      Form1.Memo3.Visible  := False;

      // Listas os produtos com desconto configurado para quantidades vendidas acima da quantidade configurada
      IBQITENSDESCONTO.Close;
      IBQITENSDESCONTO.SQL.Text :=
        'select E.QTD_PRO1, E.DESCONT1, E.QTD_PRO2, E.DESCONT2, A.CODIGO, sum(A.QUANTIDADE) as QUANTIDADE, sum(A.TOTAL) as TOTAL ' +
        'from ALTERACA A ' +
        'join ESTOQUE E on E.CODIGO = A.CODIGO ' +
        'where A.CAIXA = ' + QuotedStr(Form1.sCaixa) +
        ' and A.PEDIDO = ' + QuotedStr(NumeroCupom) +
        ' and (A.TIPO = ''BALCAO'' or A.TIPO = ''LOKED'') ' +
        ' and A.DESCRICAO <> ''<CANCELADO>'' ' +
        ' and A.DESCRICAO <> ''Desconto'' ' +
        ' and A.DESCRICAO <> ''Acréscimo'' ' +
        ' and coalesce(A.CODIGO, '''') <> '''' ' +
        'group by E.QTD_PRO1, E.DESCONT1, E.QTD_PRO2, E.DESCONT2, A.CODIGO ';
      IBQITENSDESCONTO.Open;

      while IBQITENSDESCONTO.Eof = False do
      begin

        dPercentualDesconto := 0.00;

        if ((IBQITENSDESCONTO.FieldByName('QTD_PRO1').AsFloat > 0) and (IBQITENSDESCONTO.FieldByName('DESCONT1').AsFloat > 0))
          or ((IBQITENSDESCONTO.FieldByName('QTD_PRO2').AsFloat > 0) and (IBQITENSDESCONTO.FieldByName('DESCONT2').AsFloat > 0)) then
        begin // Somente se o item tiver configurado qtd e percentual para desconto

          if IBQITENSDESCONTO.FieldByName('QUANTIDADE').AsFloat >= IBQITENSDESCONTO.FieldByName('QTD_PRO2').AsFloat then
            dPercentualDesconto := IBQITENSDESCONTO.FieldByName('DESCONT2').AsFloat
          else
            if IBQITENSDESCONTO.FieldByName('QUANTIDADE').AsFloat >= IBQITENSDESCONTO.FieldByName('QTD_PRO1').AsFloat then
              dPercentualDesconto := IBQITENSDESCONTO.FieldByName('DESCONT1').AsFloat;

          IBQITEM.Close;
          IBQITEM.SQL.Text :=
            'select * ' +
            'from ALTERACA ' +
            'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
            ' and PEDIDO = ' + QuotedStr(NumeroCupom) +
            ' and (TIPO = ''BALCAO'' or TIPO = ''LOKED'') ' +
            ' and DESCRICAO <> ''<CANCELADO>'' ' +
            ' and DESCRICAO <> ''Desconto'' ' +
            ' and CODIGO = ' + QuotedStr(IBQITENSDESCONTO.FieldByName('CODIGO').AsString);
          IBQITEM.Open;

          while IBQITEM.Eof = False do
          begin
            Form1.ibDataSet27.Close;
            Form1.ibDataSet27.SelectSQL.Text :=
              'select * ' +
              'from ALTERACA ' +
              'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
              ' and PEDIDO = ' + QuotedStr(NumeroCupom) +
              ' and (TIPO = ''BALCAO'' or TIPO = ''LOKED'') ' +
              ' and DESCRICAO <> ''<CANCELADO>'' ' +
              ' and DESCRICAO = ''Desconto'' ' +
              ' and coalesce(REFERENCIA, '''') not like ' + QuotedStr(PREFIXO_DESCONTO_SCANNTECH + '%') + // Sandro Silva 2021-05-28 Apenas os descontos atribuídos pelo clube de descontos
              ' and ITEM = ' + QuotedStr(IBQITEM.FieldByName('ITEM').AsString);
            Form1.ibDataSet27.Open;

            dDescontoItem := StrToFloatDef(FormatFloat('0.00', IBQITEM.FieldByName('TOTAL').AsFloat * dPercentualDesconto / 100), 0); // Calcula o desconto promocional

            Form1.ibDataSet27.First;
            while Form1.ibDataSet27.Eof = False do
            begin
              // achar a linha do desconto do item e excluir

              if (Form1.ibDataSet27.FieldByName('TOTAL').AsFloat <> IBQITEM.FieldByName('DESCONTO').AsFloat) // valor no campo TOTAL da linha do desconto é diferente do valor no campo DESCONTO da linha do produto
                or (dDescontoItem > 0) // Tem desconto promocional
              then
              begin
                // Excluir os descontos que foram atribuídos pela promoção
                // Não excluir os descontos que foram atribuídos direto para o item

                ExcluirDescontoNaTela(IBQITEM.FieldByName('ITEM').AsString);
                try  // Sandro Silva 2020-05-05
                  Form1.ibDataSet27.Delete; // Exclui os descontos anteriores
                except
                end;
              end
              else
                Form1.ibDataSet27.Next;

            end;

            if dDescontoItem > 0 then
            begin
              Form1.ibDataSet27.Append; // Desconto Promocional 2017-06-30

              Form1.ibDataSet27.FieldByName('TIPO').AsString      := 'BALCAO';
              Form1.ibDataSet27.FieldByName('PEDIDO').AsString    := IBQITEM.FieldByName('PEDIDO').AsString;
              Form1.ibDataSet27.FieldByName('DESCRICAO').AsString := 'Desconto';  // Desconto no item
              Form1.ibDataSet27.FieldByName('ITEM').AsString      := IBQITEM.FieldByName('ITEM').AsString;
              Form1.ibDataSet27.FieldByName('DATA').AsDateTime    := IBQITEM.FieldByName('DATA').AsDateTime;
              Form1.ibDataSet27.FieldByName('HORA').AsString      := IBQITEM.FieldByName('HORA').AsString;
              {Sandro Silva 2022-09-09 inicio}
              if Form1.sModeloECF = '65' then
                Form1.ibDataSet27.FieldByName('HORA').AsString      := FormatDateTime('HH:nn:ss', Time);
              {Sandro Silva 2022-09-09 fim}
              Form1.ibDataSet27.FieldByName('QUANTIDADE').AsFloat := 1;
              Form1.ibDataSet27.FieldByName('UNITARIO').AsFloat   := dDescontoItem * -1;
              Form1.ibDataSet27.FieldByName('TOTAL').AsFloat      := dDescontoItem * -1;
              Form1.ibDataSet27.FieldByName('CAIXA').AsString     := IBQITEM.FieldByName('CAIXA').AsString;
              Form1.ibDataSet27.FieldByName('ALIQUICM').AsString  := IBQITEM.FieldByName('ALIQUICM').AsString;
              Form1.ibDataSet27.Post;

              // achar linha do item e adicionar o desconto
              ExibirDescontoNaTela(StrZero(IBQITEM.FieldByName('ITEM').AsInteger,3,0),
                                   Copy(IBQITEM.FieldByName('DESCRICAO').AsString+Replicate(' ',25),1,25),
                                   Copy(StrZero(IBQITEM.FieldByName('ITEM').AsInteger,3,0)+' '+'Desconto'+Replicate(' ',53),1,52)+'         '+Format('%9.2n',[dDescontoItem*-1]));
            end;
            Result := Result + dDescontoItem;
            IBQITEM.Next;
          end; // while IBQITEM.Eof = False do
        end;
        IBQITENSDESCONTO.Next;
      end; // while IBQ.Eof = False do

      // Exclui o desconto de itens cancelados
      // Listas os produtos com desconto configurado para quantidades vendidas acima da quantidade configurada
      IBQITENSDESCONTO.Close;
      IBQITENSDESCONTO.SQL.Text :=
        'select E.QTD_PRO1, E.DESCONT1, E.QTD_PRO2, E.DESCONT2, A.CODIGO, sum(A.QUANTIDADE) as QUANTIDADE, sum(A.TOTAL) as TOTAL ' +
        'from ALTERACA A ' +
        'join ESTOQUE E on E.CODIGO = A.CODIGO ' +
        'where A.CAIXA = ' + QuotedStr(Form1.sCaixa) +
        ' and A.PEDIDO = ' + QuotedStr(NumeroCupom) +
        ' and (A.TIPO = ''CANCEL'' or A.TIPO = ''KOLNAC'') ' +
        ' and A.DESCRICAO = ''<CANCELADO>'' ' +
        ' and A.DESCRICAO <> ''Desconto'' ' +
        ' and A.DESCRICAO <> ''Acréscimo'' ' +
        ' and coalesce(A.CODIGO, '''') <> '''' ' +
        'group by E.QTD_PRO1, E.DESCONT1, E.QTD_PRO2, E.DESCONT2, A.CODIGO ';
      IBQITENSDESCONTO.Open;
      while IBQITENSDESCONTO.Eof = False do
      begin

        if ((IBQITENSDESCONTO.FieldByName('QTD_PRO1').AsFloat > 0) and (IBQITENSDESCONTO.FieldByName('DESCONT1').AsFloat > 0))
          or ((IBQITENSDESCONTO.FieldByName('QTD_PRO2').AsFloat > 0) and (IBQITENSDESCONTO.FieldByName('DESCONT2').AsFloat > 0)) then
        begin // Somente se o item tiver configurado qtd e percentual para desconto

          IBQITEM.Close;
          IBQITEM.SQL.Text :=
            'select * ' +
            'from ALTERACA ' +
            'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
            ' and PEDIDO = ' + QuotedStr(NumeroCupom) +
            ' and (TIPO = ''CANCEL'' or TIPO = ''KOLNAC'') ' +
            ' and DESCRICAO = ''<CANCELADO>'' ' +
            ' and DESCRICAO <> ''Desconto'' ' +
            ' and CODIGO = ' + QuotedStr(IBQITENSDESCONTO.FieldByName('CODIGO').AsString);
          IBQITEM.Open;

          while IBQITEM.Eof = False do
          begin

            ExcluirDescontoNaTela(IBQITEM.FieldByName('ITEM').AsString);

            IBQITEM.Next;
          end; // while IBQITEM.Eof = False do
        end;
        IBQITENSDESCONTO.Next;
      end; // while IBQ.Eof = False do

      // Limpa campo ALTERACA.DESCONTO quando o item tiver desconto de promoção
      Form1.ibDataSet27.Close;
      Form1.ibDataSet27.SelectSQL.Text :=
        'select A.* ' +
        'from ALTERACA A ' +
        'where A.CAIXA = ' + QuotedStr(Form1.sCaixa) +
        ' and A.PEDIDO = ' + QuotedStr(NumeroCupom) +
        ' and (A.TIPO = ''BALCAO'' or A.TIPO = ''LOKED'') ' +
        ' and A.DESCRICAO <> ''<CANCELADO>'' ' +
        ' and A.DESCRICAO <> ''Desconto'' ' +
        ' and A.DESCRICAO <> ''Acréscimo'' ' +
        ' and coalesce(A.CODIGO, '''') <> '''' ' +
        ' and coalesce(A.DESCONTO, 0) <> 0 ';
      Form1.ibDataSet27.Open;

      while Form1.ibDataSet27.Eof = False do
      begin
        // Seleciona o total de desconto lançado para o item, se for diferente limpa o campo DESCONTO
        IBQITEM.Close;
        IBQITEM.SQL.Text :=
          'select CODIGO, ITEM, sum(TOTAL) as TOTALDESCONTO ' +
          'from ALTERACA ' +
          'where CAIXA = ' + QuotedStr(Form1.sCaixa) +
          ' and PEDIDO = ' + QuotedStr(NumeroCupom) +
          ' and (TIPO = ''BALCAO'' or TIPO = ''LOKED'') ' +
          ' and DESCRICAO <> ''<CANCELADO>'' ' +
          ' and DESCRICAO = ''Desconto'' ' +
          ' and coalesce(REFERENCIA, '''') not like ' + QuotedStr(PREFIXO_DESCONTO_SCANNTECH + '%') + // Sandro Silva 2021-05-28 não considerar desconto da Scanntech          
          ' and ITEM = ' + QuotedStr(Form1.ibDataSet27.FieldByName('ITEM').AsString) +
          ' group by CODIGO, ITEM';
        IBQITEM.Open;

        if (IBQITEM.FieldByName('ITEM').AsString = Form1.ibDataSet27.FieldByName('ITEM').AsString)
          and (IBQITEM.FieldByName('TOTALDESCONTO').AsFloat <> Form1.ibDataSet27.FieldByName('DESCONTO').AsFloat) then
        begin
          Form1.ibDataSet27.Edit;  // Limpa campo DESCONTO do item vendido
          Form1.ibDataSet27.FieldByName('DESCONTO').Value := null;
        end;

        Form1.ibDataSet27.Next;
      end;

      {Sandro Silva 2021-05-28 inicio}
      ProcessaDescontoScanntech;
      {Sandro Silva 2021-05-28 fim}
      
      Commitatudo(False); // Desconto

      IBQITEM.Close;
      IBQITEM.SQL.Clear;
      IBQITEM.SQL.Text :=
        'select sum(cast(TOTAL as numeric(18,2))) as TOT ' +
        'from ALTERACA ' +
        'where PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(Form1.icupom)) + // Sandro Silva 2021-11-29 'where PEDIDO = ' + QuotedStr(strZero(Form1.icupom,6,0)) +
        ' and CAIXA = ' + QuotedStr(Form1.sCaixa) +
        ' and TIPO <> ''KOLNAC'' ' + // Sandro Silva 2019-03-26 Registro fica em dead lock, com TIPO=KOLNAC até ser destravado e processado 
        ' and DESCRICAO <> ''<CANCELADO>'' ';

      if Form1.sModeloECF_Reserva = '59' then
      begin
        IBQITEM.SQL.Add(
          ' and DESCRICAO <> ''Acréscimo'' ' +
          ' and (DESCRICAO <> ''Desconto'' or (DESCRICAO = ''Desconto'' and coalesce(ITEM, '''') <> '''')) ' +
          ' and coalesce(COO, '''') = '''' and coalesce(CCF, '''') = '''' '
          ); // Não selecionar dados de vendas antigas feitas por ECF ou NFC-e com mesmo ALTERACA.PEDIDO
      end;
      if Form1.sModeloECF_Reserva = '65' then
      begin
        IBQITEM.SQL.Add(
          'and not (DESCRICAO = ''Desconto'' and Coalesce(ITEM, ''XXX'') = ''XXX'')  ' +
          'and not (DESCRICAO = ''Acréscimo'' and Coalesce(ITEM, ''XXX'') = ''XXX'')'
          );
      end;

      if Form1.sModeloECF_Reserva = '99' then
      begin
        IBQITEM.SQL.Add(
          ' and DESCRICAO <> ''Acréscimo'' ' +
          ' and (DESCRICAO <> ''Desconto'' or (DESCRICAO = ''Desconto'' and coalesce(ITEM, '''') <> '''')) ' +
          ' and coalesce(COO, '''') = '''' and coalesce(CCF, '''') = '''' '
          ); // Não selecionar dados de vendas antigas feitas por ECF ou NFC-e com mesmo ALTERACA.PEDIDO
      end;

      IBQITEM.Open;

      Form1.fTotal := IBQITEM.FieldByname('TOT').AsFloat;

      Form1.Memo2.Lines.Text := 'Total R$ ' + AllTrim(Format('%12.2n', [Form1.fTotal]));

      Label_13.Caption := Format('%10.2n', [Form1.fTotal]);

      Display('TOTAL ' + Right(Replicate(' ', 14) + Format('%m', [Form1.fTotal]), 14), '');

      AjustarObjetosCupomNaTela;
      Form1.Teclas_touch(True);
      //
    except
    end;
    FreeAndNil(IBQITENSDESCONTO);
    FreeAndNil(IBQITEM);
  end;
end;

procedure TForm1.AjustarObjetosCupomNaTela;
begin
  try
    Form1.lbReferenciaItemCupom.AutoSize := True; // Não pode ser False Sandro Silva 2016-08-03

    //iAlturaMemo1 := Form1.Memo2.Top - (Form1.lbReferenciaItemCupom.Height) * (Form1.Memo1.Lines.Count + 2) + AjustaAltura(30); // Sandro Silva 2016-08-03

    if Form1.Memo1.Top < (AjustaAltura(210) ) then
    begin
      Form1.Memo1.Top     := Form1.Label_11.Top + AjustaAltura(35);
    end else
    begin
      Form1.lbReferenciaItemCupom.AutoSize := True; // Não pode ser False Sandro Silva 2016-08-03
      Form1.Memo1.Height  := (Form1.lbReferenciaItemCupom.Height) * (Form1.Memo1.Lines.Count + 2);
      Form1.Memo1.Top     := Form1.Memo2.Top - Form1.Memo1.Height + AjustaAltura(30);
    end;
    //
    Form1.Memo3.Top := Form1.Memo1.Top - Form1.Memo3.Height + AjustaAltura(40);

    if Form1.Memo1.Top < (AjustaAltura(210) ) then
    begin
      Form1.Memo3.Top := Form1.Label_11.Top;
      Form1.Memo1.Top := Form1.Memo3.BoundsRect.Bottom - AjustaAltura(35);
      Form1.Memo1.Height := Form1.Memo2.Top - Form1.Memo3.BoundsRect.Bottom + AjustaAltura(35);
    end;

    Form1.Panel5.Top := Form1.Memo3.Top + AjustaAltura(5);
    //
    Form1.Panel2.Top    := Form1.Memo3.Top;
    Form1.Panel2.Height := Form1.Memo2.BoundsRect.Bottom - Form1.Memo3.Top; // Sandro Silva 2017-07-28
    //
    Form1.Memo2.Repaint; // Sandro Silva 2016-08-04
    Form1.Memo3.Repaint; // Sandro Silva 2016-08-04

    Form1.Memo1.Visible := True;
    Form1.Memo2.Visible := True;
    Form1.Memo3.Visible := True;

    //
    SendMessage(Form1.Memo1.Handle, WM_VSCROLL, SB_BOTTOM, 0);
  except
  end;
end;

procedure TForm1.TEFDeletarCopiasArquivos(FsDiretorio: String);
var
  slArquivos: TStringList;
  sDirAtual: String;
  i: Integer;
  sArquivo: String;
  sTipo: String;
begin
  GetDir(0, sDirAtual);
  slArquivos := TStringList.Create;
  try
    sTipo := '*.BKP';
    while sTipo <> '' do
    begin
      slArquivos.Clear;
      ListaDeArquivos(slArquivos, diretorio_bkp_tef, sTipo);

      for I := 0 to slArquivos.Count -1 do
      begin
        sArquivo := diretorio_bkp_tef + '\' + AllTrim(slArquivos[I]);
        //
        //if AnsiContainsText(ExtractFileName(sArquivo), FsDiretorio) then
        //begin
          //
          DeleteFile(PChar(sArquivo));
          //
        //end;
      end; // for I := 0 to slDownload.Count -1 do
      if sTipo = '*.BKP' then
        sTipo := '*.BKC'
      else
        sTipo := '';
    end;
  finally
    FreeAndNil(slArquivos);
  end;

  ChDir(sDirAtual);
end;

function TForm1.TEFValorTotalAutorizado(): Currency; // Sandro Silva 2017-06-14
var
  slArquivos: TStringList;
  sDirAtual: String;
  i: Integer;
  sArquivoTEF: String;
  sNomeArquivo: String;
  sNomeTEFAutorizacao: String;
  sDebitoOuCreditoAutorizado: String;
  bRespostaValidadosFiscal: Boolean; // Sandro Silva 2018-07-03
  ModalidadeTransacao: TTipoModalidadeTransacao; // Sandro Silva 2021-07-05
begin
  GetDir(0, sDirAtual);
  slArquivos := TStringList.Create;
  Result := 0.00;

  try
    ListaDeArquivos(slArquivos, DIRETORIO_BKP_TEF, '*.BKP');

    for I := 0 to slArquivos.Count -1 do
    begin
      sArquivoTEF := DIRETORIO_BKP_TEF + '\' + AllTrim(slArquivos[I]);
      //
      // Exemplo de nome de arquivo TEF_DIAL1.BKP, TEF_DIAL2.BKP
      // Último caractere do nome deve ser número maior ou igual a zero
      sNomeArquivo := StringReplace(AnsiUpperCase(ExtractFileName(sArquivoTEF)), '.BKP', '', [rfReplaceAll]);

      sNomeTEFAutorizacao := Copy(sNomeArquivo, 1, Length(sNomeArquivo) - Length(IntToStr(I)));

      sDebitoOuCreditoAutorizado := 'CREDITO';
      ModalidadeTransacao := tModalidadeCarteiraDigital; // Sandro Silva 2021-07-05
      with TStringList.Create do
      begin
        LoadFromFile(sArquivoTEF);
        if AnsiContainsText(AnsiUpperCase(ConverteAcentos(Text)), ' DEBIT') then // Sandro Silva 2021-08-03 if AnsiContainsText(AnsiUpperCase(Text), ' DEBIT') then
        begin
          sDebitoOuCreditoAutorizado := 'DEBITO';
          ModalidadeTransacao := tModalidadeCartao; // Sandro Silva 2021-07-05
        end;

        if AnsiContainsText(AnsiUpperCase(ConverteAcentos(Text)), ' CREDIT') then // Sandro Silva 2021-08-03 if AnsiContainsText(AnsiUpperCase(Text), ' CREDIT') then
        begin
          ModalidadeTransacao := tModalidadeCartao; // Sandro Silva 2021-07-05
        end;

        if AnsiContainsText(AnsiUpperCase(Text), 'PIX ') then
        begin
          ModalidadeTransacao := tModalidadePix; // Sandro Silva 2021-07-05
        end;        

        Free;
      end;

      if StrToIntDef(Right(sNomeArquivo, Length(IntToStr(I))), -1) >= 0 then
      begin // Apenas arquivos dos primeiros cartões, não do último
        if AnsiUpperCase(CampoTEF(sArquivoTEF, '000-000')) = 'CRT' then
        begin
          if CampoTEF(sArquivoTEF, '009-000') = '0' then
          begin

            if Form1.UsaIntegradorFiscal() then
            begin

              Form1.IntegradorCE.SelecionarDadosAdquirente('FRENTE.INI', sNomeTEFAutorizacao, Form1.sUltimaAdquirenteUsada);
              bRespostaValidadosFiscal := EnviarPagamentoValidadorFiscal('CARTAO TEF', Abs(Form1.TEFValorTransacao(sArquivoTEF)), FormataNumeroDoCupom(Form1.icupom), Form1.sCaixa, False); // Sandro Silva 2021-11-29 bRespostaValidadosFiscal := EnviarPagamentoValidadorFiscal('CARTAO TEF', Abs(Form1.TEFValorTransacao(sArquivoTEF)), StrZero(Form1.icupom, 6, 0), Form1.sCaixa, False);

            end
            else
              bRespostaValidadosFiscal := True;

            if bRespostaValidadosFiscal then
            begin

              Result := Result + Form1.TEFValorTransacao(sArquivoTEF);
              Form1.TransacoesCartao.Transacoes.Adicionar(sNomeTEFAutorizacao, Form1.sDebitoOuCredito, Form1.TEFValorTransacao(sArquivoTEF), CampoTEF(sArquivoTEF, '010-000'), CampoTEF(sArquivoTEF, '012-000'), CampoTEF(sArquivoTEF, '013-000'), CampoTEF(sArquivoTEF,'010-000'), ModalidadeTransacao); // Sandro Silva 2021-07-05 Form1.TransacoesCartao.Transacoes.Adicionar(sNomeTEFAutorizacao, Form1.sDebitoOuCredito, Form1.TEFValorTransacao(sArquivoTEF), CampoTEF(sArquivoTEF, '010-000'), CampoTEF(sArquivoTEF, '012-000'), CampoTEF(sArquivoTEF, '013-000'), CampoTEF(sArquivoTEF,'010-000'));
            end;

          end;
        end;
      end; //if StrToIntDef(Right(sNomeArquivo, Length(IntToStr(I))), -1) >= 0 then
    end; // for I := 0 to slDownload.Count -1 do
  finally
    FreeAndNil(slArquivos);
  end;

  ChDir(sDirAtual);
end;

function TForm1.TEFValorTransacao(sArquivoTEF: String): Currency;
begin
  Result := (StrToIntDef(LimpaNumero(CampoTEF(sArquivoTEF, '003-000')), 0) / 100);
end;

function TForm1.TEFTextoImpressaoCupomAutorizado(sCampo: String): String;
var
  slArquivos: TStringList;
  sDirAtual: String;
  i: Integer;
  sArquivoTEF: String;
  sNomeArquivo: String;
begin
  GetDir(0, sDirAtual);
  slArquivos := TStringList.Create;
  Result := '';
  try
    ListaDeArquivos(slArquivos, DIRETORIO_BKP_TEF, '*.BKP');

    for I := 0 to slArquivos.Count -1 do
    begin
      sArquivoTEF := DIRETORIO_BKP_TEF + '\' + AllTrim(slArquivos[I]);
      //
      // Exemplo de nome de arquivo TEF_DIAL1.BKP, TEF_DIAL2.BKP
      // Último caractere do nome deve ser número maior ou igual a zero
      sNomeArquivo := StringReplace(AnsiUpperCase(ExtractFileName(sArquivoTEF)), '.BKP', '', [rfReplaceAll]);
      if StrToIntDef(Right(sNomeArquivo, 1), -1) >= 0 then
      begin // Apenas arquivos dos primeiros cartões, não do último
        if AnsiUpperCase(CampoTEF(sArquivoTEF, '000-000')) = 'CRT' then
        begin
          if CampoTEF(sArquivoTEF, '009-000') = '0' then
            Result := Result + Trim(CampoTEF(sArquivoTEF, sCampo));
        end;
      end;
    end; // for I := 0 to slDownload.Count -1 do
  finally
    FreeAndNil(slArquivos);
  end;

  ChDir(sDirAtual);
end;

function TForm1.TEFContaArquivos(sTipoComCaminho: String): Integer;
var
  sDirAtual: String;
  S: TSearchREc;
  I: Integer;
begin
  GetDir(0, sDirAtual);
  Result := 0;
  try
    //
    I := FindFirst( pChar(sTipoComCaminho), faAnyFile, S);
    //
    while I = 0 do
    begin
      I := FindNext(S);
      Inc(Result);
    end;
    //
    FindClose(S);
  except
  end;

  ChDir(sDirAtual);
end;

function TForm1.PDV_CupomAberto: Boolean;
begin
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_CupomAberto(True);
  if Form1.sModeloECF = '02' then Result := _ecf02_CupomAberto(True);
  if Form1.sModeloECF = '03' then Result := _ecf03_CupomAberto(True);
  if Form1.sModeloECF = '12' then Result := _ecf12_CupomAberto(True);
  if Form1.sModeloECF = '14' then Result := _ecf14_CupomAberto(True);
  if Form1.sModeloECF = '15' then Result := _ecf15_CupomAberto(True);
  if Form1.sModeloECF = '17' then Result := _ecf17_CupomAberto(True); // 2015-08-24 Qdo aberto ok, testar fechado
  if Form1.sModeloECF = '59' then Result := _ecf59_CupomAberto(True);
  if Form1.sModeloECF = '65' then Result := _ecf65_CupomAberto(True);
  if Form1.sModeloECF = '99' then Result := _ecf99_CupomAberto(True);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_CupomAberto(True);
  if Form1.sModeloECF = '05' then Result := _ecf05_CupomAberto(True);
  if Form1.sModeloECF = '06' then Result := _ecf06_CupomAberto(True);
  if Form1.sModeloECF = '07' then Result := _ecf07_CupomAberto(True);
  if Form1.sModeloECF = '08' then Result := _ecf08_CupomAberto(True);
  if Form1.sModeloECF = '09' then Result := _ecf09_CupomAberto(True);
  if Form1.sModeloECF = '10' then Result := _ecf10_CupomAberto(True);
  if Form1.sModeloECF = '11' then Result := _ecf11_CupomAberto(True);
  }
end;

function TForm1.PDV_ImpressaoNaoSujeitoaoICMS(sTexto: String;
  bPDF: Boolean = False): Boolean;
// Impressão gerencial. Substituir os 14 lugares onde repetia o código. Unit está muito extensa
begin
  sHRGerencial := TimeToStr(Time); // Sandro Silva 2017-11-10 Polimig
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '02' then Result := _ecf02_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '03' then Result := _ecf03_ImpressaoNaoSujeitoaoICMS(sTexto);

  if Form1.sModeloECF = '12' then Result := _ecf12_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '14' then Result := _ecf14_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '15' then Result := _ecf15_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '17' then Result := _ecf17_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '59' then Result := _ecf59_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '65' then Result := _ecf65_ImpressaoNaoSujeitoaoICMS(sTexto, bPDF); // Sandro Silva 2020-12-07 if Form1.sModeloECF = '65' then Result := _ecf65_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '99' then Result := _ecf99_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Result = False then
    sHRGerencial := '';

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '05' then Result := _ecf05_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '06' then Result := _ecf06_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '07' then Result := _ecf07_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '08' then Result := _ecf08_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '09' then Result := _ecf09_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '10' then Result := _ecf10_ImpressaoNaoSujeitoaoICMS(sTexto);
  if Form1.sModeloECF = '11' then Result := _ecf11_ImpressaoNaoSujeitoaoICMS(sTexto);
  }
end;

function TForm1.PDV_SubTotal(Pp1: Boolean): Currency;
begin
  Result := 0.00;
  if Form1.sModeloECF = '01' then Result := _ecf01_SubTotal(Pp1);
  if Form1.sModeloECF = '02' then Result := _ecf02_SubTotal(Pp1);
  if Form1.sModeloECF = '03' then Result := _ecf03_SubTotal(Pp1);
  if Form1.sModeloECF = '12' then Result := _ecf12_SubTotal(Pp1);
  if Form1.sModeloECF = '14' then Result := _ecf14_SubTotal(Pp1);
  if Form1.sModeloECF = '15' then Result := _ecf15_SubTotal(Pp1);
  if Form1.sModeloECF = '17' then Result := _ecf17_SubTotal(Pp1);
  if Form1.sModeloECF = '59' then Result := _ecf59_SubTotal(Pp1);
  if Form1.sModeloECF = '65' then Result := _ecf65_SubTotal(Pp1);
  if Form1.sModeloECF = '99' then Result := _ecf99_SubTotal(Pp1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_SubTotal(Pp1);
  if Form1.sModeloECF = '05' then Result := _ecf05_SubTotal(Pp1);
  if Form1.sModeloECF = '06' then Result := _ecf06_SubTotal(Pp1);
  if Form1.sModeloECF = '07' then Result := _ecf07_SubTotal(Pp1);
  if Form1.sModeloECF = '08' then Result := _ecf08_SubTotal(Pp1);
  if Form1.sModeloECF = '09' then Result := _ecf09_SubTotal(Pp1);
  if Form1.sModeloECF = '10' then Result := _ecf10_SubTotal(Pp1);
  if Form1.sModeloECF = '11' then Result := _ecf11_SubTotal(Pp1);
  }

  if Result = 0 then
  begin
    if (Form1.sModeloECF <> '01') and (Form1.sModeloECF <> '59') and (Form1.sModeloECF <> '65') and (Form1.sModeloECF <> '99') then // nesses modelos _ecf59_SubTotal() e _ecf65_SubTotal() já executam Form1.SubTotalAlteraca()
    begin
      // ECF 4200 retorna zerado qdo tem cupom aberto, com itens vendido, fechar o frente e abrir novamente
      // ECF Epson, em alguns casos retorna total do cupom zerado, cancelando o cupom no fechamento
      Result := Form1.SubTotalAlteraca(Form1.sModeloECF, Form1.icupom, Form1.sCaixa, Result); // Sandro Silva 2019-04-30 Result := Form1.SubTotalAlteraca;
    end;
  end;

end;

procedure TForm1.Nmeromximodecartesaceito1Click(Sender: TObject);
var
  iLimiteEspecificacao: Integer;
begin
  iLimiteEspecificacao := 1;
  while True do
  begin
    Form1.iNumeroMaximoDeCartoes := StrToIntDef(Small_InputBox('Quantidade máxima de cartões', 'Informe a quantidade máxima de cartões para pagamento com múltiplos cartões.', IntToStr(Form1.iNumeroMaximoDeCartoes)), 5);

    if (Form1.sModeloECF = '65') or (Form1.sModeloECF = '59') or (Form1.sModeloECF = '99') then
    begin
      if (Form1.sModeloECF = '65') then
        iLimiteEspecificacao := 99; // NFC-e permite até 100 meios de pagamento (99 cartões + 1 dinheiro)

      if (Form1.sModeloECF = '59') then
        iLimiteEspecificacao := 9; // SAT permite apenas 10 grupos de meios de pagamento (9 cartões + 1 dinheiro)

      if (Form1.sModeloECF = '99') then
        iLimiteEspecificacao := 9; 

      if Form1.iNumeroMaximoDeCartoes > iLimiteEspecificacao then
        Application.MessageBox(PChar('Conforme especificações do documento fiscal, a quantidade de cartões não pode ser maior que ' + IntToStr(iLimiteEspecificacao)), 'Atenção', MB_OK + MB_ICONWARNING)
      else
        Break;

    end
    else
      Break;
  end;

  SalvarConfiguracao(FRENTE_INI, 'CARTOES', 'NUMERO MAXIMO CARTOES', IntToStr(Form1.iNumeroMaximoDeCartoes));
end;

procedure TForm1.Modopagamentocommltiploscartes1Click(Sender: TObject);
begin
  if Modopagamentocommltiploscartes1.Checked then
    Modopagamentocommltiploscartes1.Checked := False
  else
    Modopagamentocommltiploscartes1.Checked := True;
  bModoMultiplosCartoes := Modopagamentocommltiploscartes1.Checked;
  SalvarConfiguracao(FRENTE_INI, 'CARTOES', 'ACEITA MULTIPLOS', IfThen(bModoMultiplosCartoes, 'Sim', 'Não'));
end;

procedure TForm1.ConfigurarFabricanteeModeloSAT1Click(Sender: TObject);
var
  sCodigoFabricante: String;
begin
  sCodigoFabricante := Trim(LerParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_CODIGO_FABRICANTE, sCodigoFabricante));
  _ecf59_ConfiguraFabricanteModeloSAT(sCodigoFabricante);
  Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
  FecharAplicacao(ExtractFileName(Application.ExeName));
end;

procedure TForm1.AjustaAlteracaDesconto;
var
  IBQITEM: TIBQuery;
begin
  IBQITEM := CriaIBQuery(Form1.ibDataSet27.Transaction);
  try
    Form1.ibDataSet27.Close;
    Form1.ibDataSet27.SelectSQL.Text :=
      'select A.* ' +
      'from ALTERACA A ' +
      'where A.CAIXA = ' + QuotedStr(Form1.sCaixa) +
      ' and A.PEDIDO = ' + QuotedStr(NumeroCupom) +
      ' and (A.TIPO = ''BALCAO'' or A.TIPO = ''LOKED'') ' +
      ' and A.DESCRICAO <> ''<CANCELADO>'' ' +
      ' and A.DESCRICAO <> ''Desconto'' ' +
      ' and A.DESCRICAO <> ''Acréscimo'' ' +
      ' and coalesce(A.CODIGO, '''') <> '''' ';
    Form1.ibDataSet27.Open;

    while Form1.ibDataSet27.Eof = False do
    begin
      // Seleciona o total de desconto lançado para o item, se for diferente limpa o campo DESCONTO
      IBQITEM.Close;
      IBQITEM.SQL.Text :=
        'select CODIGO, ITEM, sum(TOTAL) as TOTALDESCONTO ' +
        'from ALTERACA ' +
        'where CAIXA = ' + QuotedStr(Form1.ibDataSet27.FieldByName('CAIXA').AsString) +
        ' and PEDIDO = ' + QuotedStr(Form1.ibDataSet27.FieldByName('PEDIDO').AsString) +
        ' and (TIPO = ''BALCAO'' or TIPO = ''LOKED'') ' +
        ' and DESCRICAO <> ''<CANCELADO>'' ' +
        ' and DESCRICAO = ''Desconto'' ' +
        ' and ITEM = ' + QuotedStr(Form1.ibDataSet27.FieldByName('ITEM').AsString) +
        ' group by CODIGO, ITEM';
      IBQITEM.Open;

      if (IBQITEM.FieldByName('ITEM').AsString = Form1.ibDataSet27.FieldByName('ITEM').AsString)
        and (Form1.ibDataSet27.FieldByName('ITEM').AsString <> '') then
      begin
        Form1.ibDataSet27.Edit;
        Form1.ibDataSet27.FieldByName('DESCONTO').AsFloat := IBQITEM.FieldByName('TOTALDESCONTO').AsFloat;
      end;

      Form1.ibDataSet27.Next;
    end;
    Commitatudo2(True);
  except

  end;
  FreeAndNil(IBQITEM);
end;

function TForm1.SubTotalAlteraca(sModelo: String; iCupomAtual: Integer;
  sCaixa: String; ValorPadrao: Currency): Currency; // Sandro Silva 2019-04-30 function SubTotalAlteraca: Currency;
// 59 e 65 tem o subtotal vendido apenas no banco
// ecf tem o subtotal na memória da impressora, mas bematech 4200 não retorna correto se fechar e abrir o frente com cupom aberto
var
  IBQSUBTOTAL: TIBQuery;
begin
  // Não usar Commitatudo aqui
  Result := ValorPadrao; // Sandro Silva 2019-04-30 Result := Form1.fTotal;
  IBQSUBTOTAL := CriaIBQuery(Form1.ibDataSet27.Transaction); // Sandro Silva 2017-09-18
  if (sModelo <> '01') then // Tem que ser diferente de mesa aberta
  begin
    if (sModelo <> '59') and (sModelo <> '65') and (sModelo <> '99') then // Sandro Silva 2019-04-30  if Form1.sModeloECF = '02' then
    begin
      try
        IBQSUBTOTAL.Close;
        IBQSUBTOTAL.Sql.Clear;
        // Sandro Silva 2021-11-29 IBQSUBTOTAL.SQL.Text := 'select sum(cast(TOTAL as numeric(18,2))) as TOT from ALTERACA where PEDIDO='+QuotedStr(strZero(iCupomAtual,6,0))+' and CAIXA='+QuotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' and not (DESCRICAO=''Desconto'' and Coalesce(ITEM,''XXX'')=''XXX'')  and not (DESCRICAO=''Acréscimo'' and Coalesce(ITEM,''XXX'')=''XXX'')'; // Dead lock mantem item com TIPO=KOLNAC até que seja destravado e processaDo o cancelamento
        IBQSUBTOTAL.SQL.Text := 'select sum(cast(TOTAL as numeric(18,2))) as TOT from ALTERACA where PEDIDO='+QuotedStr(FormataNumeroDoCupom(iCupomAtual))+' and CAIXA='+QuotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' and not (DESCRICAO=''Desconto'' and Coalesce(ITEM,''XXX'')=''XXX'')  and not (DESCRICAO=''Acréscimo'' and Coalesce(ITEM,''XXX'')=''XXX'')'; // Dead lock mantem item com TIPO=KOLNAC até que seja destravado e processaDo o cancelamento
        IBQSUBTOTAL.Open;
        Result := IBQSUBTOTAL.FieldByname('TOT').AsFloat;
      except
      end;

    end;

    if sModelo = '59' then
    begin
      if Form1.fTotal > 999999.98 then
      begin
        IBQSUBTOTAL.Close;
        IBQSUBTOTAL.SQL.Clear;
        // Sandro Silva 2021-11-29 IBQSUBTOTAL.SQL.Text := 'select sum(TOTAL) as TOT from ALTERACA where PEDIDO='+QuotedStr(strZero(iCupomAtual,6,0))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' '; // Sandro Silva 2019-03-26 IBQSUBTOTAL.SQL.Text := 'select sum(TOTAL) as TOT from ALTERACA where PEDIDO='+QuotedStr(strZero(iCupomAtual,6,0))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' ';
        IBQSUBTOTAL.SQL.Text := 'select sum(TOTAL) as TOT from ALTERACA where PEDIDO='+QuotedStr(FormataNumeroDoCupom(iCupomAtual))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' '; // Sandro Silva 2019-03-26 IBQSUBTOTAL.SQL.Text := 'select sum(TOTAL) as TOT from ALTERACA where PEDIDO='+QuotedStr(strZero(iCupomAtual,6,0))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' ';
        IBQSUBTOTAL.SQL.Add('and DESCRICAO <> ''Acréscimo'' and (DESCRICAO <> ''Desconto'' or (DESCRICAO = ''Desconto'' and coalesce(ITEM, '''') <> '''')) ');
        IBQSUBTOTAL.SQL.Add('and coalesce(COO, '''') = '''' and coalesce(CCF, '''') = '''' '); // Não selecionar dados de vendas antigas feitas por ECF ou NFC-e com mesmo ALTERACA.PEDIDO
        IBQSUBTOTAL.Open;
        Form1.fTotal := IBQSUBTOTAL.FieldByname('TOT').AsFloat;
      end;
      //
      Result := Form1.fTotal;
    end;

    if sModelo = '65' then
    begin
      if Form1.fTotal > 999999.98 then
      begin
        IBQSUBTOTAL.Close;
        IBQSUBTOTAL.Sql.Clear;
        // Sandro Silva 2021-11-29 IBQSUBTOTAL.SQL.Text := 'select sum(cast(TOTAL as numeric(18,2))) as TOT from ALTERACA where PEDIDO='+QuotedStr(strZero(iCupomAtual,6,0))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' and not (DESCRICAO=''Desconto'' and Coalesce(ITEM,''XXX'')=''XXX'')  and not (DESCRICAO=''Acréscimo'' and Coalesce(ITEM,''XXX'')=''XXX'')';
        IBQSUBTOTAL.SQL.Text := 'select sum(cast(TOTAL as numeric(18,2))) as TOT from ALTERACA where PEDIDO='+QuotedStr(FormataNumeroDoCupom(iCupomAtual))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' and not (DESCRICAO=''Desconto'' and Coalesce(ITEM,''XXX'')=''XXX'')  and not (DESCRICAO=''Acréscimo'' and Coalesce(ITEM,''XXX'')=''XXX'')';
        IBQSUBTOTAL.Open;

        Form1.fTotal := IBQSUBTOTAL.FieldByname('TOT').AsFloat;
      end;
      //
      Result := Form1.fTotal;
    end;
    if sModelo = '99' then
    begin
      if Form1.fTotal > 999999.98 then
      begin
        IBQSUBTOTAL.Close;
        IBQSUBTOTAL.SQL.Clear;
        // Sandro Silva 2021-11-29 IBQSUBTOTAL.SQL.Text := 'select sum(TOTAL) as TOT from ALTERACA where PEDIDO='+QuotedStr(strZero(iCupomAtual,6,0))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' ';
        IBQSUBTOTAL.SQL.Text := 'select sum(TOTAL) as TOT from ALTERACA where PEDIDO='+QuotedStr(FormataNumeroDoCupom(iCupomAtual))+' and CAIXA='+quotedStr(sCaixa)+' and DESCRICAO<>''<CANCELADO>'' and TIPO <> ''KOLNAC'' '; 
        IBQSUBTOTAL.SQL.Add('and DESCRICAO <> ''Acréscimo'' and (DESCRICAO <> ''Desconto'' or (DESCRICAO = ''Desconto'' and coalesce(ITEM, '''') <> '''')) ');
        IBQSUBTOTAL.SQL.Add('and coalesce(COO, '''') = '''' and coalesce(CCF, '''') = '''' '); // Não selecionar dados de vendas antigas feitas por ECF ou NFC-e com mesmo ALTERACA.PEDIDO
        IBQSUBTOTAL.Open;
        Form1.fTotal := IBQSUBTOTAL.FieldByname('TOT').AsFloat;
      end;
      //
      Result := Form1.fTotal;
    end;
  end;
  FreeAndNil(IBQSUBTOTAL);
end;

function TForm1.PDV_DataeHoraDaImpressora(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := _ecf01_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Dataehoradaimpressora(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_Dataehoradaimpressora(pP1); // Ok 2015-08-24
  if Form1.sModeloECF = '59' then Result := _ecf59_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_Dataehoradaimpressora(pP1);
    
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_Dataehoradaimpressora(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_Dataehoradaimpressora(pP1);
  }

end;

function TForm1.PDV_RetornaAliquotas(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := _ecf01_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '02' then
    sAliquotasISS := _ecf02_VerificaAliquotasIss;

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_RetornaAliquotas(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_RetornaAliquotas(pP1);
  }
end;

function TForm1.PDV_StatusGaveta(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := _ecf01_StatusGaveta(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_StatusGaveta(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_StatusGaveta(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_StatusGaveta(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_StatusGaveta(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_StatusGaveta(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_StatusGaveta(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_StatusGaveta(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_StatusGaveta(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_StatusGaveta(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_StatusGaveta(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_StatusGaveta(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_StatusGaveta(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_StatusGaveta(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_StatusGaveta(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_StatusGaveta(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_StatusGaveta(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_StatusGaveta(pP1);
  }
end;

function TForm1.PDV_AbreGaveta(pP1: Boolean): Boolean;
begin
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_AbreGaveta(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_AbreGaveta(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_AbreGaveta(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_AbreGaveta(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_AbreGaveta(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_AbreGaveta(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_AbreGaveta(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_AbreGaveta(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_AbreGaveta(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_AbreGaveta(pP1);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_AbreGaveta(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_AbreGaveta(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_AbreGaveta(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_AbreGaveta(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_AbreGaveta(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_AbreGaveta(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_AbreGaveta(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_AbreGaveta(pP1);
  }

end;

function TForm1.PDV_NumeroSerie(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := AllTrim(_ecf01_NmerodeSrie(pP1));
  if Form1.sModeloECF = '02' then Result := AllTrim(_ecf02_NmerodeSrie(pP1));
  if Form1.sModeloECF = '03' then Result := AllTrim(_ecf03_NmerodeSrie(pP1));

  if Form1.sModeloECF = '12' then Result := AllTrim(_ecf12_NmerodeSrie(pP1));
  if Form1.sModeloECF = '14' then Result := AllTrim(_ecf14_NmerodeSrie(pP1));
  if Form1.sModeloECF = '15' then Result := AllTrim(_ecf15_NmerodeSrie(pP1));
  if Form1.sModeloECF = '17' then Result := AllTrim(_ecf17_NmerodeSrie(pP1)); // Ok 2015-08-24
  if Form1.sModeloECF = '59' then Result := AllTrim(_ecf59_NmerodeSrie(pP1));
  if Form1.sModeloECF = '65' then Result := AllTrim(_ecf65_NmerodeSrie(pP1));
  if Form1.sModeloECF = '99' then Result := AllTrim(_ecf99_NmerodeSrie(pP1));
    
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := AllTrim(_ecf04_NmerodeSrie(pP1));
  if Form1.sModeloECF = '05' then Result := AllTrim(_ecf05_NmerodeSrie(pP1));
  if Form1.sModeloECF = '06' then Result := AllTrim(_ecf06_NmerodeSrie(pP1));
  if Form1.sModeloECF = '07' then Result := AllTrim(_ecf07_NmerodeSrie(pP1));
  if Form1.sModeloECF = '08' then Result := AllTrim(_ecf08_NmerodeSrie(pP1));
  if Form1.sModeloECF = '09' then Result := AllTrim(_ecf09_NmerodeSrie(pP1));
  if Form1.sModeloECF = '10' then Result := AllTrim(_ecf10_NmerodeSrie(pP1));
  if Form1.sModeloECF = '11' then Result := AllTrim(_ecf11_NmerodeSrie(pP1));
  }
end;

function TForm1.PDV_GrandeTotal(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := _ecf01_GrandeTotal(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_GrandeTotal(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_GrandeTotal(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_GrandeTotal(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_GrandeTotal(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_GrandeTotal(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_GrandeTotal(pP1); // Ok 2015-08-24
  if Form1.sModeloECF = '59' then Result := _ecf59_GrandeTotal(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_GrandeTotal(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_GrandeTotal(pP1);
    
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_GrandeTotal(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_GrandeTotal(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_GrandeTotal(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_GrandeTotal(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_GrandeTotal(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_GrandeTotal(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_GrandeTotal(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_GrandeTotal(pP1);
  }
end;

function TForm1.PDV_NumeroIntervencoesTecnicas(pP1: Boolean): String;
begin
  Result := '000';
  if Form1.sModeloECF = '01' then Result := _ecf01_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Nmdeintervenestcnicas(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_Nmdeintervenestcnicas(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_Nmdeintervenestcnicas(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_Nmdeintervenestcnicas(pP1);
  }
end;

function TForm1.PDV_NumeroDeReducoesZ(pP1: Boolean): String;
begin
  Result := '0000';
  if Form1.sModeloECF = '01' then Result := _ecf01_NmdeRedues(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_NmdeRedues(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_NmdeRedues(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_NmdeRedues(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_NmdeRedues(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_NmdeRedues(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_NmdeRedues(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_NmdeRedues(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_NmdeRedues(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_NmdeRedues(pP1);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_NmdeRedues(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_NmdeRedues(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_NmdeRedues(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_NmdeRedues(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_NmdeRedues(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_NmdeRedues(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_NmdeRedues(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_NmdeRedues(pP1);
  }
end;

function TForm1.PDV_TipoDaImpressora(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := _ecf01_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_Tipodaimpressora(pP1); // Ok 2015-08-24
  if Form1.sModeloECF = '59' then Result := _ecf59_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_Tipodaimpressora(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_Tipodaimpressora(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_Tipodaimpressora(pP1);
  }
end;

function TForm1.PDV_MarcaImpressora(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '02' then Result := _ecf02_Marca(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Marca(pP1);
  //  if Form1.sModeloECF = '04' then Result := _ecf04_Marca(pP1);
  //  if Form1.sModeloECF = '05' then Result := _ecf05_Marca(pP1);
  //  if Form1.sModeloECF = '06' then Result := _ecf06_Marca(pP1);
  //  if Form1.sModeloECF = '07' then Result := _ecf07_Marca(pP1);
  //  if Form1.sModeloECF = '08' then Result := _ecf08_Marca(pP1);
  //  if Form1.sModeloECF = '09' then Result := _ecf09_Marca(pP1);
  //  if Form1.sModeloECF = '10' then Result := _ecf10_Marca(pP1);
  //  if Form1.sModeloECF = '11' then Result := _ecf11_Marca(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_Marca(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Marca(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Marca(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_Marca(pP1); // Ok 2015-08-24
  //  if Form1.sModeloECF = '59' then _ecf59_     asfdsadf                   if Form1.sModeloECF = '01' then sMarca := _ecf01_Marca(True);
  //  if Form1.sModeloECF = '65' then Result := _ecf65_Marca(pP1);
end;

function TForm1.PDV_ModeloImpressora(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '02' then Result := _ecf02_Modelo(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Modelo(pP1);
  //  if Form1.sModeloECF = '04' then Result := _ecf04_Modelo(pP1);
  //  if Form1.sModeloECF = '05' then Result := _ecf05_Modelo(pP1);
  //  if Form1.sModeloECF = '06' then Result := _ecf06_Modelo(pP1);
  //  if Form1.sModeloECF = '07' then Result := _ecf07_Modelo(pP1);
  //  if Form1.sModeloECF = '08' then Result := _ecf08_Modelo(pP1);
  //  if Form1.sModeloECF = '09' then Result := _ecf09_Modelo(pP1);
  //  if Form1.sModeloECF = '10' then Result := _ecf10_Modelo(pP1);
  //  if Form1.sModeloECF = '11' then Result := _ecf11_Modelo(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_Modelo(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Modelo(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Modelo(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_Modelo(pP1); // Ok 2015-08-24
  //  if Form1.sModeloECF = '59' then _ecf59_     asfdsadf                   if Form1.sModeloECF = '01' then sModelo := _ecf01_Modelo(True);
  //  if Form1.sModeloECF = '65' then Result := _ecf65_Modelo(pP1);
end;

function TForm1.PDV_VersaoSBImpressora(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '02' then Result := _ecf02_VersaoSB(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_VersaoSB(pP1);
  //  if Form1.sModeloECF = '04' then Result := _ecf04_VersaoSB(pP1);
  //  if Form1.sModeloECF = '05' then Result := _ecf05_VersaoSB(pP1);
  //  if Form1.sModeloECF = '06' then Result := _ecf06_VersaoSB(pP1);
  //  if Form1.sModeloECF = '07' then Result := _ecf07_VersaoSB(pP1);
  //  if Form1.sModeloECF = '08' then Result := _ecf08_VersaoSB(pP1);
  //  if Form1.sModeloECF = '09' then Result := _ecf09_VersaoSB(pP1);
  //  if Form1.sModeloECF = '10' then Result := _ecf10_VersaoSB(pP1);
  //  if Form1.sModeloECF = '11' then Result := _ecf11_VersaoSB(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_VersaoSB(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_VersaoSB(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_VersaoSB(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_VersaoSB(pP1); // Ok 2015-08-24
  //  if Form1.sModeloECF = '59' then _ecf59_     asfdsadf                   if Form1.sModeloECF = '01' then sVersaoSB := _ecf01_VersaoSB(True);
  //  if Form1.sModeloECF = '65' then Result := _ecf65_VersaoSB(pP1);
end;

function TForm1.PDV_DataInstalacaoSB(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '02' then Result := _ecf02_DataIntalacaoSB(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '04' then Result := _ecf04_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '05' then Result := _ecf05_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '06' then Result := _ecf06_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '07' then Result := _ecf07_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '08' then Result := _ecf08_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '09' then Result := _ecf09_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '10' then Result := _ecf10_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '11' then Result := _ecf11_DataIntalacaoSB(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_DataIntalacaoSB(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_DataIntalacaoSB(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_DataIntalacaoSB(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_DataIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '59' then _ecf59_     asfdsadf                   if Form1.sModeloECF = '01' then sDataIntalacaoSB := _ecf01_DataIntalacaoSB(True);
  //  if Form1.sModeloECF = '65' then Result := _ecf65_DataIntalacaoSB(pP1);
end;

function TForm1.PDV_HoraInstalacaoSB(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '02' then Result := _ecf02_HoraIntalacaoSB(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '04' then Result := _ecf04_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '05' then Result := _ecf05_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '06' then Result := _ecf06_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '07' then Result := _ecf07_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '08' then Result := _ecf08_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '09' then Result := _ecf09_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '10' then Result := _ecf10_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '11' then Result := _ecf11_HoraIntalacaoSB(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_HoraIntalacaoSB(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_HoraIntalacaoSB(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_HoraIntalacaoSB(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_HoraIntalacaoSB(pP1);
  //  if Form1.sModeloECF = '59' then _ecf59_     asfdsadf                   if Form1.sModeloECF = '01' then sHoraIntalacaoSB := _ecf01_HoraIntalacaoSB(True);
  //  if Form1.sModeloECF = '65' then Result := _ecf65_HoraIntalacaoSB(pP1);
end;

function TForm1.PDV_CodigoModeloECF(pP1: Boolean): String;
begin
  Result := '000000';
  //
  if Form1.sModeloECF = '02' then Result := _ecf02_CodigoModeloEcf(pP1); // Ok
  if Form1.sModeloECF = '03' then Result := _ecf03_CodigoModeloEcf(pP1); // Ok
  if Form1.sModeloECF = '12' then Result := _ecf12_CodigoModeloEcf(pP1); // Ok
  if Form1.sModeloECF = '14' then Result := _ecf14_CodigoModeloEcf(pP1); // Ok
  if Form1.sModeloECF = '15' then Result := _ecf15_CodigoModeloEcf(pP1); // Ok
  if Form1.sModeloECF = '17' then Result := _ecf17_CodigoModeloEcf(pP1); // Ok 2015-08-24
end;

function TForm1.PDV_DadosDaUltimaReducaoZ(pP1: Boolean): String;
begin
  Result := Replicate('0', 1278);
  if Form1.sModeloECF = '02' then Result := _ecf02_DadosDaUltimaReducao(pP1); // Bematech
  if Form1.sModeloECF = '03' then Result := _ecf03_DadosDaUltimaReducao(pP1); // Daruma32
  if Form1.sModeloECF = '12' then Result := _ecf12_DadosDaUltimaReducao(pP1); // Urano Loger
  if Form1.sModeloECF = '14' then Result := _ecf14_DadosDaUltimaReducao(pP1); // Sweda
  if Form1.sModeloECF = '15' then Result := _ecf15_DadosDaUltimaReducao(pP1); // Epson
  if Form1.sModeloECF = '17' then Result := _ecf17_DadosDaUltimaReducao(pP1); // DarumaFramework
end;

function TForm1.PDV_FechaCupom2(pP1: Boolean): Boolean;
begin
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_fechaCupom2(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_fechaCupom2(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_fechaCupom2(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_fechaCupom2(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_fechaCupom2(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_fechaCupom2(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_fechaCupom2(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_fechaCupom2(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_fechaCupom2(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_fechaCupom2(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_fechaCupom2(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_fechaCupom2(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_fechaCupom2(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_fechaCupom2(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_fechaCupom2(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_fechaCupom2(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_fechaCupom2(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_fechaCupom2(pP1);
  }
end;

function TForm1.PDV_Inicializa(pP1: String): Boolean;
begin
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_Inicializa(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_Inicializa(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Inicializa(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_Inicializa(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Inicializa(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Inicializa(pP1);

  if Form1.sModeloECF = '17' then
  begin
    Result := _ecf17_Inicializa(pP1);
    if _ecf17.Load = False then
    begin
      FecharAplicacao(ExtractFileName(Application.ExeName));
    end;
  end;
  if Form1.sModeloECF = '59' then
  begin
    Result := _ecf59_Inicializa(pP1);
  end;
  if Form1.sModeloECF = '65' then
  begin
    Result := _ecf65_Inicializa(pP1);
  end;
  if Form1.sModeloECF = '99' then
  begin
    Result := _ecf99_Inicializa(pP1);
  end;

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_Inicializa(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_Inicializa(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_Inicializa(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_Inicializa(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_Inicializa(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_Inicializa(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_Inicializa(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_Inicializa(pP1);
  } 

end;

function TForm1.PDV_NumeroDoCaixa(pP1: Boolean): String;
begin
  if Form1.sModeloECF = '01' then Result := _ecf01_NmdoCaixa(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_NmdoCaixa(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_NmdoCaixa(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_NmdoCaixa(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_NmdoCaixa(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_NmdoCaixa(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_NmdoCaixa(pP1); // Ok 2015-08-24
  if Form1.sModeloECF = '59' then Result := _ecf59_NmdoCaixa(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_NmdoCaixa(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_NmdoCaixa(pP1);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_NmdoCaixa(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_NmdoCaixa(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_NmdoCaixa(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_NmdoCaixa(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_NmdoCaixa(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_NmdoCaixa(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_NmdoCaixa(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_NmdoCaixa(pP1);
  }
end;

function TForm1.PDV_CancelaUltimoCupom(pP1: Boolean): Boolean;
begin
  Result := False;
  //
  if Form1.sModeloECF = '01' then Result := _ecf01_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_CancelaUltimoCupom(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_CancelaUltimoCupom(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_CancelaUltimoCupom(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_CancelaUltimoCupom(pP1);
  }

end;

function TForm1.PDV_FechaCupom(pP1: Boolean): Boolean;
begin

  AcertaPendenciaCancelAlteraca; // Processa pendências e commitatudo2 Sandro Silva 2019-04-01

  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_FechaCupom(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_FechaCupom(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_FechaCupom(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_FechaCupom(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_FechaCupom(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_FechaCupom(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_FechaCupom(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_FechaCupom(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_FechaCupom(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_FechaCupom(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_FechaCupom(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_FechaCupom(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_FechaCupom(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_FechaCupom(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_FechaCupom(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_FechaCupom(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_FechaCupom(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_FechaCupom(pP1);
  }
end;

function TForm1.PDV_Pagamento(pP1: Boolean): Boolean;
begin
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_Pagamento(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_Pagamento(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_Pagamento(pP1);

  if Form1.sModeloECF = '12' then Result := _ecf12_Pagamento(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_Pagamento(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_Pagamento(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_Pagamento(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_Pagamento(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_Pagamento(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_Pagamento(pP1);

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_Pagamento(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_Pagamento(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_Pagamento(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_Pagamento(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_Pagamento(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_Pagamento(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_Pagamento(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_Pagamento(pP1);
  }
end;

function TForm1.PDV_NumeroDoCupom(pP1: Boolean): String;
begin
  Result := '0';
  if Form1.sModeloECF = '01' then Result := _ecf01_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_NumeroDoCupom(pP1);

  try
    Result := FormataNumeroDoCupom(StrToIntDef(Result, 0)); // Sandro Silva 2021-12-01
  except

  end;

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_NumeroDoCupom(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_NumeroDoCupom(pP1);
  }
end;

function TForm1.PDV_FaltaPagamento(pP1: Boolean): Boolean;
begin
  Result := False;
  if Form1.sModeloECF = '01' then Result := _ecf01_FaltaPagamento(pP1);
  if Form1.sModeloECF = '02' then Result := _ecf02_FaltaPagamento(pP1);
  if Form1.sModeloECF = '03' then Result := _ecf03_FaltaPagamento(pP1);
  if Form1.sModeloECF = '12' then Result := _ecf12_FaltaPagamento(pP1);
  if Form1.sModeloECF = '14' then Result := _ecf14_FaltaPagamento(pP1);
  if Form1.sModeloECF = '15' then Result := _ecf15_FaltaPagamento(pP1);
  if Form1.sModeloECF = '17' then Result := _ecf17_FaltaPagamento(pP1);
  if Form1.sModeloECF = '59' then Result := _ecf59_FaltaPagamento(pP1);
  if Form1.sModeloECF = '65' then Result := _ecf65_FaltaPagamento(pP1);
  if Form1.sModeloECF = '99' then Result := _ecf99_FaltaPagamento(pP1);
  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then Result := _ecf04_FaltaPagamento(pP1);
  if Form1.sModeloECF = '05' then Result := _ecf05_FaltaPagamento(pP1);
  if Form1.sModeloECF = '06' then Result := _ecf06_FaltaPagamento(pP1);
  if Form1.sModeloECF = '07' then Result := _ecf07_FaltaPagamento(pP1);
  if Form1.sModeloECF = '08' then Result := _ecf08_FaltaPagamento(pP1);
  if Form1.sModeloECF = '09' then Result := _ecf09_FaltaPagamento(pP1);
  if Form1.sModeloECF = '10' then Result := _ecf10_FaltaPagamento(pP1);
  if Form1.sModeloECF = '11' then Result := _ecf11_FaltaPagamento(pP1);
  }
end;

procedure TForm1.PDV_GerarArquivosRequisitoXII;
var
  sDataHora: String;
  sEAD, sChavePublica, sChavePrivada, sAtualX, sArquivo1 : String;
  procedure GerarLogRequisitoXII(sTipo: String);
  begin
    sDataHora := FormatDateTime('yyyymmdd_HHnnss', Now);
    //
    sArquivo1 := Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '_' + sTipo + '.LOG';

    Sleep(1000); // Sandro Silva 2017-08-25

    with TStringList.Create do
    begin
      Text := Form1.sNumeroDeSerieDaImpressora + Form1.PDV_VersaoSBImpressora(True);
      SaveToFile(sArquivo1);
      Free;
    end;

    Sleep(1000); // Sandro Silva 2017-08-25  Tempo salvar em disco e leitura para gerar EAD

    //
    Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
    try
      //
      {Sandro Silva 2022-09-23 inicio
      sChavePublica := 'DF9F4DC6AF517A889BCE1181DEF8394455DBCD19768E8C785D9121E8DB9B9B104E5231EE8F8299D24451465178D3FC41D40DAFAF9C855824393FC964C747'+
                       '5C3993104443E8E73333D93C24E5D46B27D9A4DF5E6F0B05490B6C6829CEFA1030294DABC29E498A0F6096E8CE26B407B2E1B4939FDE6174EC1621BB3E988D29742D';
      }
      sChavePublica := CHAVE_PUBLICA;
      {Sandro Silva 2022-09-23 fim}
      sChavePrivada := Form1.sPasta;
      //
      GetDir(0,sAtualx);
      //
      if FileExists(sArquivo1) then
      begin
        //
        sEAD := Replicate(' ',256);
        //
        generateEAD(sArquivo1, sChavePublica, sChavePrivada, sEAD, 1);
        //

        SmallMsg('Arquivo: '+#13+sArquivo1+#13+#13+
                          'Gravado na pasta: '+#13+Form1.sPAstaDoExecutavel);
      end;
    except
      on E: Exception do
      begin
        SmallMsgBox(pChar(E.Message),'Atenção Erro:22',mb_Ok + MB_ICONWARNING);
        Abort;
      end;
    end;
  end;
begin
  if (Copy(Form1.sPerfil,1,1) <> 'V') then  // Sandro Silva 2017-11-08 Polimig SC não aceita arquivos binários
  begin
    // Seleciona as RZ do mês
    Form1.ibDataset88.Close;
    Form1.ibDataset88.SelectSQL.Clear;
    Form1.ibDataset88.SelectSQL.Add('select * from REDUCOES where SERIE='+QuotedStr(Form1.sNumeroDeSerieDaImpressora) + ' and DATA >= ' + QuotedStr(FormatDateTime('yyyy-mm-', Date) + '01') + ' order by DATA desc');
    Form1.ibDataset88.Open;
    Form1.ibDataset88.Last;
    if Form1.ibDataset88.RecordCount = 1 then // Apenas na primeira RZ do mês
    begin
      // Gera os arquivos do Requisito XII, item 2 e 3 se tiver somente 1 redução do mês da ECF

      // Código para ECF que suportam geração por data
      // Alterar Form1.ArqMF1Click e Form1.ArqMFD1Click para gerar por data
      bOcultarMensagemArquivoAssinado := True;

      try

        GerarArquivoMF('MFPERIODO');

        if FileExists(Form1.sPAstaDoExecutavel + '\DOWNLOADMF.MF') then
        begin
          sDataHora := FormatDateTime('yyyymmdd_HHnnss', Now);
          RenameFile(Form1.sPAstaDoExecutavel + '\DOWNLOADMF.MF', Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.MF');
          RenameFile(Form1.sPAstaDoExecutavel + '\DOWNLOADMF.TXT', Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.TXT');

          SmallMsg('Arquivos: '+#13+Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.MF'+#13+
                                    Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.TXT'+#13+#13+
                            'Gravados na pasta: '+#13+Form1.sPAstaDoExecutavel);
        end
        else
        begin
          GerarLogRequisitoXII('MF');
        end;

        Sleep(250);// Sandro Silva 2017-11-29 Polimig 

        GerarArquivoMFD('MFDPERIODO');

        if FileExists(Form1.sPAstaDoExecutavel + '\DOWNLOADMFD.MFD') then
        begin
          sDataHora := FormatDateTime('yyyymmdd_HHnnss', Now);
          RenameFile(Form1.sPAstaDoExecutavel + '\DOWNLOADMFD.MFD', Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.MFD');
          RenameFile(Form1.sPAstaDoExecutavel + '\DOWNLOADMFD.TXT', Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.TXT');

          SmallMsg('Arquivos: '+#13+Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.MFD'+#13+
                                    Form1.sPAstaDoExecutavel + '\' + Form1.sNumeroDeSerieDaImpressora + '_' + sDataHora + '.TXT'+#13+#13+
                            'Gravados na pasta: '+#13+Form1.sPAstaDoExecutavel);
        end
        else
        begin
          GerarLogRequisitoXII('MFD');
        end;
      except

      end;
      bOcultarMensagemArquivoAssinado := False;

      //
      Screen.Cursor             := crdefault;    // Cursor de Aguardo
      //
      CHDir(Form1.sAtual);
      Form1.Display(Form1.sStatusECF,Form1.sF);
      //
    end;
  end;
end;

function TForm1.PDV_ECF0909: Boolean;
// Retorna True se ECF for do convênio 0909
var
  sModelo: String;
begin
  sModelo := AnsiUpperCase(Form1.PDV_ModeloImpressora(True));
  Result := (AnsiContainsText(sModelo, '4200 TH FI'))                               // Bematech
    or (AnsiContainsText(sModelo, 'T800F')) or (AnsiContainsText(sModelo, 'T900F')) // Epson
    or (AnsiContainsText(sModelo, 'FS800I'));                                       // Daruma
end;

function TForm1.PDV_DataMovimento(pP1: Boolean): String; // Sandro Silva 2019-09-18 ER 02.06 UnoChapeco
begin
  try
    Result := FormatDateTime('ddmmyyyy', Date);

    if Form1.sModeloECF = '02' then Result := _ecf02_Datadomovimento(pP1);
    if Form1.sModeloECF = '03' then Result := _ecf03_Datadomovimento(pP1);
    if Form1.sModeloECF = '12' then Result := _ecf12_Datadomovimento(Pp1);
    if Form1.sModeloECF = '14' then Result := _ecf14_Datadomovimento(Pp1);
    if Form1.sModeloECF = '15' then Result := _ecf15_Datadomovimento(pP1);
    if Form1.sModeloECF = '17' then Result := _ecf17_Datadomovimento(pP1);

    //ShowMessage('Teste 1 47539: ' + Result);

    Result := LimpaNumero(Result);
    Result := Copy(Result, 1, 2) + '/' + Copy(Result, 3, 2) + '/' + '20' + RightStr(Result, 2);
    if RightStr(Result, 2) = '00' then // Retorna o ano zerado caso o dia não tenha sido aberto
      Result := '00/00/0000';
  except
  end;
end;

procedure TForm1.AlertaSonoro;
begin
  if sAviso = 'Sim' then
  begin
    Windows.Beep(1800,100);
    Windows.Beep(1450,100);
    Windows.Beep(1800,100);
    Windows.Beep(1450,250);
  end;
end;

procedure TForm1.GerarArquivoMF(sTipoArquivo: String);
var
  sInicio: String;
  sFinal: String;
begin
  Form7.sMfd := sTipoArquivo;
  Form7.Label3.Caption := 'COO inicial:';
  sInicio := '0000';
  sFinal  := '9999';
  if Form1.sModeloECF = '17' then
  begin
    sInicio := '000001'; // Orientação Suporte Daruma Sandro Silva 2018-05-18  '0001';
    sFinal  := '999999'; // Orientação Suporte Daruma Sandro Silva 2018-05-18  '9999';
  end;

  Display('Aguarde! Obtendo dados do ECF.','Gerando arquivo MF'); // Sandro Silva 2018-05-18 Display('Aguarde! Obtendo dados do ECF.','');
  if sTipoArquivo = 'MFPERIODO' then
  begin
    Form7.Label3.Caption := 'Data inicial:';
    sInicio := '01' + FormatDateTime('mmyyyy', IncMonth(Date, -1));
    sFinal  := FormatFloat('00', DaysInAMonth(YearOf(IncMonth(Date, -1)), MonthOf(IncMonth(Date, -1)))) + FormatDateTime('mmyyyy', IncMonth(Date, -1));
    Display('Aguarde! Obtendo dados do ECF - MF do período','Aguarde! Gerando arquivo da Memória Fiscal');
  end;
  Screen.Cursor             := crHourGlass;    // Cursor de Aguardo

  Form1.Repaint;
  //
  Form1.SaveDialog1.FileName := Form1.sPAstaDoExecutavel+'\DOWNLOADMF.MF';
  if Form1.sModeloECF = '17' then
    Form1.SaveDialog1.FileName := 'DOWNLOADMF.MF'; // 2015-10-07 DarumaFramework não aceita o caminho do arquivo junto com seu nome. Apenas o nome do arquivo

  //
  if Form1.sModeloECF = '01' then _ecf01_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '02' then _ecf02_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '03' then _ecf03_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '12' then _ecf12_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '14' then _ecf14_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '15' then _ecf15_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '17' then _ecf17_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '59' then _ecf59_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '65' then _ecf65_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '99' then _ecf99_LeituraDaMFD('', '', '');

  {Sandro Silva 2021-07-22 inicio
  if Form1.sModeloECF = '04' then _ecf04_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '05' then _ecf05_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '06' then _ecf06_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '07' then _ecf07_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '08' then _ecf08_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '09' then _ecf09_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '10' then _ecf10_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  if Form1.sModeloECF = '11' then _ecf11_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
  }

  if (Form1.sModeloECF = '15') or (Form1.sModeloECF = '17') then
    Form7.Label3.Caption := 'Data inicial:';

  Sleep(1000); // Sandro Silva 2017-07-31 Tempo para salvar em disco;
  Screen.Cursor             := crDefault;    // Cursor de Aguardo
  //
  if FileExists(Form1.SaveDialog1.FileName) then
  begin
    AssinaturaDigital(pChar(Form1.SaveDialog1.FileName));
  end;
  //
  CHDir(Form1.sAtual);
  if sTipoArquivo <> 'MFPERIODO' then // Sandro Silva 2017-08-25
    Display(Form1.sStatusECF,'');
  Form1.Repaint;
  //
end;

procedure TForm1.GerarArquivoMFD(sTipoArquivo: String);
var
  sInicio: String;
  sFinal: String;
begin
  Form7.sMfd := sTipoArquivo;
  sInicio := '0000';
  sFinal  := '9999';
  if Form1.sModeloECF = '17' then
  begin
    sInicio := '000001'; // Orientação Suporte Daruma Sandro Silva 2018-05-18  '0001';
    sFinal  := '999999'; // Orientação Suporte Daruma Sandro Silva 2018-05-18  '9999';
  end;

  Display('Aguarde! Obtendo dados do ECF.','Gerando arquivo MFD'); // Sandro Silva 2018-05-18 Display('Aguarde! Obtendo dados do ECF.','');
  if sTipoArquivo = 'MFDPERIODO' then
  begin
    Form7.Label3.Caption := 'Data inicial:';
    sInicio := '01' + FormatDateTime('mmyyyy', IncMonth(Date, -1));
    sFinal  := FormatFloat('00', DaysInAMonth(YearOf(IncMonth(Date, -1)), MonthOf(IncMonth(Date, -1)))) + FormatDateTime('mmyyyy', IncMonth(Date, -1));
    Display('Aguarde! Obtendo dados do ECF - MFD do período','Gerando arquivo da Memória de Fita Detalhe');
  end;

  Screen.Cursor             := crHourGlass;    // Cursor de Aguardo
  try

    Form1.Repaint;
    //
    Form1.SaveDialog1.FileName := Form1.sPAstaDoExecutavel+'\DOWNLOADMFD.MFD';
    if Form1.sModeloECF = '17' then
      Form1.SaveDialog1.FileName := 'DOWNLOADMFD.MFD'; // 2015-10-07 DarumaFramework não aceita o caminho do arquivo junto com seu nome. Apenas o nome do arquivo

    //
    if Form1.sModeloECF = '01' then _ecf01_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '02' then _ecf02_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '03' then _ecf03_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '12' then _ecf12_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '14' then _ecf14_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '15' then _ecf15_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '17' then _ecf17_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '59' then _ecf59_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '65' then _ecf65_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '99' then _ecf99_LeituraDaMFD('', '', '');
    {Sandro Silva 2021-07-22 inicio
    if Form1.sModeloECF = '04' then _ecf04_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '05' then _ecf05_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '06' then _ecf06_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '07' then _ecf07_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '08' then _ecf08_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '09' then _ecf09_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '10' then _ecf10_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    if Form1.sModeloECF = '11' then _ecf11_LeituraDaMFD(Form1.SaveDialog1.FileName,sInicio,sFinal);
    }


    //
    if FileExists(Form1.SaveDialog1.FileName) then
    begin
      Sleep(5000); // Temp para concluir o processo de salvar em disco Sandro Silva 2020-09-02 
      AssinaturaDigital(pChar(Form1.SaveDialog1.FileName));
    end;
    //
  finally
    CHDir(Form1.sAtual);
    if sTipoArquivo <> 'MFDPERIODO' then// Sandro Silva 2017-08-25 
      Display(Form1.sStatusECF,'');
    Form1.Repaint;
    Screen.Cursor             := crDefault;    // Cursor de Aguardo
    //
  end;
end;

procedure TForm1.ECFConvnio09091Click(Sender: TObject);
begin
  if ECFConvnio09091.Checked then
    GravarParametroIni('Frente.ini', 'Frente de caixa', 'ECF Convenio 0909', 'Não')
  else
    GravarParametroIni('Frente.ini', 'Frente de caixa', 'ECF Convenio 0909', 'Sim');

  Form1.bECF0909 := (LerParametroIni('FRENTE.INI', 'Frente de caixa', 'ECF Convenio 0909', 'Não') = 'Sim');

  ECFConvnio09091.Checked := Form1.bECF0909;

end;

procedure TForm1.ransmitirRespostaFiscalPendente1Click(Sender: TObject);
var
  iPendentes: Integer;
begin
  try
    if (Form1.UsaIntegradorFiscal()) then // Sandro Silva 2018-07-03 if (Form1.sModeloECF = '59') and (_ecf59_Tipodaimpressora = 'MFE') then
    begin
      if SmallMsgBox(PAnsiChar('Serão enviados os dados pendentes dos pagamentos com cartão ao Integrador Fiscal' + #13 + #13 + 'Confirma?'), 'Atenção! Enviando dados ao Integrador Fiscal', MB_ICONQUESTION + MB_YESNO + MB_DEFBUTTON1) = ID_YES then
      begin

        Form1.Display('Aguarde! Enviando Dados ao Integrador Fiscal', 'Enviando resposta fiscal pendente ao Integrador Fiscal'); // Sandro Silva 2017-09-04  Form1.ExibePanelMensagem('Enviando resposta fiscal pendente ao Integrador Fiscal');
        Screen.Cursor := crHourGlass;

        Commitatudo(True); // Antes ransmitirRespostaFiscalPendente1Click()

        iPendentes := EnviarRespostaFiscalPendente(Form1.ibDataSet27.Transaction, Form1.sModeloECF, Form22.Label6); // Sandro Silva 2017-09-04

        if (iPendentes > 0) and (iPendentes <= 10)  then// Tentar repetir o processo se alguma transmissão falhar // Sandro Silva 2020-09-18 if iPendentes > 0 then// Tentar repetir o processo se alguma transmissão falhar
        begin
          // Repete a tentativa de envio se existir atá 10 pendências
          Sleep(3000);
          iPendentes := EnviarRespostaFiscalPendente(Form1.ibDataSet27.Transaction, Form1.sModeloECF, Form22.Label6); //  Sandro Silva 2017-09-04
        end;

        Commitatudo(True); // Depois ransmitirRespostaFiscalPendente1Click()

        Screen.Cursor := crDefault;
        Form1.Display(Form1.sStatusECF,Form1.sF);
        if iPendentes > 0 then
          SmallMsgBox(PAnsiChar('Alguns dados não foram enviados aos Integrador Fiscal' + #13 + #13 + 'Repita o envio dentro de alguns instantes'), 'Atenção', MB_OK + MB_ICONWARNING);
      end;
    end;
  except

  end;

end;

procedure TForm1.AjustarDiferencaParcelasCartao(dTotalTransacaoCartao: Currency;
  dValorFormaPagtoCartao: Currency; iTotalParcelasVenda: Integer;
  iParcelasTransacao: Integer);
begin

  if dTotalTransacaoCartao <> dValorFormaPagtoCartao then
  begin // soma total das parcelas é diferente do total a pagar no cartão

    if dTotalTransacaoCartao < dValorFormaPagtoCartao then
    begin

      // A diferença será acrescida na primeira parcela da sequência dos cartões
      Form1.ibDataSet7.First;
      while Form1.ibDataSet7.Eof = False do
      begin
        if Form1.ibDataSet7.FieldByName('DOCUMENTO').AsString = FormataReceberDocumento((iTotalParcelasVenda - iParcelasTransacao) + 1) then  // Encontra a primeira parcela da transação do cartão atual
          Break;
        Form1.ibDataSet7.Next;
      end;

      Form1.ibDataSet7.Edit;
      Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat := StrToFloat(FormatFloat('0.00', Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat)) - (dTotalTransacaoCartao - dValorFormaPagtoCartao);
      Form1.ibDataSet7.Post;
    end;
  end;               
end;

procedure TForm1.Impressorapadro1Click(Sender: TObject);
begin
  sImpressoraDestino := Small_InputComboBoxPadrao('Impressora', 'Selecione a impressora destino', '', tiInfoComboImpressoras);
  //ShowMessage(sImpressoraDestino);
  if sImpressoraDestino = IMPRESSORA_PADRAO_WINDOWS then
    sImpressoraDestino := '';
  SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, CHAVE_IMPRESSORA_PADRAO, sImpressoraDestino);
end;

procedure TForm1.N4001Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  // Sandro Silva 2017-10-26
  //
  if Form1.N4001.Checked = False then
  begin
    // Sandro Silva 2021-09-01 Form1.N3101.Checked := False;
    Form1.N4001.Checked := True;
    Mais1ini := TIniFile.Create('FRENTE.INI');
    Mais1Ini.WriteString('NFCE','Versão do Layout','4.00');
    Form1.sVersaoLayoutNFCe := '4.00';
    Mais1ini.Free;
    //
    Form1.NFCeVersaoManualvm601Click(Sender);
    ConfiguraNFCE(True); // Form1.N4001Click() Sandro Silva 2018-03-29
  end;
end;

procedure TForm1.NFCeVersaoManualvm601Click(Sender: TObject);
var
  Mais1Ini : TiniFile;
begin
  // Sandro Silva 2017-10-26
  //
  if Form1.NFCeVersaoManualvm601.Checked = False then
  begin
    // Sandro Silva 2021-09-01 Form1.NFCeVersaoManualvm50b1.Checked := False;
    Form1.NFCeVersaoManualvm601.Checked  := True;
    Mais1ini := TIniFile.Create('FRENTE.INI');
    Mais1Ini.WriteString('NFCE',CHAVE_INI_VERSAO_MANUAL,'vm60');
    Mais1Ini.WriteString('NFCE', CHAVE_INI_VERSAO_ESQUEMA, 'pl_009');
    Mais1ini.Free;
    //
    Form1.N4001Click(Sender);

    ConfiguraNFCE(True); // Form1.NFCeVersaoManualvm601Click() Sandro Silva 2018-03-02
  end;
end;

procedure TForm1.Nmerodanota1Click(Sender: TObject);
var
  sPesquisa: String; // Sandro Silva 2017-12-13
  sNumeroPesquisa: String;
  sCaixaPesquisa: String;
begin
  if Form1.sModeloECF_Reserva = '59' then
    sPesquisa := Trim(Small_InputBox('Pesquisa', 'Informe o número ' + Form1.sTipoDocumento + ' e o número do caixa separado por "/". Ex.: 000123/001 ', ''))
  else
    sPesquisa := Trim(Small_InputBox('Pesquisa', 'Informe o número ' + Form1.sTipoDocumento, ''));

  try

    if Form1.sModeloECF_Reserva = '59' then
    begin
      sNumeroPesquisa := LimpaNumero(Copy(sPesquisa, 1, Pos('/', sPesquisa) - 1));
      sCaixaPesquisa  := LimpaNumero(Copy(sPesquisa, Pos('/', sPesquisa) + 1, Length(sPesquisa)));
    end
    else
    begin
      sNumeroPesquisa := LimpaNumero(sPesquisa);
      sCaixaPesquisa  := '';
    end;

    if StrToInt64Def(sNumeroPesquisa, 0) > 0 then // Sandro Silva 2018-10-18 if StrToInt64Def(sPesquisa, 0) > 0 then
    begin
      ibDataSet99.Close;
      ibDataSet99.SelectSql.Text :=
        'select * ' +
        'from NFCE ' +
        'where MODELO = ' + QuotedStr(Form1.sModeloECF) +
        ' and NUMERONF = ' + QuotedStr(FormataNumeroDoCupom(StrToInt64Def(sNumeroPesquisa, 0))); // Sandro Silva 2021-12-02 ' and NUMERONF = ' + QuotedStr(StrZero(StrToInt64Def(sNumeroPesquisa, 0), 6, 0));

      if StrToIntDef(sCaixaPesquisa, 0) > 0 then // Quando esta usando SAT/MFE cada hardware segue sua sequência de número de cupom, haverá 2 venda com mesmo número, mas em caixas diferentes
        ibDataSet99.SelectSql.Add(' and CAIXA = ' + QuotedStr(StrZero(StrToIntDef(sCaixaPesquisa, 0), 3, 0)));

      ibDataset99.Open;
      if ibDataset99.FieldByName('NUMERONF').AsString = FormataNumeroDoCupom(StrToInt64Def(sPesquisa, 0)) then // Sandro Silva 2021-12-02 if ibDataset99.FieldByName('NUMERONF').AsString = StrZero(StrToInt64Def(sPesquisa, 0), 6, 0) then
      begin
        DateTimePicker1.Date := ibDataset99.FieldByName('DATA').AsDateTime;
        Form1.DateTimePicker1Change(Form1.DateTimePicker1);
        Form1.ibDataset150.Locate('NUMERONF', FormataNumeroDoCupom(StrToInt64Def(sPesquisa, 0)), []); // Sandro Silva 2021-12-02 Form1.ibDataset150.Locate('NUMERONF', StrZero(StrToInt64Def(sPesquisa, 0), 6, 0), []);
      end;
    end;
  except

  end;

end;

procedure TForm1.CNPJCPFdoCliente1Click(Sender: TObject);
var
  sPesquisa: String; // Sandro Silva 2017-12-13
begin
  sPesquisa := LimpaNumero(Small_InputBox('Pesquisa', 'Informe o CPF ou CNPJ do cliente', ''));
  try
    if (Length(sPesquisa) = 11) or (Length(sPesquisa) = 14) then
    begin
      if (Length(sPesquisa) = 11) then
      begin
        sPesquisa := '<dest><CPF>' + sPesquisa + '</CPF>';
      end;

      if (Length(sPesquisa) = 14) then
      begin
        sPesquisa := '<dest><CNPJ>' + sPesquisa + '</CNPJ>';
      end;

      Form1.ibDataset150.Close;
      Form1.ibDataset150.SelectSql.Clear;
      Form1.ibDataset150.SelectSQL.Add('select * from NFCE where MODELO = ' + QuotedStr(Form1.sModeloECF) + ' and  NFEXML containing ' + QuotedStr(sPesquisa) + ' order by NUMERONF ');
      Form1.ibDataset150.Open;

    end;
  except

  end;
end;

procedure TForm1.NomeCliente1Click(Sender: TObject);
var
  sPesquisa: String; // Sandro Silva 2017-12-13
begin
  sPesquisa := Small_InputBox('Pesquisa no XML', 'Informe o nome do cliente', '');
  try
    Form1.ibDataset150.Close;
    Form1.ibDataset150.SelectSql.Clear;
    Form1.ibDataset150.SelectSQL.Add('select * from NFCE where MODELO = ' + QuotedStr(Form1.sModeloECF) + ' and (NFEXML containing ' + QuotedStr('</CPF><xNome>' + sPesquisa) + ' or NFEXML containing ' + QuotedStr('</CNPJ><xNome>' + sPesquisa) + ' or NFEXML containing ' + QuotedStr('<dest><xNome>' + sPesquisa) + ') order by DATA, NUMERONF ');
    Form1.ibDataset150.Open;
  except

  end;
end;

procedure TForm1.touch_PesquisaNFCeClick(Sender: TObject);
begin
  Nmerodanota1.Caption := 'Número ' + Form1.sTipoDocumento;
  PopupMenu6.PopUp(Form1.Panel7.Left, Form1.Panel7.BoundsRect.Bottom + AjustaAltura(3));
end;

procedure TForm1.touch_OpcoesNFCeClick(Sender: TObject);
begin
  PopupMenu2.PopUp(Form1.Panel8.Left, Form1.Panel8.BoundsRect.Bottom + AjustaAltura(3));
end;

function ImprimeTracos(Qtd: Integer = 46): String;
begin
  if (Form1.sModeloECF_Reserva <> '59') and (Form1.sModeloECF_Reserva <> '65') and (Form1.sModeloECF_Reserva <> '99') then
  begin
    Result := '-----------------------------------------------';
  end
  else
  begin
    if Printer.Printers.Count > 0 then // Sandro Silva 2018-06-13 
    begin
      Printer.PrinterIndex := Printer.Printers.IndexOf(Form1.sImpressoraPadraoWindows);
      if Trim(Form1.sImpressoraDestino) <> '' then
        Printer.PrinterIndex := Printer.Printers.IndexOf(Form1.sImpressoraDestino);

      if Printer.PageWidth <= 464 then
        Result := Replicate('-', 45)
      else
        Result := Replicate('-', 47);
    end;
  end;
end;

procedure TForm1.NFCenoperodo1Click(Sender: TObject);
begin
  RelatorioNFCeNoPeriodo; // Sandro Silva 2022-03-29  
end;

procedure TForm1.TimerHoraTimer(Sender: TObject);
begin
  // Este timer é apenas para controlar a exibição da hora.
  // Não incluir aqui outro controle
  if Form1.bBalancaAutonoma then
    Label_ok.Caption := DateToStr(Date)+' '+TimeToStr(Time) + ' '
  else
    Label_ok.Caption := 'Caixa: '+Right('000'+Form1.sCaixa,3)+' '+DateToStr(Date)+' '+TimeToStr(Time) + ' ';
  Label_ok.Left    := Screen.Width - Label_Ok.Width - AjustaLargura(20);
end;

procedure TForm1.CarnResumido1Click(Sender: TObject);
begin
  // Sandro Silva 2018-04-30
  if CarnResumido1.Checked then
    GravarParametroIni('Frente.ini', 'Frente de caixa', CHAVE_CARNE_RESUMIDO, 'Não')
  else
    GravarParametroIni('Frente.ini', 'Frente de caixa', CHAVE_CARNE_RESUMIDO, 'Sim');

  Form1.bCarneResumido := (LerParametroIni('FRENTE.INI', 'Frente de caixa', CHAVE_CARNE_RESUMIDO, 'Não') = 'Sim');

  Form1.CarnResumido1.Checked := Form1.bCarneResumido;
end;

procedure TForm1.ibDataSet13BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('EMITENTE', DataSet, True);
end;

procedure TForm1.OrdemdaaliquotadeISS1Click(Sender: TObject);
var
  Mais1ini  : TIniFile;
  sOrdemAliquota: String;
begin
  // Configura ordem da alíquota de iss no ECF
  try
    Mais1ini  := TIniFile.Create('FRENTE.INI');
    sOrdemAliquota := Mais1Ini.ReadString('Frente de caixa', 'Ordem da aliquota de ISS', 'XX');
    //
    try
      sOrdemAliquota := Small_InputBox('Frente de caixa', 'Qual a ordem da aliquota de ISS:', sOrdemAliquota);
      Mais1Ini.WriteString('Frente de caixa', 'Ordem da aliquota de ISS', sOrdemAliquota);
    except end;
    //
    Mais1Ini.Free;
  except
    sOrdemAliquota := '';
  end;
  Form1.sOrdemAliquotaISS := OrdemAliquotaISSECF(False);
end;

function TForm1.ImpressaoNaoSujeitoaoICMS(sP1: String; bPDF: Boolean = False; LarguraPapel: Integer = 640): Boolean; // Sandro Silva 2018-11-20 function TForm1.ImpressaoNaoSujeitoaoICMS(sP1: String; bPDF: Boolean = False): Boolean;
var
  I, iLinha, iTamanho : Integer;
  sLinha : String;
  iMargemLeft: Integer;// Sandro Silva Controla a margem a esquerda onde inicia a impressão
  sPDFFile, sPDFTemp: String; // Sandro Silva 2018-03-23
  iNumPaginas: Integer; // Sandro Silva 2018-03-23
  iTentaAbrirPDF: Integer; // Sandro Silva 2018-03-23
  FontNameOld: String; // Sandro Silva 2018-03-23
  FontSizeOld: Integer; // Sandro Silva 2018-03-23
  ImpressaoPDF: TImpressaoPDF; // Sandro Silva 2018-11-20
  PrinterNew: TPrinter; // Sandro Silva 2019-07-15
  procedure DefinePapel(sArquivoPDF: String);
  var
    Device: array[0..255] of char;
    Driver: array[0..255] of char;
    Port  : array[0..255] of char;
    hDMode: THandle;
    PDMode: PDEVMODE;
  begin
    PrinterNew.PrinterIndex := PrinterNew.PrinterIndex;
    PrinterNew.GetPrinter(Device, Driver, Port, hDMode);
    if hDMode <> 0 then
    begin
      pDMode := GlobalLock(hDMode);
      if pDMode <> nil then
      begin

       //Set to A4
        pDMode^.dmFields := pDMode^.dmFields or DM_PAPERSIZE;
        pDMode^.dmPaperSize := DMPAPER_A4;

       //Set to legal
       // pDMode^.dmFields := pDMode^.dmFields or dm_PaperSize;
       // pDMode^.dmPaperSize := DMPAPER_LEGAL;

       //Set to custom size
       // pDMode^.dmFields := pDMode^.dmFields or
       //                     DM_PAPERSIZE or
       //                     DM_PAPERWIDTH or
       //                     DM_PAPERLENGTH;
       // pDMode^.dmPaperSize := DMPAPER_USER;
       // pDMode^.dmPaperWidth := 297; // SomeValueInTenthsOfAMillimeter
       // pDMode^.dmPaperLength := 5; //SomeValueInTenthsOfAMillimeter

       //Set the bin to use
       // pDMode^.dmFields := pDMode^.dmFields or DMBIN_MANUAL;
       // pDMode^.dmDefaultSource := DMBIN_MANUAL;

        GlobalUnlock(hDMode);
      end;
    end;
    PrinterNew.PrinterIndex := PrinterNew.PrinterIndex;
    PrinterNew.SetPrinter(Device, Driver, PAnsiChar(sArquivoPDF), hDMode);
  end;
  {Sandro Silva 2018-03-23 fim}
begin
  //
  //  SmallMsg(sP1);
  //
  //
  if Right(sP1, 1) <> Chr(10) then
    sP1 := sP1 + Chr(10);
  if (Form1.sModeloECF <> '99') and (Form1.sModeloECF_Reserva <> '99') then
    sP1 := sP1 + Chr(10) + 'Small - ' + Form1.sTipoDocumento2 + ' ';
  sP1 := sP1 + FormatDateTime('dd/mm/yyyy HH:nn:ss', Now) + Chr(10) + Form22.sBuild + Chr(10); // Versão e build o módulo Sandro Silva 2018-03-22
  if (Form1.ClienteSmallMobile.sVendaImportando = '') then // Não imprimir carnê quando for venda mobile
  begin
    if (bPDF = False) or (bPDF and (Printer.Printers.IndexOf('Microsoft Print to PDF') > -1)) then // Impressão normal ou imprimir em PDF com Microsoft Print to PDF (windows 10 > ) Sandro Silva 2018-05-10
    begin

      PrinterNew := TPrinter.Create;
      PrinterNew.PrinterIndex := PrinterNew.PrinterIndex;

      FontNameOld := 'Courier New';
      FontSizeOld := 7;
      try
        try
          if (not VerificaSeTemImpressora()) or (PrinterNew.Printers.Count < 1) then // Sandro Silva 2018-06-13  if not VerificaSeTemImpressora() then
          begin
            SmallMsg('Não há impressora instalada no windows!');
            Screen.Cursor             := crDefault;    // Cursor de Aguardo
            Abort;
          end;
          //
          PrinterNew.PrinterIndex := Printer.Printers.IndexOf(Form1.sImpressoraPadraoWindows);
          if Trim(Form1.sImpressoraDestino) <> '' then
            PrinterNew.PrinterIndex := PrinterNew.Printers.IndexOf(Form1.sImpressoraDestino);

          iMargemLeft := 5; // Sandro Silva 2015-05-06
          if PrinterNew.PageWidth <= 464 then
            iMargemLeft := 15;

          if bPDF then
          begin
            if DirectoryExists(ExtractFilePath(Application.ExeName) + 'Relatorios') = False then
              ForceDirectories(ExtractFilePath(Application.ExeName) + 'Relatorios');

            sPDFTemp := ExtractFilePath(Application.ExeName) + 'Relatorios\RelatorioGerencial_' + FormatDateTime('yyyymmddHHnnss', Now) +'.pdf.tmp';
            sPDFFile := ExtractFilePath(Application.ExeName) + 'Relatorios\RelatorioGerencial_' + FormatDateTime('yyyymmddHHnnss', Now) +'.pdf';
            PrinterNew.PrinterIndex := PrinterNew.Printers.IndexOf('Microsoft Print to PDF');
            DefinePapel(sPDFTemp);
            iMargemLeft := 250;// Para pdf define margem em mm
          end;
          FontNameOld := PrinterNew.Canvas.Font.Name;
          FontSizeOld := PrinterNew.Canvas.Font.Size;

          PrinterNew.Canvas.Pen.Width  := 1;             // Largura da linha  //
          PrinterNew.Canvas.Font.Name  := 'Courier New'; // Tipo da fonte     //
          PrinterNew.Canvas.Font.Size  := 7;             // Tamanho da fonte  //
          if PrinterNew.PageWidth <= 464 then
            PrinterNew.Canvas.Font.Size  := 5;           // Tamanho da fonte  //
          PrinterNew.Canvas.Font.Style := [fsBold];      // Coloca em negrito //
          PrinterNew.Canvas.Font.Color := clBlack;
          // "a" impresso ocupa menos espaço que "W" iTamanho := PrinterNew.Canvas.TextWidth('a') * 3;   // Tamanho que cada caractere ocupa na impressão em pontos
          iTamanho := PrinterNew.Canvas.TextWidth('W') * 3;   // Tamanho que cada caractere ocupa na impressão em pontos
          if PrinterNew.PageWidth <= 464 then
            iTamanho := Trunc(PrinterNew.Canvas.TextWidth('W') * 2.5);   // Tamanho que cada caractere ocupa na impressão em pontos // Sandro Silva 2018-03-23  iTamanho := PrinterNew.Canvas.TextWidth('W') * 4;   // Tamanho que cada caractere ocupa na impressão em pontos

          if (bPDF) then // Sandro Silva 2018-03-23  if PrinterNew.PageWidth <= 464 then
            iTamanho := 72;// Sandro Silva 2018-03-26 Dinamicamente a 1ª vez fica 72. A 2ª vez retorna 384  PrinterNew.Canvas.TextHeight('ÁÀÄÂÃÉÈËÊÍÌÏÎÓÒÖÔÕÚÙÜÛgçjypq') * 6;   // Tamanho que cada caractere ocupa na impressão em pontos. PDF retorna 12 para altura, isso é menor que o altura do caracter gerado. Multiplicar por 6 para ajustar

          if (bPDF) then // Sandro Silva 2018-03-23  if PrinterNew.PageWidth <= 464 then
            Form1.ExibePanelMensagem('Gerando relatório em PDF');

          PrinterNew.Title := 'Relatório Gerencial';          // Este título é visto no spoool da impressora
          PrinterNew.BeginDoc;                                // Inicia o documento de impressão
          //
          iLinha := 1;
          sLinha := '';
          //
          for I := 1 to Length(sP1) do
          begin
            if Copy(sP1,I,1) <> chr(10) then
            begin
              sLinha := sLinha+Copy(sP1,I,1);
            end else
            begin
              PrinterNew.Canvas.TextOut(iMargemLeft, iLinha * iTamanho,sLinha);  // Impressão da linha
              iLinha := iLinha + 1;

              sLinha := '';
              //A partir da posição vertical atual do canvas + a altura da fonte verifica se é maior que a altura da página da impressora padrão
              if (PrinterNew.Canvas.PenPos.Y + PrinterNew.Canvas.TextHeight('Ég')) >= (PrinterNew.PageHeight - (PrinterNew.Canvas.TextHeight('Ég') * 3)) then // Controla avanço de páginas
              begin
                PrinterNew.NewPage;
                iLinha := 1;
              end;
            end;
          end;
          //
          PrinterNew.Canvas.TextOut(iMargemLeft, (iLinha+1) * iTamanho,' ');  //
          PrinterNew.Canvas.TextOut(iMargemLeft, (iLinha+2) * iTamanho,' ');  //
          iNumPaginas := PrinterNew.PageNumber;
          //
          PrinterNew.EndDoc;

          if bPDF then
          begin

            Form1.ExibePanelMensagem('Salvando arquivo PDF'); // Sandro Silva 2019-08-01

            // Aguarda arquivo ser gerado e gravado no HD

            Sleep(750 * (iNumPaginas + 1));
            if (iNumPaginas) <= 10 then
              Sleep(5000);

            Sleep(500); // Aguarda arquivo ser gravado no HD

            iTentaAbrirPDF := 1;

            while RenameFile(sPDFTemp, sPDFFile) = False do
            begin

              // Sandro Silva 2019-08-01  Form1.ExibePanelMensagem('Salvando arquivo PDF');

              Sleep(3000 * iTentaAbrirPDF);
              Inc(iTentaAbrirPDF);
              if iTentaAbrirPDF > 5 then
                Break;
            end;

            if FileExists(sPDFFile) then
              ShellExecute(Application.Handle, 'Open', pChar(sPDFFile), '', '', SW_SHOW); // Sandro Silva 2020-12-07 ShellExecute(0, 'Open', pChar(sPDFFile), '', '', SW_SHOW);

          end;
        except
          on E: Exception do
          begin
            SmallMsg('Erro ao imprimir Relatório Gerencial! '+E.Message);
          end;
        end;
      finally
        if PrinterNew.Printing then
          PrinterNew.EndDoc;
        if (bPDF) then
        begin
          Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31
        end;

        Screen.Cursor := crDefault;
      end;

      PrinterNew.PrinterIndex := PrinterNew.Printers.IndexOf(Form1.sImpressoraPadraoWindows);
      if Trim(Form1.sImpressoraDestino) <> '' then
        PrinterNew.PrinterIndex := PrinterNew.Printers.IndexOf(Form1.sImpressoraDestino);
      PrinterNew.Canvas.Font.Name := FontNameOld;
      PrinterNew.Canvas.Font.Size := FontSizeOld;
      FreeAndNil(PrinterNew);
    end
    else
    begin

      Form1.ExibePanelMensagem('Gerando arquivo PDF'); // Sandro Silva 2021-08-10
      try
        ImpressaoPDF := TImpressaoPDF.Create(Application);
        ImpressaoPDF.LarguraPapel := LarguraPapel;
        ImpressaoPDF.Imprimir('Relatório Gerencial', sP1, 'RelatorioGerencial_' + FormatDateTime('yyyymmddHHnnss', Now) +'.pdf');
        ImpressaoPDF.Free;
      finally
        Form1.OcultaPanelMensagem; // Sandro Silva 2021-08-10
      end;

    end;//if (bPDF = False) or (bPDF and (Printer.Printers.IndexOf('Microsoft Print to PDF') > -1)) // Sandro Silva 2018-05-10

  end; // if (Form1.ClienteSmallMobile.sVendaImportando = '') then // Não imprimir carnê quando for venda mobile
  //
  Result := True;
  //
end;

procedure TForm1.LarguradoPapel58mm1Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, 'FRENTE DE CAIXA', 'Papel Cupom', '58');
  Form1.sTamanhoPapel := '58';
  LarguradoPapelA41.Checked   := (Form1.sTamanhoPapel = 'A4');
  LarguradoPapel76mm1.Checked := (Form1.sTamanhoPapel = '76');
  LarguradoPapel80mm1.Checked := (Form1.sTamanhoPapel = '80');
  LarguradoPapel58mm1.Checked := (Form1.sTamanhoPapel = '58');
end;

procedure TForm1.LarguradoPapel76mm1Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, 'FRENTE DE CAIXA', 'Papel Cupom', '76');
  Form1.sTamanhoPapel := '76';
  LarguradoPapelA41.Checked   := (Form1.sTamanhoPapel = 'A4');
  LarguradoPapel80mm1.Checked := (Form1.sTamanhoPapel = '80');
  LarguradoPapel58mm1.Checked := (Form1.sTamanhoPapel = '58');
  LarguradoPapel76mm1.Checked := (Form1.sTamanhoPapel = '76');
end;

procedure TForm1.LarguradoPapel80mm1Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, 'FRENTE DE CAIXA', 'Papel Cupom', '80');
  Form1.sTamanhoPapel := '80';
  LarguradoPapelA41.Checked   := (Form1.sTamanhoPapel = 'A4');
  LarguradoPapel76mm1.Checked := (Form1.sTamanhoPapel = '76');
  LarguradoPapel58mm1.Checked := (Form1.sTamanhoPapel = '58');
  LarguradoPapel80mm1.Checked := (Form1.sTamanhoPapel = '80');
end;

procedure TForm1.LarguradoPapelA41Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, 'FRENTE DE CAIXA', 'Papel Cupom', 'A4');
  Form1.sTamanhoPapel := 'A4';
  LarguradoPapel76mm1.Checked := (Form1.sTamanhoPapel = '76');
  LarguradoPapel80mm1.Checked := (Form1.sTamanhoPapel = '80');
  LarguradoPapel58mm1.Checked := (Form1.sTamanhoPapel = '58');
  LarguradoPapelA41.Checked   := (Form1.sTamanhoPapel = 'A4');
end;

procedure TForm1.ConfigurarImpressora1Click(Sender: TObject);
begin
  LarguradoPapelA41.Checked   := (Form1.sTamanhoPapel = 'A4');
  LarguradoPapel76mm1.Checked := (Form1.sTamanhoPapel = '76');
  LarguradoPapel80mm1.Checked := (Form1.sTamanhoPapel = '80') or (Form1.sTamanhoPapel = ''); // 80 mm é o padrão
  LarguradoPapel58mm1.Checked := (Form1.sTamanhoPapel = '58');
end;

function TForm1.UsaIntegradorFiscal(UF: String = ''): Boolean;
// Sandro Silva 2018-06-29 Valida se na UF é obrigatório usar o Integrador Fiscal. Inicialmente apenas CE
begin
  {Sandro Silva 2022-05-17 inicio

  Sefaz/CE desativa Integrador fiscal
  https://www.sefaz.ce.gov.br/2022/05/11/comunicado-desativacao-integrador-e-validador-fiscal/

  if Trim(UF) = '' then
    UF := Form1.IBDataSet13.FieldByName('ESTADO').AsString;
  UF := '|' + AnsiUpperCase(UF) + '|';

            //(NFC-e e UF-CE) ou MFE
  Result := ((Form1.sModeloECF  = '65') and AnsiContainsText('|CE|', UF)) or ((Form1.sModeloECF  = '59') and (_ecf59_Tipodaimpressora = 'MFE'));

  if Form1.bBalancaAutonoma then // Sandro Silva 2019-01-23
    Result := False;

  }

  if Trim(UF) = '' then
    UF := Form1.IBDataSet13.FieldByName('ESTADO').AsString;
  UF := '|' + AnsiUpperCase(UF) + '|';

            //(NFC-e e UF-CE) ou MFE
  //Result := ((Form1.sModeloECF  = '65') and AnsiContainsText('|CE|', UF)) or ((Form1.sModeloECF  = '59') and (_ecf59_Tipodaimpressora = 'MFE'));
  Result := ((Form1.sModeloECF  = '59') and (_ecf59_Tipodaimpressora = 'MFE'));

  if Form1.bBalancaAutonoma then // Sandro Silva 2019-01-23
    Result := False;

  if FileExists('c:\Program Files (x86)\SEFAZ-CE\Driver MFE\Biblioteca de funções\mfe.dll') or FileExists('c:\Program Files\SEFAZ-CE\Driver MFE\Biblioteca de funções\mfe.dll') then
      Result := False;

  {Sandro Silva 2022-05-17 fim}
end;

procedure TForm1.VincularAssinaturaAC1Click(Sender: TObject);
//var
//  sResposta: String;
begin
  {Sandro Silva 2023-01-05 inicio
  if _59.AssinaturaAssociada = '' then
  begin
    Form1.ExibePanelMensagem('Aguarde! Vinculando Assinatura');
    sResposta := Form1.GetAssinaturaHttpPost(StrTran(Form22.sSerie, 'Número de série: ', ''), _59.Emitente.CNPJ, _59.Fabricante, _59.NumeroSerieSAT);

    if (Trim(xmlNodeValue(sResposta, '//assinaturaassociada')) <> '') then
      _ecf59_GravaAssinaturaAssociada(Trim(xmlNodeValue(sResposta, '//assinaturaassociada')));

    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31
  end;

  if _59.AssinaturaAssociada <> '' then
    _ecf59_AssociarAssinatura(_59.CodigoAtivacao, _59.Emitente.CNPJ, _59.AssinaturaAssociada)
  else
    SmallMsgBox(PAnsiChar('Nenhuma Assinatura encontrada' + #13 + #13 +
                          'Verifique sua conexão com a Internet' + #13 + 'e tente vincular novamente' + #13 +
                          'Persistindo o erro acesse www.smallsoft.com.br, Suporte e escolha Autorização de uso SAT ou MF-e' + #13 +
                          'Você receberá por e-mail um arquivo com a assinatura. Salve esse arquivo na pasta Windows'), 'Atenção', MB_OK + MB_ICONWARNING);
  }
  VincularAssinaturaAC;
  {Sandro Silva 2023-01-05 fim}
end;

procedure TForm1.FormatarIEdoemitentecom12dgitos1Click(
  Sender: TObject);
var
  sIE12Posicoes: String;
begin
  // Equipamentos SAT/MFE da Tanca não aceitam no xml a IE do emitente com menos de 12 dígitos  
  sIE12Posicoes := LimpaNumero(Form1.ibDataSet13.FieldByName('IE').AsString);
  sIE12Posicoes := Right(DupeString('0', 12) + sIE12Posicoes, 12);
  if SmallMsgBox(PAnsiChar('Ao efetuar vendas usar Inscrição Estadual com 12 dígitos' + #13 +
                           'Ex.: ' + LimpaNumero(Form1.ibDataSet13.FieldByName('IE').AsString) + ' -> ' + sIE12Posicoes + #13 +
                           #13 +
                           'Confirma?'), 'Atenção', MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION) = idYes then
  begin
    SalvarConfiguracao('FRENTE.INI', 'SAT-CFe', 'Completar IE', 'Sim');
  end
  else
  begin
    SalvarConfiguracao('FRENTE.INI', 'SAT-CFe', 'Completar IE', 'Não');
  end;
end;

procedure TForm1.EnviarchaveconsultapeloWhatsApp1Click(Sender: TObject);
var
  sMsg: String;
  sFone: String;
  sModeloDocumento: String;
  sCPFCNPJDestinatario: String;
  sNomeDestinatario: String;
begin
  if (Form1.sModeloECF = '59') or (Form1.sModeloECF = '65') or (Form1.sModeloECF = '99') then
  begin

    //Conforme o modelo do documento informado no ID monta a mensagem
    sModeloDocumento := Copy(LimpaNumero(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEID').AsString), 21, 2);

    if (sModeloDocumento = '65') then
    begin
      if RetornaValorDaTagNoCampo('qrCode', Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString) = '' then
      begin
        SmallMsg('Link de consulta indisponível no xml');
        Exit;
      end;
    end;

    sCPFCNPJDestinatario := Trim(xmlNodeValue(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString, '//dest/CPF'));
    if sCPFCNPJDestinatario = '' then
      sCPFCNPJDestinatario := Trim(xmlNodeValue(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString, '//dest/CNPJ'));

    if Trim(sCPFCNPJDestinatario) = '' then
    begin
      // Localiza o cliente informado na venda.
      // Não usar o nome do cliente contido no xml. No xml estará sem caracteres especiais, diferente do banco
      Form1.IBQuery65.Close;
      Form1.IBQuery65.SQL.Text :=
        'select * ' +
        'from ALTERACA ' +
        'where PEDIDO = ' + QuotedStr(Form1.DBGrid1.DataSource.DataSet.FieldByName('NUMERONF').AsString) +
        ' and CAIXA = ' + QuotedStr(Form1.DBGrid1.DataSource.DataSet.FieldByName('CAIXA').AsString) +
        ' and (TIPO = ''BALCAO'' or TIPO = ''LOKED'') ' +
        ' and coalesce(CLIFOR, '''') <> '''' ';
      Form1.IBQuery65.Open;
      sNomeDestinatario := Form1.IBQuery65.FieldByName('CLIFOR').AsString;
    end;

    if (sCPFCNPJDestinatario <> '') then
    begin
      Form1.ibDataSet2.Close;
      Form1.ibDataSet2.SelectSQL.Text :=
        'select * from CLIFOR ' +
        'where CGC = ' + QuotedStr(FormataCpfCgc(LimpaNumero(sCPFCNPJDestinatario)));
      Form1.ibDataSet2.Open;
      if (LimpaNumero(Form1.ibDataSet2.FieldByName('CGC').AsString) = LimpaNumero(sCPFCNPJDestinatario))
        and (LimpaNumero(Form1.ibDataSet2.FieldByName('CGC').AsString) <> '') then
        sFone := StrTran(Form1.ibDataSet2.FieldByName('WHATSAPP').AsString, '0xx', '');
    end
    else
    begin
      if sNomeDestinatario <> '' then
      begin
        Form1.ibDataSet2.Close;
        Form1.ibDataSet2.SelectSQL.Text :=
          'select * from CLIFOR ' +
          'where NOME = ' + QuotedStr(sNomeDestinatario);
        Form1.ibDataSet2.Open;
        if (Form1.ibDataSet2.FieldByName('NOME').AsString = sNomeDestinatario)
          and (Form1.ibDataSet2.FieldByName('NOME').AsString <> '') then
          sFone := StrTran(Form1.ibDataSet2.FieldByName('WHATSAPP').AsString, '0xx', '');
      end;
    end;

    // Elimina a máscara "(0xx)"
    sFone := StringReplace(sFone, '(', '', [rfReplaceAll]);
    sFone := StringReplace(sFone, ')', '', [rfReplaceAll]);
    sFone := StringReplace(AnsiUpperCase(sFone), 'X', '', [rfReplaceAll]);
    sFone := LimpaNumero(sFone); // Por último deixa somente números

    if Trim(sFone) = '' then
    begin
      sFone := LimpaNumero(Form1.ibDataSet13.FieldByName('TELEFO').AsString); // Mascara do fone do emitente grava (0xx49)
      if Length(sFone) > 10 then
      begin
        if Copy(sFone, 1, 1) = '0' then
          sFone := Copy(sFone, 2, 2)
        else
          sFone := Copy(sFone, 1, 2);
      end
      else
        sFone := '';
    end;

    sFone := Trim(Small_InputBox('Mensagem pelo WhatsApp', 'Informe o número do WhatsApp (DDD+número)', sFone));

    if sFone <> '' then
    begin
      if sModeloDocumento = '59' then
      begin
        sMsg := 'Ola,' + #10 + 'Consulte seu Cupom Fiscal acessando' + #10;
        if (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'CE') or (Copy(LimpaNumero(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEID').AsString), 1, 2) = '23') then
        begin
          sMsg := sMsg + 'http://cfe.sefaz.ce.gov.br/mfe/servicos#/cupom-fiscal?cfeKey=';
        end;
        if (AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString) = 'SP') or (Copy(LimpaNumero(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEID').AsString), 1, 2) = '35') then
        begin
          sMsg := sMsg + 'https://satsp.fazenda.sp.gov.br/COMSAT/Public/ConsultaPublica/ConsultaPublicaCfe.aspx?ctl00$conteudo$txtChaveAcesso=';
        end;
        sMsg := sMsg + LimpaNumero(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEID').AsString);
        sMsg := sMsg + #10 + #10 + 'Sua chave de acesso: ' + LimpaNumero(Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEID').AsString); // Para casos em que o formulário não é exibido com campo da chave preenchido // Sandro Silva 2018-11-14 
      end;

      if sModeloDocumento = '65' then
      begin
        sMsg := 'Ola,' + #10 + 'Consulte sua Nota Fiscal acessando' + #10;
        sMsg := sMsg + RetornaValorDaTagNoCampo('qrCode',Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString);// xmlNodeValue('//qrCode', Form1.DBGrid1.DataSource.DataSet.FieldByName('NFEXML').AsString);
        sMsg := StringReplace(sMsg, ']]>', '', [rfReplaceAll]);
        sMsg := StringReplace(sMsg, '<![CDATA[', '', [rfReplaceAll]);
      end;
      //
      sMsg := StrTran(sMsg,' ','%20');
      sMsg := StrTran(sMsg,chr(10),'%0A');
      sMsg := StrTran(sMsg,chr(13),'');
      sMsg := StrTran(sMsg,'=','%3D');
      sMsg := StrTran(sMsg, '&', '%26'); // Sandro Silva 2019-08-02       
      //
      sFone := '55'+LimpaNumero(StrTran(sFone,'0xx',''));
      ShellExecute( 0, 'Open', pChar('https://api.whatsapp.com/send?phone='+sFone+'&text='+sMSG),'','', SW_SHOW);
      //
    end;
  end;
end;

procedure TForm1.CNAEdispensadoatransmissodosarquivosdoEstoque1Click(
  Sender: TObject);
begin
  if Application.MessageBox(PAnsiChar('A transmissão mensal do arquivo eletrônico do Estoque fica dispensada para os restaurantes, bares e similares,' + #10 +'conforme regra disposta no Ato COTEPE ICMS 09/2013 e ATO DIAT 17/2017.' +
                           #10 +#10 + 'A não transmissão é passível de penalidades fiscais.' +
                           #10 +#10 + 'Consulte seu Contador!' +
                           #10 +#10 + 'O CNAE da sua empresa está dispensado da transmissão?'), 'Atenção', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = idNo then
    SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Dispensado do Envio do Estoque', 'Não')
  else
    SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Dispensado do Envio do Estoque', 'Sim');
  CNAEdispensadoatransmissodosarquivosdoEstoque1.Checked := (LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Dispensado do Envio do Estoque', 'Não') = 'Sim');
end;

procedure TForm1.BlocoXSelecionaCertificadoDigital;
begin
  _BlocoX.SelecionaCertificadoDigital;
end;

procedure TForm1.Frame_teclado1Timer1Timer(Sender: TObject);
begin
  Frame_teclado1.Timer1Timer(Sender);
end;

procedure TForm1.Atualizar1Click(Sender: TObject);
begin
  if Form1.Memo1.Visible = False then // Sandro Silva 2016-04-02
  begin
    Screen.Cursor := crHourGlass;
    TestaTudo(False); // Image1DblClick
    
    Commitatudo(True); // Sandro Silva 2018-12-03

    if StrToIntDef(sMesas, 0) <> 0 then
      Mesas(StrToInt(sMesas));

    Screen.Cursor := crDefault;
  end;
end;

function TForm1.SelecionaMesaInicialPesoAutonomo: Integer;
// Lê a configuração da mesa inicial para gravar as pesagens sem operador
begin
  Form1.iMesaInicialPesagem := StrToIntDef(LerParametroIni('Frente.ini', 'Frente de Caixa', 'Mesa Pesado', '1'), 1);
  if Form1.iMesaInicialPesagem >= StrToIntDef(Form1.sMesas, 0) then
    Form1.iMesaInicialPesagem := StrToIntDef(Form1.sMesas, 0) div 2; // Se a mesa inicial dos pesados for igual o número definido para o total de mesas, então inicará na metade da mesas
  Result := Form1.iMesaInicialPesagem;
end;

function TForm1.AchaMesaLivre: Integer;
// Localiza a próxima mesa vazia
var
  i: Integer;
begin
  Result := 1;
  for i := Form1.iMesaInicialPesagem to StrToIntDef(Form1.sMesas, 0) do
  begin
    Form1.ibDataSet27.Close;
    Form1.ibDataSet27.SelectSQL.Text :=
      'select * ' +
      'from ALTERACA ' +
      'where (TIPO=''MESA'' or TIPO=''DEKOL'') ' +
      ' and PEDIDO = ' + QuotedStr(FormataNumeroDoCupom(I)); // Sandro Silva 2021-12-02 ' and PEDIDO = ' + QuotedStr(StrZero(I, 6, 0));
    Form1.ibDataSet27.Open;
    if Form1.ibDataSet27.FieldByName('PEDIDO').AsString = '' then
    begin
      Result := i;
      Break;
    end;
  end;

end;

procedure TForm1.PesagemAutonoma;
// Seleciona a próxima mesa vazia
var
  iMesaLivre: Integer;
begin
  // Sandro Silva 2019-01-21  bPesou := True;
  if StrToFloatDef(sPesoAutonomo, 0) > 0 then
  begin
    Commitatudo2(True); // Pesagem autonoma

    iMesaLivre := AchaMesaLivre; // Encontra a próxima mesa livre

    // Abre a mesa livre encontrada
    Form1.Edit1.Text := '<F4>' + StrZero(iMesaLivre, 5, 0) + '<F4>';
    // Simula o pressionamento do Enter
    SendMessage(Form1.Edit1.Handle, WM_KEYDOWN, VK_RETURN, 0);
    SendMessage(Form1.Edit1.Handle, WM_KEYUP, VK_RETURN, 0);

    //LogFrente('Abriu mesa'); // Sandro Silva 2019-01-29

    // Lança o produto configurado
    Form1.Edit1.Text := sPesoAutonomo + '*' + Form1.sCodigoProdutoPesado;// Sandro Silva 2019-01-29  Form1.Edit1.Text := Form1.sCodigoProdutoPesado; // StrZero(StrToIntDef(LerParametroIni('Frente.ini', 'Frente de Caixa', 'Produto Balanca', '0'), 0), 5, 0);
    //Simula o pressionamento do Enter
    SendMessage(Form1.Edit1.Handle, WM_KEYDOWN, VK_RETURN, 0);
    SendMessage(Form1.Edit1.Handle, WM_KEYUP, VK_RETURN, 0);

    //LogFrente('Lançou produto: ' + sPesoAutonomo + '*' + Form1.sCodigoProdutoPesado); // Sandro Silva 2019-01-29
  end;
  
end;

procedure TForm1.Timer3Timer(Sender: TObject);
// Controla quando existe o arquivo \windows\peso.txt
var
  sMsgRecebida: String;
  hrHora: TDate;
  procedure RequisitaPeso(bPesar: Boolean; sId: String = '');
  begin

    with TStringList.Create do
    begin
      Text := '<Smallsoft><etapa>' + IntToStr(iEtapaPesagem) + '</etapa></Smallsoft>';
      SaveToFile(Form1.sAtual + '\balanca\input\pesar.temp'); // Sandro Silva 2019-02-28       SaveToFile('\balanca\input\pesar.temp');
      Free;
    end;
    ChDir(Form1.sAtual); // Sandro Silva 2019-03-06
    Sleep(50);
    RenameFile(PChar(Form1.sAtual + '\balanca\input\pesar.temp'), PChar(Form1.sAtual + '\balanca\input\pesar.xml')); // Sandro Silva 2019-02-28 RenameFile('\balanca\input\pesar.temp', '\balanca\input\pesar.xml');

  end;
begin
  if Form1.bBalancaAutonoma then
  begin
    if LerParametroIni('BALANCA.INI', 'Balanca', 'Marca', '') = '' then // Sandro Silva 2019-02-20
    begin
      Timer3.Enabled := False;
      Sleep(1000);
      // Não há configuração para balança. Abre pesado e aguarda a configuração
      ShellExecuteAndWait('open', 'pesado.exe', 'C', '', SW_SHOWNORMAL, True);

      Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
      FecharAplicacao('pesado.exe');
      FecharAplicacao(ExtractFileName(Application.ExeName));
    end
    else
    begin
      // Executa o pesado.exe
      if ConsultaProcesso('pesado.exe') = False then
      begin

        ShellExecute(0, 'open', 'pesado.exe', 'A', '', SW_HIDE);

        Sleep(1000);

        iEtapaPesagem := 0;// Sandro Silva 2019-01-30
      end;

      // Por segurança verifica se não estiver em execução inicia nova execução do pesado.exe
      if ConsultaProcesso('pesado.exe') = False then
      begin

        ShellExecute(0, 'open', 'pesado.exe', 'A', '', SW_HIDE);
        Sleep(3000);
        iEtapaPesagem := 0;// Sandro Silva 2019-01-30
      end;

    end;
    Form1.Panel1000.BringToFront; // Sandro Silva 2019-01-28

    if LerParametroIni('BALANCA.INI', 'Balanca', 'Marca', '') = '' then // Balança não está configurada
      Exit;

    if ConsultaProcesso('pesado.exe') then
    begin
      // Se o pesado.exe estiver em execução inicia o ciclo de captura do peso

      hrHora := Now;

      Timer3.Enabled := False; // Para poder acessar F10 Menu ou fechar a aplicação
                                           //30
      while SecondsBetween(Now, hrHora) <= 1 do // Aguarda até que o arquivo com o peso exista ou 30 segundos // Sandro Silva 2019-01-30 while SecondsBetween(Now, hrHora) <= 5 do // Aguarda até que o arquivo com o peso exista ou 5 segundos
      begin

        case iEtapaPesagem of
          PESO_REQUISITA_PESO: // Requisita peso
          begin

            //ShowMessage('Teste 01 49425');

            RequisitaPeso(True);//, Form1.sIdPesagem); // Requisita o peso para a balança

            //LogFrente('Requisitou peso  etapa: ' + IntToStr(iEtapaPesagem)); // + Form1.sIdPesagem); // Sandro Silva 2019-01-29

            if FileExists(PChar(Form1.sAtual + '\balanca\output\peso.xml')) then // Sandro Silva 2019-02-28 if FileExists('\balanca\output\peso.xml') then
            begin

              RenameFile(PChar(Form1.sAtual + '\balanca\output\peso.xml'), PChar(Form1.sAtual + '\balanca\output\peso.res')); // Renomeia o arquivo com o peso para processar // Sandro Silva 2019-02-28 RenameFile('\balanca\output\peso.xml', '\balanca\output\peso.res');

              //LogFrente('Recebeu retorno etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

              Sleep(50);

              if FileExists(PChar(Form1.sAtual + '\balanca\output\peso.res')) then // Sandro Silva 2019-02-28 if FileExists('\balanca\output\peso.res') then
              begin

                with TStringList.Create do // Lê o arquivo do peso
                begin
                  LoadFromFile(Form1.sAtual + '\balanca\output\peso.res'); // Sandro Silva 2019-02-28 LoadFromFile('\balanca\output\peso.res');
                  sMsgRecebida  := Text;
                  sPesoAutonomo := xmlNodeValue(Text, '//peso');
                  Free;
                end;

                //LogFrente('Peso recebido: ' + sPesoAutonomo + ' etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

                DeleteFile(PChar(Form1.sAtual + '\balanca\output\peso.res')); // Sandro Silva 2019-02-28 DeleteFile('\balanca\output\peso.res');

                if StrToFloatDef(sPesoAutonomo, 0) <= 0 then // Se recebeu o peso zerado, ou negativo quando tem tara, é porque a balança está livre para pesar
                begin

                  //ShowMessage('Teste 01 49255'); // Sandro Silva 2019-01-24
                  //LogFrente('Orientando para pesar etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

                  DestroiMesas(True);
                  Form1.lbOrientacaoPesagem.Caption := 'Coloque o prato na balança...';
                  Form1.lbOrientacaoPesagem.Repaint;

                  RequisitaPeso(True);//, Form1.sIdPesagem); // Requisita o peso para a balança

                  Application.ProcessMessages; // Sandro Silva 2019-01-29


                  //LogFrente('Coloque o prato na balança etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

                  iEtapaPesagem := PESO_RECEBIDO_PROCESSA; // Sandro Silva 2019-01-30

                end; // if xmlNodeValue(sMsgRecebida, '//id') = Form1.sIdPesagem then

              end; // if FileExists('\balanca\output\peso.res') then

              //LogFrente('Break no while etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29
              Break;
            end
            else
              Sleep(10);
          end;

          PESO_RECEBIDO_PROCESSA: // Processa peso recebido
          begin
            if FileExists(PChar(Form1.sAtual + '\balanca\output\peso.xml')) then // Sandro Silva 2019-02-28 if FileExists('\balanca\output\peso.xml') then
            begin

              RenameFile(PChar(Form1.sAtual + '\balanca\output\peso.xml'), PChar(Form1.sAtual + '\balanca\output\peso.res')); // Renomeia o arquivo com o peso para processar // Sandro Silva 2019-02-28  RenameFile('\balanca\output\peso.xml', '\balanca\output\peso.res');

              //LogFrente('Recebeu retorno etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

              Sleep(50);

              if FileExists(PChar(Form1.sAtual + '\balanca\output\peso.res')) then // Sandro Silva 2019-02-28 if FileExists('\balanca\output\peso.res') then
              begin

                with TStringList.Create do // Lê o arquivo do peso
                begin
                  LoadFromFile(Form1.sAtual + '\balanca\output\peso.res'); // Sandro Silva 2019-02-28 LoadFromFile('\balanca\output\peso.res');
                  sMsgRecebida  := Text;
                  sPesoAutonomo := xmlNodeValue(Text, '//peso');
                  Free;
                end;

                //LogFrente('Peso recebido: ' + sPesoAutonomo); // Sandro Silva 2019-01-29

                DeleteFile(PChar(Form1.sAtual + '\balanca\output\peso.res')); // Sandro Silva 2019-02-28 DeleteFile('\balanca\output\peso.res');

                if StrToFloatDef(sPesoAutonomo, 0) > 0 then // Se recebeu o peso maior que zero faz lançamento na mesa e imprime a comanda
                begin

                  RequisitaPeso(True);//, Form1.sIdPesagem); // Requisita o peso para a balança // Sandro Silva 2019-01-30

                  //LogFrente('Iniciando lançamento peso etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

                  PesagemAutonoma;  // Realiza o processamento do peso recebido

                  //LogFrente('Peso lançado etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

                end;

              end; // if FileExists('\balanca\output\peso.res') then

              //LogFrente('Break no while etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29
              Break;
            end
            else
              Sleep(10);
          end;

          PESO_PROCESSAMENTO_FIM: //
          begin

            iEtapaPesagem := PESO_REQUISITA_PESO;
            RequisitaPeso(True); //, Form1.sIdPesagem); // Requisita o peso para a balança // Sandro Silva 2019-01-30
            //LogFrente('FIM pesagem etapa: ' + IntToStr(iEtapaPesagem)); // Sandro Silva 2019-01-29

          end;

        end; // case iEtapaPesagem of

      end; // while SecondsBetween(Now, hrHora) <= 30 do

      //LogFrente('Timer ativado'); // Sandro Silva 2019-01-29
      //Timer3Timer(Sender); // Sandro Silva 2019-01-24
      Timer3.Enabled := True;

    end; // if ConsultaProcesso('pesado.exe') then

  end;

end;

procedure TForm1.ImprimePesagemAutonoma(sCupom: String);
// Faz a impressão da comanda com os dados da pesagem
var
  IBQTEMP: TIBQuery;
  Imp: TSmallPrint;
  Code128C: TAsBarcode;
  iMargemEsquerda: Integer;
begin

  //LogFrente('Iniciando impressão'); // Sandro Silva 2019-01-29

  IBQTEMP := CriaIBQuery(Form1.ibDataSet27.Transaction);

  Code128C        := TAsBarcode.Create(Application);

  Imp := TSmallPrint.Create(Application);

  try

    IBQTEMP.Close;
    IBQTEMP.SQL.Text :=
      'select * ' +
      'from ALTERACA ' +
      'where (TIPO = ''MESA'' or TIPO = ''DEKOL'') ' +
      ' and PEDIDO = ' + QuotedStr(sCupom) +
      ' and CODIGO =' + QuotedStr(Form1.sCodigoProdutoPesado); // Sandro Silva 2019-01-22  QuotedStr(LerParametroIni('FRENTE.INI', 'FRENTE DE CAIXA', 'Produto Balanca', '0'));
    IBQTEMP.Open;

    if (IBQTEMP.FieldByName('PEDIDO').AsString = sCupom) and (IBQTEMP.FieldByName('CODIGO').AsString <> '') then
    begin

      iMargemEsquerda := 50;

      Imp.LarguraPapel := '80';
      Imp.Titulo := 'Comanda: ' + Right(IBQTEMP.FieldByName('PEDIDO').AsString, 3);
      Imp.DestinoImpressao := toPrinter;
      Imp.Iniciar;
      Imp.Canvas.Font.Size := 10;
      Imp.PrinterTexto(10, iMargemEsquerda, Form1.ibDataSet13.FieldByName('NOME').AsString);
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, Form1.ibDataSet13.FieldByName('TELEFO').AsString);
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, DupeString('-', Imp.LarguraLinha div Imp.Canvas.TextWidth('-')));
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, IBQTEMP.FieldByName('DATA').AsString + ' ' + IBQTEMP.FieldByName('HORA').AsString);
      Imp.PrinterTexto(Imp.Linha, Imp.LarguraLinha, 'Comanda: ' + Right(IBQTEMP.FieldByName('PEDIDO').AsString, 3), poRight);
      Imp.NovaLinha;
      Imp.NovaLinha;

      Code128C.Typ    := bcCode128A;
      Code128C.Top    := Imp.Linha;
      Code128C.Width  := 380;//340; // Sandro Silva 2018-06-18   380;
      Code128C.Height := 80;
      Code128C.Modul  := 2;
      Code128C.Text   := '<F4>' + Right(IBQTEMP.FieldByName('PEDIDO').AsString, 3) + '<F4>';
      Code128C.Left   := ((Imp.LarguraLinha - Code128C.Width) div 2);
      Code128C.DrawBarcode(Imp.Canvas);

      Imp.Linha := Imp.Linha + Code128C.Height;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, IBQTEMP.FieldByName('DESCRICAO').AsString);
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, 'Peso KG: ');
      Imp.PrinterTexto(Imp.Linha, Imp.LarguraLinha, FormatFloat('0.000', IBQTEMP.FieldByName('QUANTIDADE').AsFloat), poRight);
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, 'Preço por KG: ');
      Imp.PrinterTexto(Imp.Linha, Imp.LarguraLinha, 'R$ ' + FormatFloat('0.00', IBQTEMP.FieldByName('UNITARIO').AsFloat), poRight);
      Imp.Canvas.Font.Size := 11;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, 'Valor a Pagar:');
      Imp.PrinterTexto(Imp.Linha, Imp.LarguraLinha, 'R$ ' + FormatFloat('0.00', IBQTEMP.FieldByName('TOTAL').AsFloat), poRight);
      Imp.NovaLinha;
      Imp.Canvas.Font.Size := 10;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, DupeString('-', Imp.LarguraLinha div Imp.Canvas.TextWidth('-')));

      // Linhas impressas para garçom fazer anotações diversas (bebidas consumidas, sobremesas)
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, DupeString('_', Imp.LarguraLinha div Imp.Canvas.TextWidth('_')));
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, DupeString('_', Imp.LarguraLinha div Imp.Canvas.TextWidth('_')));
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, DupeString('_', Imp.LarguraLinha div Imp.Canvas.TextWidth('_')));
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.Canvas.Font.Size := 9;
      Imp.PrinterTextoMemo(Imp.Linha, iMargemEsquerda, Imp.LarguraLinha - iMargemEsquerda, Form1.sMensagemPromocional, poJustify);
      Imp.Linha := Imp.Canvas.PenPos.Y;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.NovaLinha;
      Imp.Canvas.Font.Size := 7;
      if Form1.sModeloECF_Reserva = '99' then
        Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, Build)
      else
        Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, 'Zucchetti Brasil - ' + Form1.sTipoDocumento2 + ' ' + Build); // Sandro Silva 2022-12-02 Unochapeco Imp.PrinterTexto(Imp.Linha, iMargemEsquerda, 'Smallsoft Tecnologia - ' + Form1.sTipoDocumento2 + ' ' + Build);
      Imp.Finalizar;

      Form1.lbOrientacaoPesagem.Caption := 'Retire o prato e pegue sua comanda...';
      Form1.lbOrientacaoPesagem.Repaint;

      //LogFrente('Fim impressão'); // Sandro Silva 2019-01-29

      iEtapaPesagem := PESO_PROCESSAMENTO_FIM; // Sandro Silva 2019-01-30
    end;
  except

  end;
  FreeAndNil(Imp);
  Code128C.Free; // Sandro Silva 2019-01-28

  FreeAndNil(IBQTEMP);

  //LogFrente('Fim impressão'); // Sandro Silva 2019-01-29

  SendMessage(Form1.Edit1.Handle, WM_KEYDOWN, VK_ESCAPE, 0);
  SendMessage(Form1.Edit1.Handle, WM_KEYUP, VK_ESCAPE, 0);

end;

procedure TForm1.ValidaSeMesaJaTemItens(sAlteracaregistro: String;
  sMesaPesagem: String);
// Certifica para selecionar uma mesa que não contenha outros itens lançados
begin

  //LogFrente('Inicia validação se mesa tem outros itens'); // Sandro Silva 2019-01-29

  Commitatudo2(True);
  // Seleciona os itens lançados na mesa
  Form1.ibDataSet27.Close;
  Form1.ibDataSet27.SelectSQL.Text :=
    'select * ' +
    'from ALTERACA ' +
    'where (TIPO=''MESA'' or TIPO=''DEKOL'') ' +
    ' and PEDIDO = ' + QuotedStr(sMesaPesagem) +
    ' and REGISTRO <> ' + QuotedStr(sAlteracaregistro);
  Form1.ibDataSet27.Open;
  if Form1.ibDataSet27.FieldByName('REGISTRO').AsString <> '' then
  begin
    // Se tiver outro item lançado na mesa diferente do peso autonomo
    // localiza a próxima mesa livre e atribui ao campo pedido
    sMesaPesagem := StrZero(AchaMesaLivre, 5, 0);

    // Seleciona o registro do peso autonomo e troca o número da mesa
    Form1.ibDataSet27.Close;
    Form1.ibDataSet27.SelectSQL.Text :=
      'select * ' +
      'from ALTERACA ' +
      'where (TIPO=''MESA'' or TIPO=''DEKOL'') ' +
      ' and REGISTRO = ' + QuotedStr(sAlteracaregistro);
    Form1.ibDataSet27.Open;

    Form1.ibDataSet27.Edit;
    Form1.ibDataSet27.FieldByName('PEDIDO').AsString := sMesaPesagem;
    Form1.ibDataSet27.Post;
    Sleep(1000);

    // Em seguida faz novamente a validação usando o princípio da recursividade (o método pode executar ele mesmo)
    ValidaSeMesaJaTemItens(sAlteracaregistro, sMesaPesagem);
  end;

  //LogFrente('Fim validação se mesa tem outros itens'); // Sandro Silva 2019-01-29

end;

procedure TForm1.SalvaConfiguracaoMesaInicialPesagemAutonoma;
begin
  // Configura o número da mesa a partir da qual serão lançadas as pesagem sem operador da balança
  Timer3.Enabled := False;// Desabilita o timer que processa as pesagens Sandro Silva 2019-01-24
  Form1.iMesaInicialPesagem := StrToIntDef(LerParametroIni('Frente.ini', 'Frente de Caixa', 'Mesa Pesado', IntToStr(StrToIntDef(Form1.sMesas, 0) div 2)), StrToIntDef(Form1.sMesas, 0) div 2);// Sandro Silva 2019-01-28 Form1.iMesaInicialPesagem := StrToIntDef(LerParametroIni('Frente.ini', 'Frente de Caixa', 'Mesa Pesado', '1'), 0);
  Form1.iMesaInicialPesagem := StrToIntDef(Small_InputBox('Número mesa inicial', 'Informe a partir de qual mesa serão lançadas as pesagens da balança sem operador', IntToStr(Form1.iMesaInicialPesagem)), StrToIntDef(Form1.sMesas, 0) div 2);

  if StrToIntDef(LerParametroIni('Frente.ini', 'Frente de caixa','Mesas','0'), 0) <= 0 then // define 999 mesas quando não tem mesas configuradas e estiver configurando pesagem sem operador
  begin
    Form1.sMesas := '999';
    SalvarConfiguracao('Frente.ini', 'Frente de caixa','Mesas',Form1.sMesas);
  end;

  while (Form1.iMesaInicialPesagem >= StrToIntDef(Form1.sMesas, 0)) or (Form1.iMesaInicialPesagem <= 0) do
    Form1.iMesaInicialPesagem := StrToIntDef(Small_InputBox('Número mesa inicial', 'Informe a partir de qual mesa serão lançadas as pesagens da balança sem operador', IntToStr(Form1.iMesaInicialPesagem)), StrToIntDef(Form1.sMesas, 0) div 2);
  //
  SalvarConfiguracao('Frente.ini', 'Frente de Caixa', 'Mesa Pesado', IntToStr(Form1.iMesaInicialPesagem));
end;

procedure TForm1.SalvaConfiguracaoProdutoPesagemAutonoma;
begin
  // Configura o código do produto que será lançado nas pesagem da balança sem operador
  Timer3.Enabled := False;// Desabilita o timer que processa as pesagens Sandro Silva 2019-01-24
  Form1.sCodigoProdutoPesado := StrZero(StrToIntDef(LerParametroIni('Frente.ini', 'Frente de Caixa', 'Produto Balanca', '0'), 0), 5, 0);
  Form1.sCodigoProdutoPesado := StrZero(StrToIntDef(Small_InputBox('Produto pesado', 'Informe o código do produto que será lançado na pesagem da balança sem operador', Form1.sCodigoProdutoPesado), 0), 5, 0);

  if Form1.IBQuery1.Transaction.Active then // Sandro Silva 2019-02-20  Quando executa na primeira abertura o banco não está conectado. Alterar o momento que o banco é conectado desencadeará muitas outras mudanças que podem aferar rotinas críticas do PAF 
  begin
    Form1.IBQuery1.Close;
    Form1.IBQuery1.SQL.Text :=
      'select CODIGO, DESCRICAO ' +
      'from ESTOQUE ' +
      'order by CODIGO';
    Form1.IBQuery1.Open;
    Form1.IBQuery1.First;

    while (IBQuery1.Locate('CODIGO', StrZero(StrToIntDef(Form1.sCodigoProdutoPesado, 0), 5, 0), []) = False) do
    begin
      Form1.IBQuery1.First;
      Form1.sCodigoProdutoPesado := StrZero(StrToIntDef(Small_InputBox('Produto pesado', 'Informe o código do produto que será lançado na pesagem da balança sem operador', Form1.sCodigoProdutoPesado), 0), 5, 0);
    end;
  end;
  //
  SalvarConfiguracao('Frente.ini', 'Frente de Caixa', 'Produto Balanca', StrZero(StrToIntDef(Form1.sCodigoProdutoPesado, 0), 5, 0));
end;

procedure TForm1.BalanaAutonoma1Click(Sender: TObject);
begin
  //Habilita ou desabilita uso da balança sem operador
  Timer3.Enabled := False;// Desabilita o timer que processa as pesagens Sandro Silva 2019-01-24

  if (LerParametroIni('Frente.ini', 'Frente de Caixa', 'Balanca Autonoma', '') = '') then
  begin
    if LerParametroIni('BALANCA.INI', 'BALANCA','Marca', '') = '' then // Sandro Silva 2019-02-26  Só abre o pesado se não existir configuração da balança
      ShellExecuteAndWait('open', 'pesado.exe', 'C', '', SW_SHOWNORMAL, True);           // Executa pesado e aguarda a configuração da balança
  end;

  if (LerParametroIni('Frente.ini', 'Frente de Caixa', 'Balanca Autonoma', 'Não') = 'Não') then
  begin
    SalvarConfiguracao('Frente.ini', 'Frente de caixa', 'Balança', 'Sim'); // Ativa configuração para usar balança
    SalvarConfiguracao('Frente.ini', 'Frente de Caixa', 'Balanca Autonoma', 'Sim'); // Ativa a configuração para usar balança sem operador
    Form1.bBalancaAutonoma := True;// Sandro Silva 2019-01-28
    if LerParametroIni('Frente.ini', 'Frente de Caixa', 'Mesa Pesado', '') = '' then
    begin
      // Define valores padrões quando estiver configurando pela primeira vez
      SalvarConfiguracao('Frente.ini', 'Frente de caixa', 'Mesas', '999'); // Sandro Silva 2019-02-01  Form1.Quantas1Click(Sender); // Define a quantidade de mesas
      SalvarConfiguracao('Frente.ini', 'Frente de Caixa', 'Mesa Pesado', '500');// Sandro Silva 2019-02-01  SalvaConfiguracaoMesaInicialPesagemAutonoma; // Configura da mesa inicial que receberá a pesagem
    end
    else
    begin
      Form1.Quantas1Click(Sender); // Define a quantidade de mesas
      SalvaConfiguracaoMesaInicialPesagemAutonoma; // Configura da mesa inicial que receberá a pesagem
    end;
    SalvaConfiguracaoProdutoPesagemAutonoma; // Configura o produto que será lançado com o peso capturado
    GeraArquivoCriptografado('MESA'); // Altera o mode de operação para MESAS
    Exit; // Sai da procedure para não exibir 2x a mensagem que aplicação será fechada. GeraArquivoCriptografado() exibe a mensagem
  end
  else
    SalvarConfiguracao('Frente.ini', 'Frente de Caixa', 'Balanca Autonoma', 'Não');
  //
  Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
  FecharAplicacao('pesado.exe');
  FecharAplicacao(ExtractFileName(Application.ExeName));
  //
end;

procedure TForm1.Mesainicialparapesagensautonoma1Click(Sender: TObject);
begin
  SalvaConfiguracaoMesaInicialPesagemAutonoma; // Sandro Silva 2019-01-25
  Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
  FecharAplicacao('pesado.exe');
  FecharAplicacao(ExtractFileName(Application.ExeName));
end;

procedure TForm1.Produtolanadonapesagemautonoma1Click(Sender: TObject);
begin
  SalvaConfiguracaoProdutoPesagemAutonoma;
  Application.MessageBox(PChar('Configuração salva' + #13 + #13 + 'Essa aplicação será fechada' + #13 + #13 + 'Inicie novamente a aplicação com a configuração alterada'), 'Configurando Aplicação', MB_OK + MB_ICONINFORMATION);
  FecharAplicacao('pesado.exe');
  FecharAplicacao(ExtractFileName(Application.ExeName));
end;

procedure TForm1.HorriodeVero1Click(Sender: TObject);
begin
  if HorriodeVero1.Checked then
  begin
    Form1.sFuso := DefineFusoHorario('FRENTE.INI', 'NFCE', 'FUSO', Form1.ibDataSet13.FieldByName('ESTADO').AsString, '', False);
    GravarParametroIni('FRENTE.INI', 'NFCE', 'Horario de Verao', 'Não');
  end
  else
  begin
    Form1.sFuso := DefineFusoHorario('FRENTE.INI', 'NFCE', 'FUSO', Form1.ibDataSet13.FieldByName('ESTADO').AsString, '', True);
    GravarParametroIni('FRENTE.INI', 'NFCE', 'Horario de Verao', 'Sim');
  end;
  Form1.sFuso := LerParametroIni('FRENTE.INI', 'NFCE', 'FUSO', Form1.sFuso);
  Form1.bHorarioDeVerao := (LerParametroIni('FRENTE.INI', 'NFCE', 'Horario de Verao', 'Não') = 'Sim');
end;

procedure TForm1.AcertaPendenciaCancelAlteraca;
// Acerta o tipo do item que ficou pendente devido a dead lock
var
  IBTPENDENCIA: TIBTransaction;
  IBQPENDENCIA: TIBQuery;
  IBQSALVA: TIBQuery;
  sSql27Old: String;
  sSql4Old: String;
begin
  if Form1.bOffLine then
  begin
    IBTPENDENCIA := CriaIBTransaction(Form1.IBDatabase1);
    IBQPENDENCIA := CriaIBQuery(IBTPENDENCIA);
    IBQPENDENCIA.DisableControls;

    IBQSALVA := CriaIBQuery(Form1.ibDataSet27.Transaction); // Query na mesma transação do ibdataset27
    IBQSALVA.DisableControls;

    sSql27Old := Form1.ibDataSet27.Selectsql.Text;
    sSql4Old  := Form1.ibDataSet4.Selectsql.Text;

    /////////////
    // Sempre que o Small trava o registro na tabela ALTERACA, o frente não consegue atualizar o campo TIPO para CANCEL, ou CANLOK, ou KOLNAC
    // Nesses casos são gravados na tabela auxiliar PENDENCIA o item que deverá, num próximo commit, ser acertado para um dos tipos mencionados
    // Quando o item é salvo como KOLNAC, o Small processa ele para ajustar o estoque e mudar para cancelado. Acontece que o Small está trocando a descrição para "<CANCELADO>" (item cancelado durante a venda, diferente de cancelar todo o cupom) e deixando o tipo = "BALCAO"
    /////////////

    IBQPENDENCIA.Close;
    IBQPENDENCIA.SQL.Text :=
      'select CAIXA, PEDIDO, ITEM, TIPO ' +
      'from PENDENCIA ';
    IBQPENDENCIA.Open;

    while IBQPENDENCIA.Eof = False do
    begin

      try
        Commitatudo2(True);

        Form1.ibDataSet27.Close;
        Form1.ibDataSet27.SelectSQL.Text :=
          'select * ' +
          'from ALTERACA ' +
          'where PEDIDO = ' + QuotedStr(IBQPENDENCIA.FieldByName('PEDIDO').AsString) +
          ' and CAIXA = ' + QuotedStr(IBQPENDENCIA.FieldByName('CAIXA').AsString) +
          ' and coalesce(ITEM, '''') = ' + QuotedStr(IBQPENDENCIA.FieldByName('ITEM').AsString);
        Form1.ibDataSet27.Open;

        if Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO' then // Ainda não foi marcado como cancelado
        begin
          try
            Form1.ibDataSet27.Edit;
            if Form1.ibDataSet27.FieldByName('DESCRICAO').AsString = '<CANCELADO>' then  // Small não está processando corretamento o TIPO=KOLNAC: está trocando a descrição para cancelado, mas deixando tipo = BALCAO
              Form1.ibDataSet27.FieldByName('TIPO').AsString := 'CANCEL'
            else
              Form1.ibDataSet27.FieldByName('TIPO').AsString := IBQPENDENCIA.FieldByName('TIPO').AsString;
            Form1.ibDataSet27.Post;

            IBQSALVA.Close;
            IBQSALVA.SQL.Text :=
              'delete from PENDENCIA ' +
              'where PEDIDO = ' + QuotedStr(IBQPENDENCIA.FieldByName('PEDIDO').AsString) +
              ' and CAIXA = ' + QuotedStr(IBQPENDENCIA.FieldByName('CAIXA').AsString) +
              ' and coalesce(ITEM, '''') = ' + QuotedStr(IBQPENDENCIA.FieldByName('ITEM').AsString) +
              ' and TIPO = ' + QuotedStr(IBQPENDENCIA.FieldByName('TIPO').AsString);// +
            IBQSALVA.ExecSQL;

            {Sandro Silva 2022-11-04 inicio}
            try
              Audita('CANCELA','FRENTE', '', '#32908 Atualiza cancelamento pendente ' + IBQPENDENCIA.FieldByName('PEDIDO').AsString + ' CX ' + Form1.sCaixa + ' item ' + IBQPENDENCIA.FieldByName('ITEM').AsString + ' ' + IBQPENDENCIA.FieldByName('TIPO').AsString, 0, 0); // Ato, Modulo, Usuário, Histórico, Valor
            except

            end;
            {Sandro Silva 2022-11-04 fim}

            Commitatudo2(True);

          except

          end;

        end // if Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO' then // Ainda não foi marcado como cancelado
        else
        begin
          if Form1.ibDataSet27.FieldByName('TIPO').AsString = 'CANCEL' then
          begin
            // Pode excluir a pendência se na tabela ALTERADA já estiver cancelado ou marcado para cancelar
            try
              IBQSALVA.Close;
              IBQSALVA.SQL.Text :=
                'delete from PENDENCIA ' +
                'where PEDIDO = ' + QuotedStr(IBQPENDENCIA.FieldByName('PEDIDO').AsString) +
                ' and CAIXA = ' + QuotedStr(IBQPENDENCIA.FieldByName('CAIXA').AsString) +
                ' and coalesce(ITEM, '''') = ' + QuotedStr(IBQPENDENCIA.FieldByName('ITEM').AsString) +
                ' and TIPO = ' + QuotedStr(IBQPENDENCIA.FieldByName('TIPO').AsString);// +
              IBQSALVA.ExecSQL;


              {Sandro Silva 2022-11-04 inicio}
              try
                Audita('CANCELA','FRENTE', '', '#32940 Elimina cancelamento pendente ' + IBQPENDENCIA.FieldByName('PEDIDO').AsString + ' CX ' + Form1.sCaixa + ' item ' + IBQPENDENCIA.FieldByName('ITEM').AsString + ' ' + IBQPENDENCIA.FieldByName('TIPO').AsString, 0, 0); // Ato, Modulo, Usuário, Histórico, Valor
              except

              end;
              {Sandro Silva 2022-11-04 fim}

              Commitatudo2(True);

            except

            end;

          end;// if Form1.ibDataSet27.FieldByName('TIPO').AsString = IBQPENDENCIA.FieldByName('TIPO').AsString then //
        end; // if Form1.ibDataSet27.FieldByName('TIPO').AsString = 'BALCAO' then // Ainda não foi marcado como cancelado

      except

      end;

      IBQPENDENCIA.Next;

    end; // while IBQ.Eof = False do

    FreeAndNil(IBQPENDENCIA);
    FreeAndNil(IBTPENDENCIA);

    FreeAndNil(IBQSALVA);

    // Volta os SQL usado
    Form1.ibDataSet27.Selectsql.Text := sSql27Old;
    Form1.ibDataSet4.Selectsql.Text  := sSql4Old;

    Commitatudo2(True);

  end; // if Form1.bOffLine then

end;

procedure TForm1.ExibeAlertaContingenciaPendente;
const TextoContingencia = 'CONTINGÊNCIA PENDENTE'; // Sandro Silva 2021-09-08 const TextoContingencia = ' - CONTINGÊNCIA PENDENTE';
begin
  if Form1.ContingenciaPendente.bTransmissaoPendente then
  begin
    if Pos(TextoContingencia, Form1.sF) = 0 then
      Form1.sF := Form1.sF + ' ' + TextoContingencia + ' ' + Form1.ContingenciaPendente.sdtPendente
    else
      Form1.sF := Copy(Form1.sF, 1, Pos(TextoContingencia, Form1.sF) - 1) + TextoContingencia + ' ' + Form1.ContingenciaPendente.sdtPendente;
  end
  else
  begin
    if AnsiContainsText(Form1.sF, TextoContingencia) then
      Form1.sF := Copy(Form1.sF, 1, Pos(TextoContingencia, Form1.sF) - 1);
  end;
end;

procedure TForm1.InformaesdoresponsveltcnicoNFCe1Click(Sender: TObject);
begin
 //
  if InformaesdoresponsveltcnicoNFCe1.Checked = False then
    SalvarConfiguracao(FRENTE_INI, SECAO_65, 'Responsavel Tecnico', 'Sim')
  else
    SalvarConfiguracao(FRENTE_INI, SECAO_65, 'Responsavel Tecnico', 'Não');

  sinfRespTec := LerParametroIni(FRENTE_INI, SECAO_65, 'Responsavel Tecnico', 'Não');
  InformaesdoresponsveltcnicoNFCe1.Checked  := (sinfRespTec = 'Sim');
end;

procedure TForm1.VersoLeiauteSat0081Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, SECAO_59, _59_CHAVE_VERSAO_DADOS_ENTRADA, VDE_008); // Sandro Silva 2019-05-13  Leiaute disponível a partir de 01.01.19
  Form1.VersoLeiauteSat0071.Checked := False;
  Form1.VersoLeiauteSat0081.Checked := True;
end;

function TForm1.ImportarDaPesquisa(sTipo: String): String;
begin
  if FPesquisaParaImportar = nil then
    Application.CreateForm(TFPesquisaParaImportar, FPesquisaParaImportar);
  FPesquisaParaImportar.IdSelecionado := '';
  FPesquisaParaImportar.TipoPesquisa := sTipo;
  FPesquisaParaImportar.ShowModal;
  Result := FPesquisaParaImportar.IdSelecionado;
end;

procedure TForm1.ConsultaChaveNFCe1Click(Sender: TObject);
begin
  _ecf65_ConsultaChaveNFCe;
end;

procedure TForm1.EnviaremailcomXMLePDFacadavenda1Click(Sender: TObject);
begin // Ficha 4736 
  if EnviaremailcomXMLePDFacadavenda1.Checked then
    GravarParametroIni(FRENTE_INI, SECAO_65, 'Enviar email XML', 'Não')
  else
    GravarParametroIni(FRENTE_INI, SECAO_65, 'Enviar email XML', 'Sim');
  EnviaremailcomXMLePDFacadavenda1.Checked := LerParametroIni(FRENTE_INI, SECAO_65, 'Enviar email XML', 'Não') = 'Sim';
end;

procedure TForm1.Crdito1Click(Sender: TObject);
var
  Mais1ini: TIniFile;
  sDias: String;
begin
  sDias := Small_InputBox('Prazo de recebimento de cartão de crédito','Informe o prazo de recebimento:', IntToStr(iDiasCartaoCredito));
  Mais1ini    := TIniFile.Create(Form1.sAtual+'\smallcom.inf');
  Mais1Ini.WriteString('Cartoes','Dias Credito', sDias);
  iDiasCartaoCredito := StrToIntDef(sDias, 30);
  Mais1ini.Free;
end;

procedure TForm1.Dbito1Click(Sender: TObject);
var
  Mais1ini: TIniFile;
  sDias: String;
begin
  sDias := Small_InputBox('Prazo de recebimento de cartão de débito','Informe o prazo de recebimento:', IntToStr(iDiasCartaoDebito));
  Mais1ini    := TIniFile.Create(Form1.sAtual+'\smallcom.inf');
  Mais1Ini.WriteString('Cartoes','Dias Debito', sDias);
  iDiasCartaoDebito := StrToIntDef(sDias, 30);
  Mais1ini.Free;
end;

function TForm1.SenhaAdministradorOk: Boolean;
// Retorno True quando a senha informada é de administrador
begin
  //Ficha 4791
  Result := True;
  if (sLiberacao = '2') or (sLiberacao = '3') then // Configuração que obriga informar senha administrador
  begin
    Small_InputBox('Senha','Informe a senha do administrador:','');
    Result := (Form12.Caption = 'Liberado');
  end;
end;

procedure TForm1.IdentificaodoPAFNFCe1Click(Sender: TObject);
var
  Requisito: TRequisitosPafNfce;
begin
  Requisito := TRequisitosPafNfce.Create;
  Requisito.IBTransaction := Form1.IBTransaction2;
  Requisito.VersaoER      := tPafNfceEr0200;// Sandro Silva 2023-02-13 Requisito.VersaoER      := tPafNfceEr0100;
  MessageDlg(Requisito.IdentificacaoDaEmpresaDesenvolvedora, mtInformation, [mbOk], 0);
  FreeAndNil(Requisito);
end;

procedure TForm1.MesasAbertasPAFNFCeClick(Sender: TObject);
begin
  MesasAbertas1Click(MesasAbertas1);
end;

procedure TForm1.VendasIdentificadaspeloCPFCNPJPAFNFCeClick(
  Sender: TObject);
var
  Requisitos: TRequisitosPafNfce;
begin
//  VendasIdentificadaspeloCPFCNPJ1Click(VendasIdentificadaspeloCPFCNPJ1);
  try
    Form7.bVendaCPF := True;
    Form7.Caption := 'Vendas Identificadas pelo CPF/CNPJ';// Sandro Silva 2016-08-19
    Form7.ShowModal;
    if Form7.ModalResult = mrOK then
    begin

      Commitatudo(True); // Form1.VendasIdentificadaspeloCPFCNPJPAFNFCeClick(

      Requisitos := TRequisitosPafNfce.Create;
      Requisitos.IBTransaction := IBTransaction2;
      Requisitos.VersaoER      := tPafNfceEr0100;
      //Requisitos.spdNFCe       := Form1.spdNFCe1; // Sandro Silva 2023-02-13
      Requisitos.VendasIdentificadaspeloCPFCNPJ(Form7.DateTimePicker3.Date, Form7.edCPFCNPJ.Text);
      FreeAndNil(Requisitos);

    end;
  except

  end;
  Form7.bVendaCPF := False;  
  CHDir(Form1.sAtual);

end;

procedure TForm1.ESTOQUETOTALPAFNFCeClick(Sender: TObject);
var
  Requisitos: TRequisitosPafNfce;
begin
// Sandro Silva 2023-02-13 RegistrosDoPAFNFCe;

  Commitatudo2(True); // Estoquetotal1Click // 2015-11-18
  CommitaTudo(True);// Estoquetotal1Click 2015-09-12

  try
    //
    Form7.sMfd  := '9';
    Form7.Label1.Caption          := 'Informe o período para o relatório Registros do ' +
                                     'PAF-NFC-e e clique em <Avançar> para continuar.';
    Form7.DateTimePicker1.Top     := Form7.Label3.BoundsRect.Bottom + 3;
    Form7.DateTimePicker2.Top     := Form7.Label5.BoundsRect.Bottom + 3;

    Form7.DateTimePicker1.Visible := True;
    Form7.DateTimePicker2.Visible := True;
    Form7.MaskEdit1.Visible       := False;
    Form7.MaskEdit2.Visible       := False;
    Form7.CheckBox1.Visible       := False;
    Form7.Label3.Caption          := 'Data inicial:';
    Form7.Label5.Caption          := 'Data final:';
    //

    Form7.Caption := 'Registros do PAF-NFC-e - ' + MSG_ALERTA_MENU_FISCAL_INACESSIVEL;
    Form7.ShowModal;

    if Form7.ModalResult = mrOK then
    begin

//      Commitatudo(True); // Form1.VendasIdentificadaspeloCPFCNPJPAFNFCeClick(

      Form1.Repaint;
      //
      Form1.Display('Aguarde...', 'Aguarde... Gerando arquivo Registros do PAF-NFC-e');

      Form1.ExibePanelMensagem('Aguarde... Gerando arquivo Registros do PAF-NFC-e');

      Requisitos := TRequisitosPafNfce.Create;
      Requisitos.IBTransaction := IBTransaction2;
      Requisitos.VersaoER      := tPafNfceEr0200;//Requisitos.VersaoER      := tPafNfceEr0100;
      Requisitos.spdNFCe       := Form1.spdNFCe1; // Sandro Silva 2023-02-13
      Requisitos.RequisitosDoPafNFCe(Form1.sAtualOnLine);
      FreeAndNil(Requisitos);

    end;

  except

  end;
  CHDir(Form1.sAtual);   

  Form1.OcultaPanelMensagem;

end;

procedure TForm1.IBDataSet150BeforePost(DataSet: TDataSet);
begin
  AssinaRegistro('NFCE',DataSet, True); // Sandro Silva 2020-12-14 
end;

procedure TForm1.IBDataSet150BeforeDelete(DataSet: TDataSet);
begin
 try
    Form1.ibDataSet99.Close;
    Form1.ibDataSet99.SelectSql.Clear;
    Form1.ibDataset99.SelectSql.Add('select gen_id(G_HASH_NFCE,-1) from rdb$database');
    Form1.ibDataset99.Open;
    HasHs('NFCE', True);

    //ShowMessage('Teste 01 18914'); // Sandro Silva 2017-11-06

  except end;
end;

procedure TForm1.ESTOQUEPARCIALPAFNFCeClick(Sender: TObject);
begin
  EstoqueParcial;// RegistrosDoPafEstoqueparcial; // Sandro Silva 2023-02-14 Estoqueparcial1Click(Estoqueparcial1);
end;

procedure TForm1.ppMenuFiscalPAFNFCePopup(Sender: TObject);
begin
  PopupMenu1Popup(PopupMenu1);
  MesasAbertasPAFNFCe.Caption := sMesasOuContas+' abertas...';
  {Sandro Silva 2023-02-14 inicio
  SadasIdentificadaspeloCPFCNPJ1.Visible        := (LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString) = LimpaNumero(CNPJ_SOFTWARE_HOUSE_PAF));
  VendasIdentificadaspeloCPFCNPJPAFNFCe.Visible := (SadasIdentificadaspeloCPFCNPJ1.Visible = False);
  }
end;

procedure TForm1.InformarindIntermedNFCe1Click(Sender: TObject);
begin                                      
  if InformarindIntermedNFCe1.Checked then
  begin
    _ecf65_HabilitarGerarindIntermed(False);
    InformarindIntermedNFCe1.Checked := False
  end
  else
  begin
    _ecf65_HabilitarGerarindIntermed(True);
    InformarindIntermedNFCe1.Checked := True;
  end;
end;

procedure TForm1.ValorLimiteTotalNFCeEstabelecidoSefaz1Click(
  Sender: TObject);
begin
  Form1.sValorLimiteSemIdentificarConsumidor := Small_InputBox('Valor Total Limite da NFC-e Sem Identificar Consumidor', 'Informe o valor Total máximo permitido para NFC-e Sem identificar o consumidor.', Form1.sValorLimiteSemIdentificarConsumidor);
  Form1.sValorLimiteSemIdentificarConsumidor := FormatFloat('0.00', StrToFloatDef(StringReplace(Form1.sValorLimiteSemIdentificarConsumidor, '.', '', [rfReplaceAll]), 0.00));
  SalvarConfiguracao(FRENTE_INI, SECAO_65, 'LIMITE SEM IDENTIFICAR', Form1.sValorLimiteSemIdentificarConsumidor);
end;

procedure TForm1.OcultaGerenciadorVendas;
begin
  Form1.Image1.Visible  := True;
  // Sandro Silva 2021-07-29 Form1.Label13.Visible := True;

  Form1.dbGrid1.Visible         := False;
  Form1.DateTimePicker1.Visible := False;

  Form1.pnlMenuFiscalPAFNFCeInacessivel.Visible := False; // Sandro Silva 2020-12-16

  Form1.Panel6.Visible := False;
  Form1.Panel7.Visible := False; // Sandro Silva 2017-12-13
  Form1.Panel8.Visible := False; // Sandro Silva 2017-12-13
end;

procedure TForm1.FormaExtraLancaReceber(sIndiceFormaExtra: String;
  sCaixa: String; sCupom: String; dValor: Double; dtEmissao: TDate;
  dtVencimento: TDate);
// Sandro Silva 2021-07-27
// Lança no contas a receber o valor informado na forma extra se tiver sido configurado essa regra para a forma extra
var
  sSecaoFrente: String;
begin
  try
    sSecaoFrente := Form1.SecaoFrente;
    if (LerParametroIni(FRENTE_INI, sSecaoFrente, 'Forma extra ' + sIndiceFormaExtra + ' Contas Receber', 'Não') = 'Sim') then
    begin
      Form1.ibDataSet7.Append;
      Form1.ibDataSet7.FieldByName('PORTADOR').AsString     := LerParametroIni(FRENTE_INI, sSecaoFrente,'Forma extra ' + sIndiceFormaExtra, 'Forma Extra ' + sIndiceFormaExtra);
      Form1.ibDataSet7.FieldByName('DOCUMENTO').AsString    := sCaixa + sCupom + sIndiceFormaExtra;
      Form1.ibDataSet7.FieldByName('VALOR_DUPL').AsFloat    := StrToFloat(Format('%8.2f',[dValor]));
      Form1.ibDataSet7.FieldByName('VENCIMENTO').AsDateTime := dtVencimento;
      Form1.ibDataSet7.FieldByName('EMISSAO').AsDateTime    := dtEmissao;
      Form1.ibDataSet7.FieldByName('VALOR_RECE').AsFloat    := 0;
      Form1.ibDataSet7.FieldByName('VALOR_JURO').AsFloat    := 0;
      Form1.ibDataSet7.FieldByName('NOME').AsString         := Form1.ibDataSet7.FieldByName('PORTADOR').AsString;
      Form1.ibDataSet7.FieldByName('HISTORICO').Value       := 'Venda Caixa: ' + sCaixa + ' Cupom: ' + sCupom;
      Form1.ibDataSet7.FieldByName('CONTA').AsString        := Form1.ibDataSet14.FieldByname('CONTA').AsString;
      Form1.ibDataSet7.Post;
    end;

  except
  end;
end;

procedure TForm1.GerarxPagparaMeioPagamento99Outros1Click(Sender: TObject);
begin
  // NT2020_006 v1_20 campo YA02a xPag previsto para entrar em vigor em 01/09/2021, para ambiente em produção
  if GerarxPagparaMeioPagamento99Outros1.Checked then
    GravarParametroIni(FRENTE_INI, SECAO_65, 'xPag', 'Não')
  else
    GravarParametroIni(FRENTE_INI, SECAO_65, 'xPag', 'Sim');
  GerarxPagparaMeioPagamento99Outros1.Checked := LerParametroIni(FRENTE_INI, SECAO_65, 'xPag', 'Não') = 'Sim';

end;

procedure TForm1.DriverMFE010515ousuperior1Click(Sender: TObject);
begin
  // Sandro Silva 2021-08-23
  if DriverMFE010515ousuperior1.Checked then
  begin
    _ecf59_HabilitaUsarDriverMFE_1_05(False);
    DriverMFE010515ousuperior1.Checked := False
  end
  else
  begin
    _ecf59_HabilitaUsarDriverMFE_1_05(True);
    DriverMFE010515ousuperior1.Checked := True;
  end;
end;

procedure TForm1.FechaVendaRapidaFormaPagamentoCartao;
begin
  // Fecha a venda como forma de pagamento Cartão
//  ActiveControl := Edit1;

  Form1.bFechaRapidoCartao := True; // Sandro Silva 2021-09-08
  if Button18.Enabled then
  begin
    bF12 := True;
    bFechandoCupom := True; // Sandro Silva 2016-02-10 Controlar que pressione F7 durante o fechamento do cupom e cancela a venda na impressora
    Button18Click(Button18);
  end;

end;

procedure TForm1.RecuperarXMLdaNFCe1Click(Sender: TObject);
begin
  _ecf65_RecuparaXML(Form1.IBDataSet150.FieldByName('NUMERONF').AsString, Form1.IBDataSet150.FieldByName('CAIXA').AsString);
end;

procedure TForm1.PesquisaNFCeemcontingnciaClick(Sender: TObject);
const DIAS_CONSULTAR = 30;
var
  dtDataOld: TDate;
  IBTPESQUISA: TIBTransaction;
  IBQPESQUISA: TIBQuery;
  sCondicaoSelectSql: String;
begin
  // Rotina seleciona todas as datas que possuem pendência de transmissão de contingência ou cancelamento por substituição 

  dtDataOld := DateTimePicker1.Date;

  IBTPESQUISA := CriaIBTransaction(Form1.IBQuery65.Transaction.DefaultDatabase);
  IBQPESQUISA := CriaIBQuery(IBTPESQUISA);


  // Essa condição não irá listar as NFC-e autorizada, mas listará as autorizadas que possuem NFEIDSUBSTITUTO, porque faltam ser canceladas por substituição
  sCondicaoSelectSql :=
    'where MODELO = ''65'' ' +
    ' and DATA >= ' + QuotedStr(FormatDateTime('yyyy-mm-dd', dtDataOld - DIAS_CONSULTAR)) +
    ' and coalesce(STATUS, '''') not containing ''deneg'' ' +
    ' and ((coalesce(STATUS, '''') containing ''contingência'' or (coalesce(NFEXML, '''') containing ''<tpEmis>9</tpEmis>'' and coalesce(STATUS, '''') not containing ''autorizad'')) ' +
           'or (coalesce(NFEIDSUBSTITUTO, '''') <> '''' and coalesce(STATUS, '''') not containing ''cancela'')) ' +
    ' order by NFEIDSUBSTITUTO, DATA, NUMERONF, CAIXA '; // Ordenar para que as NFC-E com ID de substituição fiquem por último

  Form1.IBDataSet150.Close;
  Form1.IBDataSet150.SelectSQL.Text :=
    'select * ' +
    'from NFCE ' +    
    sCondicaoSelectSql;
  Form1.IBDataSet150.Open;

  if Form1.IBDataSet150.FieldByName('DATA').AsString <> '' then
  begin
    //DateTimePicker1.Date := Form1.IBDataSet150.FieldByName('DATA').AsDateTime;

    if Application.MessageBox('Deseja transmitir todas notas em contingência listadas?', 'Atenção', MB_YESNO + MB_ICONQUESTION) = id_yes then
    begin

      Form1.Display('Aguarde! Transmitindo a contingência', 'Aguarde! Transmitindo a contingência');

      // Lista as datas em que há contingência para transmitir
      // Realiza a transmissão de cada dia
      IBQPESQUISA.Close;
      IBQPESQUISA.SQL.Text :=
        'select distinct DATA, CAIXA ' +
        'from NFCE ' +
        sCondicaoSelectSql;
      IBQPESQUISA.Open;

      while IBQPESQUISA.Eof = False do
      begin
        // Transmite a contigência para cada dias identificado
        
        Form1.Display('Aguarde! Transmitindo a contingência de ' + IBQPESQUISA.FieldByName('DATA').AsString, 'Aguarde! Transmitindo a contingência de ' + IBQPESQUISA.FieldByName('DATA').AsString);

        //Passa a data para o componente de data usado para pesquisa
        DateTimePicker1.Date := IBQPESQUISA.FieldByName('DATA').AsDateTime;
        DateTimePicker1Change(DateTimePicker1); // executa select que lista as notas do dia

        TransmiteContingenciaAutomatico(DateTimePicker1.Date, Form1.sCaixa); // transmite as notas em contingência do dia

        IBQPESQUISA.Next;
      end; // while IBQ.Eof = False do
      Form1.GerenciadordeNFCe1Click(Form1.GerenciadordeNFCe1);

    end;

  end;   

end;

procedure TForm1.PopupMenu6Popup(Sender: TObject);
begin
  PesquisaNFCeemcontingncia.Visible := Form1.sModeloECF = '65';
  N36.Visible := PesquisaNFCeemcontingncia.Visible;
end;

procedure TForm1.TransmiteContingenciaAutomatico(data: TDate; Caixa: String);
begin

  _ecf65_EnviarNFCeContingencia(Data, '', '');

  // Alerta contingência não transmitida
  _ecf65_VerificaContingenciaPendentedeTransmissao(Data - Form1.ContingenciaPendente.LimiteDias, Data, Form1.sCaixa); // Sandro Silva 2019-08-09
  Form1.ExibeAlertaContingenciaPendente; // Sandro Silva 2019-08-14
  Form1.Display(Form1.sStatusECF, Form1.sF);

end;

procedure TForm1.SmartPOSElginPay1Click(Sender: TObject);
begin
  PosElginPay.Desativa;
  if Form1.SmartPOSElginPay1.Checked = False then
  begin

    //PosElginPay.Configuracao.Ativo          := Small_InputBox('Pos ElginPay', 'Ativo: Sim ou Não', PosElginPay.Configuracao.Ativo);
    PosElginPay.Configuracao.Ativo := 'Sim';

    //if PosElginPay.Configuracao.Ativo = 'Sim' then
    //begin
      PosElginPay.Configuracao.DLL            := Small_InputBox('Pos ElginPay', 'DLL Comunicação', PosElginPay.Configuracao.DLL);
      PosElginPay.Configuracao.IP             := Small_InputBox('Pos ElginPay', 'IP do Pos', PosElginPay.Configuracao.IP);
      PosElginPay.Configuracao.PortaTransacao := StrToIntDef(Small_InputBox('Pos ElginPay', 'Porta para transação', IntToStr(PosElginPay.Configuracao.PortaTransacao)), 3000);
      PosElginPay.Configuracao.PortaStatus    := StrToIntDef(Small_InputBox('Pos ElginPay', 'Porta de Status', IntToStr(PosElginPay.Configuracao.PortaStatus)), 3001);
    //end;
  end
  else
  begin
    PosElginPay.Configuracao.Ativo          := 'Não';
  end;

  PosElginPay.Configuracao.SalvaConfiguracao;

  // Sandro Silva 2022-05-10 PosElginPay.Desativa;

  if PosElginPay.Configuracao.Ativo = 'Sim' then
    PosElginPay.Ativa(Form1.ibDataSet13.FieldByName('CGC').AsString, AnsiUpperCase(Form1.ibDataSet13.FieldByName('ESTADO').AsString), Form1.sModeloECF_Reserva{, Form1.sTef = 'Sim'}); // Sandro Silva 2022-02-11

  Form1.SmartPOSElginPay1.Checked := (PosElginPay.Configuracao.Ativo = 'Sim');

end;

procedure TForm1.FunesAdministrativasPosElginPay1Click(Sender: TObject);
begin
  Form1.Display('Funções Administrativas do POS','Funções Administrativas do POS');
  PosElginPay.FuncoesAdministrativas(Form1.sCaixa);
  SmallMessageBox(PosElginPay.Transacao.MensagemOperador, PosElginPay.Configuracao.NomePOS, MB_OK + MB_ICONINFORMATION);
  Form1.Display(Form1.sStatusECF,Form1.sF);
end;

procedure TForm1.EtiquetaBalancaPesoKG1Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Tipo etiqueta', 'KG');
  LeConfiguracaoTipoEtiquetaBalanca;
end;

procedure TForm1.EtiquetaBalancaPrecoR1Click(Sender: TObject);
begin
  SalvarConfiguracao(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Tipo etiqueta', 'R$');
  LeConfiguracaoTipoEtiquetaBalanca;
end;

procedure TForm1.LeConfiguracaoTipoEtiquetaBalanca;
begin
  Form1.sTipoEtiqueta := LerParametroIni(FRENTE_INI, SECAO_FRENTE_CAIXA, 'Tipo etiqueta', 'KG');

  if sTipoEtiqueta = 'R$' then
  begin
    EtiquetaBalancaPrecoR1.Checked := True;
    EtiquetaBalancaPesoKG1.Checked := False;
  end
  else
  begin
    EtiquetaBalancaPesoKG1.Checked := True;
    EtiquetaBalancaPrecoR1.Checked := False;
  end;

end;

procedure TForm1.GeraraoFISCOREDUOZ1Click(Sender: TObject);
var
  bOk: Boolean;
begin
  //Form1.Display('Aguarde... REQUISITO LVIII - Enviando os XML','Aguarde... REQUISITO LVIII - Enviando os XML das Reduções');
  //Screen.Cursor := crHourGlass;
  Commitatudo(True); //Antes EnvioaoFISCOREDUOZClick()

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.GerarAoFISCOREDUCAOZBlocox(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual));

    Commitatudo2(True); // EnvioaoFISCOESTOQUEClick 2017-03-22
    CommitaTudo(True);// EnvioaoFISCOESTOQUEClick 2017-03-22
  end;

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;

end;

procedure TForm1.SadasIdentificadaspeloCPFCNPJ1Click(Sender: TObject);
var
  Requisitos: TRequisitosPafNfce;
begin

  try
    Form7.bVendaCPF := True;
    Form7.Caption := 'Saídas Identificadas pelo CPF/CNPJ';// Sandro Silva 2016-08-19
    Form7.ShowModal;
    if Form7.ModalResult = mrOK then
    begin

      Commitatudo(True); // TForm1.SadasIdentificadaspeloCPFCNPJ1Click(
      Requisitos := TRequisitosPafNfce.Create;
      Requisitos.IBTransaction := IBTransaction2;
      Requisitos.VersaoER      := tPafNfceEr0200;
      Requisitos.spdNFCe       := Form1.spdNFCe1; // Sandro Silva 2023-02-13      
      Requisitos.VendasIdentificadaspeloCPFCNPJ(Form7.DateTimePicker3.Date, Form7.edCPFCNPJ.Text);
      FreeAndNil(Requisitos);

    end;
  except

  end;
  Form7.bVendaCPF := False;
  CHDir(Form1.sAtual);

end;

procedure TForm1.ESTOQUEANOANTERIOR1Click(Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LIX - "ESTOQUE ANO ANTERIOR"','Aguarde... REQUISITO LIX -  "ESTOQUE ANO ANTERIOR"');
  Screen.Cursor := crHourGlass;

  Commitatudo(True);

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.GerarEstoqueAnoAnterior(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual));
  end;

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;

  CHDir(Form1.sAtual);
end;

procedure TForm1.ESTOQUEMUDANADETRIBUTAO1Click(Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LIX - "ESTOQUE MUDANÇA DE TRIBUTAÇÃO"','Aguarde... REQUISITO LIX -  "ESTOQUE MUDANÇA DE TRIBUTAÇÃO"');
  Screen.Cursor := crHourGlass;

  Commitatudo(True);

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.GerarEstoqueMudancaDeTributacao(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual));
  end;

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;

  CHDir(Form1.sAtual);
end;

procedure TForm1.ESTOQUESUSPENSOOUBAIXADEIE1Click(Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LIX - "ESTOQUE SUSPENSÃO OU BAIXA DE I.E."','Aguarde... REQUISITO LIX -  "ESTOQUE SUSPENSÃO OU BAIXA DE I.E."');
  Screen.Cursor := crHourGlass;

  Commitatudo(True);

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.GerarEstoqueSuspensaoOuBaixaDeIE(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual));
  end;

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;

  CHDir(Form1.sAtual);

end;

procedure TForm1.ESTOQUEMUDANADEREGIME1Click(Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LIX - "ESTOQUE MUDANÇA DE REGIME"','Aguarde... REQUISITO LIX -  "ESTOQUE MUDANÇA DE REGIME"');
  Screen.Cursor := crHourGlass;

  Commitatudo(True);

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.GerarEstoqueMudancaDeRegime(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual));
  end;

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;

  CHDir(Form1.sAtual);

end;

procedure TForm1.ESTOQUEATUAL1Click(Sender: TObject);
var
  bOk: Boolean;
begin
  Form1.Display('Aguarde... REQUISITO LIX - "ESTOQUE ATUAL"','Aguarde... REQUISITO LIX -  "ESTOQUE ATUAL"');
  Screen.Cursor := crHourGlass;

  Commitatudo(True);

  bOk := True;
  if _BlocoX.ValidaCertificadoDigital(LimpaNumero(Form1.ibDataSet13.FieldByName('CGC').AsString)) = False then // Sandro Silva 2018-10-18 if _BlocoX.ValidaCertificadoDigital(Form1.IBDatabase1.DatabaseName, Form1.sAtual) = False then
  begin
    Application.ProcessMessages;
    Application.BringToFront;

    bOk := False;
  end;

  if bOk then
  begin
    _BlocoX.GerarEstoqueAtual(PAnsiChar(IBDatabase1.DatabaseName), PAnsiChar(Form1.sAtual));
  end;

  Form1.Display(Form1.sStatusECF,Form1.sF);
  Screen.Cursor := crDefault;

  CHDir(Form1.sAtual);

end;

procedure TForm1.ConfiguraCredencialTecnospeed;
//var
//  CredencialTecnospeed: TCredenciaisTecnospeed;
begin
  //Form1.spdNFCe1.ConfigurarSoftwareHouse('07426598000124', '9830b685216a9c4613bc76c84098272d');// Sandro Silva 2018-05-30
  Form1.spdNFCe1.ConfigurarSoftwareHouse('03916076000664', '5236f0fc4fb818efe845ebff0d0457af');// Sandro Silva 2023-02-27

  {
  try
    CredencialTecnospeed := TCredenciaisTecnospeed.Create;
    CredencialTecnospeed.PrivateKey := Form1.sPasta;
    CredencialTecnospeed.LeCredencial(Form1.sAtual);

    if CredencialTecnospeed.CNJP <> '' then
      Form1.spdNFCe1.ConfigurarSoftwareHouse(CredencialTecnospeed.CNJP, CredencialTecnospeed.Token);

    FreeAndNil(CredencialTecnospeed);
  except
  end;
  }
  //
end;

procedure TForm1.VincularAssinaturaAC(bForcarObterNovaAssinaturaAC: Boolean = False);
var
  sResposta: String;
  sAssinaturaAssociadaAtual: String;
begin
  sAssinaturaAssociadaAtual := _59.AssinaturaAssociada;
  if bForcarObterNovaAssinaturaAC then
    sAssinaturaAssociadaAtual := '';
  if sAssinaturaAssociadaAtual = '' then
  begin
    Form1.ExibePanelMensagem('Aguarde! Vinculando Assinatura');
    sResposta := Form1.GetAssinaturaHttpPost(StrTran(Form22.sSerie, 'Número de série: ', ''), _59.Emitente.CNPJ, _59.Fabricante, _59.NumeroSerieSAT);

    if (Trim(xmlNodeValue(sResposta, '//assinaturaassociada')) <> '') then
      _ecf59_GravaAssinaturaAssociada(Trim(xmlNodeValue(sResposta, '//assinaturaassociada')));

    //    '<?xml version="1.0" encoding="UTF-8"?><smallsoft><sat><assinaturaassociada>SGR-SAT SISTEMA DE GESTAO E RETAGUARDA DO SAT</assinaturaassociada><cnpjsh>16716114000172</cnpjsh><cnpjsmallsoft>07426598000124</cnpjsmallsoft></sat></smallsoft> '
    if (Trim(xmlNodeValue(sResposta, '//cnpjsmallsoft')) <> '') then
    begin
      if CifrarTexto(Trim(xmlNodeValue(sResposta, '//cnpjsmallsoft'))) <> '' then
      begin
        SalvarConfiguracao(Form1.sArquivo, 'R01','14', CifrarTexto(Trim(xmlNodeValue(sResposta, '//cnpjsmallsoft')))); // Atualiza o arquivoauxiliarcriptografadopafecfsmallsoft.ini
        if _ecf59_ValidaKitDesenvolvimento = False then  // Quando não for kit de desenvolvimento atualiza no Frente.ini o CNPJ da software house
          GravarParametroIni(FRENTE_INI, SECAO_59, _59_CHAVE_CNPJ_SOFTWARE_HOUSE, Trim(xmlNodeValue(sResposta, '//cnpjsh')));
      end;
    end;

    Form1.OcultaPanelMensagem; // Sandro Silva 2018-08-31
  end;

  if _59.AssinaturaAssociada <> '' then
    _ecf59_AssociarAssinatura(_59.CodigoAtivacao, _59.Emitente.CNPJ, _59.AssinaturaAssociada)
  else
    SmallMsgBox(PAnsiChar('Nenhuma Assinatura encontrada' + #13 + #13 +
                          'Verifique sua conexão com a Internet' + #13 + 'e tente vincular novamente' + #13 +
                          'Persistindo o erro acesse www.smallsoft.com.br, Suporte e escolha Autorização de uso SAT ou MF-e' + #13 +
                          'Você receberá por e-mail um arquivo com a assinatura. Salve esse arquivo na pasta Windows'), 'Atenção', MB_OK + MB_ICONWARNING);

end;

procedure TForm1.EstoqueParcial;
var
  sCodigo : String;
  sDescri : String;
  bAchou: Boolean;
begin
  CommitaTudo(True);// Estoqueparcial1Click 2015-09-12
  //
  Form1.sSuperCodigo := '';
  sCodigo := 'XXX';
  //
  while sCodigo <> '' do
  begin
    //
    sCodigo := '';
    sCodigo := Form1.Small_InputBox('Estoque parcial','Itens escolhidos: '+chr(10)+sDescri+chr(10)+chr(10)+'Digite o Código ou <Enter> em branco para finalizar:','');
    //
    if AllTrim(sCodigo)<>'' then
    begin
      //
      if LimpaNumero(Trim(sCodigo)) <> Trim(sCodigo) then
      begin
        Form1.ibQuery1.Close;
        Form1.ibQuery1.SQL.Clear;
        Form1.ibQuery1.SQL.Add('select CODIGO, DESCRICAO, REFERENCIA from ESTOQUE where upper(DESCRICAO) like '+QuotedStr(UpperCase(sCodigo)+'%')+' ');
        Form1.ibQuery1.Open;
        //
        bAchou := Pos(AnsiUpperCase(sCodigo), AnsiUpperCase(Form1.ibQuery1.FieldByName('DESCRICAO').AsString)) > 0;
      end
      else
      begin
        if Length(Trim(sCodigo)) > 5 then // Procura pela referência
        begin
          Form1.ibQuery1.Close;
          Form1.ibQuery1.SQL.Clear;
          Form1.ibQuery1.SQL.Add('select CODIGO, DESCRICAO, REFERENCIA from ESTOQUE where REFERENCIA='+QuotedStr(LimpaNumero(sCodigo))+' ');
          Form1.ibQuery1.Open;
          //
          bAchou := Form1.ibQuery1.FieldByName('REFERENCIA').AsString = LimpaNumero(sCodigo);
        end
        else
        begin
          Form1.ibQuery1.Close;
          Form1.ibQuery1.SQL.Clear;
          Form1.ibQuery1.SQL.Add('select CODIGO, DESCRICAO from ESTOQUE where CODIGO='+QuotedStr(StrZero(StrToInt('0'+LimpaNumero(sCodigo)),5,0))+' ');
          Form1.ibQuery1.Open;
          bAchou := Form1.ibQuery1.FieldByName('CODIGO').AsString = StrZero(StrToInt('0'+LimpaNumero(sCodigo)),5,0);
        end;
      end;

      if bAchou then
      begin
        sCodigo := Form1.ibQuery1.FieldByName('CODIGO').AsString;
        Form1.sSuperCodigo := Form1.sSuperCodigo + '|' + StrZero(StrToInt('0'+LimpaNumero(sCodigo)),5,0);
        sDescri := sDescri + StrZero(StrToInt('0'+LimpaNumero(sCodigo)),5,0) + ' ' + Form1.ibQuery1.FieldByName('DESCRICAO').AsString + chr(10);
        // SmallMsg(Form1.ibQuery1.FieldByName('DESCRICAO').AsString);
      end else
      begin
        SmallMsg('Não cadastrado no estoque.');
      end;

      //
    end;
  end;
  //
  if Alltrim(Form1.sSuperCodigo) <> '' then
  begin
    if PAFNFCe then
      Form1.ESTOQUETOTALPAFNFCeClick(Form1.ESTOQUETOTALPAFNFCe) // Sandro Silva 2023-02-14 RegistrosDoPAFNFCe
    else
      RegistrosDoPafEcfEstoquetotal; // Form1.Estoquetotal1Click(Sender);
  end;
  //
  Form1.sSuperCodigo := '';
  Form1.ibQuery1.Close;  //
end;

end.
